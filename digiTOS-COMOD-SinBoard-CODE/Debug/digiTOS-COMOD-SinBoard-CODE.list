
digiTOS-COMOD-SinBoard-CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006afc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  08006bbc  08006bbc  00016bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007150  08007150  00017150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007158  08007158  00017158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800715c  0800715c  0001715c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002b0  20000000  08007160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004b4  200002b0  08007410  000202b0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000764  08007410  00020764  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b731  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000056bf  00000000  00000000  0004ba09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009e15  00000000  00000000  000510c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000fa0  00000000  00000000  0005aee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001588  00000000  00000000  0005be80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c20d  00000000  00000000  0005d408  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004f03  00000000  00000000  00069615  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006e518  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000031a0  00000000  00000000  0006e594  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002b0 	.word	0x200002b0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006ba4 	.word	0x08006ba4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002b4 	.word	0x200002b4
 8000104:	08006ba4 	.word	0x08006ba4

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_llsr>:
 8000234:	40d0      	lsrs	r0, r2
 8000236:	1c0b      	adds	r3, r1, #0
 8000238:	40d1      	lsrs	r1, r2
 800023a:	469c      	mov	ip, r3
 800023c:	3a20      	subs	r2, #32
 800023e:	40d3      	lsrs	r3, r2
 8000240:	4318      	orrs	r0, r3
 8000242:	4252      	negs	r2, r2
 8000244:	4663      	mov	r3, ip
 8000246:	4093      	lsls	r3, r2
 8000248:	4318      	orrs	r0, r3
 800024a:	4770      	bx	lr

0800024c <__aeabi_cfrcmple>:
 800024c:	4684      	mov	ip, r0
 800024e:	1c08      	adds	r0, r1, #0
 8000250:	4661      	mov	r1, ip
 8000252:	e7ff      	b.n	8000254 <__aeabi_cfcmpeq>

08000254 <__aeabi_cfcmpeq>:
 8000254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000256:	f000 fc6b 	bl	8000b30 <__lesf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	d401      	bmi.n	8000262 <__aeabi_cfcmpeq+0xe>
 800025e:	2100      	movs	r1, #0
 8000260:	42c8      	cmn	r0, r1
 8000262:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000264 <__aeabi_fcmpeq>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 fbfd 	bl	8000a64 <__eqsf2>
 800026a:	4240      	negs	r0, r0
 800026c:	3001      	adds	r0, #1
 800026e:	bd10      	pop	{r4, pc}

08000270 <__aeabi_fcmplt>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f000 fc5d 	bl	8000b30 <__lesf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	db01      	blt.n	800027e <__aeabi_fcmplt+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_fcmple>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f000 fc53 	bl	8000b30 <__lesf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dd01      	ble.n	8000292 <__aeabi_fcmple+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_fcmpgt>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f000 fc09 	bl	8000ab0 <__gesf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	dc01      	bgt.n	80002a6 <__aeabi_fcmpgt+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__aeabi_fcmpge>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	f000 fbff 	bl	8000ab0 <__gesf2>
 80002b2:	2800      	cmp	r0, #0
 80002b4:	da01      	bge.n	80002ba <__aeabi_fcmpge+0xe>
 80002b6:	2000      	movs	r0, #0
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	2001      	movs	r0, #1
 80002bc:	bd10      	pop	{r4, pc}
 80002be:	46c0      	nop			; (mov r8, r8)

080002c0 <__aeabi_uldivmod>:
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d111      	bne.n	80002e8 <__aeabi_uldivmod+0x28>
 80002c4:	2a00      	cmp	r2, #0
 80002c6:	d10f      	bne.n	80002e8 <__aeabi_uldivmod+0x28>
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d100      	bne.n	80002ce <__aeabi_uldivmod+0xe>
 80002cc:	2800      	cmp	r0, #0
 80002ce:	d002      	beq.n	80002d6 <__aeabi_uldivmod+0x16>
 80002d0:	2100      	movs	r1, #0
 80002d2:	43c9      	mvns	r1, r1
 80002d4:	1c08      	adds	r0, r1, #0
 80002d6:	b407      	push	{r0, r1, r2}
 80002d8:	4802      	ldr	r0, [pc, #8]	; (80002e4 <__aeabi_uldivmod+0x24>)
 80002da:	a102      	add	r1, pc, #8	; (adr r1, 80002e4 <__aeabi_uldivmod+0x24>)
 80002dc:	1840      	adds	r0, r0, r1
 80002de:	9002      	str	r0, [sp, #8]
 80002e0:	bd03      	pop	{r0, r1, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	ffffff4d 	.word	0xffffff4d
 80002e8:	b403      	push	{r0, r1}
 80002ea:	4668      	mov	r0, sp
 80002ec:	b501      	push	{r0, lr}
 80002ee:	9802      	ldr	r0, [sp, #8]
 80002f0:	f000 f81e 	bl	8000330 <__udivmoddi4>
 80002f4:	9b01      	ldr	r3, [sp, #4]
 80002f6:	469e      	mov	lr, r3
 80002f8:	b002      	add	sp, #8
 80002fa:	bc0c      	pop	{r2, r3}
 80002fc:	4770      	bx	lr
 80002fe:	46c0      	nop			; (mov r8, r8)

08000300 <__aeabi_f2uiz>:
 8000300:	219e      	movs	r1, #158	; 0x9e
 8000302:	b510      	push	{r4, lr}
 8000304:	05c9      	lsls	r1, r1, #23
 8000306:	1c04      	adds	r4, r0, #0
 8000308:	f7ff ffd0 	bl	80002ac <__aeabi_fcmpge>
 800030c:	2800      	cmp	r0, #0
 800030e:	d103      	bne.n	8000318 <__aeabi_f2uiz+0x18>
 8000310:	1c20      	adds	r0, r4, #0
 8000312:	f000 ff0b 	bl	800112c <__aeabi_f2iz>
 8000316:	bd10      	pop	{r4, pc}
 8000318:	219e      	movs	r1, #158	; 0x9e
 800031a:	1c20      	adds	r0, r4, #0
 800031c:	05c9      	lsls	r1, r1, #23
 800031e:	f000 fd69 	bl	8000df4 <__aeabi_fsub>
 8000322:	f000 ff03 	bl	800112c <__aeabi_f2iz>
 8000326:	2380      	movs	r3, #128	; 0x80
 8000328:	061b      	lsls	r3, r3, #24
 800032a:	469c      	mov	ip, r3
 800032c:	4460      	add	r0, ip
 800032e:	e7f2      	b.n	8000316 <__aeabi_f2uiz+0x16>

08000330 <__udivmoddi4>:
 8000330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000332:	4657      	mov	r7, sl
 8000334:	464e      	mov	r6, r9
 8000336:	4645      	mov	r5, r8
 8000338:	46de      	mov	lr, fp
 800033a:	b5e0      	push	{r5, r6, r7, lr}
 800033c:	0004      	movs	r4, r0
 800033e:	b083      	sub	sp, #12
 8000340:	000d      	movs	r5, r1
 8000342:	4692      	mov	sl, r2
 8000344:	4699      	mov	r9, r3
 8000346:	428b      	cmp	r3, r1
 8000348:	d82f      	bhi.n	80003aa <__udivmoddi4+0x7a>
 800034a:	d02c      	beq.n	80003a6 <__udivmoddi4+0x76>
 800034c:	4649      	mov	r1, r9
 800034e:	4650      	mov	r0, sl
 8000350:	f000 ffc0 	bl	80012d4 <__clzdi2>
 8000354:	0029      	movs	r1, r5
 8000356:	0006      	movs	r6, r0
 8000358:	0020      	movs	r0, r4
 800035a:	f000 ffbb 	bl	80012d4 <__clzdi2>
 800035e:	1a33      	subs	r3, r6, r0
 8000360:	4698      	mov	r8, r3
 8000362:	3b20      	subs	r3, #32
 8000364:	469b      	mov	fp, r3
 8000366:	d500      	bpl.n	800036a <__udivmoddi4+0x3a>
 8000368:	e074      	b.n	8000454 <__udivmoddi4+0x124>
 800036a:	4653      	mov	r3, sl
 800036c:	465a      	mov	r2, fp
 800036e:	4093      	lsls	r3, r2
 8000370:	001f      	movs	r7, r3
 8000372:	4653      	mov	r3, sl
 8000374:	4642      	mov	r2, r8
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d829      	bhi.n	80003d2 <__udivmoddi4+0xa2>
 800037e:	d026      	beq.n	80003ce <__udivmoddi4+0x9e>
 8000380:	465b      	mov	r3, fp
 8000382:	1ba4      	subs	r4, r4, r6
 8000384:	41bd      	sbcs	r5, r7
 8000386:	2b00      	cmp	r3, #0
 8000388:	da00      	bge.n	800038c <__udivmoddi4+0x5c>
 800038a:	e079      	b.n	8000480 <__udivmoddi4+0x150>
 800038c:	2200      	movs	r2, #0
 800038e:	2300      	movs	r3, #0
 8000390:	9200      	str	r2, [sp, #0]
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	2301      	movs	r3, #1
 8000396:	465a      	mov	r2, fp
 8000398:	4093      	lsls	r3, r2
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	2301      	movs	r3, #1
 800039e:	4642      	mov	r2, r8
 80003a0:	4093      	lsls	r3, r2
 80003a2:	9300      	str	r3, [sp, #0]
 80003a4:	e019      	b.n	80003da <__udivmoddi4+0xaa>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	d9d0      	bls.n	800034c <__udivmoddi4+0x1c>
 80003aa:	2200      	movs	r2, #0
 80003ac:	2300      	movs	r3, #0
 80003ae:	9200      	str	r2, [sp, #0]
 80003b0:	9301      	str	r3, [sp, #4]
 80003b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <__udivmoddi4+0x8c>
 80003b8:	601c      	str	r4, [r3, #0]
 80003ba:	605d      	str	r5, [r3, #4]
 80003bc:	9800      	ldr	r0, [sp, #0]
 80003be:	9901      	ldr	r1, [sp, #4]
 80003c0:	b003      	add	sp, #12
 80003c2:	bc3c      	pop	{r2, r3, r4, r5}
 80003c4:	4690      	mov	r8, r2
 80003c6:	4699      	mov	r9, r3
 80003c8:	46a2      	mov	sl, r4
 80003ca:	46ab      	mov	fp, r5
 80003cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ce:	42a3      	cmp	r3, r4
 80003d0:	d9d6      	bls.n	8000380 <__udivmoddi4+0x50>
 80003d2:	2200      	movs	r2, #0
 80003d4:	2300      	movs	r3, #0
 80003d6:	9200      	str	r2, [sp, #0]
 80003d8:	9301      	str	r3, [sp, #4]
 80003da:	4643      	mov	r3, r8
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0e8      	beq.n	80003b2 <__udivmoddi4+0x82>
 80003e0:	07fb      	lsls	r3, r7, #31
 80003e2:	0872      	lsrs	r2, r6, #1
 80003e4:	431a      	orrs	r2, r3
 80003e6:	4646      	mov	r6, r8
 80003e8:	087b      	lsrs	r3, r7, #1
 80003ea:	e00e      	b.n	800040a <__udivmoddi4+0xda>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	d101      	bne.n	80003f4 <__udivmoddi4+0xc4>
 80003f0:	42a2      	cmp	r2, r4
 80003f2:	d80c      	bhi.n	800040e <__udivmoddi4+0xde>
 80003f4:	1aa4      	subs	r4, r4, r2
 80003f6:	419d      	sbcs	r5, r3
 80003f8:	2001      	movs	r0, #1
 80003fa:	1924      	adds	r4, r4, r4
 80003fc:	416d      	adcs	r5, r5
 80003fe:	2100      	movs	r1, #0
 8000400:	3e01      	subs	r6, #1
 8000402:	1824      	adds	r4, r4, r0
 8000404:	414d      	adcs	r5, r1
 8000406:	2e00      	cmp	r6, #0
 8000408:	d006      	beq.n	8000418 <__udivmoddi4+0xe8>
 800040a:	42ab      	cmp	r3, r5
 800040c:	d9ee      	bls.n	80003ec <__udivmoddi4+0xbc>
 800040e:	3e01      	subs	r6, #1
 8000410:	1924      	adds	r4, r4, r4
 8000412:	416d      	adcs	r5, r5
 8000414:	2e00      	cmp	r6, #0
 8000416:	d1f8      	bne.n	800040a <__udivmoddi4+0xda>
 8000418:	465b      	mov	r3, fp
 800041a:	9800      	ldr	r0, [sp, #0]
 800041c:	9901      	ldr	r1, [sp, #4]
 800041e:	1900      	adds	r0, r0, r4
 8000420:	4169      	adcs	r1, r5
 8000422:	2b00      	cmp	r3, #0
 8000424:	db22      	blt.n	800046c <__udivmoddi4+0x13c>
 8000426:	002b      	movs	r3, r5
 8000428:	465a      	mov	r2, fp
 800042a:	40d3      	lsrs	r3, r2
 800042c:	002a      	movs	r2, r5
 800042e:	4644      	mov	r4, r8
 8000430:	40e2      	lsrs	r2, r4
 8000432:	001c      	movs	r4, r3
 8000434:	465b      	mov	r3, fp
 8000436:	0015      	movs	r5, r2
 8000438:	2b00      	cmp	r3, #0
 800043a:	db2c      	blt.n	8000496 <__udivmoddi4+0x166>
 800043c:	0026      	movs	r6, r4
 800043e:	409e      	lsls	r6, r3
 8000440:	0033      	movs	r3, r6
 8000442:	0026      	movs	r6, r4
 8000444:	4647      	mov	r7, r8
 8000446:	40be      	lsls	r6, r7
 8000448:	0032      	movs	r2, r6
 800044a:	1a80      	subs	r0, r0, r2
 800044c:	4199      	sbcs	r1, r3
 800044e:	9000      	str	r0, [sp, #0]
 8000450:	9101      	str	r1, [sp, #4]
 8000452:	e7ae      	b.n	80003b2 <__udivmoddi4+0x82>
 8000454:	4642      	mov	r2, r8
 8000456:	2320      	movs	r3, #32
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	4652      	mov	r2, sl
 800045c:	40da      	lsrs	r2, r3
 800045e:	4641      	mov	r1, r8
 8000460:	0013      	movs	r3, r2
 8000462:	464a      	mov	r2, r9
 8000464:	408a      	lsls	r2, r1
 8000466:	0017      	movs	r7, r2
 8000468:	431f      	orrs	r7, r3
 800046a:	e782      	b.n	8000372 <__udivmoddi4+0x42>
 800046c:	4642      	mov	r2, r8
 800046e:	2320      	movs	r3, #32
 8000470:	1a9b      	subs	r3, r3, r2
 8000472:	002a      	movs	r2, r5
 8000474:	4646      	mov	r6, r8
 8000476:	409a      	lsls	r2, r3
 8000478:	0023      	movs	r3, r4
 800047a:	40f3      	lsrs	r3, r6
 800047c:	4313      	orrs	r3, r2
 800047e:	e7d5      	b.n	800042c <__udivmoddi4+0xfc>
 8000480:	4642      	mov	r2, r8
 8000482:	2320      	movs	r3, #32
 8000484:	2100      	movs	r1, #0
 8000486:	1a9b      	subs	r3, r3, r2
 8000488:	2200      	movs	r2, #0
 800048a:	9100      	str	r1, [sp, #0]
 800048c:	9201      	str	r2, [sp, #4]
 800048e:	2201      	movs	r2, #1
 8000490:	40da      	lsrs	r2, r3
 8000492:	9201      	str	r2, [sp, #4]
 8000494:	e782      	b.n	800039c <__udivmoddi4+0x6c>
 8000496:	4642      	mov	r2, r8
 8000498:	2320      	movs	r3, #32
 800049a:	0026      	movs	r6, r4
 800049c:	1a9b      	subs	r3, r3, r2
 800049e:	40de      	lsrs	r6, r3
 80004a0:	002f      	movs	r7, r5
 80004a2:	46b4      	mov	ip, r6
 80004a4:	4097      	lsls	r7, r2
 80004a6:	4666      	mov	r6, ip
 80004a8:	003b      	movs	r3, r7
 80004aa:	4333      	orrs	r3, r6
 80004ac:	e7c9      	b.n	8000442 <__udivmoddi4+0x112>
 80004ae:	46c0      	nop			; (mov r8, r8)

080004b0 <__aeabi_fadd>:
 80004b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b2:	46c6      	mov	lr, r8
 80004b4:	024e      	lsls	r6, r1, #9
 80004b6:	0247      	lsls	r7, r0, #9
 80004b8:	0a76      	lsrs	r6, r6, #9
 80004ba:	0a7b      	lsrs	r3, r7, #9
 80004bc:	0044      	lsls	r4, r0, #1
 80004be:	0fc5      	lsrs	r5, r0, #31
 80004c0:	00f7      	lsls	r7, r6, #3
 80004c2:	0048      	lsls	r0, r1, #1
 80004c4:	4698      	mov	r8, r3
 80004c6:	b500      	push	{lr}
 80004c8:	0e24      	lsrs	r4, r4, #24
 80004ca:	002a      	movs	r2, r5
 80004cc:	00db      	lsls	r3, r3, #3
 80004ce:	0e00      	lsrs	r0, r0, #24
 80004d0:	0fc9      	lsrs	r1, r1, #31
 80004d2:	46bc      	mov	ip, r7
 80004d4:	428d      	cmp	r5, r1
 80004d6:	d067      	beq.n	80005a8 <__aeabi_fadd+0xf8>
 80004d8:	1a22      	subs	r2, r4, r0
 80004da:	2a00      	cmp	r2, #0
 80004dc:	dc00      	bgt.n	80004e0 <__aeabi_fadd+0x30>
 80004de:	e0a5      	b.n	800062c <__aeabi_fadd+0x17c>
 80004e0:	2800      	cmp	r0, #0
 80004e2:	d13a      	bne.n	800055a <__aeabi_fadd+0xaa>
 80004e4:	2f00      	cmp	r7, #0
 80004e6:	d100      	bne.n	80004ea <__aeabi_fadd+0x3a>
 80004e8:	e093      	b.n	8000612 <__aeabi_fadd+0x162>
 80004ea:	1e51      	subs	r1, r2, #1
 80004ec:	2900      	cmp	r1, #0
 80004ee:	d000      	beq.n	80004f2 <__aeabi_fadd+0x42>
 80004f0:	e0bc      	b.n	800066c <__aeabi_fadd+0x1bc>
 80004f2:	2401      	movs	r4, #1
 80004f4:	1bdb      	subs	r3, r3, r7
 80004f6:	015a      	lsls	r2, r3, #5
 80004f8:	d546      	bpl.n	8000588 <__aeabi_fadd+0xd8>
 80004fa:	019b      	lsls	r3, r3, #6
 80004fc:	099e      	lsrs	r6, r3, #6
 80004fe:	0030      	movs	r0, r6
 8000500:	f000 feca 	bl	8001298 <__clzsi2>
 8000504:	3805      	subs	r0, #5
 8000506:	4086      	lsls	r6, r0
 8000508:	4284      	cmp	r4, r0
 800050a:	dd00      	ble.n	800050e <__aeabi_fadd+0x5e>
 800050c:	e09d      	b.n	800064a <__aeabi_fadd+0x19a>
 800050e:	1b04      	subs	r4, r0, r4
 8000510:	0032      	movs	r2, r6
 8000512:	2020      	movs	r0, #32
 8000514:	3401      	adds	r4, #1
 8000516:	40e2      	lsrs	r2, r4
 8000518:	1b04      	subs	r4, r0, r4
 800051a:	40a6      	lsls	r6, r4
 800051c:	0033      	movs	r3, r6
 800051e:	1e5e      	subs	r6, r3, #1
 8000520:	41b3      	sbcs	r3, r6
 8000522:	2400      	movs	r4, #0
 8000524:	4313      	orrs	r3, r2
 8000526:	075a      	lsls	r2, r3, #29
 8000528:	d004      	beq.n	8000534 <__aeabi_fadd+0x84>
 800052a:	220f      	movs	r2, #15
 800052c:	401a      	ands	r2, r3
 800052e:	2a04      	cmp	r2, #4
 8000530:	d000      	beq.n	8000534 <__aeabi_fadd+0x84>
 8000532:	3304      	adds	r3, #4
 8000534:	015a      	lsls	r2, r3, #5
 8000536:	d529      	bpl.n	800058c <__aeabi_fadd+0xdc>
 8000538:	3401      	adds	r4, #1
 800053a:	2cff      	cmp	r4, #255	; 0xff
 800053c:	d100      	bne.n	8000540 <__aeabi_fadd+0x90>
 800053e:	e081      	b.n	8000644 <__aeabi_fadd+0x194>
 8000540:	002a      	movs	r2, r5
 8000542:	019b      	lsls	r3, r3, #6
 8000544:	0a5b      	lsrs	r3, r3, #9
 8000546:	b2e4      	uxtb	r4, r4
 8000548:	025b      	lsls	r3, r3, #9
 800054a:	05e4      	lsls	r4, r4, #23
 800054c:	0a58      	lsrs	r0, r3, #9
 800054e:	07d2      	lsls	r2, r2, #31
 8000550:	4320      	orrs	r0, r4
 8000552:	4310      	orrs	r0, r2
 8000554:	bc04      	pop	{r2}
 8000556:	4690      	mov	r8, r2
 8000558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055a:	2cff      	cmp	r4, #255	; 0xff
 800055c:	d0e3      	beq.n	8000526 <__aeabi_fadd+0x76>
 800055e:	2180      	movs	r1, #128	; 0x80
 8000560:	0038      	movs	r0, r7
 8000562:	04c9      	lsls	r1, r1, #19
 8000564:	4308      	orrs	r0, r1
 8000566:	4684      	mov	ip, r0
 8000568:	2a1b      	cmp	r2, #27
 800056a:	dd00      	ble.n	800056e <__aeabi_fadd+0xbe>
 800056c:	e082      	b.n	8000674 <__aeabi_fadd+0x1c4>
 800056e:	2020      	movs	r0, #32
 8000570:	4661      	mov	r1, ip
 8000572:	40d1      	lsrs	r1, r2
 8000574:	1a82      	subs	r2, r0, r2
 8000576:	4660      	mov	r0, ip
 8000578:	4090      	lsls	r0, r2
 800057a:	0002      	movs	r2, r0
 800057c:	1e50      	subs	r0, r2, #1
 800057e:	4182      	sbcs	r2, r0
 8000580:	430a      	orrs	r2, r1
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	015a      	lsls	r2, r3, #5
 8000586:	d4b8      	bmi.n	80004fa <__aeabi_fadd+0x4a>
 8000588:	075a      	lsls	r2, r3, #29
 800058a:	d1ce      	bne.n	800052a <__aeabi_fadd+0x7a>
 800058c:	08de      	lsrs	r6, r3, #3
 800058e:	002a      	movs	r2, r5
 8000590:	2cff      	cmp	r4, #255	; 0xff
 8000592:	d13a      	bne.n	800060a <__aeabi_fadd+0x15a>
 8000594:	2e00      	cmp	r6, #0
 8000596:	d100      	bne.n	800059a <__aeabi_fadd+0xea>
 8000598:	e0ae      	b.n	80006f8 <__aeabi_fadd+0x248>
 800059a:	2380      	movs	r3, #128	; 0x80
 800059c:	03db      	lsls	r3, r3, #15
 800059e:	4333      	orrs	r3, r6
 80005a0:	025b      	lsls	r3, r3, #9
 80005a2:	0a5b      	lsrs	r3, r3, #9
 80005a4:	24ff      	movs	r4, #255	; 0xff
 80005a6:	e7cf      	b.n	8000548 <__aeabi_fadd+0x98>
 80005a8:	1a21      	subs	r1, r4, r0
 80005aa:	2900      	cmp	r1, #0
 80005ac:	dd52      	ble.n	8000654 <__aeabi_fadd+0x1a4>
 80005ae:	2800      	cmp	r0, #0
 80005b0:	d031      	beq.n	8000616 <__aeabi_fadd+0x166>
 80005b2:	2cff      	cmp	r4, #255	; 0xff
 80005b4:	d0b7      	beq.n	8000526 <__aeabi_fadd+0x76>
 80005b6:	2080      	movs	r0, #128	; 0x80
 80005b8:	003e      	movs	r6, r7
 80005ba:	04c0      	lsls	r0, r0, #19
 80005bc:	4306      	orrs	r6, r0
 80005be:	46b4      	mov	ip, r6
 80005c0:	291b      	cmp	r1, #27
 80005c2:	dd00      	ble.n	80005c6 <__aeabi_fadd+0x116>
 80005c4:	e0aa      	b.n	800071c <__aeabi_fadd+0x26c>
 80005c6:	2620      	movs	r6, #32
 80005c8:	4660      	mov	r0, ip
 80005ca:	40c8      	lsrs	r0, r1
 80005cc:	1a71      	subs	r1, r6, r1
 80005ce:	4666      	mov	r6, ip
 80005d0:	408e      	lsls	r6, r1
 80005d2:	0031      	movs	r1, r6
 80005d4:	1e4e      	subs	r6, r1, #1
 80005d6:	41b1      	sbcs	r1, r6
 80005d8:	4301      	orrs	r1, r0
 80005da:	185b      	adds	r3, r3, r1
 80005dc:	0159      	lsls	r1, r3, #5
 80005de:	d5d3      	bpl.n	8000588 <__aeabi_fadd+0xd8>
 80005e0:	3401      	adds	r4, #1
 80005e2:	2cff      	cmp	r4, #255	; 0xff
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fadd+0x138>
 80005e6:	e087      	b.n	80006f8 <__aeabi_fadd+0x248>
 80005e8:	2201      	movs	r2, #1
 80005ea:	4978      	ldr	r1, [pc, #480]	; (80007cc <__aeabi_fadd+0x31c>)
 80005ec:	401a      	ands	r2, r3
 80005ee:	085b      	lsrs	r3, r3, #1
 80005f0:	400b      	ands	r3, r1
 80005f2:	4313      	orrs	r3, r2
 80005f4:	e797      	b.n	8000526 <__aeabi_fadd+0x76>
 80005f6:	2c00      	cmp	r4, #0
 80005f8:	d000      	beq.n	80005fc <__aeabi_fadd+0x14c>
 80005fa:	e0a7      	b.n	800074c <__aeabi_fadd+0x29c>
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d000      	beq.n	8000602 <__aeabi_fadd+0x152>
 8000600:	e0b6      	b.n	8000770 <__aeabi_fadd+0x2c0>
 8000602:	1e3b      	subs	r3, r7, #0
 8000604:	d162      	bne.n	80006cc <__aeabi_fadd+0x21c>
 8000606:	2600      	movs	r6, #0
 8000608:	2200      	movs	r2, #0
 800060a:	0273      	lsls	r3, r6, #9
 800060c:	0a5b      	lsrs	r3, r3, #9
 800060e:	b2e4      	uxtb	r4, r4
 8000610:	e79a      	b.n	8000548 <__aeabi_fadd+0x98>
 8000612:	0014      	movs	r4, r2
 8000614:	e787      	b.n	8000526 <__aeabi_fadd+0x76>
 8000616:	2f00      	cmp	r7, #0
 8000618:	d04d      	beq.n	80006b6 <__aeabi_fadd+0x206>
 800061a:	1e48      	subs	r0, r1, #1
 800061c:	2800      	cmp	r0, #0
 800061e:	d157      	bne.n	80006d0 <__aeabi_fadd+0x220>
 8000620:	4463      	add	r3, ip
 8000622:	2401      	movs	r4, #1
 8000624:	015a      	lsls	r2, r3, #5
 8000626:	d5af      	bpl.n	8000588 <__aeabi_fadd+0xd8>
 8000628:	2402      	movs	r4, #2
 800062a:	e7dd      	b.n	80005e8 <__aeabi_fadd+0x138>
 800062c:	2a00      	cmp	r2, #0
 800062e:	d124      	bne.n	800067a <__aeabi_fadd+0x1ca>
 8000630:	1c62      	adds	r2, r4, #1
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	2a01      	cmp	r2, #1
 8000636:	ddde      	ble.n	80005f6 <__aeabi_fadd+0x146>
 8000638:	1bde      	subs	r6, r3, r7
 800063a:	0172      	lsls	r2, r6, #5
 800063c:	d535      	bpl.n	80006aa <__aeabi_fadd+0x1fa>
 800063e:	1afe      	subs	r6, r7, r3
 8000640:	000d      	movs	r5, r1
 8000642:	e75c      	b.n	80004fe <__aeabi_fadd+0x4e>
 8000644:	002a      	movs	r2, r5
 8000646:	2300      	movs	r3, #0
 8000648:	e77e      	b.n	8000548 <__aeabi_fadd+0x98>
 800064a:	0033      	movs	r3, r6
 800064c:	4a60      	ldr	r2, [pc, #384]	; (80007d0 <__aeabi_fadd+0x320>)
 800064e:	1a24      	subs	r4, r4, r0
 8000650:	4013      	ands	r3, r2
 8000652:	e768      	b.n	8000526 <__aeabi_fadd+0x76>
 8000654:	2900      	cmp	r1, #0
 8000656:	d163      	bne.n	8000720 <__aeabi_fadd+0x270>
 8000658:	1c61      	adds	r1, r4, #1
 800065a:	b2c8      	uxtb	r0, r1
 800065c:	2801      	cmp	r0, #1
 800065e:	dd4e      	ble.n	80006fe <__aeabi_fadd+0x24e>
 8000660:	29ff      	cmp	r1, #255	; 0xff
 8000662:	d049      	beq.n	80006f8 <__aeabi_fadd+0x248>
 8000664:	4463      	add	r3, ip
 8000666:	085b      	lsrs	r3, r3, #1
 8000668:	000c      	movs	r4, r1
 800066a:	e75c      	b.n	8000526 <__aeabi_fadd+0x76>
 800066c:	2aff      	cmp	r2, #255	; 0xff
 800066e:	d041      	beq.n	80006f4 <__aeabi_fadd+0x244>
 8000670:	000a      	movs	r2, r1
 8000672:	e779      	b.n	8000568 <__aeabi_fadd+0xb8>
 8000674:	2201      	movs	r2, #1
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	e784      	b.n	8000584 <__aeabi_fadd+0xd4>
 800067a:	2c00      	cmp	r4, #0
 800067c:	d01d      	beq.n	80006ba <__aeabi_fadd+0x20a>
 800067e:	28ff      	cmp	r0, #255	; 0xff
 8000680:	d022      	beq.n	80006c8 <__aeabi_fadd+0x218>
 8000682:	2480      	movs	r4, #128	; 0x80
 8000684:	04e4      	lsls	r4, r4, #19
 8000686:	4252      	negs	r2, r2
 8000688:	4323      	orrs	r3, r4
 800068a:	2a1b      	cmp	r2, #27
 800068c:	dd00      	ble.n	8000690 <__aeabi_fadd+0x1e0>
 800068e:	e08a      	b.n	80007a6 <__aeabi_fadd+0x2f6>
 8000690:	001c      	movs	r4, r3
 8000692:	2520      	movs	r5, #32
 8000694:	40d4      	lsrs	r4, r2
 8000696:	1aaa      	subs	r2, r5, r2
 8000698:	4093      	lsls	r3, r2
 800069a:	1e5a      	subs	r2, r3, #1
 800069c:	4193      	sbcs	r3, r2
 800069e:	4323      	orrs	r3, r4
 80006a0:	4662      	mov	r2, ip
 80006a2:	0004      	movs	r4, r0
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	000d      	movs	r5, r1
 80006a8:	e725      	b.n	80004f6 <__aeabi_fadd+0x46>
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d000      	beq.n	80006b0 <__aeabi_fadd+0x200>
 80006ae:	e726      	b.n	80004fe <__aeabi_fadd+0x4e>
 80006b0:	2200      	movs	r2, #0
 80006b2:	2400      	movs	r4, #0
 80006b4:	e7a9      	b.n	800060a <__aeabi_fadd+0x15a>
 80006b6:	000c      	movs	r4, r1
 80006b8:	e735      	b.n	8000526 <__aeabi_fadd+0x76>
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d04d      	beq.n	800075a <__aeabi_fadd+0x2aa>
 80006be:	43d2      	mvns	r2, r2
 80006c0:	2a00      	cmp	r2, #0
 80006c2:	d0ed      	beq.n	80006a0 <__aeabi_fadd+0x1f0>
 80006c4:	28ff      	cmp	r0, #255	; 0xff
 80006c6:	d1e0      	bne.n	800068a <__aeabi_fadd+0x1da>
 80006c8:	4663      	mov	r3, ip
 80006ca:	24ff      	movs	r4, #255	; 0xff
 80006cc:	000d      	movs	r5, r1
 80006ce:	e72a      	b.n	8000526 <__aeabi_fadd+0x76>
 80006d0:	29ff      	cmp	r1, #255	; 0xff
 80006d2:	d00f      	beq.n	80006f4 <__aeabi_fadd+0x244>
 80006d4:	0001      	movs	r1, r0
 80006d6:	e773      	b.n	80005c0 <__aeabi_fadd+0x110>
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d061      	beq.n	80007a0 <__aeabi_fadd+0x2f0>
 80006dc:	24ff      	movs	r4, #255	; 0xff
 80006de:	2f00      	cmp	r7, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fadd+0x234>
 80006e2:	e720      	b.n	8000526 <__aeabi_fadd+0x76>
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	4641      	mov	r1, r8
 80006e8:	03d2      	lsls	r2, r2, #15
 80006ea:	4211      	tst	r1, r2
 80006ec:	d002      	beq.n	80006f4 <__aeabi_fadd+0x244>
 80006ee:	4216      	tst	r6, r2
 80006f0:	d100      	bne.n	80006f4 <__aeabi_fadd+0x244>
 80006f2:	003b      	movs	r3, r7
 80006f4:	24ff      	movs	r4, #255	; 0xff
 80006f6:	e716      	b.n	8000526 <__aeabi_fadd+0x76>
 80006f8:	24ff      	movs	r4, #255	; 0xff
 80006fa:	2300      	movs	r3, #0
 80006fc:	e724      	b.n	8000548 <__aeabi_fadd+0x98>
 80006fe:	2c00      	cmp	r4, #0
 8000700:	d1ea      	bne.n	80006d8 <__aeabi_fadd+0x228>
 8000702:	2b00      	cmp	r3, #0
 8000704:	d058      	beq.n	80007b8 <__aeabi_fadd+0x308>
 8000706:	2f00      	cmp	r7, #0
 8000708:	d100      	bne.n	800070c <__aeabi_fadd+0x25c>
 800070a:	e70c      	b.n	8000526 <__aeabi_fadd+0x76>
 800070c:	4463      	add	r3, ip
 800070e:	015a      	lsls	r2, r3, #5
 8000710:	d400      	bmi.n	8000714 <__aeabi_fadd+0x264>
 8000712:	e739      	b.n	8000588 <__aeabi_fadd+0xd8>
 8000714:	4a2e      	ldr	r2, [pc, #184]	; (80007d0 <__aeabi_fadd+0x320>)
 8000716:	000c      	movs	r4, r1
 8000718:	4013      	ands	r3, r2
 800071a:	e704      	b.n	8000526 <__aeabi_fadd+0x76>
 800071c:	2101      	movs	r1, #1
 800071e:	e75c      	b.n	80005da <__aeabi_fadd+0x12a>
 8000720:	2c00      	cmp	r4, #0
 8000722:	d11e      	bne.n	8000762 <__aeabi_fadd+0x2b2>
 8000724:	2b00      	cmp	r3, #0
 8000726:	d040      	beq.n	80007aa <__aeabi_fadd+0x2fa>
 8000728:	43c9      	mvns	r1, r1
 800072a:	2900      	cmp	r1, #0
 800072c:	d00b      	beq.n	8000746 <__aeabi_fadd+0x296>
 800072e:	28ff      	cmp	r0, #255	; 0xff
 8000730:	d036      	beq.n	80007a0 <__aeabi_fadd+0x2f0>
 8000732:	291b      	cmp	r1, #27
 8000734:	dc47      	bgt.n	80007c6 <__aeabi_fadd+0x316>
 8000736:	001c      	movs	r4, r3
 8000738:	2620      	movs	r6, #32
 800073a:	40cc      	lsrs	r4, r1
 800073c:	1a71      	subs	r1, r6, r1
 800073e:	408b      	lsls	r3, r1
 8000740:	1e59      	subs	r1, r3, #1
 8000742:	418b      	sbcs	r3, r1
 8000744:	4323      	orrs	r3, r4
 8000746:	4463      	add	r3, ip
 8000748:	0004      	movs	r4, r0
 800074a:	e747      	b.n	80005dc <__aeabi_fadd+0x12c>
 800074c:	2b00      	cmp	r3, #0
 800074e:	d118      	bne.n	8000782 <__aeabi_fadd+0x2d2>
 8000750:	1e3b      	subs	r3, r7, #0
 8000752:	d02d      	beq.n	80007b0 <__aeabi_fadd+0x300>
 8000754:	000d      	movs	r5, r1
 8000756:	24ff      	movs	r4, #255	; 0xff
 8000758:	e6e5      	b.n	8000526 <__aeabi_fadd+0x76>
 800075a:	003b      	movs	r3, r7
 800075c:	0004      	movs	r4, r0
 800075e:	000d      	movs	r5, r1
 8000760:	e6e1      	b.n	8000526 <__aeabi_fadd+0x76>
 8000762:	28ff      	cmp	r0, #255	; 0xff
 8000764:	d01c      	beq.n	80007a0 <__aeabi_fadd+0x2f0>
 8000766:	2480      	movs	r4, #128	; 0x80
 8000768:	04e4      	lsls	r4, r4, #19
 800076a:	4249      	negs	r1, r1
 800076c:	4323      	orrs	r3, r4
 800076e:	e7e0      	b.n	8000732 <__aeabi_fadd+0x282>
 8000770:	2f00      	cmp	r7, #0
 8000772:	d100      	bne.n	8000776 <__aeabi_fadd+0x2c6>
 8000774:	e6d7      	b.n	8000526 <__aeabi_fadd+0x76>
 8000776:	1bde      	subs	r6, r3, r7
 8000778:	0172      	lsls	r2, r6, #5
 800077a:	d51f      	bpl.n	80007bc <__aeabi_fadd+0x30c>
 800077c:	1afb      	subs	r3, r7, r3
 800077e:	000d      	movs	r5, r1
 8000780:	e6d1      	b.n	8000526 <__aeabi_fadd+0x76>
 8000782:	24ff      	movs	r4, #255	; 0xff
 8000784:	2f00      	cmp	r7, #0
 8000786:	d100      	bne.n	800078a <__aeabi_fadd+0x2da>
 8000788:	e6cd      	b.n	8000526 <__aeabi_fadd+0x76>
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	4640      	mov	r0, r8
 800078e:	03d2      	lsls	r2, r2, #15
 8000790:	4210      	tst	r0, r2
 8000792:	d0af      	beq.n	80006f4 <__aeabi_fadd+0x244>
 8000794:	4216      	tst	r6, r2
 8000796:	d1ad      	bne.n	80006f4 <__aeabi_fadd+0x244>
 8000798:	003b      	movs	r3, r7
 800079a:	000d      	movs	r5, r1
 800079c:	24ff      	movs	r4, #255	; 0xff
 800079e:	e6c2      	b.n	8000526 <__aeabi_fadd+0x76>
 80007a0:	4663      	mov	r3, ip
 80007a2:	24ff      	movs	r4, #255	; 0xff
 80007a4:	e6bf      	b.n	8000526 <__aeabi_fadd+0x76>
 80007a6:	2301      	movs	r3, #1
 80007a8:	e77a      	b.n	80006a0 <__aeabi_fadd+0x1f0>
 80007aa:	003b      	movs	r3, r7
 80007ac:	0004      	movs	r4, r0
 80007ae:	e6ba      	b.n	8000526 <__aeabi_fadd+0x76>
 80007b0:	2680      	movs	r6, #128	; 0x80
 80007b2:	2200      	movs	r2, #0
 80007b4:	03f6      	lsls	r6, r6, #15
 80007b6:	e6f0      	b.n	800059a <__aeabi_fadd+0xea>
 80007b8:	003b      	movs	r3, r7
 80007ba:	e6b4      	b.n	8000526 <__aeabi_fadd+0x76>
 80007bc:	1e33      	subs	r3, r6, #0
 80007be:	d000      	beq.n	80007c2 <__aeabi_fadd+0x312>
 80007c0:	e6e2      	b.n	8000588 <__aeabi_fadd+0xd8>
 80007c2:	2200      	movs	r2, #0
 80007c4:	e721      	b.n	800060a <__aeabi_fadd+0x15a>
 80007c6:	2301      	movs	r3, #1
 80007c8:	e7bd      	b.n	8000746 <__aeabi_fadd+0x296>
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	7dffffff 	.word	0x7dffffff
 80007d0:	fbffffff 	.word	0xfbffffff

080007d4 <__aeabi_fdiv>:
 80007d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d6:	4657      	mov	r7, sl
 80007d8:	464e      	mov	r6, r9
 80007da:	46de      	mov	lr, fp
 80007dc:	4645      	mov	r5, r8
 80007de:	b5e0      	push	{r5, r6, r7, lr}
 80007e0:	0244      	lsls	r4, r0, #9
 80007e2:	0043      	lsls	r3, r0, #1
 80007e4:	0fc6      	lsrs	r6, r0, #31
 80007e6:	b083      	sub	sp, #12
 80007e8:	1c0f      	adds	r7, r1, #0
 80007ea:	0a64      	lsrs	r4, r4, #9
 80007ec:	0e1b      	lsrs	r3, r3, #24
 80007ee:	46b2      	mov	sl, r6
 80007f0:	d053      	beq.n	800089a <__aeabi_fdiv+0xc6>
 80007f2:	2bff      	cmp	r3, #255	; 0xff
 80007f4:	d027      	beq.n	8000846 <__aeabi_fdiv+0x72>
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	00e4      	lsls	r4, r4, #3
 80007fa:	04d2      	lsls	r2, r2, #19
 80007fc:	4314      	orrs	r4, r2
 80007fe:	227f      	movs	r2, #127	; 0x7f
 8000800:	4252      	negs	r2, r2
 8000802:	4690      	mov	r8, r2
 8000804:	4498      	add	r8, r3
 8000806:	2300      	movs	r3, #0
 8000808:	4699      	mov	r9, r3
 800080a:	469b      	mov	fp, r3
 800080c:	027d      	lsls	r5, r7, #9
 800080e:	0078      	lsls	r0, r7, #1
 8000810:	0ffb      	lsrs	r3, r7, #31
 8000812:	0a6d      	lsrs	r5, r5, #9
 8000814:	0e00      	lsrs	r0, r0, #24
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	d024      	beq.n	8000864 <__aeabi_fdiv+0x90>
 800081a:	28ff      	cmp	r0, #255	; 0xff
 800081c:	d046      	beq.n	80008ac <__aeabi_fdiv+0xd8>
 800081e:	2380      	movs	r3, #128	; 0x80
 8000820:	2100      	movs	r1, #0
 8000822:	00ed      	lsls	r5, r5, #3
 8000824:	04db      	lsls	r3, r3, #19
 8000826:	431d      	orrs	r5, r3
 8000828:	387f      	subs	r0, #127	; 0x7f
 800082a:	4647      	mov	r7, r8
 800082c:	1a38      	subs	r0, r7, r0
 800082e:	464f      	mov	r7, r9
 8000830:	430f      	orrs	r7, r1
 8000832:	00bf      	lsls	r7, r7, #2
 8000834:	46b9      	mov	r9, r7
 8000836:	0033      	movs	r3, r6
 8000838:	9a00      	ldr	r2, [sp, #0]
 800083a:	4f87      	ldr	r7, [pc, #540]	; (8000a58 <__aeabi_fdiv+0x284>)
 800083c:	4053      	eors	r3, r2
 800083e:	464a      	mov	r2, r9
 8000840:	58ba      	ldr	r2, [r7, r2]
 8000842:	9301      	str	r3, [sp, #4]
 8000844:	4697      	mov	pc, r2
 8000846:	2c00      	cmp	r4, #0
 8000848:	d14e      	bne.n	80008e8 <__aeabi_fdiv+0x114>
 800084a:	2308      	movs	r3, #8
 800084c:	4699      	mov	r9, r3
 800084e:	33f7      	adds	r3, #247	; 0xf7
 8000850:	4698      	mov	r8, r3
 8000852:	3bfd      	subs	r3, #253	; 0xfd
 8000854:	469b      	mov	fp, r3
 8000856:	027d      	lsls	r5, r7, #9
 8000858:	0078      	lsls	r0, r7, #1
 800085a:	0ffb      	lsrs	r3, r7, #31
 800085c:	0a6d      	lsrs	r5, r5, #9
 800085e:	0e00      	lsrs	r0, r0, #24
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	d1da      	bne.n	800081a <__aeabi_fdiv+0x46>
 8000864:	2d00      	cmp	r5, #0
 8000866:	d126      	bne.n	80008b6 <__aeabi_fdiv+0xe2>
 8000868:	2000      	movs	r0, #0
 800086a:	2101      	movs	r1, #1
 800086c:	0033      	movs	r3, r6
 800086e:	9a00      	ldr	r2, [sp, #0]
 8000870:	4f7a      	ldr	r7, [pc, #488]	; (8000a5c <__aeabi_fdiv+0x288>)
 8000872:	4053      	eors	r3, r2
 8000874:	4642      	mov	r2, r8
 8000876:	1a10      	subs	r0, r2, r0
 8000878:	464a      	mov	r2, r9
 800087a:	430a      	orrs	r2, r1
 800087c:	0092      	lsls	r2, r2, #2
 800087e:	58ba      	ldr	r2, [r7, r2]
 8000880:	001d      	movs	r5, r3
 8000882:	4697      	mov	pc, r2
 8000884:	9b00      	ldr	r3, [sp, #0]
 8000886:	002c      	movs	r4, r5
 8000888:	469a      	mov	sl, r3
 800088a:	468b      	mov	fp, r1
 800088c:	465b      	mov	r3, fp
 800088e:	2b02      	cmp	r3, #2
 8000890:	d131      	bne.n	80008f6 <__aeabi_fdiv+0x122>
 8000892:	4653      	mov	r3, sl
 8000894:	21ff      	movs	r1, #255	; 0xff
 8000896:	2400      	movs	r4, #0
 8000898:	e038      	b.n	800090c <__aeabi_fdiv+0x138>
 800089a:	2c00      	cmp	r4, #0
 800089c:	d117      	bne.n	80008ce <__aeabi_fdiv+0xfa>
 800089e:	2304      	movs	r3, #4
 80008a0:	4699      	mov	r9, r3
 80008a2:	2300      	movs	r3, #0
 80008a4:	4698      	mov	r8, r3
 80008a6:	3301      	adds	r3, #1
 80008a8:	469b      	mov	fp, r3
 80008aa:	e7af      	b.n	800080c <__aeabi_fdiv+0x38>
 80008ac:	20ff      	movs	r0, #255	; 0xff
 80008ae:	2d00      	cmp	r5, #0
 80008b0:	d10b      	bne.n	80008ca <__aeabi_fdiv+0xf6>
 80008b2:	2102      	movs	r1, #2
 80008b4:	e7da      	b.n	800086c <__aeabi_fdiv+0x98>
 80008b6:	0028      	movs	r0, r5
 80008b8:	f000 fcee 	bl	8001298 <__clzsi2>
 80008bc:	1f43      	subs	r3, r0, #5
 80008be:	409d      	lsls	r5, r3
 80008c0:	2376      	movs	r3, #118	; 0x76
 80008c2:	425b      	negs	r3, r3
 80008c4:	1a18      	subs	r0, r3, r0
 80008c6:	2100      	movs	r1, #0
 80008c8:	e7af      	b.n	800082a <__aeabi_fdiv+0x56>
 80008ca:	2103      	movs	r1, #3
 80008cc:	e7ad      	b.n	800082a <__aeabi_fdiv+0x56>
 80008ce:	0020      	movs	r0, r4
 80008d0:	f000 fce2 	bl	8001298 <__clzsi2>
 80008d4:	1f43      	subs	r3, r0, #5
 80008d6:	409c      	lsls	r4, r3
 80008d8:	2376      	movs	r3, #118	; 0x76
 80008da:	425b      	negs	r3, r3
 80008dc:	1a1b      	subs	r3, r3, r0
 80008de:	4698      	mov	r8, r3
 80008e0:	2300      	movs	r3, #0
 80008e2:	4699      	mov	r9, r3
 80008e4:	469b      	mov	fp, r3
 80008e6:	e791      	b.n	800080c <__aeabi_fdiv+0x38>
 80008e8:	230c      	movs	r3, #12
 80008ea:	4699      	mov	r9, r3
 80008ec:	33f3      	adds	r3, #243	; 0xf3
 80008ee:	4698      	mov	r8, r3
 80008f0:	3bfc      	subs	r3, #252	; 0xfc
 80008f2:	469b      	mov	fp, r3
 80008f4:	e78a      	b.n	800080c <__aeabi_fdiv+0x38>
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d100      	bne.n	80008fc <__aeabi_fdiv+0x128>
 80008fa:	e0a5      	b.n	8000a48 <__aeabi_fdiv+0x274>
 80008fc:	4655      	mov	r5, sl
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d000      	beq.n	8000904 <__aeabi_fdiv+0x130>
 8000902:	e081      	b.n	8000a08 <__aeabi_fdiv+0x234>
 8000904:	2301      	movs	r3, #1
 8000906:	2100      	movs	r1, #0
 8000908:	2400      	movs	r4, #0
 800090a:	402b      	ands	r3, r5
 800090c:	0264      	lsls	r4, r4, #9
 800090e:	05c9      	lsls	r1, r1, #23
 8000910:	0a60      	lsrs	r0, r4, #9
 8000912:	07db      	lsls	r3, r3, #31
 8000914:	4308      	orrs	r0, r1
 8000916:	4318      	orrs	r0, r3
 8000918:	b003      	add	sp, #12
 800091a:	bc3c      	pop	{r2, r3, r4, r5}
 800091c:	4690      	mov	r8, r2
 800091e:	4699      	mov	r9, r3
 8000920:	46a2      	mov	sl, r4
 8000922:	46ab      	mov	fp, r5
 8000924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000926:	2480      	movs	r4, #128	; 0x80
 8000928:	2300      	movs	r3, #0
 800092a:	03e4      	lsls	r4, r4, #15
 800092c:	21ff      	movs	r1, #255	; 0xff
 800092e:	e7ed      	b.n	800090c <__aeabi_fdiv+0x138>
 8000930:	21ff      	movs	r1, #255	; 0xff
 8000932:	2400      	movs	r4, #0
 8000934:	e7ea      	b.n	800090c <__aeabi_fdiv+0x138>
 8000936:	2301      	movs	r3, #1
 8000938:	1a59      	subs	r1, r3, r1
 800093a:	291b      	cmp	r1, #27
 800093c:	dd66      	ble.n	8000a0c <__aeabi_fdiv+0x238>
 800093e:	9a01      	ldr	r2, [sp, #4]
 8000940:	4013      	ands	r3, r2
 8000942:	2100      	movs	r1, #0
 8000944:	2400      	movs	r4, #0
 8000946:	e7e1      	b.n	800090c <__aeabi_fdiv+0x138>
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	03db      	lsls	r3, r3, #15
 800094c:	421c      	tst	r4, r3
 800094e:	d038      	beq.n	80009c2 <__aeabi_fdiv+0x1ee>
 8000950:	421d      	tst	r5, r3
 8000952:	d051      	beq.n	80009f8 <__aeabi_fdiv+0x224>
 8000954:	431c      	orrs	r4, r3
 8000956:	0264      	lsls	r4, r4, #9
 8000958:	0a64      	lsrs	r4, r4, #9
 800095a:	0033      	movs	r3, r6
 800095c:	21ff      	movs	r1, #255	; 0xff
 800095e:	e7d5      	b.n	800090c <__aeabi_fdiv+0x138>
 8000960:	0163      	lsls	r3, r4, #5
 8000962:	016c      	lsls	r4, r5, #5
 8000964:	42a3      	cmp	r3, r4
 8000966:	d23b      	bcs.n	80009e0 <__aeabi_fdiv+0x20c>
 8000968:	261b      	movs	r6, #27
 800096a:	2100      	movs	r1, #0
 800096c:	3801      	subs	r0, #1
 800096e:	2501      	movs	r5, #1
 8000970:	001f      	movs	r7, r3
 8000972:	0049      	lsls	r1, r1, #1
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	2f00      	cmp	r7, #0
 8000978:	db01      	blt.n	800097e <__aeabi_fdiv+0x1aa>
 800097a:	429c      	cmp	r4, r3
 800097c:	d801      	bhi.n	8000982 <__aeabi_fdiv+0x1ae>
 800097e:	1b1b      	subs	r3, r3, r4
 8000980:	4329      	orrs	r1, r5
 8000982:	3e01      	subs	r6, #1
 8000984:	2e00      	cmp	r6, #0
 8000986:	d1f3      	bne.n	8000970 <__aeabi_fdiv+0x19c>
 8000988:	001c      	movs	r4, r3
 800098a:	1e63      	subs	r3, r4, #1
 800098c:	419c      	sbcs	r4, r3
 800098e:	430c      	orrs	r4, r1
 8000990:	0001      	movs	r1, r0
 8000992:	317f      	adds	r1, #127	; 0x7f
 8000994:	2900      	cmp	r1, #0
 8000996:	ddce      	ble.n	8000936 <__aeabi_fdiv+0x162>
 8000998:	0763      	lsls	r3, r4, #29
 800099a:	d004      	beq.n	80009a6 <__aeabi_fdiv+0x1d2>
 800099c:	230f      	movs	r3, #15
 800099e:	4023      	ands	r3, r4
 80009a0:	2b04      	cmp	r3, #4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_fdiv+0x1d2>
 80009a4:	3404      	adds	r4, #4
 80009a6:	0123      	lsls	r3, r4, #4
 80009a8:	d503      	bpl.n	80009b2 <__aeabi_fdiv+0x1de>
 80009aa:	0001      	movs	r1, r0
 80009ac:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <__aeabi_fdiv+0x28c>)
 80009ae:	3180      	adds	r1, #128	; 0x80
 80009b0:	401c      	ands	r4, r3
 80009b2:	29fe      	cmp	r1, #254	; 0xfe
 80009b4:	dd0d      	ble.n	80009d2 <__aeabi_fdiv+0x1fe>
 80009b6:	2301      	movs	r3, #1
 80009b8:	9a01      	ldr	r2, [sp, #4]
 80009ba:	21ff      	movs	r1, #255	; 0xff
 80009bc:	4013      	ands	r3, r2
 80009be:	2400      	movs	r4, #0
 80009c0:	e7a4      	b.n	800090c <__aeabi_fdiv+0x138>
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	03db      	lsls	r3, r3, #15
 80009c6:	431c      	orrs	r4, r3
 80009c8:	0264      	lsls	r4, r4, #9
 80009ca:	0a64      	lsrs	r4, r4, #9
 80009cc:	0033      	movs	r3, r6
 80009ce:	21ff      	movs	r1, #255	; 0xff
 80009d0:	e79c      	b.n	800090c <__aeabi_fdiv+0x138>
 80009d2:	2301      	movs	r3, #1
 80009d4:	9a01      	ldr	r2, [sp, #4]
 80009d6:	01a4      	lsls	r4, r4, #6
 80009d8:	0a64      	lsrs	r4, r4, #9
 80009da:	b2c9      	uxtb	r1, r1
 80009dc:	4013      	ands	r3, r2
 80009de:	e795      	b.n	800090c <__aeabi_fdiv+0x138>
 80009e0:	1b1b      	subs	r3, r3, r4
 80009e2:	261a      	movs	r6, #26
 80009e4:	2101      	movs	r1, #1
 80009e6:	e7c2      	b.n	800096e <__aeabi_fdiv+0x19a>
 80009e8:	9b00      	ldr	r3, [sp, #0]
 80009ea:	468b      	mov	fp, r1
 80009ec:	469a      	mov	sl, r3
 80009ee:	2400      	movs	r4, #0
 80009f0:	e74c      	b.n	800088c <__aeabi_fdiv+0xb8>
 80009f2:	0263      	lsls	r3, r4, #9
 80009f4:	d5e5      	bpl.n	80009c2 <__aeabi_fdiv+0x1ee>
 80009f6:	2500      	movs	r5, #0
 80009f8:	2480      	movs	r4, #128	; 0x80
 80009fa:	03e4      	lsls	r4, r4, #15
 80009fc:	432c      	orrs	r4, r5
 80009fe:	0264      	lsls	r4, r4, #9
 8000a00:	0a64      	lsrs	r4, r4, #9
 8000a02:	9b00      	ldr	r3, [sp, #0]
 8000a04:	21ff      	movs	r1, #255	; 0xff
 8000a06:	e781      	b.n	800090c <__aeabi_fdiv+0x138>
 8000a08:	9501      	str	r5, [sp, #4]
 8000a0a:	e7c1      	b.n	8000990 <__aeabi_fdiv+0x1bc>
 8000a0c:	0023      	movs	r3, r4
 8000a0e:	2020      	movs	r0, #32
 8000a10:	40cb      	lsrs	r3, r1
 8000a12:	1a41      	subs	r1, r0, r1
 8000a14:	408c      	lsls	r4, r1
 8000a16:	1e61      	subs	r1, r4, #1
 8000a18:	418c      	sbcs	r4, r1
 8000a1a:	431c      	orrs	r4, r3
 8000a1c:	0763      	lsls	r3, r4, #29
 8000a1e:	d004      	beq.n	8000a2a <__aeabi_fdiv+0x256>
 8000a20:	230f      	movs	r3, #15
 8000a22:	4023      	ands	r3, r4
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	d000      	beq.n	8000a2a <__aeabi_fdiv+0x256>
 8000a28:	3404      	adds	r4, #4
 8000a2a:	0163      	lsls	r3, r4, #5
 8000a2c:	d505      	bpl.n	8000a3a <__aeabi_fdiv+0x266>
 8000a2e:	2301      	movs	r3, #1
 8000a30:	9a01      	ldr	r2, [sp, #4]
 8000a32:	2101      	movs	r1, #1
 8000a34:	4013      	ands	r3, r2
 8000a36:	2400      	movs	r4, #0
 8000a38:	e768      	b.n	800090c <__aeabi_fdiv+0x138>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	9a01      	ldr	r2, [sp, #4]
 8000a3e:	01a4      	lsls	r4, r4, #6
 8000a40:	0a64      	lsrs	r4, r4, #9
 8000a42:	4013      	ands	r3, r2
 8000a44:	2100      	movs	r1, #0
 8000a46:	e761      	b.n	800090c <__aeabi_fdiv+0x138>
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	03db      	lsls	r3, r3, #15
 8000a4c:	431c      	orrs	r4, r3
 8000a4e:	0264      	lsls	r4, r4, #9
 8000a50:	0a64      	lsrs	r4, r4, #9
 8000a52:	4653      	mov	r3, sl
 8000a54:	21ff      	movs	r1, #255	; 0xff
 8000a56:	e759      	b.n	800090c <__aeabi_fdiv+0x138>
 8000a58:	08006bdc 	.word	0x08006bdc
 8000a5c:	08006c1c 	.word	0x08006c1c
 8000a60:	f7ffffff 	.word	0xf7ffffff

08000a64 <__eqsf2>:
 8000a64:	b570      	push	{r4, r5, r6, lr}
 8000a66:	0042      	lsls	r2, r0, #1
 8000a68:	0245      	lsls	r5, r0, #9
 8000a6a:	024e      	lsls	r6, r1, #9
 8000a6c:	004c      	lsls	r4, r1, #1
 8000a6e:	0fc3      	lsrs	r3, r0, #31
 8000a70:	0a6d      	lsrs	r5, r5, #9
 8000a72:	0e12      	lsrs	r2, r2, #24
 8000a74:	0a76      	lsrs	r6, r6, #9
 8000a76:	0e24      	lsrs	r4, r4, #24
 8000a78:	0fc9      	lsrs	r1, r1, #31
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	2aff      	cmp	r2, #255	; 0xff
 8000a7e:	d006      	beq.n	8000a8e <__eqsf2+0x2a>
 8000a80:	2cff      	cmp	r4, #255	; 0xff
 8000a82:	d003      	beq.n	8000a8c <__eqsf2+0x28>
 8000a84:	42a2      	cmp	r2, r4
 8000a86:	d101      	bne.n	8000a8c <__eqsf2+0x28>
 8000a88:	42b5      	cmp	r5, r6
 8000a8a:	d006      	beq.n	8000a9a <__eqsf2+0x36>
 8000a8c:	bd70      	pop	{r4, r5, r6, pc}
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	d1fc      	bne.n	8000a8c <__eqsf2+0x28>
 8000a92:	2cff      	cmp	r4, #255	; 0xff
 8000a94:	d1fa      	bne.n	8000a8c <__eqsf2+0x28>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d1f8      	bne.n	8000a8c <__eqsf2+0x28>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d006      	beq.n	8000aac <__eqsf2+0x48>
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	d1f3      	bne.n	8000a8c <__eqsf2+0x28>
 8000aa4:	0028      	movs	r0, r5
 8000aa6:	1e45      	subs	r5, r0, #1
 8000aa8:	41a8      	sbcs	r0, r5
 8000aaa:	e7ef      	b.n	8000a8c <__eqsf2+0x28>
 8000aac:	2000      	movs	r0, #0
 8000aae:	e7ed      	b.n	8000a8c <__eqsf2+0x28>

08000ab0 <__gesf2>:
 8000ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab2:	0042      	lsls	r2, r0, #1
 8000ab4:	0245      	lsls	r5, r0, #9
 8000ab6:	024c      	lsls	r4, r1, #9
 8000ab8:	0fc3      	lsrs	r3, r0, #31
 8000aba:	0048      	lsls	r0, r1, #1
 8000abc:	0a6d      	lsrs	r5, r5, #9
 8000abe:	0e12      	lsrs	r2, r2, #24
 8000ac0:	0a64      	lsrs	r4, r4, #9
 8000ac2:	0e00      	lsrs	r0, r0, #24
 8000ac4:	0fc9      	lsrs	r1, r1, #31
 8000ac6:	2aff      	cmp	r2, #255	; 0xff
 8000ac8:	d01e      	beq.n	8000b08 <__gesf2+0x58>
 8000aca:	28ff      	cmp	r0, #255	; 0xff
 8000acc:	d021      	beq.n	8000b12 <__gesf2+0x62>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d10a      	bne.n	8000ae8 <__gesf2+0x38>
 8000ad2:	426e      	negs	r6, r5
 8000ad4:	416e      	adcs	r6, r5
 8000ad6:	b2f6      	uxtb	r6, r6
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	d10f      	bne.n	8000afc <__gesf2+0x4c>
 8000adc:	2c00      	cmp	r4, #0
 8000ade:	d10d      	bne.n	8000afc <__gesf2+0x4c>
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	d009      	beq.n	8000afa <__gesf2+0x4a>
 8000ae6:	e005      	b.n	8000af4 <__gesf2+0x44>
 8000ae8:	2800      	cmp	r0, #0
 8000aea:	d101      	bne.n	8000af0 <__gesf2+0x40>
 8000aec:	2c00      	cmp	r4, #0
 8000aee:	d001      	beq.n	8000af4 <__gesf2+0x44>
 8000af0:	428b      	cmp	r3, r1
 8000af2:	d011      	beq.n	8000b18 <__gesf2+0x68>
 8000af4:	2101      	movs	r1, #1
 8000af6:	4258      	negs	r0, r3
 8000af8:	4308      	orrs	r0, r1
 8000afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d0f7      	beq.n	8000af0 <__gesf2+0x40>
 8000b00:	2001      	movs	r0, #1
 8000b02:	3901      	subs	r1, #1
 8000b04:	4308      	orrs	r0, r1
 8000b06:	e7f8      	b.n	8000afa <__gesf2+0x4a>
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0de      	beq.n	8000aca <__gesf2+0x1a>
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	4240      	negs	r0, r0
 8000b10:	e7f3      	b.n	8000afa <__gesf2+0x4a>
 8000b12:	2c00      	cmp	r4, #0
 8000b14:	d0db      	beq.n	8000ace <__gesf2+0x1e>
 8000b16:	e7f9      	b.n	8000b0c <__gesf2+0x5c>
 8000b18:	4282      	cmp	r2, r0
 8000b1a:	dceb      	bgt.n	8000af4 <__gesf2+0x44>
 8000b1c:	db04      	blt.n	8000b28 <__gesf2+0x78>
 8000b1e:	42a5      	cmp	r5, r4
 8000b20:	d8e8      	bhi.n	8000af4 <__gesf2+0x44>
 8000b22:	2000      	movs	r0, #0
 8000b24:	42a5      	cmp	r5, r4
 8000b26:	d2e8      	bcs.n	8000afa <__gesf2+0x4a>
 8000b28:	2101      	movs	r1, #1
 8000b2a:	1e58      	subs	r0, r3, #1
 8000b2c:	4308      	orrs	r0, r1
 8000b2e:	e7e4      	b.n	8000afa <__gesf2+0x4a>

08000b30 <__lesf2>:
 8000b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b32:	0042      	lsls	r2, r0, #1
 8000b34:	024d      	lsls	r5, r1, #9
 8000b36:	004c      	lsls	r4, r1, #1
 8000b38:	0246      	lsls	r6, r0, #9
 8000b3a:	0a76      	lsrs	r6, r6, #9
 8000b3c:	0e12      	lsrs	r2, r2, #24
 8000b3e:	0fc3      	lsrs	r3, r0, #31
 8000b40:	0a6d      	lsrs	r5, r5, #9
 8000b42:	0e24      	lsrs	r4, r4, #24
 8000b44:	0fc9      	lsrs	r1, r1, #31
 8000b46:	2aff      	cmp	r2, #255	; 0xff
 8000b48:	d016      	beq.n	8000b78 <__lesf2+0x48>
 8000b4a:	2cff      	cmp	r4, #255	; 0xff
 8000b4c:	d018      	beq.n	8000b80 <__lesf2+0x50>
 8000b4e:	2a00      	cmp	r2, #0
 8000b50:	d10a      	bne.n	8000b68 <__lesf2+0x38>
 8000b52:	4270      	negs	r0, r6
 8000b54:	4170      	adcs	r0, r6
 8000b56:	b2c0      	uxtb	r0, r0
 8000b58:	2c00      	cmp	r4, #0
 8000b5a:	d015      	beq.n	8000b88 <__lesf2+0x58>
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	d005      	beq.n	8000b6c <__lesf2+0x3c>
 8000b60:	2001      	movs	r0, #1
 8000b62:	3901      	subs	r1, #1
 8000b64:	4308      	orrs	r0, r1
 8000b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b68:	2c00      	cmp	r4, #0
 8000b6a:	d013      	beq.n	8000b94 <__lesf2+0x64>
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	d014      	beq.n	8000b9a <__lesf2+0x6a>
 8000b70:	2001      	movs	r0, #1
 8000b72:	425b      	negs	r3, r3
 8000b74:	4318      	orrs	r0, r3
 8000b76:	e7f6      	b.n	8000b66 <__lesf2+0x36>
 8000b78:	2002      	movs	r0, #2
 8000b7a:	2e00      	cmp	r6, #0
 8000b7c:	d1f3      	bne.n	8000b66 <__lesf2+0x36>
 8000b7e:	e7e4      	b.n	8000b4a <__lesf2+0x1a>
 8000b80:	2002      	movs	r0, #2
 8000b82:	2d00      	cmp	r5, #0
 8000b84:	d1ef      	bne.n	8000b66 <__lesf2+0x36>
 8000b86:	e7e2      	b.n	8000b4e <__lesf2+0x1e>
 8000b88:	2d00      	cmp	r5, #0
 8000b8a:	d1e7      	bne.n	8000b5c <__lesf2+0x2c>
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	2e00      	cmp	r6, #0
 8000b90:	d0e9      	beq.n	8000b66 <__lesf2+0x36>
 8000b92:	e7ed      	b.n	8000b70 <__lesf2+0x40>
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d1e9      	bne.n	8000b6c <__lesf2+0x3c>
 8000b98:	e7ea      	b.n	8000b70 <__lesf2+0x40>
 8000b9a:	42a2      	cmp	r2, r4
 8000b9c:	dc06      	bgt.n	8000bac <__lesf2+0x7c>
 8000b9e:	dbdf      	blt.n	8000b60 <__lesf2+0x30>
 8000ba0:	42ae      	cmp	r6, r5
 8000ba2:	d803      	bhi.n	8000bac <__lesf2+0x7c>
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	42ae      	cmp	r6, r5
 8000ba8:	d3da      	bcc.n	8000b60 <__lesf2+0x30>
 8000baa:	e7dc      	b.n	8000b66 <__lesf2+0x36>
 8000bac:	2001      	movs	r0, #1
 8000bae:	4249      	negs	r1, r1
 8000bb0:	4308      	orrs	r0, r1
 8000bb2:	e7d8      	b.n	8000b66 <__lesf2+0x36>

08000bb4 <__aeabi_fmul>:
 8000bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb6:	4657      	mov	r7, sl
 8000bb8:	464e      	mov	r6, r9
 8000bba:	4645      	mov	r5, r8
 8000bbc:	46de      	mov	lr, fp
 8000bbe:	b5e0      	push	{r5, r6, r7, lr}
 8000bc0:	0247      	lsls	r7, r0, #9
 8000bc2:	0046      	lsls	r6, r0, #1
 8000bc4:	4688      	mov	r8, r1
 8000bc6:	0a7f      	lsrs	r7, r7, #9
 8000bc8:	0e36      	lsrs	r6, r6, #24
 8000bca:	0fc4      	lsrs	r4, r0, #31
 8000bcc:	2e00      	cmp	r6, #0
 8000bce:	d047      	beq.n	8000c60 <__aeabi_fmul+0xac>
 8000bd0:	2eff      	cmp	r6, #255	; 0xff
 8000bd2:	d024      	beq.n	8000c1e <__aeabi_fmul+0x6a>
 8000bd4:	00fb      	lsls	r3, r7, #3
 8000bd6:	2780      	movs	r7, #128	; 0x80
 8000bd8:	04ff      	lsls	r7, r7, #19
 8000bda:	431f      	orrs	r7, r3
 8000bdc:	2300      	movs	r3, #0
 8000bde:	4699      	mov	r9, r3
 8000be0:	469a      	mov	sl, r3
 8000be2:	3e7f      	subs	r6, #127	; 0x7f
 8000be4:	4643      	mov	r3, r8
 8000be6:	025d      	lsls	r5, r3, #9
 8000be8:	0058      	lsls	r0, r3, #1
 8000bea:	0fdb      	lsrs	r3, r3, #31
 8000bec:	0a6d      	lsrs	r5, r5, #9
 8000bee:	0e00      	lsrs	r0, r0, #24
 8000bf0:	4698      	mov	r8, r3
 8000bf2:	d043      	beq.n	8000c7c <__aeabi_fmul+0xc8>
 8000bf4:	28ff      	cmp	r0, #255	; 0xff
 8000bf6:	d03b      	beq.n	8000c70 <__aeabi_fmul+0xbc>
 8000bf8:	00eb      	lsls	r3, r5, #3
 8000bfa:	2580      	movs	r5, #128	; 0x80
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	04ed      	lsls	r5, r5, #19
 8000c00:	431d      	orrs	r5, r3
 8000c02:	387f      	subs	r0, #127	; 0x7f
 8000c04:	1836      	adds	r6, r6, r0
 8000c06:	1c73      	adds	r3, r6, #1
 8000c08:	4641      	mov	r1, r8
 8000c0a:	469b      	mov	fp, r3
 8000c0c:	464b      	mov	r3, r9
 8000c0e:	4061      	eors	r1, r4
 8000c10:	4313      	orrs	r3, r2
 8000c12:	2b0f      	cmp	r3, #15
 8000c14:	d864      	bhi.n	8000ce0 <__aeabi_fmul+0x12c>
 8000c16:	4875      	ldr	r0, [pc, #468]	; (8000dec <__aeabi_fmul+0x238>)
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	58c3      	ldr	r3, [r0, r3]
 8000c1c:	469f      	mov	pc, r3
 8000c1e:	2f00      	cmp	r7, #0
 8000c20:	d142      	bne.n	8000ca8 <__aeabi_fmul+0xf4>
 8000c22:	2308      	movs	r3, #8
 8000c24:	4699      	mov	r9, r3
 8000c26:	3b06      	subs	r3, #6
 8000c28:	26ff      	movs	r6, #255	; 0xff
 8000c2a:	469a      	mov	sl, r3
 8000c2c:	e7da      	b.n	8000be4 <__aeabi_fmul+0x30>
 8000c2e:	4641      	mov	r1, r8
 8000c30:	2a02      	cmp	r2, #2
 8000c32:	d028      	beq.n	8000c86 <__aeabi_fmul+0xd2>
 8000c34:	2a03      	cmp	r2, #3
 8000c36:	d100      	bne.n	8000c3a <__aeabi_fmul+0x86>
 8000c38:	e0ce      	b.n	8000dd8 <__aeabi_fmul+0x224>
 8000c3a:	2a01      	cmp	r2, #1
 8000c3c:	d000      	beq.n	8000c40 <__aeabi_fmul+0x8c>
 8000c3e:	e0ac      	b.n	8000d9a <__aeabi_fmul+0x1e6>
 8000c40:	4011      	ands	r1, r2
 8000c42:	2000      	movs	r0, #0
 8000c44:	2200      	movs	r2, #0
 8000c46:	b2cc      	uxtb	r4, r1
 8000c48:	0240      	lsls	r0, r0, #9
 8000c4a:	05d2      	lsls	r2, r2, #23
 8000c4c:	0a40      	lsrs	r0, r0, #9
 8000c4e:	07e4      	lsls	r4, r4, #31
 8000c50:	4310      	orrs	r0, r2
 8000c52:	4320      	orrs	r0, r4
 8000c54:	bc3c      	pop	{r2, r3, r4, r5}
 8000c56:	4690      	mov	r8, r2
 8000c58:	4699      	mov	r9, r3
 8000c5a:	46a2      	mov	sl, r4
 8000c5c:	46ab      	mov	fp, r5
 8000c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c60:	2f00      	cmp	r7, #0
 8000c62:	d115      	bne.n	8000c90 <__aeabi_fmul+0xdc>
 8000c64:	2304      	movs	r3, #4
 8000c66:	4699      	mov	r9, r3
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	2600      	movs	r6, #0
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	e7b9      	b.n	8000be4 <__aeabi_fmul+0x30>
 8000c70:	20ff      	movs	r0, #255	; 0xff
 8000c72:	2202      	movs	r2, #2
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	d0c5      	beq.n	8000c04 <__aeabi_fmul+0x50>
 8000c78:	2203      	movs	r2, #3
 8000c7a:	e7c3      	b.n	8000c04 <__aeabi_fmul+0x50>
 8000c7c:	2d00      	cmp	r5, #0
 8000c7e:	d119      	bne.n	8000cb4 <__aeabi_fmul+0x100>
 8000c80:	2000      	movs	r0, #0
 8000c82:	2201      	movs	r2, #1
 8000c84:	e7be      	b.n	8000c04 <__aeabi_fmul+0x50>
 8000c86:	2401      	movs	r4, #1
 8000c88:	22ff      	movs	r2, #255	; 0xff
 8000c8a:	400c      	ands	r4, r1
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	e7db      	b.n	8000c48 <__aeabi_fmul+0x94>
 8000c90:	0038      	movs	r0, r7
 8000c92:	f000 fb01 	bl	8001298 <__clzsi2>
 8000c96:	2676      	movs	r6, #118	; 0x76
 8000c98:	1f43      	subs	r3, r0, #5
 8000c9a:	409f      	lsls	r7, r3
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4276      	negs	r6, r6
 8000ca0:	1a36      	subs	r6, r6, r0
 8000ca2:	4699      	mov	r9, r3
 8000ca4:	469a      	mov	sl, r3
 8000ca6:	e79d      	b.n	8000be4 <__aeabi_fmul+0x30>
 8000ca8:	230c      	movs	r3, #12
 8000caa:	4699      	mov	r9, r3
 8000cac:	3b09      	subs	r3, #9
 8000cae:	26ff      	movs	r6, #255	; 0xff
 8000cb0:	469a      	mov	sl, r3
 8000cb2:	e797      	b.n	8000be4 <__aeabi_fmul+0x30>
 8000cb4:	0028      	movs	r0, r5
 8000cb6:	f000 faef 	bl	8001298 <__clzsi2>
 8000cba:	1f43      	subs	r3, r0, #5
 8000cbc:	409d      	lsls	r5, r3
 8000cbe:	2376      	movs	r3, #118	; 0x76
 8000cc0:	425b      	negs	r3, r3
 8000cc2:	1a18      	subs	r0, r3, r0
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e79d      	b.n	8000c04 <__aeabi_fmul+0x50>
 8000cc8:	2080      	movs	r0, #128	; 0x80
 8000cca:	2400      	movs	r4, #0
 8000ccc:	03c0      	lsls	r0, r0, #15
 8000cce:	22ff      	movs	r2, #255	; 0xff
 8000cd0:	e7ba      	b.n	8000c48 <__aeabi_fmul+0x94>
 8000cd2:	003d      	movs	r5, r7
 8000cd4:	4652      	mov	r2, sl
 8000cd6:	e7ab      	b.n	8000c30 <__aeabi_fmul+0x7c>
 8000cd8:	003d      	movs	r5, r7
 8000cda:	0021      	movs	r1, r4
 8000cdc:	4652      	mov	r2, sl
 8000cde:	e7a7      	b.n	8000c30 <__aeabi_fmul+0x7c>
 8000ce0:	0c3b      	lsrs	r3, r7, #16
 8000ce2:	469c      	mov	ip, r3
 8000ce4:	042a      	lsls	r2, r5, #16
 8000ce6:	0c12      	lsrs	r2, r2, #16
 8000ce8:	0c2b      	lsrs	r3, r5, #16
 8000cea:	0014      	movs	r4, r2
 8000cec:	4660      	mov	r0, ip
 8000cee:	4665      	mov	r5, ip
 8000cf0:	043f      	lsls	r7, r7, #16
 8000cf2:	0c3f      	lsrs	r7, r7, #16
 8000cf4:	437c      	muls	r4, r7
 8000cf6:	4342      	muls	r2, r0
 8000cf8:	435d      	muls	r5, r3
 8000cfa:	437b      	muls	r3, r7
 8000cfc:	0c27      	lsrs	r7, r4, #16
 8000cfe:	189b      	adds	r3, r3, r2
 8000d00:	18ff      	adds	r7, r7, r3
 8000d02:	42ba      	cmp	r2, r7
 8000d04:	d903      	bls.n	8000d0e <__aeabi_fmul+0x15a>
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	025b      	lsls	r3, r3, #9
 8000d0a:	469c      	mov	ip, r3
 8000d0c:	4465      	add	r5, ip
 8000d0e:	0424      	lsls	r4, r4, #16
 8000d10:	043a      	lsls	r2, r7, #16
 8000d12:	0c24      	lsrs	r4, r4, #16
 8000d14:	1912      	adds	r2, r2, r4
 8000d16:	0193      	lsls	r3, r2, #6
 8000d18:	1e5c      	subs	r4, r3, #1
 8000d1a:	41a3      	sbcs	r3, r4
 8000d1c:	0c3f      	lsrs	r7, r7, #16
 8000d1e:	0e92      	lsrs	r2, r2, #26
 8000d20:	197d      	adds	r5, r7, r5
 8000d22:	431a      	orrs	r2, r3
 8000d24:	01ad      	lsls	r5, r5, #6
 8000d26:	4315      	orrs	r5, r2
 8000d28:	012b      	lsls	r3, r5, #4
 8000d2a:	d504      	bpl.n	8000d36 <__aeabi_fmul+0x182>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	465e      	mov	r6, fp
 8000d30:	086a      	lsrs	r2, r5, #1
 8000d32:	401d      	ands	r5, r3
 8000d34:	4315      	orrs	r5, r2
 8000d36:	0032      	movs	r2, r6
 8000d38:	327f      	adds	r2, #127	; 0x7f
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	dd25      	ble.n	8000d8a <__aeabi_fmul+0x1d6>
 8000d3e:	076b      	lsls	r3, r5, #29
 8000d40:	d004      	beq.n	8000d4c <__aeabi_fmul+0x198>
 8000d42:	230f      	movs	r3, #15
 8000d44:	402b      	ands	r3, r5
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	d000      	beq.n	8000d4c <__aeabi_fmul+0x198>
 8000d4a:	3504      	adds	r5, #4
 8000d4c:	012b      	lsls	r3, r5, #4
 8000d4e:	d503      	bpl.n	8000d58 <__aeabi_fmul+0x1a4>
 8000d50:	0032      	movs	r2, r6
 8000d52:	4b27      	ldr	r3, [pc, #156]	; (8000df0 <__aeabi_fmul+0x23c>)
 8000d54:	3280      	adds	r2, #128	; 0x80
 8000d56:	401d      	ands	r5, r3
 8000d58:	2afe      	cmp	r2, #254	; 0xfe
 8000d5a:	dc94      	bgt.n	8000c86 <__aeabi_fmul+0xd2>
 8000d5c:	2401      	movs	r4, #1
 8000d5e:	01a8      	lsls	r0, r5, #6
 8000d60:	0a40      	lsrs	r0, r0, #9
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	400c      	ands	r4, r1
 8000d66:	e76f      	b.n	8000c48 <__aeabi_fmul+0x94>
 8000d68:	2080      	movs	r0, #128	; 0x80
 8000d6a:	03c0      	lsls	r0, r0, #15
 8000d6c:	4207      	tst	r7, r0
 8000d6e:	d007      	beq.n	8000d80 <__aeabi_fmul+0x1cc>
 8000d70:	4205      	tst	r5, r0
 8000d72:	d105      	bne.n	8000d80 <__aeabi_fmul+0x1cc>
 8000d74:	4328      	orrs	r0, r5
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	0a40      	lsrs	r0, r0, #9
 8000d7a:	4644      	mov	r4, r8
 8000d7c:	22ff      	movs	r2, #255	; 0xff
 8000d7e:	e763      	b.n	8000c48 <__aeabi_fmul+0x94>
 8000d80:	4338      	orrs	r0, r7
 8000d82:	0240      	lsls	r0, r0, #9
 8000d84:	0a40      	lsrs	r0, r0, #9
 8000d86:	22ff      	movs	r2, #255	; 0xff
 8000d88:	e75e      	b.n	8000c48 <__aeabi_fmul+0x94>
 8000d8a:	2401      	movs	r4, #1
 8000d8c:	1aa3      	subs	r3, r4, r2
 8000d8e:	2b1b      	cmp	r3, #27
 8000d90:	dd05      	ble.n	8000d9e <__aeabi_fmul+0x1ea>
 8000d92:	400c      	ands	r4, r1
 8000d94:	2200      	movs	r2, #0
 8000d96:	2000      	movs	r0, #0
 8000d98:	e756      	b.n	8000c48 <__aeabi_fmul+0x94>
 8000d9a:	465e      	mov	r6, fp
 8000d9c:	e7cb      	b.n	8000d36 <__aeabi_fmul+0x182>
 8000d9e:	002a      	movs	r2, r5
 8000da0:	2020      	movs	r0, #32
 8000da2:	40da      	lsrs	r2, r3
 8000da4:	1ac3      	subs	r3, r0, r3
 8000da6:	409d      	lsls	r5, r3
 8000da8:	002b      	movs	r3, r5
 8000daa:	1e5d      	subs	r5, r3, #1
 8000dac:	41ab      	sbcs	r3, r5
 8000dae:	4313      	orrs	r3, r2
 8000db0:	075a      	lsls	r2, r3, #29
 8000db2:	d004      	beq.n	8000dbe <__aeabi_fmul+0x20a>
 8000db4:	220f      	movs	r2, #15
 8000db6:	401a      	ands	r2, r3
 8000db8:	2a04      	cmp	r2, #4
 8000dba:	d000      	beq.n	8000dbe <__aeabi_fmul+0x20a>
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	015a      	lsls	r2, r3, #5
 8000dc0:	d504      	bpl.n	8000dcc <__aeabi_fmul+0x218>
 8000dc2:	2401      	movs	r4, #1
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	400c      	ands	r4, r1
 8000dc8:	2000      	movs	r0, #0
 8000dca:	e73d      	b.n	8000c48 <__aeabi_fmul+0x94>
 8000dcc:	2401      	movs	r4, #1
 8000dce:	019b      	lsls	r3, r3, #6
 8000dd0:	0a58      	lsrs	r0, r3, #9
 8000dd2:	400c      	ands	r4, r1
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e737      	b.n	8000c48 <__aeabi_fmul+0x94>
 8000dd8:	2080      	movs	r0, #128	; 0x80
 8000dda:	2401      	movs	r4, #1
 8000ddc:	03c0      	lsls	r0, r0, #15
 8000dde:	4328      	orrs	r0, r5
 8000de0:	0240      	lsls	r0, r0, #9
 8000de2:	0a40      	lsrs	r0, r0, #9
 8000de4:	400c      	ands	r4, r1
 8000de6:	22ff      	movs	r2, #255	; 0xff
 8000de8:	e72e      	b.n	8000c48 <__aeabi_fmul+0x94>
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	08006c5c 	.word	0x08006c5c
 8000df0:	f7ffffff 	.word	0xf7ffffff

08000df4 <__aeabi_fsub>:
 8000df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df6:	464f      	mov	r7, r9
 8000df8:	46d6      	mov	lr, sl
 8000dfa:	4646      	mov	r6, r8
 8000dfc:	0044      	lsls	r4, r0, #1
 8000dfe:	b5c0      	push	{r6, r7, lr}
 8000e00:	0fc2      	lsrs	r2, r0, #31
 8000e02:	0247      	lsls	r7, r0, #9
 8000e04:	0248      	lsls	r0, r1, #9
 8000e06:	0a40      	lsrs	r0, r0, #9
 8000e08:	4684      	mov	ip, r0
 8000e0a:	4666      	mov	r6, ip
 8000e0c:	0a7b      	lsrs	r3, r7, #9
 8000e0e:	0048      	lsls	r0, r1, #1
 8000e10:	0fc9      	lsrs	r1, r1, #31
 8000e12:	469a      	mov	sl, r3
 8000e14:	0e24      	lsrs	r4, r4, #24
 8000e16:	0015      	movs	r5, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	0e00      	lsrs	r0, r0, #24
 8000e1c:	4689      	mov	r9, r1
 8000e1e:	00f6      	lsls	r6, r6, #3
 8000e20:	28ff      	cmp	r0, #255	; 0xff
 8000e22:	d100      	bne.n	8000e26 <__aeabi_fsub+0x32>
 8000e24:	e08f      	b.n	8000f46 <__aeabi_fsub+0x152>
 8000e26:	2101      	movs	r1, #1
 8000e28:	464f      	mov	r7, r9
 8000e2a:	404f      	eors	r7, r1
 8000e2c:	0039      	movs	r1, r7
 8000e2e:	4291      	cmp	r1, r2
 8000e30:	d066      	beq.n	8000f00 <__aeabi_fsub+0x10c>
 8000e32:	1a22      	subs	r2, r4, r0
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	dc00      	bgt.n	8000e3a <__aeabi_fsub+0x46>
 8000e38:	e09d      	b.n	8000f76 <__aeabi_fsub+0x182>
 8000e3a:	2800      	cmp	r0, #0
 8000e3c:	d13d      	bne.n	8000eba <__aeabi_fsub+0xc6>
 8000e3e:	2e00      	cmp	r6, #0
 8000e40:	d100      	bne.n	8000e44 <__aeabi_fsub+0x50>
 8000e42:	e08b      	b.n	8000f5c <__aeabi_fsub+0x168>
 8000e44:	1e51      	subs	r1, r2, #1
 8000e46:	2900      	cmp	r1, #0
 8000e48:	d000      	beq.n	8000e4c <__aeabi_fsub+0x58>
 8000e4a:	e0b5      	b.n	8000fb8 <__aeabi_fsub+0x1c4>
 8000e4c:	2401      	movs	r4, #1
 8000e4e:	1b9b      	subs	r3, r3, r6
 8000e50:	015a      	lsls	r2, r3, #5
 8000e52:	d544      	bpl.n	8000ede <__aeabi_fsub+0xea>
 8000e54:	019b      	lsls	r3, r3, #6
 8000e56:	099f      	lsrs	r7, r3, #6
 8000e58:	0038      	movs	r0, r7
 8000e5a:	f000 fa1d 	bl	8001298 <__clzsi2>
 8000e5e:	3805      	subs	r0, #5
 8000e60:	4087      	lsls	r7, r0
 8000e62:	4284      	cmp	r4, r0
 8000e64:	dd00      	ble.n	8000e68 <__aeabi_fsub+0x74>
 8000e66:	e096      	b.n	8000f96 <__aeabi_fsub+0x1a2>
 8000e68:	1b04      	subs	r4, r0, r4
 8000e6a:	003a      	movs	r2, r7
 8000e6c:	2020      	movs	r0, #32
 8000e6e:	3401      	adds	r4, #1
 8000e70:	40e2      	lsrs	r2, r4
 8000e72:	1b04      	subs	r4, r0, r4
 8000e74:	40a7      	lsls	r7, r4
 8000e76:	003b      	movs	r3, r7
 8000e78:	1e5f      	subs	r7, r3, #1
 8000e7a:	41bb      	sbcs	r3, r7
 8000e7c:	2400      	movs	r4, #0
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	075a      	lsls	r2, r3, #29
 8000e82:	d004      	beq.n	8000e8e <__aeabi_fsub+0x9a>
 8000e84:	220f      	movs	r2, #15
 8000e86:	401a      	ands	r2, r3
 8000e88:	2a04      	cmp	r2, #4
 8000e8a:	d000      	beq.n	8000e8e <__aeabi_fsub+0x9a>
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	015a      	lsls	r2, r3, #5
 8000e90:	d527      	bpl.n	8000ee2 <__aeabi_fsub+0xee>
 8000e92:	3401      	adds	r4, #1
 8000e94:	2cff      	cmp	r4, #255	; 0xff
 8000e96:	d100      	bne.n	8000e9a <__aeabi_fsub+0xa6>
 8000e98:	e079      	b.n	8000f8e <__aeabi_fsub+0x19a>
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	019b      	lsls	r3, r3, #6
 8000e9e:	0a5b      	lsrs	r3, r3, #9
 8000ea0:	b2e4      	uxtb	r4, r4
 8000ea2:	402a      	ands	r2, r5
 8000ea4:	025b      	lsls	r3, r3, #9
 8000ea6:	05e4      	lsls	r4, r4, #23
 8000ea8:	0a58      	lsrs	r0, r3, #9
 8000eaa:	07d2      	lsls	r2, r2, #31
 8000eac:	4320      	orrs	r0, r4
 8000eae:	4310      	orrs	r0, r2
 8000eb0:	bc1c      	pop	{r2, r3, r4}
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4699      	mov	r9, r3
 8000eb6:	46a2      	mov	sl, r4
 8000eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eba:	2cff      	cmp	r4, #255	; 0xff
 8000ebc:	d0e0      	beq.n	8000e80 <__aeabi_fsub+0x8c>
 8000ebe:	2180      	movs	r1, #128	; 0x80
 8000ec0:	04c9      	lsls	r1, r1, #19
 8000ec2:	430e      	orrs	r6, r1
 8000ec4:	2a1b      	cmp	r2, #27
 8000ec6:	dc7b      	bgt.n	8000fc0 <__aeabi_fsub+0x1cc>
 8000ec8:	0031      	movs	r1, r6
 8000eca:	2020      	movs	r0, #32
 8000ecc:	40d1      	lsrs	r1, r2
 8000ece:	1a82      	subs	r2, r0, r2
 8000ed0:	4096      	lsls	r6, r2
 8000ed2:	1e72      	subs	r2, r6, #1
 8000ed4:	4196      	sbcs	r6, r2
 8000ed6:	430e      	orrs	r6, r1
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	015a      	lsls	r2, r3, #5
 8000edc:	d4ba      	bmi.n	8000e54 <__aeabi_fsub+0x60>
 8000ede:	075a      	lsls	r2, r3, #29
 8000ee0:	d1d0      	bne.n	8000e84 <__aeabi_fsub+0x90>
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	08df      	lsrs	r7, r3, #3
 8000ee6:	402a      	ands	r2, r5
 8000ee8:	2cff      	cmp	r4, #255	; 0xff
 8000eea:	d133      	bne.n	8000f54 <__aeabi_fsub+0x160>
 8000eec:	2f00      	cmp	r7, #0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_fsub+0xfe>
 8000ef0:	e0a8      	b.n	8001044 <__aeabi_fsub+0x250>
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	03db      	lsls	r3, r3, #15
 8000ef6:	433b      	orrs	r3, r7
 8000ef8:	025b      	lsls	r3, r3, #9
 8000efa:	0a5b      	lsrs	r3, r3, #9
 8000efc:	24ff      	movs	r4, #255	; 0xff
 8000efe:	e7d1      	b.n	8000ea4 <__aeabi_fsub+0xb0>
 8000f00:	1a21      	subs	r1, r4, r0
 8000f02:	2900      	cmp	r1, #0
 8000f04:	dd4c      	ble.n	8000fa0 <__aeabi_fsub+0x1ac>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	d02a      	beq.n	8000f60 <__aeabi_fsub+0x16c>
 8000f0a:	2cff      	cmp	r4, #255	; 0xff
 8000f0c:	d0b8      	beq.n	8000e80 <__aeabi_fsub+0x8c>
 8000f0e:	2080      	movs	r0, #128	; 0x80
 8000f10:	04c0      	lsls	r0, r0, #19
 8000f12:	4306      	orrs	r6, r0
 8000f14:	291b      	cmp	r1, #27
 8000f16:	dd00      	ble.n	8000f1a <__aeabi_fsub+0x126>
 8000f18:	e0af      	b.n	800107a <__aeabi_fsub+0x286>
 8000f1a:	0030      	movs	r0, r6
 8000f1c:	2720      	movs	r7, #32
 8000f1e:	40c8      	lsrs	r0, r1
 8000f20:	1a79      	subs	r1, r7, r1
 8000f22:	408e      	lsls	r6, r1
 8000f24:	1e71      	subs	r1, r6, #1
 8000f26:	418e      	sbcs	r6, r1
 8000f28:	4306      	orrs	r6, r0
 8000f2a:	199b      	adds	r3, r3, r6
 8000f2c:	0159      	lsls	r1, r3, #5
 8000f2e:	d5d6      	bpl.n	8000ede <__aeabi_fsub+0xea>
 8000f30:	3401      	adds	r4, #1
 8000f32:	2cff      	cmp	r4, #255	; 0xff
 8000f34:	d100      	bne.n	8000f38 <__aeabi_fsub+0x144>
 8000f36:	e085      	b.n	8001044 <__aeabi_fsub+0x250>
 8000f38:	2201      	movs	r2, #1
 8000f3a:	497a      	ldr	r1, [pc, #488]	; (8001124 <__aeabi_fsub+0x330>)
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	085b      	lsrs	r3, r3, #1
 8000f40:	400b      	ands	r3, r1
 8000f42:	4313      	orrs	r3, r2
 8000f44:	e79c      	b.n	8000e80 <__aeabi_fsub+0x8c>
 8000f46:	2e00      	cmp	r6, #0
 8000f48:	d000      	beq.n	8000f4c <__aeabi_fsub+0x158>
 8000f4a:	e770      	b.n	8000e2e <__aeabi_fsub+0x3a>
 8000f4c:	e76b      	b.n	8000e26 <__aeabi_fsub+0x32>
 8000f4e:	1e3b      	subs	r3, r7, #0
 8000f50:	d1c5      	bne.n	8000ede <__aeabi_fsub+0xea>
 8000f52:	2200      	movs	r2, #0
 8000f54:	027b      	lsls	r3, r7, #9
 8000f56:	0a5b      	lsrs	r3, r3, #9
 8000f58:	b2e4      	uxtb	r4, r4
 8000f5a:	e7a3      	b.n	8000ea4 <__aeabi_fsub+0xb0>
 8000f5c:	0014      	movs	r4, r2
 8000f5e:	e78f      	b.n	8000e80 <__aeabi_fsub+0x8c>
 8000f60:	2e00      	cmp	r6, #0
 8000f62:	d04d      	beq.n	8001000 <__aeabi_fsub+0x20c>
 8000f64:	1e48      	subs	r0, r1, #1
 8000f66:	2800      	cmp	r0, #0
 8000f68:	d157      	bne.n	800101a <__aeabi_fsub+0x226>
 8000f6a:	199b      	adds	r3, r3, r6
 8000f6c:	2401      	movs	r4, #1
 8000f6e:	015a      	lsls	r2, r3, #5
 8000f70:	d5b5      	bpl.n	8000ede <__aeabi_fsub+0xea>
 8000f72:	2402      	movs	r4, #2
 8000f74:	e7e0      	b.n	8000f38 <__aeabi_fsub+0x144>
 8000f76:	2a00      	cmp	r2, #0
 8000f78:	d125      	bne.n	8000fc6 <__aeabi_fsub+0x1d2>
 8000f7a:	1c62      	adds	r2, r4, #1
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	2a01      	cmp	r2, #1
 8000f80:	dd72      	ble.n	8001068 <__aeabi_fsub+0x274>
 8000f82:	1b9f      	subs	r7, r3, r6
 8000f84:	017a      	lsls	r2, r7, #5
 8000f86:	d535      	bpl.n	8000ff4 <__aeabi_fsub+0x200>
 8000f88:	1af7      	subs	r7, r6, r3
 8000f8a:	000d      	movs	r5, r1
 8000f8c:	e764      	b.n	8000e58 <__aeabi_fsub+0x64>
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2300      	movs	r3, #0
 8000f92:	402a      	ands	r2, r5
 8000f94:	e786      	b.n	8000ea4 <__aeabi_fsub+0xb0>
 8000f96:	003b      	movs	r3, r7
 8000f98:	4a63      	ldr	r2, [pc, #396]	; (8001128 <__aeabi_fsub+0x334>)
 8000f9a:	1a24      	subs	r4, r4, r0
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	e76f      	b.n	8000e80 <__aeabi_fsub+0x8c>
 8000fa0:	2900      	cmp	r1, #0
 8000fa2:	d16c      	bne.n	800107e <__aeabi_fsub+0x28a>
 8000fa4:	1c61      	adds	r1, r4, #1
 8000fa6:	b2c8      	uxtb	r0, r1
 8000fa8:	2801      	cmp	r0, #1
 8000faa:	dd4e      	ble.n	800104a <__aeabi_fsub+0x256>
 8000fac:	29ff      	cmp	r1, #255	; 0xff
 8000fae:	d049      	beq.n	8001044 <__aeabi_fsub+0x250>
 8000fb0:	199b      	adds	r3, r3, r6
 8000fb2:	085b      	lsrs	r3, r3, #1
 8000fb4:	000c      	movs	r4, r1
 8000fb6:	e763      	b.n	8000e80 <__aeabi_fsub+0x8c>
 8000fb8:	2aff      	cmp	r2, #255	; 0xff
 8000fba:	d041      	beq.n	8001040 <__aeabi_fsub+0x24c>
 8000fbc:	000a      	movs	r2, r1
 8000fbe:	e781      	b.n	8000ec4 <__aeabi_fsub+0xd0>
 8000fc0:	2601      	movs	r6, #1
 8000fc2:	1b9b      	subs	r3, r3, r6
 8000fc4:	e789      	b.n	8000eda <__aeabi_fsub+0xe6>
 8000fc6:	2c00      	cmp	r4, #0
 8000fc8:	d01c      	beq.n	8001004 <__aeabi_fsub+0x210>
 8000fca:	28ff      	cmp	r0, #255	; 0xff
 8000fcc:	d021      	beq.n	8001012 <__aeabi_fsub+0x21e>
 8000fce:	2480      	movs	r4, #128	; 0x80
 8000fd0:	04e4      	lsls	r4, r4, #19
 8000fd2:	4252      	negs	r2, r2
 8000fd4:	4323      	orrs	r3, r4
 8000fd6:	2a1b      	cmp	r2, #27
 8000fd8:	dd00      	ble.n	8000fdc <__aeabi_fsub+0x1e8>
 8000fda:	e096      	b.n	800110a <__aeabi_fsub+0x316>
 8000fdc:	001c      	movs	r4, r3
 8000fde:	2520      	movs	r5, #32
 8000fe0:	40d4      	lsrs	r4, r2
 8000fe2:	1aaa      	subs	r2, r5, r2
 8000fe4:	4093      	lsls	r3, r2
 8000fe6:	1e5a      	subs	r2, r3, #1
 8000fe8:	4193      	sbcs	r3, r2
 8000fea:	4323      	orrs	r3, r4
 8000fec:	1af3      	subs	r3, r6, r3
 8000fee:	0004      	movs	r4, r0
 8000ff0:	000d      	movs	r5, r1
 8000ff2:	e72d      	b.n	8000e50 <__aeabi_fsub+0x5c>
 8000ff4:	2f00      	cmp	r7, #0
 8000ff6:	d000      	beq.n	8000ffa <__aeabi_fsub+0x206>
 8000ff8:	e72e      	b.n	8000e58 <__aeabi_fsub+0x64>
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2400      	movs	r4, #0
 8000ffe:	e7a9      	b.n	8000f54 <__aeabi_fsub+0x160>
 8001000:	000c      	movs	r4, r1
 8001002:	e73d      	b.n	8000e80 <__aeabi_fsub+0x8c>
 8001004:	2b00      	cmp	r3, #0
 8001006:	d058      	beq.n	80010ba <__aeabi_fsub+0x2c6>
 8001008:	43d2      	mvns	r2, r2
 800100a:	2a00      	cmp	r2, #0
 800100c:	d0ee      	beq.n	8000fec <__aeabi_fsub+0x1f8>
 800100e:	28ff      	cmp	r0, #255	; 0xff
 8001010:	d1e1      	bne.n	8000fd6 <__aeabi_fsub+0x1e2>
 8001012:	0033      	movs	r3, r6
 8001014:	24ff      	movs	r4, #255	; 0xff
 8001016:	000d      	movs	r5, r1
 8001018:	e732      	b.n	8000e80 <__aeabi_fsub+0x8c>
 800101a:	29ff      	cmp	r1, #255	; 0xff
 800101c:	d010      	beq.n	8001040 <__aeabi_fsub+0x24c>
 800101e:	0001      	movs	r1, r0
 8001020:	e778      	b.n	8000f14 <__aeabi_fsub+0x120>
 8001022:	2b00      	cmp	r3, #0
 8001024:	d06e      	beq.n	8001104 <__aeabi_fsub+0x310>
 8001026:	24ff      	movs	r4, #255	; 0xff
 8001028:	2e00      	cmp	r6, #0
 800102a:	d100      	bne.n	800102e <__aeabi_fsub+0x23a>
 800102c:	e728      	b.n	8000e80 <__aeabi_fsub+0x8c>
 800102e:	2280      	movs	r2, #128	; 0x80
 8001030:	4651      	mov	r1, sl
 8001032:	03d2      	lsls	r2, r2, #15
 8001034:	4211      	tst	r1, r2
 8001036:	d003      	beq.n	8001040 <__aeabi_fsub+0x24c>
 8001038:	4661      	mov	r1, ip
 800103a:	4211      	tst	r1, r2
 800103c:	d100      	bne.n	8001040 <__aeabi_fsub+0x24c>
 800103e:	0033      	movs	r3, r6
 8001040:	24ff      	movs	r4, #255	; 0xff
 8001042:	e71d      	b.n	8000e80 <__aeabi_fsub+0x8c>
 8001044:	24ff      	movs	r4, #255	; 0xff
 8001046:	2300      	movs	r3, #0
 8001048:	e72c      	b.n	8000ea4 <__aeabi_fsub+0xb0>
 800104a:	2c00      	cmp	r4, #0
 800104c:	d1e9      	bne.n	8001022 <__aeabi_fsub+0x22e>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d063      	beq.n	800111a <__aeabi_fsub+0x326>
 8001052:	2e00      	cmp	r6, #0
 8001054:	d100      	bne.n	8001058 <__aeabi_fsub+0x264>
 8001056:	e713      	b.n	8000e80 <__aeabi_fsub+0x8c>
 8001058:	199b      	adds	r3, r3, r6
 800105a:	015a      	lsls	r2, r3, #5
 800105c:	d400      	bmi.n	8001060 <__aeabi_fsub+0x26c>
 800105e:	e73e      	b.n	8000ede <__aeabi_fsub+0xea>
 8001060:	4a31      	ldr	r2, [pc, #196]	; (8001128 <__aeabi_fsub+0x334>)
 8001062:	000c      	movs	r4, r1
 8001064:	4013      	ands	r3, r2
 8001066:	e70b      	b.n	8000e80 <__aeabi_fsub+0x8c>
 8001068:	2c00      	cmp	r4, #0
 800106a:	d11e      	bne.n	80010aa <__aeabi_fsub+0x2b6>
 800106c:	2b00      	cmp	r3, #0
 800106e:	d12f      	bne.n	80010d0 <__aeabi_fsub+0x2dc>
 8001070:	2e00      	cmp	r6, #0
 8001072:	d04f      	beq.n	8001114 <__aeabi_fsub+0x320>
 8001074:	0033      	movs	r3, r6
 8001076:	000d      	movs	r5, r1
 8001078:	e702      	b.n	8000e80 <__aeabi_fsub+0x8c>
 800107a:	2601      	movs	r6, #1
 800107c:	e755      	b.n	8000f2a <__aeabi_fsub+0x136>
 800107e:	2c00      	cmp	r4, #0
 8001080:	d11f      	bne.n	80010c2 <__aeabi_fsub+0x2ce>
 8001082:	2b00      	cmp	r3, #0
 8001084:	d043      	beq.n	800110e <__aeabi_fsub+0x31a>
 8001086:	43c9      	mvns	r1, r1
 8001088:	2900      	cmp	r1, #0
 800108a:	d00b      	beq.n	80010a4 <__aeabi_fsub+0x2b0>
 800108c:	28ff      	cmp	r0, #255	; 0xff
 800108e:	d039      	beq.n	8001104 <__aeabi_fsub+0x310>
 8001090:	291b      	cmp	r1, #27
 8001092:	dc44      	bgt.n	800111e <__aeabi_fsub+0x32a>
 8001094:	001c      	movs	r4, r3
 8001096:	2720      	movs	r7, #32
 8001098:	40cc      	lsrs	r4, r1
 800109a:	1a79      	subs	r1, r7, r1
 800109c:	408b      	lsls	r3, r1
 800109e:	1e59      	subs	r1, r3, #1
 80010a0:	418b      	sbcs	r3, r1
 80010a2:	4323      	orrs	r3, r4
 80010a4:	199b      	adds	r3, r3, r6
 80010a6:	0004      	movs	r4, r0
 80010a8:	e740      	b.n	8000f2c <__aeabi_fsub+0x138>
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d11a      	bne.n	80010e4 <__aeabi_fsub+0x2f0>
 80010ae:	2e00      	cmp	r6, #0
 80010b0:	d124      	bne.n	80010fc <__aeabi_fsub+0x308>
 80010b2:	2780      	movs	r7, #128	; 0x80
 80010b4:	2200      	movs	r2, #0
 80010b6:	03ff      	lsls	r7, r7, #15
 80010b8:	e71b      	b.n	8000ef2 <__aeabi_fsub+0xfe>
 80010ba:	0033      	movs	r3, r6
 80010bc:	0004      	movs	r4, r0
 80010be:	000d      	movs	r5, r1
 80010c0:	e6de      	b.n	8000e80 <__aeabi_fsub+0x8c>
 80010c2:	28ff      	cmp	r0, #255	; 0xff
 80010c4:	d01e      	beq.n	8001104 <__aeabi_fsub+0x310>
 80010c6:	2480      	movs	r4, #128	; 0x80
 80010c8:	04e4      	lsls	r4, r4, #19
 80010ca:	4249      	negs	r1, r1
 80010cc:	4323      	orrs	r3, r4
 80010ce:	e7df      	b.n	8001090 <__aeabi_fsub+0x29c>
 80010d0:	2e00      	cmp	r6, #0
 80010d2:	d100      	bne.n	80010d6 <__aeabi_fsub+0x2e2>
 80010d4:	e6d4      	b.n	8000e80 <__aeabi_fsub+0x8c>
 80010d6:	1b9f      	subs	r7, r3, r6
 80010d8:	017a      	lsls	r2, r7, #5
 80010da:	d400      	bmi.n	80010de <__aeabi_fsub+0x2ea>
 80010dc:	e737      	b.n	8000f4e <__aeabi_fsub+0x15a>
 80010de:	1af3      	subs	r3, r6, r3
 80010e0:	000d      	movs	r5, r1
 80010e2:	e6cd      	b.n	8000e80 <__aeabi_fsub+0x8c>
 80010e4:	24ff      	movs	r4, #255	; 0xff
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x2f8>
 80010ea:	e6c9      	b.n	8000e80 <__aeabi_fsub+0x8c>
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	4650      	mov	r0, sl
 80010f0:	03d2      	lsls	r2, r2, #15
 80010f2:	4210      	tst	r0, r2
 80010f4:	d0a4      	beq.n	8001040 <__aeabi_fsub+0x24c>
 80010f6:	4660      	mov	r0, ip
 80010f8:	4210      	tst	r0, r2
 80010fa:	d1a1      	bne.n	8001040 <__aeabi_fsub+0x24c>
 80010fc:	0033      	movs	r3, r6
 80010fe:	000d      	movs	r5, r1
 8001100:	24ff      	movs	r4, #255	; 0xff
 8001102:	e6bd      	b.n	8000e80 <__aeabi_fsub+0x8c>
 8001104:	0033      	movs	r3, r6
 8001106:	24ff      	movs	r4, #255	; 0xff
 8001108:	e6ba      	b.n	8000e80 <__aeabi_fsub+0x8c>
 800110a:	2301      	movs	r3, #1
 800110c:	e76e      	b.n	8000fec <__aeabi_fsub+0x1f8>
 800110e:	0033      	movs	r3, r6
 8001110:	0004      	movs	r4, r0
 8001112:	e6b5      	b.n	8000e80 <__aeabi_fsub+0x8c>
 8001114:	2700      	movs	r7, #0
 8001116:	2200      	movs	r2, #0
 8001118:	e71c      	b.n	8000f54 <__aeabi_fsub+0x160>
 800111a:	0033      	movs	r3, r6
 800111c:	e6b0      	b.n	8000e80 <__aeabi_fsub+0x8c>
 800111e:	2301      	movs	r3, #1
 8001120:	e7c0      	b.n	80010a4 <__aeabi_fsub+0x2b0>
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	7dffffff 	.word	0x7dffffff
 8001128:	fbffffff 	.word	0xfbffffff

0800112c <__aeabi_f2iz>:
 800112c:	0241      	lsls	r1, r0, #9
 800112e:	0043      	lsls	r3, r0, #1
 8001130:	0fc2      	lsrs	r2, r0, #31
 8001132:	0a49      	lsrs	r1, r1, #9
 8001134:	0e1b      	lsrs	r3, r3, #24
 8001136:	2000      	movs	r0, #0
 8001138:	2b7e      	cmp	r3, #126	; 0x7e
 800113a:	dd0d      	ble.n	8001158 <__aeabi_f2iz+0x2c>
 800113c:	2b9d      	cmp	r3, #157	; 0x9d
 800113e:	dc0c      	bgt.n	800115a <__aeabi_f2iz+0x2e>
 8001140:	2080      	movs	r0, #128	; 0x80
 8001142:	0400      	lsls	r0, r0, #16
 8001144:	4301      	orrs	r1, r0
 8001146:	2b95      	cmp	r3, #149	; 0x95
 8001148:	dc0a      	bgt.n	8001160 <__aeabi_f2iz+0x34>
 800114a:	2096      	movs	r0, #150	; 0x96
 800114c:	1ac3      	subs	r3, r0, r3
 800114e:	40d9      	lsrs	r1, r3
 8001150:	4248      	negs	r0, r1
 8001152:	2a00      	cmp	r2, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_f2iz+0x2c>
 8001156:	0008      	movs	r0, r1
 8001158:	4770      	bx	lr
 800115a:	4b03      	ldr	r3, [pc, #12]	; (8001168 <__aeabi_f2iz+0x3c>)
 800115c:	18d0      	adds	r0, r2, r3
 800115e:	e7fb      	b.n	8001158 <__aeabi_f2iz+0x2c>
 8001160:	3b96      	subs	r3, #150	; 0x96
 8001162:	4099      	lsls	r1, r3
 8001164:	e7f4      	b.n	8001150 <__aeabi_f2iz+0x24>
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	7fffffff 	.word	0x7fffffff

0800116c <__aeabi_i2f>:
 800116c:	b570      	push	{r4, r5, r6, lr}
 800116e:	2800      	cmp	r0, #0
 8001170:	d030      	beq.n	80011d4 <__aeabi_i2f+0x68>
 8001172:	17c3      	asrs	r3, r0, #31
 8001174:	18c4      	adds	r4, r0, r3
 8001176:	405c      	eors	r4, r3
 8001178:	0fc5      	lsrs	r5, r0, #31
 800117a:	0020      	movs	r0, r4
 800117c:	f000 f88c 	bl	8001298 <__clzsi2>
 8001180:	239e      	movs	r3, #158	; 0x9e
 8001182:	1a1b      	subs	r3, r3, r0
 8001184:	2b96      	cmp	r3, #150	; 0x96
 8001186:	dc0d      	bgt.n	80011a4 <__aeabi_i2f+0x38>
 8001188:	2296      	movs	r2, #150	; 0x96
 800118a:	1ad2      	subs	r2, r2, r3
 800118c:	4094      	lsls	r4, r2
 800118e:	002a      	movs	r2, r5
 8001190:	0264      	lsls	r4, r4, #9
 8001192:	0a64      	lsrs	r4, r4, #9
 8001194:	b2db      	uxtb	r3, r3
 8001196:	0264      	lsls	r4, r4, #9
 8001198:	05db      	lsls	r3, r3, #23
 800119a:	0a60      	lsrs	r0, r4, #9
 800119c:	07d2      	lsls	r2, r2, #31
 800119e:	4318      	orrs	r0, r3
 80011a0:	4310      	orrs	r0, r2
 80011a2:	bd70      	pop	{r4, r5, r6, pc}
 80011a4:	2b99      	cmp	r3, #153	; 0x99
 80011a6:	dc19      	bgt.n	80011dc <__aeabi_i2f+0x70>
 80011a8:	2299      	movs	r2, #153	; 0x99
 80011aa:	1ad2      	subs	r2, r2, r3
 80011ac:	2a00      	cmp	r2, #0
 80011ae:	dd29      	ble.n	8001204 <__aeabi_i2f+0x98>
 80011b0:	4094      	lsls	r4, r2
 80011b2:	0022      	movs	r2, r4
 80011b4:	4c14      	ldr	r4, [pc, #80]	; (8001208 <__aeabi_i2f+0x9c>)
 80011b6:	4014      	ands	r4, r2
 80011b8:	0751      	lsls	r1, r2, #29
 80011ba:	d004      	beq.n	80011c6 <__aeabi_i2f+0x5a>
 80011bc:	210f      	movs	r1, #15
 80011be:	400a      	ands	r2, r1
 80011c0:	2a04      	cmp	r2, #4
 80011c2:	d000      	beq.n	80011c6 <__aeabi_i2f+0x5a>
 80011c4:	3404      	adds	r4, #4
 80011c6:	0162      	lsls	r2, r4, #5
 80011c8:	d413      	bmi.n	80011f2 <__aeabi_i2f+0x86>
 80011ca:	01a4      	lsls	r4, r4, #6
 80011cc:	0a64      	lsrs	r4, r4, #9
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	002a      	movs	r2, r5
 80011d2:	e7e0      	b.n	8001196 <__aeabi_i2f+0x2a>
 80011d4:	2200      	movs	r2, #0
 80011d6:	2300      	movs	r3, #0
 80011d8:	2400      	movs	r4, #0
 80011da:	e7dc      	b.n	8001196 <__aeabi_i2f+0x2a>
 80011dc:	2205      	movs	r2, #5
 80011de:	0021      	movs	r1, r4
 80011e0:	1a12      	subs	r2, r2, r0
 80011e2:	40d1      	lsrs	r1, r2
 80011e4:	22b9      	movs	r2, #185	; 0xb9
 80011e6:	1ad2      	subs	r2, r2, r3
 80011e8:	4094      	lsls	r4, r2
 80011ea:	1e62      	subs	r2, r4, #1
 80011ec:	4194      	sbcs	r4, r2
 80011ee:	430c      	orrs	r4, r1
 80011f0:	e7da      	b.n	80011a8 <__aeabi_i2f+0x3c>
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <__aeabi_i2f+0x9c>)
 80011f4:	002a      	movs	r2, r5
 80011f6:	401c      	ands	r4, r3
 80011f8:	239f      	movs	r3, #159	; 0x9f
 80011fa:	01a4      	lsls	r4, r4, #6
 80011fc:	1a1b      	subs	r3, r3, r0
 80011fe:	0a64      	lsrs	r4, r4, #9
 8001200:	b2db      	uxtb	r3, r3
 8001202:	e7c8      	b.n	8001196 <__aeabi_i2f+0x2a>
 8001204:	0022      	movs	r2, r4
 8001206:	e7d5      	b.n	80011b4 <__aeabi_i2f+0x48>
 8001208:	fbffffff 	.word	0xfbffffff

0800120c <__aeabi_ui2f>:
 800120c:	b510      	push	{r4, lr}
 800120e:	1e04      	subs	r4, r0, #0
 8001210:	d027      	beq.n	8001262 <__aeabi_ui2f+0x56>
 8001212:	f000 f841 	bl	8001298 <__clzsi2>
 8001216:	239e      	movs	r3, #158	; 0x9e
 8001218:	1a1b      	subs	r3, r3, r0
 800121a:	2b96      	cmp	r3, #150	; 0x96
 800121c:	dc0a      	bgt.n	8001234 <__aeabi_ui2f+0x28>
 800121e:	2296      	movs	r2, #150	; 0x96
 8001220:	1ad2      	subs	r2, r2, r3
 8001222:	4094      	lsls	r4, r2
 8001224:	0264      	lsls	r4, r4, #9
 8001226:	0a64      	lsrs	r4, r4, #9
 8001228:	b2db      	uxtb	r3, r3
 800122a:	0264      	lsls	r4, r4, #9
 800122c:	05db      	lsls	r3, r3, #23
 800122e:	0a60      	lsrs	r0, r4, #9
 8001230:	4318      	orrs	r0, r3
 8001232:	bd10      	pop	{r4, pc}
 8001234:	2b99      	cmp	r3, #153	; 0x99
 8001236:	dc17      	bgt.n	8001268 <__aeabi_ui2f+0x5c>
 8001238:	2299      	movs	r2, #153	; 0x99
 800123a:	1ad2      	subs	r2, r2, r3
 800123c:	2a00      	cmp	r2, #0
 800123e:	dd27      	ble.n	8001290 <__aeabi_ui2f+0x84>
 8001240:	4094      	lsls	r4, r2
 8001242:	0022      	movs	r2, r4
 8001244:	4c13      	ldr	r4, [pc, #76]	; (8001294 <__aeabi_ui2f+0x88>)
 8001246:	4014      	ands	r4, r2
 8001248:	0751      	lsls	r1, r2, #29
 800124a:	d004      	beq.n	8001256 <__aeabi_ui2f+0x4a>
 800124c:	210f      	movs	r1, #15
 800124e:	400a      	ands	r2, r1
 8001250:	2a04      	cmp	r2, #4
 8001252:	d000      	beq.n	8001256 <__aeabi_ui2f+0x4a>
 8001254:	3404      	adds	r4, #4
 8001256:	0162      	lsls	r2, r4, #5
 8001258:	d412      	bmi.n	8001280 <__aeabi_ui2f+0x74>
 800125a:	01a4      	lsls	r4, r4, #6
 800125c:	0a64      	lsrs	r4, r4, #9
 800125e:	b2db      	uxtb	r3, r3
 8001260:	e7e3      	b.n	800122a <__aeabi_ui2f+0x1e>
 8001262:	2300      	movs	r3, #0
 8001264:	2400      	movs	r4, #0
 8001266:	e7e0      	b.n	800122a <__aeabi_ui2f+0x1e>
 8001268:	22b9      	movs	r2, #185	; 0xb9
 800126a:	0021      	movs	r1, r4
 800126c:	1ad2      	subs	r2, r2, r3
 800126e:	4091      	lsls	r1, r2
 8001270:	000a      	movs	r2, r1
 8001272:	1e51      	subs	r1, r2, #1
 8001274:	418a      	sbcs	r2, r1
 8001276:	2105      	movs	r1, #5
 8001278:	1a09      	subs	r1, r1, r0
 800127a:	40cc      	lsrs	r4, r1
 800127c:	4314      	orrs	r4, r2
 800127e:	e7db      	b.n	8001238 <__aeabi_ui2f+0x2c>
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <__aeabi_ui2f+0x88>)
 8001282:	401c      	ands	r4, r3
 8001284:	239f      	movs	r3, #159	; 0x9f
 8001286:	01a4      	lsls	r4, r4, #6
 8001288:	1a1b      	subs	r3, r3, r0
 800128a:	0a64      	lsrs	r4, r4, #9
 800128c:	b2db      	uxtb	r3, r3
 800128e:	e7cc      	b.n	800122a <__aeabi_ui2f+0x1e>
 8001290:	0022      	movs	r2, r4
 8001292:	e7d7      	b.n	8001244 <__aeabi_ui2f+0x38>
 8001294:	fbffffff 	.word	0xfbffffff

08001298 <__clzsi2>:
 8001298:	211c      	movs	r1, #28
 800129a:	2301      	movs	r3, #1
 800129c:	041b      	lsls	r3, r3, #16
 800129e:	4298      	cmp	r0, r3
 80012a0:	d301      	bcc.n	80012a6 <__clzsi2+0xe>
 80012a2:	0c00      	lsrs	r0, r0, #16
 80012a4:	3910      	subs	r1, #16
 80012a6:	0a1b      	lsrs	r3, r3, #8
 80012a8:	4298      	cmp	r0, r3
 80012aa:	d301      	bcc.n	80012b0 <__clzsi2+0x18>
 80012ac:	0a00      	lsrs	r0, r0, #8
 80012ae:	3908      	subs	r1, #8
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	4298      	cmp	r0, r3
 80012b4:	d301      	bcc.n	80012ba <__clzsi2+0x22>
 80012b6:	0900      	lsrs	r0, r0, #4
 80012b8:	3904      	subs	r1, #4
 80012ba:	a202      	add	r2, pc, #8	; (adr r2, 80012c4 <__clzsi2+0x2c>)
 80012bc:	5c10      	ldrb	r0, [r2, r0]
 80012be:	1840      	adds	r0, r0, r1
 80012c0:	4770      	bx	lr
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	02020304 	.word	0x02020304
 80012c8:	01010101 	.word	0x01010101
	...

080012d4 <__clzdi2>:
 80012d4:	b510      	push	{r4, lr}
 80012d6:	2900      	cmp	r1, #0
 80012d8:	d103      	bne.n	80012e2 <__clzdi2+0xe>
 80012da:	f7ff ffdd 	bl	8001298 <__clzsi2>
 80012de:	3020      	adds	r0, #32
 80012e0:	e002      	b.n	80012e8 <__clzdi2+0x14>
 80012e2:	1c08      	adds	r0, r1, #0
 80012e4:	f7ff ffd8 	bl	8001298 <__clzsi2>
 80012e8:	bd10      	pop	{r4, pc}
 80012ea:	46c0      	nop			; (mov r8, r8)

080012ec <MX_ADC_Init>:
DMA_HandleTypeDef hdma_adc;

/* ADC init function */

void MX_ADC_Init(void)
{
 80012ec:	b530      	push	{r4, r5, lr}
 80012ee:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80012f0:	220c      	movs	r2, #12
 80012f2:	2100      	movs	r1, #0
 80012f4:	a801      	add	r0, sp, #4
 80012f6:	f005 f80e 	bl	8006316 <memset>
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  //hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012fa:	2204      	movs	r2, #4
  hadc.Instance = ADC1;
 80012fc:	4c1f      	ldr	r4, [pc, #124]	; (800137c <MX_ADC_Init+0x90>)
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <MX_ADC_Init+0x94>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001300:	6162      	str	r2, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001302:	22c2      	movs	r2, #194	; 0xc2
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001304:	2501      	movs	r5, #1
  hadc.Instance = ADC1;
 8001306:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001308:	2300      	movs	r3, #0
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800130a:	32ff      	adds	r2, #255	; 0xff
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = ENABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800130c:	0020      	movs	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800130e:	6063      	str	r3, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001310:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001312:	60e3      	str	r3, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001314:	6125      	str	r5, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001316:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001318:	61e3      	str	r3, [r4, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 800131a:	6225      	str	r5, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800131c:	6263      	str	r3, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800131e:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001320:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001322:	6325      	str	r5, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001324:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001326:	f001 fec7 	bl	80030b8 <HAL_ADC_Init>
 800132a:	2800      	cmp	r0, #0
 800132c:	d001      	beq.n	8001332 <MX_ADC_Init+0x46>
  {
    Error_Handler();
 800132e:	f001 fa43 	bl	80027b8 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	015b      	lsls	r3, r3, #5
 8001336:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001338:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800133a:	a901      	add	r1, sp, #4
 800133c:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 800133e:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001340:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001342:	f002 f925 	bl	8003590 <HAL_ADC_ConfigChannel>
 8001346:	2800      	cmp	r0, #0
 8001348:	d001      	beq.n	800134e <MX_ADC_Init+0x62>
  {
    Error_Handler();
 800134a:	f001 fa35 	bl	80027b8 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800134e:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001350:	a901      	add	r1, sp, #4
 8001352:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 8001354:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001356:	f002 f91b 	bl	8003590 <HAL_ADC_ConfigChannel>
 800135a:	2800      	cmp	r0, #0
 800135c:	d001      	beq.n	8001362 <MX_ADC_Init+0x76>
  {
    Error_Handler();
 800135e:	f001 fa2b 	bl	80027b8 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001362:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001364:	a901      	add	r1, sp, #4
 8001366:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 8001368:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800136a:	f002 f911 	bl	8003590 <HAL_ADC_ConfigChannel>
 800136e:	2800      	cmp	r0, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC_Init+0x8a>
  {
    Error_Handler();
 8001372:	f001 fa21 	bl	80027b8 <Error_Handler>
	  {
		Error_Handler();
	  }
  #endif

}
 8001376:	b005      	add	sp, #20
 8001378:	bd30      	pop	{r4, r5, pc}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	20000368 	.word	0x20000368
 8001380:	40012400 	.word	0x40012400

08001384 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001384:	b570      	push	{r4, r5, r6, lr}
 8001386:	0005      	movs	r5, r0
 8001388:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	2214      	movs	r2, #20
 800138c:	2100      	movs	r1, #0
 800138e:	a803      	add	r0, sp, #12
 8001390:	f004 ffc1 	bl	8006316 <memset>
  if(adcHandle->Instance==ADC1)
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <HAL_ADC_MspInit+0x94>)
 8001396:	682a      	ldr	r2, [r5, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d13b      	bne.n	8001414 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800139c:	2080      	movs	r0, #128	; 0x80
 800139e:	491f      	ldr	r1, [pc, #124]	; (800141c <HAL_ADC_MspInit+0x98>)
 80013a0:	0080      	lsls	r0, r0, #2
 80013a2:	698a      	ldr	r2, [r1, #24]
        /* ADC Init */
        hdma_adc.Instance = DMA1_Channel2;
        hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
        hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
        hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
        hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013a4:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013a6:	4302      	orrs	r2, r0
 80013a8:	618a      	str	r2, [r1, #24]
 80013aa:	698b      	ldr	r3, [r1, #24]
        hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ac:	0076      	lsls	r6, r6, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ae:	4003      	ands	r3, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	694a      	ldr	r2, [r1, #20]
 80013b8:	0280      	lsls	r0, r0, #10
 80013ba:	4302      	orrs	r2, r0
 80013bc:	614a      	str	r2, [r1, #20]
 80013be:	694b      	ldr	r3, [r1, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4003      	ands	r3, r0
 80013c4:	9302      	str	r3, [sp, #8]
 80013c6:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = V_OUT_Pin|C_OUT_Pin|DC_FEEDBACK_Pin;
 80013ca:	2326      	movs	r3, #38	; 0x26
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = V_OUT_Pin|C_OUT_Pin|DC_FEEDBACK_Pin;
 80013ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d0:	3b23      	subs	r3, #35	; 0x23
 80013d2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f002 fd84 	bl	8003ee0 <HAL_GPIO_Init>
        hdma_adc.Instance = DMA1_Channel2;
 80013d8:	4c11      	ldr	r4, [pc, #68]	; (8001420 <HAL_ADC_MspInit+0x9c>)
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_ADC_MspInit+0xa0>)
        hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
        hdma_adc.Init.Mode = DMA_CIRCULAR;
        hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
        if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80013dc:	0020      	movs	r0, r4
        hdma_adc.Instance = DMA1_Channel2;
 80013de:	6023      	str	r3, [r4, #0]
        hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013e0:	2300      	movs	r3, #0
 80013e2:	6063      	str	r3, [r4, #4]
        hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e4:	60a3      	str	r3, [r4, #8]
        hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80013e6:	3380      	adds	r3, #128	; 0x80
 80013e8:	60e3      	str	r3, [r4, #12]
        hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	6163      	str	r3, [r4, #20]
        hdma_adc.Init.Mode = DMA_CIRCULAR;
 80013f0:	2320      	movs	r3, #32
 80013f2:	61a3      	str	r3, [r4, #24]
        hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	015b      	lsls	r3, r3, #5
        hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013f8:	6126      	str	r6, [r4, #16]
        hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013fa:	61e3      	str	r3, [r4, #28]
        if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80013fc:	f002 fa38 	bl	8003870 <HAL_DMA_Init>
 8001400:	2800      	cmp	r0, #0
 8001402:	d001      	beq.n	8001408 <HAL_ADC_MspInit+0x84>
        {
          Error_Handler();
 8001404:	f001 f9d8 	bl	80027b8 <Error_Handler>
        }

        __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_ADC_DMA_CH2);
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_ADC_MspInit+0xa4>)
 800140a:	6813      	ldr	r3, [r2, #0]
 800140c:	4333      	orrs	r3, r6
 800140e:	6013      	str	r3, [r2, #0]

        __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8001410:	63ec      	str	r4, [r5, #60]	; 0x3c
 8001412:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001414:	b008      	add	sp, #32
 8001416:	bd70      	pop	{r4, r5, r6, pc}
 8001418:	40012400 	.word	0x40012400
 800141c:	40021000 	.word	0x40021000
 8001420:	20000324 	.word	0x20000324
 8001424:	4002001c 	.word	0x4002001c
 8001428:	40010000 	.word	0x40010000

0800142c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800142c:	b510      	push	{r4, lr}

  hcrc.Instance = CRC;
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_CRC_Init+0x34>)
 8001430:	4c0c      	ldr	r4, [pc, #48]	; (8001464 <MX_CRC_Init+0x38>)
 8001432:	6023      	str	r3, [r4, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001434:	2300      	movs	r3, #0
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001436:	0020      	movs	r0, r4
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001438:	7123      	strb	r3, [r4, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800143a:	7163      	strb	r3, [r4, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800143c:	6163      	str	r3, [r4, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800143e:	61a3      	str	r3, [r4, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001440:	3301      	adds	r3, #1
 8001442:	6223      	str	r3, [r4, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001444:	f002 f9b8 	bl	80037b8 <HAL_CRC_Init>
 8001448:	2800      	cmp	r0, #0
 800144a:	d001      	beq.n	8001450 <MX_CRC_Init+0x24>
  {
    Error_Handler();
 800144c:	f001 f9b4 	bl	80027b8 <Error_Handler>
  }
  if (HAL_CRCEx_Init(&hcrc) != HAL_OK)
 8001450:	0020      	movs	r0, r4
 8001452:	f002 fa0b 	bl	800386c <HAL_CRCEx_Init>
 8001456:	2800      	cmp	r0, #0
 8001458:	d001      	beq.n	800145e <MX_CRC_Init+0x32>
  {
    Error_Handler();
 800145a:	f001 f9ad 	bl	80027b8 <Error_Handler>
  }

}
 800145e:	bd10      	pop	{r4, pc}
 8001460:	40023000 	.word	0x40023000
 8001464:	200003b4 	.word	0x200003b4

08001468 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <HAL_CRC_MspInit+0x20>)
 800146a:	6802      	ldr	r2, [r0, #0]
{
 800146c:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 800146e:	429a      	cmp	r2, r3
 8001470:	d108      	bne.n	8001484 <HAL_CRC_MspInit+0x1c>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001472:	2040      	movs	r0, #64	; 0x40
 8001474:	4a05      	ldr	r2, [pc, #20]	; (800148c <HAL_CRC_MspInit+0x24>)
 8001476:	6951      	ldr	r1, [r2, #20]
 8001478:	4301      	orrs	r1, r0
 800147a:	6151      	str	r1, [r2, #20]
 800147c:	6953      	ldr	r3, [r2, #20]
 800147e:	4003      	ands	r3, r0
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001484:	b002      	add	sp, #8
 8001486:	4770      	bx	lr
 8001488:	40023000 	.word	0x40023000
 800148c:	40021000 	.word	0x40021000

08001490 <StartADC>:
#endif

// ************** ADC SECTION ************** //
//uint32_t adc_cnt1=0;

void StartADC(){
 8001490:	b510      	push	{r4, lr}
	//HAL_ADC_Start_IT(&hadc);
	//ADC->CCR |= ADC_CCR_TSEN | ADC_CCR_VREFEN;
	HAL_ADC_Start_DMA(&hadc,(uint32_t*) &ADC_Data,ADC_ChannelCnt);
 8001492:	2203      	movs	r2, #3
 8001494:	4902      	ldr	r1, [pc, #8]	; (80014a0 <StartADC+0x10>)
 8001496:	4803      	ldr	r0, [pc, #12]	; (80014a4 <StartADC+0x14>)
 8001498:	f001 ff42 	bl	8003320 <HAL_ADC_Start_DMA>
}
 800149c:	bd10      	pop	{r4, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	200003e4 	.word	0x200003e4
 80014a4:	20000368 	.word	0x20000368

080014a8 <ResetV_data>:

//******* ADC **********//

//******* AMPLITUDE **********//
void ResetV_data() {
	 V_1=0;
 80014a8:	2300      	movs	r3, #0
	 V_Cnt[1]=1;
	 V_Cnt[2]=1;
	 V_Cnt[3]=1;

	 V_Out_Cnt=1;
	 V_Out_RawData=0;
 80014aa:	2000      	movs	r0, #0
 80014ac:	2100      	movs	r1, #0
	 V_1=0;
 80014ae:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <ResetV_data+0x38>)
 80014b0:	6013      	str	r3, [r2, #0]
	 V_2=0;
 80014b2:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <ResetV_data+0x3c>)
 80014b4:	6013      	str	r3, [r2, #0]
	 V_3=0;
 80014b6:	4a0c      	ldr	r2, [pc, #48]	; (80014e8 <ResetV_data+0x40>)
 80014b8:	6013      	str	r3, [r2, #0]
	 V_4=0;
 80014ba:	4a0c      	ldr	r2, [pc, #48]	; (80014ec <ResetV_data+0x44>)
 80014bc:	6013      	str	r3, [r2, #0]
	 V_Cnt[0]=1;
 80014be:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <ResetV_data+0x48>)
 80014c0:	3301      	adds	r3, #1
 80014c2:	6013      	str	r3, [r2, #0]
	 V_Cnt[1]=1;
 80014c4:	6053      	str	r3, [r2, #4]
	 V_Cnt[2]=1;
 80014c6:	6093      	str	r3, [r2, #8]
	 V_Cnt[3]=1;
 80014c8:	60d3      	str	r3, [r2, #12]
	 V_Out_Cnt=1;
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <ResetV_data+0x4c>)
 80014cc:	6013      	str	r3, [r2, #0]
	 V_Out_RawData=0;
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <ResetV_data+0x50>)
 80014d0:	6010      	str	r0, [r2, #0]
 80014d2:	6051      	str	r1, [r2, #4]

	 I_Out_Cnt=1;
 80014d4:	4a09      	ldr	r2, [pc, #36]	; (80014fc <ResetV_data+0x54>)
 80014d6:	6013      	str	r3, [r2, #0]
	 I_Out_RawData=0;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <ResetV_data+0x58>)
 80014da:	6018      	str	r0, [r3, #0]
 80014dc:	6059      	str	r1, [r3, #4]

	#ifdef DC_PROTECTION
	 	 DC_Data=0;
	 	 DC_DataCnt=0;
	#endif
}
 80014de:	4770      	bx	lr
 80014e0:	20000028 	.word	0x20000028
 80014e4:	2000002c 	.word	0x2000002c
 80014e8:	20000030 	.word	0x20000030
 80014ec:	20000034 	.word	0x20000034
 80014f0:	20000038 	.word	0x20000038
 80014f4:	20000048 	.word	0x20000048
 80014f8:	200002e0 	.word	0x200002e0
 80014fc:	20000000 	.word	0x20000000
 8001500:	200002d0 	.word	0x200002d0

08001504 <CalcNewAmp>:
	}
	return Value;
	//
}

float CalcNewAmp(uint32_t V_curr, uint32_t V_etalon) {
 8001504:	b510      	push	{r4, lr}
	float fRes=1;
	if (V_curr>V_etalon) {
 8001506:	4288      	cmp	r0, r1
 8001508:	d924      	bls.n	8001554 <CalcNewAmp+0x50>
		fRes=fRes+(float)((V_curr-V_etalon)*Amp_CoefPlus);
 800150a:	1a40      	subs	r0, r0, r1
 800150c:	f7ff fe7e 	bl	800120c <__aeabi_ui2f>
 8001510:	4914      	ldr	r1, [pc, #80]	; (8001564 <CalcNewAmp+0x60>)
 8001512:	f7ff fb4f 	bl	8000bb4 <__aeabi_fmul>
 8001516:	21fe      	movs	r1, #254	; 0xfe
 8001518:	0589      	lsls	r1, r1, #22
 800151a:	f7fe ffc9 	bl	80004b0 <__aeabi_fadd>
	}
	if (V_curr<V_etalon) {
		fRes=fRes-(float)((V_etalon-V_curr)*Amp_CoefMinus);
	}

	if (fRes>Amp_max) {
 800151e:	4912      	ldr	r1, [pc, #72]	; (8001568 <CalcNewAmp+0x64>)
		fRes=fRes-(float)((V_etalon-V_curr)*Amp_CoefMinus);
 8001520:	1c04      	adds	r4, r0, #0
	if (fRes>Amp_max) {
 8001522:	f7fe feb9 	bl	8000298 <__aeabi_fcmpgt>
 8001526:	2800      	cmp	r0, #0
 8001528:	d119      	bne.n	800155e <CalcNewAmp+0x5a>
		fRes=Amp_max;
	}
	if (fRes<Amp_min) {
 800152a:	4910      	ldr	r1, [pc, #64]	; (800156c <CalcNewAmp+0x68>)
 800152c:	1c20      	adds	r0, r4, #0
 800152e:	f7fe fe9f 	bl	8000270 <__aeabi_fcmplt>
 8001532:	2800      	cmp	r0, #0
 8001534:	d000      	beq.n	8001538 <CalcNewAmp+0x34>
		fRes=Amp_min;
 8001536:	4c0d      	ldr	r4, [pc, #52]	; (800156c <CalcNewAmp+0x68>)
	}

	return fRes;
}
 8001538:	1c20      	adds	r0, r4, #0
 800153a:	bd10      	pop	{r4, pc}
		fRes=fRes-(float)((V_etalon-V_curr)*Amp_CoefMinus);
 800153c:	1a08      	subs	r0, r1, r0
 800153e:	f7ff fe65 	bl	800120c <__aeabi_ui2f>
 8001542:	4908      	ldr	r1, [pc, #32]	; (8001564 <CalcNewAmp+0x60>)
 8001544:	f7ff fb36 	bl	8000bb4 <__aeabi_fmul>
 8001548:	1c01      	adds	r1, r0, #0
 800154a:	20fe      	movs	r0, #254	; 0xfe
 800154c:	0580      	lsls	r0, r0, #22
 800154e:	f7ff fc51 	bl	8000df4 <__aeabi_fsub>
 8001552:	e7e4      	b.n	800151e <CalcNewAmp+0x1a>
	if (V_curr<V_etalon) {
 8001554:	4288      	cmp	r0, r1
 8001556:	d3f1      	bcc.n	800153c <CalcNewAmp+0x38>
	float fRes=1;
 8001558:	24fe      	movs	r4, #254	; 0xfe
 800155a:	05a4      	lsls	r4, r4, #22
 800155c:	e7ec      	b.n	8001538 <CalcNewAmp+0x34>
		fRes=Amp_max;
 800155e:	4c02      	ldr	r4, [pc, #8]	; (8001568 <CalcNewAmp+0x64>)
 8001560:	e7ea      	b.n	8001538 <CalcNewAmp+0x34>
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	3999999a 	.word	0x3999999a
 8001568:	3fcccccd 	.word	0x3fcccccd
 800156c:	3ecccccd 	.word	0x3ecccccd

08001570 <CalcNewAmpByStep>:

#ifdef AMP_CORRECTION_TYPE_STEP
float CalcNewAmpByStep(float CurrAmp, float TargetAmp) {
 8001570:	b570      	push	{r4, r5, r6, lr}
 8001572:	1c05      	adds	r5, r0, #0
 8001574:	1c0c      	adds	r4, r1, #0
	float fRes=CurrAmp;
	if (TargetAmp>CurrAmp) {
 8001576:	f7fe fe7b 	bl	8000270 <__aeabi_fcmplt>
 800157a:	2800      	cmp	r0, #0
 800157c:	d00d      	beq.n	800159a <CalcNewAmpByStep+0x2a>
		fRes=fRes+amp_correction_step;
 800157e:	490f      	ldr	r1, [pc, #60]	; (80015bc <CalcNewAmpByStep+0x4c>)
 8001580:	1c28      	adds	r0, r5, #0
 8001582:	f7fe ff95 	bl	80004b0 <__aeabi_fadd>
 8001586:	1c05      	adds	r5, r0, #0
		if (fRes>=TargetAmp) {
 8001588:	1c01      	adds	r1, r0, #0
 800158a:	1c20      	adds	r0, r4, #0
 800158c:	f7fe fe7a 	bl	8000284 <__aeabi_fcmple>
		}
		return fRes;
	}
	if (TargetAmp<CurrAmp) {
		fRes=fRes-amp_correction_step;
		if (fRes<=TargetAmp) {
 8001590:	2800      	cmp	r0, #0
 8001592:	d100      	bne.n	8001596 <CalcNewAmpByStep+0x26>
			fRes=TargetAmp;
		}
		return fRes;
	}
	return fRes;
 8001594:	1c2c      	adds	r4, r5, #0
}
 8001596:	1c20      	adds	r0, r4, #0
 8001598:	bd70      	pop	{r4, r5, r6, pc}
	if (TargetAmp<CurrAmp) {
 800159a:	1c21      	adds	r1, r4, #0
 800159c:	1c28      	adds	r0, r5, #0
 800159e:	f7fe fe7b 	bl	8000298 <__aeabi_fcmpgt>
 80015a2:	2800      	cmp	r0, #0
 80015a4:	d0f6      	beq.n	8001594 <CalcNewAmpByStep+0x24>
		fRes=fRes-amp_correction_step;
 80015a6:	4905      	ldr	r1, [pc, #20]	; (80015bc <CalcNewAmpByStep+0x4c>)
 80015a8:	1c28      	adds	r0, r5, #0
 80015aa:	f7ff fc23 	bl	8000df4 <__aeabi_fsub>
 80015ae:	1c05      	adds	r5, r0, #0
		if (fRes<=TargetAmp) {
 80015b0:	1c01      	adds	r1, r0, #0
 80015b2:	1c20      	adds	r0, r4, #0
 80015b4:	f7fe fe7a 	bl	80002ac <__aeabi_fcmpge>
 80015b8:	e7ea      	b.n	8001590 <CalcNewAmpByStep+0x20>
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	3bc49ba6 	.word	0x3bc49ba6

080015c0 <asqrt>:
  op = x;
  res = 0;

  /* "one" starts at the highest power of four <= than the argument. */

  one = 1 << 30;	/* second-to-top bit set */
 80015c0:	2380      	movs	r3, #128	; 0x80
uint16_t asqrt(uint32_t x) {
 80015c2:	b510      	push	{r4, lr}
  one = 1 << 30;	/* second-to-top bit set */
 80015c4:	05db      	lsls	r3, r3, #23
  while (one > op) one >>= 2;
 80015c6:	4283      	cmp	r3, r0
 80015c8:	dc05      	bgt.n	80015d6 <asqrt+0x16>
 80015ca:	2200      	movs	r2, #0
    if (op >= res + one) {
      op = op - (res + one);
      res = res +  2 * one;
    }
    res /= 2;
    one /= 4;
 80015cc:	2403      	movs	r4, #3
  while (one != 0) {
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d103      	bne.n	80015da <asqrt+0x1a>
  }
  return (uint16_t) (res);
 80015d2:	b290      	uxth	r0, r2
}
 80015d4:	bd10      	pop	{r4, pc}
  while (one > op) one >>= 2;
 80015d6:	109b      	asrs	r3, r3, #2
 80015d8:	e7f5      	b.n	80015c6 <asqrt+0x6>
    if (op >= res + one) {
 80015da:	18d1      	adds	r1, r2, r3
 80015dc:	4288      	cmp	r0, r1
 80015de:	db01      	blt.n	80015e4 <asqrt+0x24>
      op = op - (res + one);
 80015e0:	1a40      	subs	r0, r0, r1
      res = res +  2 * one;
 80015e2:	185a      	adds	r2, r3, r1
    res /= 2;
 80015e4:	0fd1      	lsrs	r1, r2, #31
 80015e6:	188a      	adds	r2, r1, r2
    one /= 4;
 80015e8:	17d9      	asrs	r1, r3, #31
 80015ea:	4021      	ands	r1, r4
 80015ec:	18cb      	adds	r3, r1, r3
    res /= 2;
 80015ee:	1052      	asrs	r2, r2, #1
    one /= 4;
 80015f0:	109b      	asrs	r3, r3, #2
 80015f2:	e7ec      	b.n	80015ce <asqrt+0xe>

080015f4 <CalcAc_I_ByWave>:
void CalcAc_I_ByWave() {
	// calc AC data for one wave form'
	#ifdef Detect_ZeroI_Point
		ZeroI_point=ADC_Data[1]; // Store last value of V_out via zero point
	#endif
	I_Out = (uint32_t) (I_Out_RawData / I_Out_Cnt);
 80015f4:	4b0d      	ldr	r3, [pc, #52]	; (800162c <CalcAc_I_ByWave+0x38>)
void CalcAc_I_ByWave() {
 80015f6:	b570      	push	{r4, r5, r6, lr}
	I_Out = (uint32_t) (I_Out_RawData / I_Out_Cnt);
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <CalcAc_I_ByWave+0x3c>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	2300      	movs	r3, #0
 8001602:	f7fe fe5d 	bl	80002c0 <__aeabi_uldivmod>
 8001606:	4c0b      	ldr	r4, [pc, #44]	; (8001634 <CalcAc_I_ByWave+0x40>)
 8001608:	6020      	str	r0, [r4, #0]
	I_Out = asqrt(I_Out);
 800160a:	6820      	ldr	r0, [r4, #0]
 800160c:	f7ff ffd8 	bl	80015c0 <asqrt>
	I_Out = (uint32_t) (I_RATIO * I_Out);
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <CalcAc_I_ByWave+0x44>)
	I_Out = asqrt(I_Out);
 8001612:	6020      	str	r0, [r4, #0]
	I_Out = (uint32_t) (I_RATIO * I_Out);
 8001614:	6820      	ldr	r0, [r4, #0]
 8001616:	681d      	ldr	r5, [r3, #0]
 8001618:	f7ff fdf8 	bl	800120c <__aeabi_ui2f>
 800161c:	1c29      	adds	r1, r5, #0
 800161e:	f7ff fac9 	bl	8000bb4 <__aeabi_fmul>
 8001622:	f7fe fe6d 	bl	8000300 <__aeabi_f2uiz>
 8001626:	6020      	str	r0, [r4, #0]
}
 8001628:	bd70      	pop	{r4, r5, r6, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	200002d0 	.word	0x200002d0
 8001630:	20000000 	.word	0x20000000
 8001634:	200002cc 	.word	0x200002cc
 8001638:	20000004 	.word	0x20000004

0800163c <CalcAc_V_ByWave>:
void CalcAc_V_ByWave() {
	// calc AC data for one wave form'
	#ifdef Detect_ZeroV_Point
		ZeroV_point=ADC_Data[0]; // Store last value of V_out via zero point
	#endif
	V_Out = (uint32_t) (V_Out_RawData / V_Out_Cnt);
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <CalcAc_V_ByWave+0x38>)
void CalcAc_V_ByWave() {
 800163e:	b570      	push	{r4, r5, r6, lr}
	V_Out = (uint32_t) (V_Out_RawData / V_Out_Cnt);
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <CalcAc_V_ByWave+0x3c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2300      	movs	r3, #0
 800164a:	f7fe fe39 	bl	80002c0 <__aeabi_uldivmod>
 800164e:	4c0b      	ldr	r4, [pc, #44]	; (800167c <CalcAc_V_ByWave+0x40>)
 8001650:	6020      	str	r0, [r4, #0]
	V_Out = asqrt(V_Out);
 8001652:	6820      	ldr	r0, [r4, #0]
 8001654:	f7ff ffb4 	bl	80015c0 <asqrt>
	V_Out = (uint32_t) (V_RATIO * V_Out);
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <CalcAc_V_ByWave+0x44>)
	V_Out = asqrt(V_Out);
 800165a:	6020      	str	r0, [r4, #0]
	V_Out = (uint32_t) (V_RATIO * V_Out);
 800165c:	6820      	ldr	r0, [r4, #0]
 800165e:	681d      	ldr	r5, [r3, #0]
 8001660:	f7ff fdd4 	bl	800120c <__aeabi_ui2f>
 8001664:	1c29      	adds	r1, r5, #0
 8001666:	f7ff faa5 	bl	8000bb4 <__aeabi_fmul>
 800166a:	f7fe fe49 	bl	8000300 <__aeabi_f2uiz>
 800166e:	6020      	str	r0, [r4, #0]
}
 8001670:	bd70      	pop	{r4, r5, r6, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	200002e0 	.word	0x200002e0
 8001678:	20000048 	.word	0x20000048
 800167c:	200002d8 	.word	0x200002d8
 8001680:	2000004c 	.word	0x2000004c

08001684 <UpdateAmplitudeByV>:
	#ifdef DC_PROTECTION
		 DC_DataAverage=(DC_Data/DC_DataCnt);
	#endif
}

void UpdateAmplitudeByV() {
 8001684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t v1_tmp,v2_tmp,v3_tmp,v4_tmp;
	CalcAc_V_ByWave();
 8001686:	f7ff ffd9 	bl	800163c <CalcAc_V_ByWave>
	CalcAc_I_ByWave();
 800168a:	f7ff ffb3 	bl	80015f4 <CalcAc_I_ByWave>
		V_5=(uint32_t) (V_5/V_Cnt[4]);
		VDDA_Actual=(3300*(*VREFINT_CAL_ADDR))/V_5;
    #endif

	#ifndef USE_VREF_FOR_ADC_CORRECTION
		v1_tmp=(uint32_t) (V_1/V_Cnt[0]);
 800168e:	4b27      	ldr	r3, [pc, #156]	; (800172c <UpdateAmplitudeByV+0xa8>)
 8001690:	4c27      	ldr	r4, [pc, #156]	; (8001730 <UpdateAmplitudeByV+0xac>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6825      	ldr	r5, [r4, #0]
 8001696:	9300      	str	r3, [sp, #0]
		v2_tmp=(uint32_t) (V_2/V_Cnt[1]);
 8001698:	4b26      	ldr	r3, [pc, #152]	; (8001734 <UpdateAmplitudeByV+0xb0>)
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	6861      	ldr	r1, [r4, #4]
 800169e:	f7fe fd3d 	bl	800011c <__udivsi3>
		v3_tmp=(uint32_t) (V_3/V_Cnt[2]);
 80016a2:	4b25      	ldr	r3, [pc, #148]	; (8001738 <UpdateAmplitudeByV+0xb4>)
		v2_tmp=(uint32_t) (V_2/V_Cnt[1]);
 80016a4:	0007      	movs	r7, r0
		v3_tmp=(uint32_t) (V_3/V_Cnt[2]);
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	68a1      	ldr	r1, [r4, #8]
 80016aa:	f7fe fd37 	bl	800011c <__udivsi3>
		v4_tmp=(uint32_t) (V_4/V_Cnt[3]);
 80016ae:	4b23      	ldr	r3, [pc, #140]	; (800173c <UpdateAmplitudeByV+0xb8>)
		v3_tmp=(uint32_t) (V_3/V_Cnt[2]);
 80016b0:	0006      	movs	r6, r0
		v4_tmp=(uint32_t) (V_4/V_Cnt[3]);
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	68e1      	ldr	r1, [r4, #12]
 80016b6:	f7fe fd31 	bl	800011c <__udivsi3>
		Sine_Amplitude_3=CalcNewAmp(v3_tmp,V3_etalon);
		Sine_Amplitude_4=CalcNewAmp(v4_tmp,V4_etalon);
	#endif

	#ifdef AMP_CORRECTION_TYPE_STEP
		amp1_target=CalcNewAmp(v1_tmp,V1_etalon);
 80016ba:	2480      	movs	r4, #128	; 0x80
		v4_tmp=(uint32_t) (V_4/V_Cnt[3]);
 80016bc:	9001      	str	r0, [sp, #4]
		amp1_target=CalcNewAmp(v1_tmp,V1_etalon);
 80016be:	0124      	lsls	r4, r4, #4
		v1_tmp=(uint32_t) (V_1/V_Cnt[0]);
 80016c0:	0029      	movs	r1, r5
 80016c2:	9800      	ldr	r0, [sp, #0]
 80016c4:	f7fe fd2a 	bl	800011c <__udivsi3>
		amp1_target=CalcNewAmp(v1_tmp,V1_etalon);
 80016c8:	0021      	movs	r1, r4
 80016ca:	f7ff ff1b 	bl	8001504 <CalcNewAmp>
 80016ce:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <UpdateAmplitudeByV+0xbc>)
		Sine_Amplitude_1=CalcNewAmpByStep(Sine_Amplitude_1,amp1_target);
 80016d0:	4d1c      	ldr	r5, [pc, #112]	; (8001744 <UpdateAmplitudeByV+0xc0>)
		amp1_target=CalcNewAmp(v1_tmp,V1_etalon);
 80016d2:	6018      	str	r0, [r3, #0]
 80016d4:	1c01      	adds	r1, r0, #0
		Sine_Amplitude_1=CalcNewAmpByStep(Sine_Amplitude_1,amp1_target);
 80016d6:	6828      	ldr	r0, [r5, #0]
 80016d8:	f7ff ff4a 	bl	8001570 <CalcNewAmpByStep>

		amp2_target=CalcNewAmp(v2_tmp,V2_etalon);
 80016dc:	0021      	movs	r1, r4
		Sine_Amplitude_1=CalcNewAmpByStep(Sine_Amplitude_1,amp1_target);
 80016de:	6028      	str	r0, [r5, #0]
		amp2_target=CalcNewAmp(v2_tmp,V2_etalon);
 80016e0:	0038      	movs	r0, r7
 80016e2:	f7ff ff0f 	bl	8001504 <CalcNewAmp>
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <UpdateAmplitudeByV+0xc4>)
		Sine_Amplitude_2=CalcNewAmpByStep(Sine_Amplitude_2,amp2_target);
 80016e8:	4d18      	ldr	r5, [pc, #96]	; (800174c <UpdateAmplitudeByV+0xc8>)
		amp2_target=CalcNewAmp(v2_tmp,V2_etalon);
 80016ea:	6018      	str	r0, [r3, #0]
 80016ec:	1c01      	adds	r1, r0, #0
		Sine_Amplitude_2=CalcNewAmpByStep(Sine_Amplitude_2,amp2_target);
 80016ee:	6828      	ldr	r0, [r5, #0]
 80016f0:	f7ff ff3e 	bl	8001570 <CalcNewAmpByStep>

		amp3_target=CalcNewAmp(v3_tmp,V3_etalon);
 80016f4:	0021      	movs	r1, r4
		Sine_Amplitude_2=CalcNewAmpByStep(Sine_Amplitude_2,amp2_target);
 80016f6:	6028      	str	r0, [r5, #0]
		amp3_target=CalcNewAmp(v3_tmp,V3_etalon);
 80016f8:	0030      	movs	r0, r6
 80016fa:	f7ff ff03 	bl	8001504 <CalcNewAmp>
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <UpdateAmplitudeByV+0xcc>)
		Sine_Amplitude_3=CalcNewAmpByStep(Sine_Amplitude_3,amp3_target);
 8001700:	4d14      	ldr	r5, [pc, #80]	; (8001754 <UpdateAmplitudeByV+0xd0>)
		amp3_target=CalcNewAmp(v3_tmp,V3_etalon);
 8001702:	6018      	str	r0, [r3, #0]
 8001704:	1c01      	adds	r1, r0, #0
		Sine_Amplitude_3=CalcNewAmpByStep(Sine_Amplitude_3,amp3_target);
 8001706:	6828      	ldr	r0, [r5, #0]
 8001708:	f7ff ff32 	bl	8001570 <CalcNewAmpByStep>

		amp4_target=CalcNewAmp(v4_tmp,V4_etalon);
 800170c:	0021      	movs	r1, r4
		Sine_Amplitude_3=CalcNewAmpByStep(Sine_Amplitude_3,amp3_target);
 800170e:	6028      	str	r0, [r5, #0]
		amp4_target=CalcNewAmp(v4_tmp,V4_etalon);
 8001710:	9801      	ldr	r0, [sp, #4]
 8001712:	f7ff fef7 	bl	8001504 <CalcNewAmp>
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <UpdateAmplitudeByV+0xd4>)
		Sine_Amplitude_4=CalcNewAmpByStep(Sine_Amplitude_4,amp4_target);
 8001718:	4c10      	ldr	r4, [pc, #64]	; (800175c <UpdateAmplitudeByV+0xd8>)
		amp4_target=CalcNewAmp(v4_tmp,V4_etalon);
 800171a:	1c01      	adds	r1, r0, #0
 800171c:	6018      	str	r0, [r3, #0]
		Sine_Amplitude_4=CalcNewAmpByStep(Sine_Amplitude_4,amp4_target);
 800171e:	6820      	ldr	r0, [r4, #0]
 8001720:	f7ff ff26 	bl	8001570 <CalcNewAmpByStep>
 8001724:	6020      	str	r0, [r4, #0]
							IOUT_BLOCKED=1;
						}
				}
	#endif

	ResetV_data();
 8001726:	f7ff febf 	bl	80014a8 <ResetV_data>
}
 800172a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800172c:	20000028 	.word	0x20000028
 8001730:	20000038 	.word	0x20000038
 8001734:	2000002c 	.word	0x2000002c
 8001738:	20000030 	.word	0x20000030
 800173c:	20000034 	.word	0x20000034
 8001740:	20000050 	.word	0x20000050
 8001744:	20000018 	.word	0x20000018
 8001748:	20000054 	.word	0x20000054
 800174c:	2000001c 	.word	0x2000001c
 8001750:	20000058 	.word	0x20000058
 8001754:	20000020 	.word	0x20000020
 8001758:	2000005c 	.word	0x2000005c
 800175c:	20000024 	.word	0x20000024

08001760 <CheckV_Feedback>:

void CheckV_Feedback() {

		///Calc I_out data AC coltage
			I_Out_Cnt++;
 8001760:	4a29      	ldr	r2, [pc, #164]	; (8001808 <CheckV_Feedback+0xa8>)
void CheckV_Feedback() {
 8001762:	b570      	push	{r4, r5, r6, lr}
			I_Out_Cnt++;
 8001764:	6813      	ldr	r3, [r2, #0]
					I_Out_RawData=I_Out_RawData+TempVal*TempVal;
				}
			#endif

			#ifndef Detect_ZeroV_Point
				I_Out_RawData=I_Out_RawData+ADC_Data[1]*ADC_Data[1];
 8001766:	4e29      	ldr	r6, [pc, #164]	; (800180c <CheckV_Feedback+0xac>)
			I_Out_Cnt++;
 8001768:	3301      	adds	r3, #1
 800176a:	6013      	str	r3, [r2, #0]
				I_Out_RawData=I_Out_RawData+ADC_Data[1]*ADC_Data[1];
 800176c:	4a28      	ldr	r2, [pc, #160]	; (8001810 <CheckV_Feedback+0xb0>)
 800176e:	8851      	ldrh	r1, [r2, #2]
 8001770:	8853      	ldrh	r3, [r2, #2]
 8001772:	6834      	ldr	r4, [r6, #0]
 8001774:	6875      	ldr	r5, [r6, #4]
 8001776:	434b      	muls	r3, r1
 8001778:	0018      	movs	r0, r3
 800177a:	17d9      	asrs	r1, r3, #31
 800177c:	1900      	adds	r0, r0, r4
 800177e:	4169      	adcs	r1, r5
 8001780:	6030      	str	r0, [r6, #0]
 8001782:	6071      	str	r1, [r6, #4]

			//


	    //Calc V_out data AC coltage
		V_Out_Cnt++;
 8001784:	4923      	ldr	r1, [pc, #140]	; (8001814 <CheckV_Feedback+0xb4>)
				V_Out_RawData=V_Out_RawData+TempVal*TempVal;
			}
		#endif

		#ifndef Detect_ZeroV_Point
			V_Out_RawData=V_Out_RawData+ADC_Data[0]*ADC_Data[0];
 8001786:	4e24      	ldr	r6, [pc, #144]	; (8001818 <CheckV_Feedback+0xb8>)
		V_Out_Cnt++;
 8001788:	680b      	ldr	r3, [r1, #0]
 800178a:	3301      	adds	r3, #1
 800178c:	600b      	str	r3, [r1, #0]
			V_Out_RawData=V_Out_RawData+ADC_Data[0]*ADC_Data[0];
 800178e:	8811      	ldrh	r1, [r2, #0]
 8001790:	8813      	ldrh	r3, [r2, #0]
 8001792:	6834      	ldr	r4, [r6, #0]
 8001794:	6875      	ldr	r5, [r6, #4]
 8001796:	434b      	muls	r3, r1
 8001798:	0018      	movs	r0, r3
 800179a:	17d9      	asrs	r1, r3, #31
 800179c:	1900      	adds	r0, r0, r4
 800179e:	4169      	adcs	r1, r5
 80017a0:	6030      	str	r0, [r6, #0]
 80017a2:	6071      	str	r1, [r6, #4]
			 DC_Data=DC_Data+ADC_Data[2];
			 DC_DataCnt=DC_DataCnt+1;
		#endif


		if (sin_step>Sin_Amp_ind[2]) {
 80017a4:	481d      	ldr	r0, [pc, #116]	; (800181c <CheckV_Feedback+0xbc>)
 80017a6:	491e      	ldr	r1, [pc, #120]	; (8001820 <CheckV_Feedback+0xc0>)
 80017a8:	8804      	ldrh	r4, [r0, #0]
 80017aa:	688d      	ldr	r5, [r1, #8]
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <CheckV_Feedback+0xc4>)
 80017ae:	42ac      	cmp	r4, r5
 80017b0:	dd08      	ble.n	80017c4 <CheckV_Feedback+0x64>
			V_4=V_4+ADC_Data[0];
 80017b2:	491d      	ldr	r1, [pc, #116]	; (8001828 <CheckV_Feedback+0xc8>)
 80017b4:	8812      	ldrh	r2, [r2, #0]
 80017b6:	6808      	ldr	r0, [r1, #0]
 80017b8:	1812      	adds	r2, r2, r0
 80017ba:	600a      	str	r2, [r1, #0]
			V_Cnt[3]= V_Cnt[3]+1;
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	3201      	adds	r2, #1
 80017c0:	60da      	str	r2, [r3, #12]
		} else {
			V_1=V_1+ADC_Data[0];
			V_Cnt[0]= V_Cnt[0]+1;
			return;
		}
}
 80017c2:	bd70      	pop	{r4, r5, r6, pc}
		if (sin_step>Sin_Amp_ind[1]) {
 80017c4:	8804      	ldrh	r4, [r0, #0]
 80017c6:	684d      	ldr	r5, [r1, #4]
 80017c8:	42ac      	cmp	r4, r5
 80017ca:	dd08      	ble.n	80017de <CheckV_Feedback+0x7e>
			V_3=V_3+ADC_Data[0];
 80017cc:	4917      	ldr	r1, [pc, #92]	; (800182c <CheckV_Feedback+0xcc>)
 80017ce:	8812      	ldrh	r2, [r2, #0]
 80017d0:	6808      	ldr	r0, [r1, #0]
 80017d2:	1812      	adds	r2, r2, r0
 80017d4:	600a      	str	r2, [r1, #0]
			V_Cnt[2]= V_Cnt[2]+1;
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	3201      	adds	r2, #1
 80017da:	609a      	str	r2, [r3, #8]
			return;
 80017dc:	e7f1      	b.n	80017c2 <CheckV_Feedback+0x62>
		if (sin_step>Sin_Amp_ind[0]) {
 80017de:	8800      	ldrh	r0, [r0, #0]
 80017e0:	6809      	ldr	r1, [r1, #0]
			V_2=V_2+ADC_Data[0];
 80017e2:	8812      	ldrh	r2, [r2, #0]
		if (sin_step>Sin_Amp_ind[0]) {
 80017e4:	4288      	cmp	r0, r1
 80017e6:	dd07      	ble.n	80017f8 <CheckV_Feedback+0x98>
			V_2=V_2+ADC_Data[0];
 80017e8:	4911      	ldr	r1, [pc, #68]	; (8001830 <CheckV_Feedback+0xd0>)
 80017ea:	6808      	ldr	r0, [r1, #0]
 80017ec:	1812      	adds	r2, r2, r0
 80017ee:	600a      	str	r2, [r1, #0]
			V_Cnt[1]= V_Cnt[1]+1;
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	3201      	adds	r2, #1
 80017f4:	605a      	str	r2, [r3, #4]
			return;
 80017f6:	e7e4      	b.n	80017c2 <CheckV_Feedback+0x62>
			V_1=V_1+ADC_Data[0];
 80017f8:	490e      	ldr	r1, [pc, #56]	; (8001834 <CheckV_Feedback+0xd4>)
 80017fa:	6808      	ldr	r0, [r1, #0]
 80017fc:	1812      	adds	r2, r2, r0
 80017fe:	600a      	str	r2, [r1, #0]
			V_Cnt[0]= V_Cnt[0]+1;
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	3201      	adds	r2, #1
 8001804:	601a      	str	r2, [r3, #0]
			return;
 8001806:	e7dc      	b.n	80017c2 <CheckV_Feedback+0x62>
 8001808:	20000000 	.word	0x20000000
 800180c:	200002d0 	.word	0x200002d0
 8001810:	200003e4 	.word	0x200003e4
 8001814:	20000048 	.word	0x20000048
 8001818:	200002e0 	.word	0x200002e0
 800181c:	200002ea 	.word	0x200002ea
 8001820:	20000008 	.word	0x20000008
 8001824:	20000038 	.word	0x20000038
 8001828:	20000034 	.word	0x20000034
 800182c:	20000030 	.word	0x20000030
 8001830:	2000002c 	.word	0x2000002c
 8001834:	20000028 	.word	0x20000028

08001838 <TM_CRC_Calculate8>:
button_struct_t CALIB_MODE; // button CALIB CALIB_MODE

volatile int  Re_Update=0;


uint32_t TM_CRC_Calculate8(uint8_t* arr, uint32_t count, uint8_t reset) {
 8001838:	b570      	push	{r4, r5, r6, lr}
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <TM_CRC_Calculate8+0x38>)
	uint32_t cnt;

	/* Reset CRC data register if necessary */
	if (reset) {
 800183c:	2a00      	cmp	r2, #0
 800183e:	d001      	beq.n	8001844 <TM_CRC_Calculate8+0xc>
		/* Reset generator */
		CRC->CR = CRC_CR_RESET;
 8001840:	2201      	movs	r2, #1
 8001842:	609a      	str	r2, [r3, #8]
	}

	/* Calculate number of 32-bit blocks */
	cnt = count >> 2;
 8001844:	088a      	lsrs	r2, r1, #2
 8001846:	0014      	movs	r4, r2

	/* Calculate */
	while (cnt--) {
 8001848:	0005      	movs	r5, r0
 800184a:	3c01      	subs	r4, #1
 800184c:	d208      	bcs.n	8001860 <TM_CRC_Calculate8+0x28>
 800184e:	0092      	lsls	r2, r2, #2
 8001850:	1880      	adds	r0, r0, r2
		/* Increase by 4 */
		arr += 4;
	}

	/* Calculate remaining data as 8-bit */
	cnt = count % 4;
 8001852:	2203      	movs	r2, #3
 8001854:	4011      	ands	r1, r2
 8001856:	1841      	adds	r1, r0, r1

	/* Calculate */
	while (cnt--) {
 8001858:	4288      	cmp	r0, r1
 800185a:	d104      	bne.n	8001866 <TM_CRC_Calculate8+0x2e>
		/* Set new value */
		*((uint8_t *)&CRC->DR) = *arr++;
	}

	/* Return data */
	return CRC->DR;
 800185c:	6818      	ldr	r0, [r3, #0]
}
 800185e:	bd70      	pop	{r4, r5, r6, pc}
		CRC->DR = *(uint32_t *)arr;
 8001860:	cd40      	ldmia	r5!, {r6}
 8001862:	601e      	str	r6, [r3, #0]
 8001864:	e7f1      	b.n	800184a <TM_CRC_Calculate8+0x12>
		*((uint8_t *)&CRC->DR) = *arr++;
 8001866:	7802      	ldrb	r2, [r0, #0]
 8001868:	3001      	adds	r0, #1
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	e7f4      	b.n	8001858 <TM_CRC_Calculate8+0x20>
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	40023000 	.word	0x40023000

08001874 <TM_CRC_Calculate32>:

	/* Return data */
	return CRC->DR;
}

uint32_t TM_CRC_Calculate32(uint32_t* arr, uint32_t count, uint8_t reset) {
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <TM_CRC_Calculate32+0x18>)
	/* Reset CRC data register if necessary */
	if (reset) {
 8001876:	2a00      	cmp	r2, #0
 8001878:	d001      	beq.n	800187e <TM_CRC_Calculate32+0xa>
		/* Reset generator */
		CRC->CR = CRC_CR_RESET;
 800187a:	2201      	movs	r2, #1
 800187c:	609a      	str	r2, [r3, #8]
	}

	/* Calculate CRC */
	while (count--) {
 800187e:	3901      	subs	r1, #1
 8001880:	d201      	bcs.n	8001886 <TM_CRC_Calculate32+0x12>
		/* Set new value */
		CRC->DR = *arr++;
	}

	/* Return data */
	return CRC->DR;
 8001882:	6818      	ldr	r0, [r3, #0]
}
 8001884:	4770      	bx	lr
		CRC->DR = *arr++;
 8001886:	c804      	ldmia	r0!, {r2}
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	e7f8      	b.n	800187e <TM_CRC_Calculate32+0xa>
 800188c:	40023000 	.word	0x40023000

08001890 <AddUART_CRC>:
void AddUART_Header() {
	ClearUART_Buff();
	strcat(uart_buff,"@data@");
}

void AddUART_CRC() {
 8001890:	b570      	push	{r4, r5, r6, lr}
	memset(crc_buff, '\0', sizeof(crc_buff));
 8001892:	4c0b      	ldr	r4, [pc, #44]	; (80018c0 <AddUART_CRC+0x30>)
 8001894:	2214      	movs	r2, #20
 8001896:	2100      	movs	r1, #0
 8001898:	0020      	movs	r0, r4
 800189a:	f004 fd3c 	bl	8006316 <memset>
	//uint32_t crc=Get_CRC((uint8_t *) &uart_buff, sizeof(uart_buff));
	uint32_t crc=TM_CRC_Calculate8((uint8_t *) &uart_buff, sizeof(uart_buff), 1);
 800189e:	4d09      	ldr	r5, [pc, #36]	; (80018c4 <AddUART_CRC+0x34>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	0028      	movs	r0, r5
 80018a4:	2164      	movs	r1, #100	; 0x64
 80018a6:	f7ff ffc7 	bl	8001838 <TM_CRC_Calculate8>
	sprintf(crc_buff, "@crc@%08X@\r\n",  (unsigned int) crc);
 80018aa:	4907      	ldr	r1, [pc, #28]	; (80018c8 <AddUART_CRC+0x38>)
	uint32_t crc=TM_CRC_Calculate8((uint8_t *) &uart_buff, sizeof(uart_buff), 1);
 80018ac:	0002      	movs	r2, r0
	sprintf(crc_buff, "@crc@%08X@\r\n",  (unsigned int) crc);
 80018ae:	0020      	movs	r0, r4
 80018b0:	f004 fd3a 	bl	8006328 <siprintf>
	strcat(uart_buff,crc_buff);
 80018b4:	0028      	movs	r0, r5
 80018b6:	0021      	movs	r1, r4
 80018b8:	f004 fd58 	bl	800636c <strcat>

}
 80018bc:	bd70      	pop	{r4, r5, r6, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	200004a4 	.word	0x200004a4
 80018c4:	20000424 	.word	0x20000424
 80018c8:	08006c9c 	.word	0x08006c9c

080018cc <ClearUART_Buff>:
	if (WaitForTX) {
		WaitForUART_TX();
	}
}

void ClearUART_Buff() {
 80018cc:	b510      	push	{r4, lr}
	memset(uart_buff, '\0', sizeof(uart_buff));
 80018ce:	2264      	movs	r2, #100	; 0x64
 80018d0:	2100      	movs	r1, #0
 80018d2:	4802      	ldr	r0, [pc, #8]	; (80018dc <ClearUART_Buff+0x10>)
 80018d4:	f004 fd1f 	bl	8006316 <memset>
}
 80018d8:	bd10      	pop	{r4, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	20000424 	.word	0x20000424

080018e0 <Get_ChipID>:
void Get_ChipID(void) {
 80018e0:	b507      	push	{r0, r1, r2, lr}
	ClearUART_Buff();
 80018e2:	f7ff fff3 	bl	80018cc <ClearUART_Buff>
	sprintf(uart_buff, "@id@%08X-%08X-%08X",   (unsigned int) TM_ID_GetUnique32(0),
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <Get_ChipID+0x24>)
 80018e8:	4907      	ldr	r1, [pc, #28]	; (8001908 <Get_ChipID+0x28>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <Get_ChipID+0x2c>)
 80018ee:	4808      	ldr	r0, [pc, #32]	; (8001910 <Get_ChipID+0x30>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6809      	ldr	r1, [r1, #0]
 80018f4:	9100      	str	r1, [sp, #0]
 80018f6:	4907      	ldr	r1, [pc, #28]	; (8001914 <Get_ChipID+0x34>)
 80018f8:	f004 fd16 	bl	8006328 <siprintf>
	AddUART_CRC();
 80018fc:	f7ff ffc8 	bl	8001890 <AddUART_CRC>
}
 8001900:	bd07      	pop	{r0, r1, r2, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	1ffff7ac 	.word	0x1ffff7ac
 8001908:	1ffff7b4 	.word	0x1ffff7b4
 800190c:	1ffff7b0 	.word	0x1ffff7b0
 8001910:	20000424 	.word	0x20000424
 8001914:	08006cb7 	.word	0x08006cb7

08001918 <Get_FlashSize>:
void Get_FlashSize(void) {
 8001918:	b510      	push	{r4, lr}
	ClearUART_Buff();
 800191a:	f7ff ffd7 	bl	80018cc <ClearUART_Buff>
    sprintf(uart_buff, "@flash_size@%02d", TM_ID_GetFlashSize());
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <Get_FlashSize+0x1c>)
 8001920:	4905      	ldr	r1, [pc, #20]	; (8001938 <Get_FlashSize+0x20>)
 8001922:	881a      	ldrh	r2, [r3, #0]
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <Get_FlashSize+0x24>)
 8001926:	b292      	uxth	r2, r2
 8001928:	f004 fcfe 	bl	8006328 <siprintf>
    AddUART_CRC();
 800192c:	f7ff ffb0 	bl	8001890 <AddUART_CRC>
}
 8001930:	bd10      	pop	{r4, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	1ffff7cc 	.word	0x1ffff7cc
 8001938:	08006cca 	.word	0x08006cca
 800193c:	20000424 	.word	0x20000424

08001940 <Get_Version>:
void Get_Version(void) {
 8001940:	b510      	push	{r4, lr}
	ClearUART_Buff();
 8001942:	f7ff ffc3 	bl	80018cc <ClearUART_Buff>
	strcat(uart_buff,"@version@");
 8001946:	4c06      	ldr	r4, [pc, #24]	; (8001960 <Get_Version+0x20>)
 8001948:	4906      	ldr	r1, [pc, #24]	; (8001964 <Get_Version+0x24>)
 800194a:	0020      	movs	r0, r4
 800194c:	f004 fd0e 	bl	800636c <strcat>
    strcat(uart_buff,__DATE__);
 8001950:	4905      	ldr	r1, [pc, #20]	; (8001968 <Get_Version+0x28>)
 8001952:	0020      	movs	r0, r4
 8001954:	f004 fd0a 	bl	800636c <strcat>
    AddUART_CRC();
 8001958:	f7ff ff9a 	bl	8001890 <AddUART_CRC>
}
 800195c:	bd10      	pop	{r4, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	20000424 	.word	0x20000424
 8001964:	08006cdb 	.word	0x08006cdb
 8001968:	08006ce5 	.word	0x08006ce5

0800196c <WaitForUART_TX>:

void WaitForUART_TX() {
	while (!huart1_finished_tx);
 800196c:	4a02      	ldr	r2, [pc, #8]	; (8001978 <WaitForUART_TX+0xc>)
 800196e:	6813      	ldr	r3, [r2, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0fc      	beq.n	800196e <WaitForUART_TX+0x2>
}
 8001974:	4770      	bx	lr
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	20000244 	.word	0x20000244

0800197c <SerialPrintln>:
	huart1_finished_tx = 0;
 800197c:	2200      	movs	r2, #0
void SerialPrintln(int WaitForTX) {
 800197e:	b510      	push	{r4, lr}
 8001980:	0004      	movs	r4, r0
	huart1_finished_tx = 0;
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <SerialPrintln+0x24>)
 8001984:	601a      	str	r2, [r3, #0]
	while (HAL_UART_Transmit_DMA(&huart1, (uint8_t*) uart_buff, sizeof(uart_buff)-1) == HAL_BUSY);
 8001986:	2263      	movs	r2, #99	; 0x63
 8001988:	4906      	ldr	r1, [pc, #24]	; (80019a4 <SerialPrintln+0x28>)
 800198a:	4807      	ldr	r0, [pc, #28]	; (80019a8 <SerialPrintln+0x2c>)
 800198c:	f004 f8aa 	bl	8005ae4 <HAL_UART_Transmit_DMA>
 8001990:	2802      	cmp	r0, #2
 8001992:	d0f8      	beq.n	8001986 <SerialPrintln+0xa>
	if (WaitForTX) {
 8001994:	2c00      	cmp	r4, #0
 8001996:	d001      	beq.n	800199c <SerialPrintln+0x20>
		WaitForUART_TX();
 8001998:	f7ff ffe8 	bl	800196c <WaitForUART_TX>
}
 800199c:	bd10      	pop	{r4, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	20000244 	.word	0x20000244
 80019a4:	20000424 	.word	0x20000424
 80019a8:	200006cc 	.word	0x200006cc

080019ac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == USART1)  // change USART instance
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_UART_TxCpltCallback+0x18>)
 80019ae:	6802      	ldr	r2, [r0, #0]
{
 80019b0:	b510      	push	{r4, lr}
    if (huart->Instance == USART1)  // change USART instance
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d104      	bne.n	80019c0 <HAL_UART_TxCpltCallback+0x14>
    {
    	huart1_finished_tx = 1;
 80019b6:	2201      	movs	r2, #1
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <HAL_UART_TxCpltCallback+0x1c>)
 80019ba:	601a      	str	r2, [r3, #0]
    	ClearUART_Buff();
 80019bc:	f7ff ff86 	bl	80018cc <ClearUART_Buff>
    }
}
 80019c0:	bd10      	pop	{r4, pc}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	40013800 	.word	0x40013800
 80019c8:	20000244 	.word	0x20000244

080019cc <ResetWDG>:

void ResetWDG() {
	 //HAL_IWDG_Refresh(&hiwdg);
	 IWDG->KR = 0x0000AAAAU;
 80019cc:	4a01      	ldr	r2, [pc, #4]	; (80019d4 <ResetWDG+0x8>)
 80019ce:	4b02      	ldr	r3, [pc, #8]	; (80019d8 <ResetWDG+0xc>)
 80019d0:	601a      	str	r2, [r3, #0]
}
 80019d2:	4770      	bx	lr
 80019d4:	0000aaaa 	.word	0x0000aaaa
 80019d8:	40003000 	.word	0x40003000

080019dc <PrintCurrentState>:


void PrintCurrentState() {
 80019dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (DevMode1!=1) {
 80019de:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <PrintCurrentState+0xa8>)
void PrintCurrentState() {
 80019e0:	b08f      	sub	sp, #60	; 0x3c
	if (DevMode1!=1) {
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d14a      	bne.n	8001a7e <PrintCurrentState+0xa2>
		return;
	}
	#ifdef DEBUG_MODE
	ClearUART_Buff();
 80019e8:	f7ff ff70 	bl	80018cc <ClearUART_Buff>
		#endif

		#ifndef USE_VREF
				"V=%4u v, I=%4u W, DC=%4u, A1=%03d,  A2=%03d,  A3=%03d,  A4=%03d, A_F=%01d, F=%01d, DC_F=%01d, V_F=%01d, I_F=%01d \r\n",
		#endif
								(uint16_t) V_Out,
 80019ec:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <PrintCurrentState+0xac>)
		sprintf(uart_buff,
 80019ee:	2400      	movs	r4, #0
								(uint16_t) V_Out,
 80019f0:	681a      	ldr	r2, [r3, #0]
								(uint16_t) I_Out,
 80019f2:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <PrintCurrentState+0xb0>)
		sprintf(uart_buff,
 80019f4:	b292      	uxth	r2, r2
								(uint16_t) I_Out,
 80019f6:	6819      	ldr	r1, [r3, #0]
								(uint16_t) ADC_Data[2],
 80019f8:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <PrintCurrentState+0xb4>)
		sprintf(uart_buff,
 80019fa:	b289      	uxth	r1, r1
								(uint16_t) ADC_Data[2],
 80019fc:	889b      	ldrh	r3, [r3, #4]
		sprintf(uart_buff,
 80019fe:	920d      	str	r2, [sp, #52]	; 0x34
								(uint16_t) ADC_Data[2],
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	930b      	str	r3, [sp, #44]	; 0x2c
								#ifdef USE_VREF
								(uint16_t) (VDDA_Actual),
								#endif
	      		  				(uint16_t) (100*Sine_Amplitude_1),
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <PrintCurrentState+0xb8>)
		sprintf(uart_buff,
 8001a06:	910c      	str	r1, [sp, #48]	; 0x30
	      		  				(uint16_t) (100*Sine_Amplitude_1),
 8001a08:	681d      	ldr	r5, [r3, #0]
	      		  				(uint16_t) (100*Sine_Amplitude_2),
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <PrintCurrentState+0xbc>)
								(uint16_t) (100*Sine_Amplitude_3),
								(uint16_t) (100*Sine_Amplitude_4),
 8001a0c:	4923      	ldr	r1, [pc, #140]	; (8001a9c <PrintCurrentState+0xc0>)
	      		  				(uint16_t) (100*Sine_Amplitude_2),
 8001a0e:	681e      	ldr	r6, [r3, #0]
								(uint16_t) (100*Sine_Amplitude_3),
 8001a10:	4b23      	ldr	r3, [pc, #140]	; (8001aa0 <PrintCurrentState+0xc4>)
 8001a12:	681f      	ldr	r7, [r3, #0]
								(uint16_t) (100*Sine_Amplitude_4),
 8001a14:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <PrintCurrentState+0xc8>)
 8001a16:	6818      	ldr	r0, [r3, #0]
		sprintf(uart_buff,
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <PrintCurrentState+0xcc>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	9409      	str	r4, [sp, #36]	; 0x24
 8001a1e:	3b03      	subs	r3, #3
 8001a20:	425a      	negs	r2, r3
 8001a22:	4153      	adcs	r3, r2
 8001a24:	9408      	str	r4, [sp, #32]
 8001a26:	9306      	str	r3, [sp, #24]
 8001a28:	9407      	str	r4, [sp, #28]
 8001a2a:	9405      	str	r4, [sp, #20]
								(uint16_t) (100*Sine_Amplitude_4),
 8001a2c:	f7ff f8c2 	bl	8000bb4 <__aeabi_fmul>
 8001a30:	f7fe fc66 	bl	8000300 <__aeabi_f2uiz>
		sprintf(uart_buff,
 8001a34:	b280      	uxth	r0, r0
								(uint16_t) (100*Sine_Amplitude_3),
 8001a36:	4919      	ldr	r1, [pc, #100]	; (8001a9c <PrintCurrentState+0xc0>)
		sprintf(uart_buff,
 8001a38:	9004      	str	r0, [sp, #16]
								(uint16_t) (100*Sine_Amplitude_3),
 8001a3a:	1c38      	adds	r0, r7, #0
 8001a3c:	f7ff f8ba 	bl	8000bb4 <__aeabi_fmul>
 8001a40:	f7fe fc5e 	bl	8000300 <__aeabi_f2uiz>
		sprintf(uart_buff,
 8001a44:	b280      	uxth	r0, r0
	      		  				(uint16_t) (100*Sine_Amplitude_2),
 8001a46:	4915      	ldr	r1, [pc, #84]	; (8001a9c <PrintCurrentState+0xc0>)
		sprintf(uart_buff,
 8001a48:	9003      	str	r0, [sp, #12]
	      		  				(uint16_t) (100*Sine_Amplitude_2),
 8001a4a:	1c30      	adds	r0, r6, #0
 8001a4c:	f7ff f8b2 	bl	8000bb4 <__aeabi_fmul>
 8001a50:	f7fe fc56 	bl	8000300 <__aeabi_f2uiz>
		sprintf(uart_buff,
 8001a54:	b280      	uxth	r0, r0
	      		  				(uint16_t) (100*Sine_Amplitude_1),
 8001a56:	4911      	ldr	r1, [pc, #68]	; (8001a9c <PrintCurrentState+0xc0>)
		sprintf(uart_buff,
 8001a58:	9002      	str	r0, [sp, #8]
	      		  				(uint16_t) (100*Sine_Amplitude_1),
 8001a5a:	1c28      	adds	r0, r5, #0
 8001a5c:	f7ff f8aa 	bl	8000bb4 <__aeabi_fmul>
 8001a60:	f7fe fc4e 	bl	8000300 <__aeabi_f2uiz>
		sprintf(uart_buff,
 8001a64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001a66:	b280      	uxth	r0, r0
 8001a68:	9001      	str	r0, [sp, #4]
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001a6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001a70:	490e      	ldr	r1, [pc, #56]	; (8001aac <PrintCurrentState+0xd0>)
 8001a72:	480f      	ldr	r0, [pc, #60]	; (8001ab0 <PrintCurrentState+0xd4>)
 8001a74:	f004 fc58 	bl	8006328 <siprintf>
								AMP_BLOCKED,
								(uint16_t) (BoardStatus==sFaultFlag),
								DC_BLOCKED,
								VOUT_BLOCKED,
								IOUT_BLOCKED);
		SerialPrintln(0);
 8001a78:	0020      	movs	r0, r4
 8001a7a:	f7ff ff7f 	bl	800197c <SerialPrintln>

	#endif
}
 8001a7e:	b00f      	add	sp, #60	; 0x3c
 8001a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	200002f4 	.word	0x200002f4
 8001a88:	200002d8 	.word	0x200002d8
 8001a8c:	200002cc 	.word	0x200002cc
 8001a90:	200003e4 	.word	0x200003e4
 8001a94:	20000018 	.word	0x20000018
 8001a98:	2000001c 	.word	0x2000001c
 8001a9c:	42c80000 	.word	0x42c80000
 8001aa0:	20000020 	.word	0x20000020
 8001aa4:	20000024 	.word	0x20000024
 8001aa8:	200002ec 	.word	0x200002ec
 8001aac:	08006cf1 	.word	0x08006cf1
 8001ab0:	20000424 	.word	0x20000424

08001ab4 <ResetEEPROM>:

// EEPROM
void ResetEEPROM() {
	EEPROM_DATA[0]=0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	4a03      	ldr	r2, [pc, #12]	; (8001ac4 <ResetEEPROM+0x10>)
 8001ab8:	6013      	str	r3, [r2, #0]
	EEPROM_DATA[1]=0;
 8001aba:	6053      	str	r3, [r2, #4]
	EEPROM_CRC=0;
 8001abc:	4a02      	ldr	r2, [pc, #8]	; (8001ac8 <ResetEEPROM+0x14>)
 8001abe:	6013      	str	r3, [r2, #0]
}
 8001ac0:	4770      	bx	lr
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	200002fc 	.word	0x200002fc
 8001ac8:	200002f8 	.word	0x200002f8

08001acc <CALC_RATIO>:

void CALC_RATIO() {
 8001acc:	b510      	push	{r4, lr}
	memcpy(&fVal, &EEPROM_DATA[1],sizeof(fVal));
	I_RATIO=(fVal*(3.3/4096));
	memcpy(&fVal, &EEPROM_DATA[0],sizeof(fVal));
	V_RATIO=(fVal*(3.3/4096));*/

	I_RATIO=(EEPROM_DATA[1]*IV_RATIO);
 8001ace:	4c09      	ldr	r4, [pc, #36]	; (8001af4 <CALC_RATIO+0x28>)
 8001ad0:	6860      	ldr	r0, [r4, #4]
 8001ad2:	f7ff fb9b 	bl	800120c <__aeabi_ui2f>
 8001ad6:	4908      	ldr	r1, [pc, #32]	; (8001af8 <CALC_RATIO+0x2c>)
 8001ad8:	f7ff f86c 	bl	8000bb4 <__aeabi_fmul>
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <CALC_RATIO+0x30>)
 8001ade:	6018      	str	r0, [r3, #0]
	V_RATIO=(EEPROM_DATA[0]*IV_RATIO);
 8001ae0:	6820      	ldr	r0, [r4, #0]
 8001ae2:	f7ff fb93 	bl	800120c <__aeabi_ui2f>
 8001ae6:	4904      	ldr	r1, [pc, #16]	; (8001af8 <CALC_RATIO+0x2c>)
 8001ae8:	f7ff f864 	bl	8000bb4 <__aeabi_fmul>
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <CALC_RATIO+0x34>)
 8001aee:	6018      	str	r0, [r3, #0]
}
 8001af0:	bd10      	pop	{r4, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	200002fc 	.word	0x200002fc
 8001af8:	3a533333 	.word	0x3a533333
 8001afc:	20000004 	.word	0x20000004
 8001b00:	2000004c 	.word	0x2000004c

08001b04 <USE_DEF_CALIB>:
	//memcpy(&EEPROM_DATA[0], &fVal,sizeof(uint32_t));

	//fVal=3636;
	//memcpy(&EEPROM_DATA[1], &fVal,sizeof(uint32_t));
	EEPROM_DATA[0]=132;
	EEPROM_DATA[1]=3636;
 8001b04:	2184      	movs	r1, #132	; 0x84
void USE_DEF_CALIB() {
 8001b06:	b510      	push	{r4, lr}
	EEPROM_DATA[0]=132;
 8001b08:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <USE_DEF_CALIB+0x10>)
	EEPROM_DATA[1]=3636;
 8001b0a:	4a03      	ldr	r2, [pc, #12]	; (8001b18 <USE_DEF_CALIB+0x14>)
 8001b0c:	c306      	stmia	r3!, {r1, r2}
	CALC_RATIO();
 8001b0e:	f7ff ffdd 	bl	8001acc <CALC_RATIO>
}
 8001b12:	bd10      	pop	{r4, pc}
 8001b14:	200002fc 	.word	0x200002fc
 8001b18:	00000e34 	.word	0x00000e34

08001b1c <USE_NEW_CALIB>:

void USE_NEW_CALIB() {
	if (EEPROM_CRC==0) {
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <USE_NEW_CALIB+0x18>)
void USE_NEW_CALIB() {
 8001b1e:	b510      	push	{r4, lr}
	if (EEPROM_CRC==0) {
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <USE_NEW_CALIB+0x10>
		USE_DEF_CALIB();
 8001b26:	f7ff ffed 	bl	8001b04 <USE_DEF_CALIB>
		return;
	}
	CALC_RATIO();
}
 8001b2a:	bd10      	pop	{r4, pc}
	CALC_RATIO();
 8001b2c:	f7ff ffce 	bl	8001acc <CALC_RATIO>
 8001b30:	e7fb      	b.n	8001b2a <USE_NEW_CALIB+0xe>
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	200002f8 	.word	0x200002f8

08001b38 <StoreEEPROM>:

//void StoreEEPROM(float V_CAL, float I_CAL) {
void StoreEEPROM(uint32_t V_CAL, uint32_t I_CAL) {
 8001b38:	b570      	push	{r4, r5, r6, lr}
	EEPROM_FLAG=1;
 8001b3a:	2501      	movs	r5, #1
	//
	//memcpy(&EEPROM_DATA[0], &V_CAL,sizeof(uint32_t));
	//memcpy(&EEPROM_DATA[1], &I_CAL,sizeof(uint32_t));
	EEPROM_DATA[0]=V_CAL;
 8001b3c:	4c0d      	ldr	r4, [pc, #52]	; (8001b74 <StoreEEPROM+0x3c>)
	EEPROM_FLAG=1;
 8001b3e:	4e0e      	ldr	r6, [pc, #56]	; (8001b78 <StoreEEPROM+0x40>)
	EEPROM_DATA[1]=I_CAL;
	EEPROM_CRC=TM_CRC_Calculate32((uint32_t *) &EEPROM_DATA, sizeof(EEPROM_DATA), 1);
 8001b40:	002a      	movs	r2, r5
	EEPROM_DATA[0]=V_CAL;
 8001b42:	6020      	str	r0, [r4, #0]
	EEPROM_DATA[1]=I_CAL;
 8001b44:	6061      	str	r1, [r4, #4]
	EEPROM_CRC=TM_CRC_Calculate32((uint32_t *) &EEPROM_DATA, sizeof(EEPROM_DATA), 1);
 8001b46:	0020      	movs	r0, r4
 8001b48:	2108      	movs	r1, #8
	EEPROM_FLAG=1;
 8001b4a:	6035      	str	r5, [r6, #0]
	EEPROM_CRC=TM_CRC_Calculate32((uint32_t *) &EEPROM_DATA, sizeof(EEPROM_DATA), 1);
 8001b4c:	f7ff fe92 	bl	8001874 <TM_CRC_Calculate32>
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <StoreEEPROM+0x44>)
 8001b52:	0001      	movs	r1, r0
 8001b54:	6018      	str	r0, [r3, #0]
	EE_Write(0,EEPROM_CRC);
 8001b56:	2000      	movs	r0, #0
 8001b58:	f000 faba 	bl	80020d0 <EE_Write>
	EE_Write(1,EEPROM_DATA[0]);
 8001b5c:	6821      	ldr	r1, [r4, #0]
 8001b5e:	0028      	movs	r0, r5
 8001b60:	f000 fab6 	bl	80020d0 <EE_Write>
	EE_Write(2,EEPROM_DATA[1]);
 8001b64:	6861      	ldr	r1, [r4, #4]
 8001b66:	2002      	movs	r0, #2
 8001b68:	f000 fab2 	bl	80020d0 <EE_Write>
	//
	EEPROM_FLAG=0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	6033      	str	r3, [r6, #0]
}
 8001b70:	bd70      	pop	{r4, r5, r6, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	200002fc 	.word	0x200002fc
 8001b78:	20000304 	.word	0x20000304
 8001b7c:	200002f8 	.word	0x200002f8

08001b80 <InitEEPROM>:

int InitEEPROM() {
 8001b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	EEPROM_FLAG=1;
 8001b82:	2401      	movs	r4, #1
 8001b84:	4f10      	ldr	r7, [pc, #64]	; (8001bc8 <InitEEPROM+0x48>)
 8001b86:	603c      	str	r4, [r7, #0]
	//

	ResetEEPROM();
 8001b88:	f7ff ff94 	bl	8001ab4 <ResetEEPROM>
	EE_Read(0,&EEPROM_CRC);
 8001b8c:	4e0f      	ldr	r6, [pc, #60]	; (8001bcc <InitEEPROM+0x4c>)
 8001b8e:	2000      	movs	r0, #0
 8001b90:	0031      	movs	r1, r6
 8001b92:	f000 fa7b 	bl	800208c <EE_Read>
	EE_Read(1,&EEPROM_DATA[0]);
 8001b96:	4d0e      	ldr	r5, [pc, #56]	; (8001bd0 <InitEEPROM+0x50>)
 8001b98:	0020      	movs	r0, r4
 8001b9a:	0029      	movs	r1, r5
 8001b9c:	f000 fa76 	bl	800208c <EE_Read>
	EE_Read(2,&EEPROM_DATA[1]);
 8001ba0:	1d29      	adds	r1, r5, #4
 8001ba2:	2002      	movs	r0, #2
 8001ba4:	f000 fa72 	bl	800208c <EE_Read>

	uint32_t EEPROM_CRC_tmp=TM_CRC_Calculate32((uint32_t *) &EEPROM_DATA, sizeof(EEPROM_DATA), 1);
 8001ba8:	0028      	movs	r0, r5
 8001baa:	0022      	movs	r2, r4
 8001bac:	2108      	movs	r1, #8
 8001bae:	f7ff fe61 	bl	8001874 <TM_CRC_Calculate32>
	EEPROM_FLAG=0;
 8001bb2:	2500      	movs	r5, #0

	if (EEPROM_CRC_tmp==EEPROM_CRC) {
 8001bb4:	6833      	ldr	r3, [r6, #0]
	EEPROM_FLAG=0;
 8001bb6:	603d      	str	r5, [r7, #0]
	if (EEPROM_CRC_tmp==EEPROM_CRC) {
 8001bb8:	4298      	cmp	r0, r3
 8001bba:	d002      	beq.n	8001bc2 <InitEEPROM+0x42>
		return 1;
	} else {
		ResetEEPROM();
 8001bbc:	f7ff ff7a 	bl	8001ab4 <ResetEEPROM>
		return 0;
 8001bc0:	002c      	movs	r4, r5
	}
}
 8001bc2:	0020      	movs	r0, r4
 8001bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	20000304 	.word	0x20000304
 8001bcc:	200002f8 	.word	0x200002f8
 8001bd0:	200002fc 	.word	0x200002fc

08001bd4 <CalibSave>:

//Calibration code
void CalibSave() {
 8001bd4:	b510      	push	{r4, lr}
						EEPROMStoredCnt=0;
 8001bd6:	2400      	movs	r4, #0
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <CalibSave+0x24>)
 8001bda:	801c      	strh	r4, [r3, #0]
		      			USE_NEW_CALIB();
 8001bdc:	f7ff ff9e 	bl	8001b1c <USE_NEW_CALIB>
		      			StoreEEPROM(EEPROM_DATA[0],EEPROM_DATA[1]);
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <CalibSave+0x28>)
 8001be2:	cb03      	ldmia	r3!, {r0, r1}
 8001be4:	f7ff ffa8 	bl	8001b38 <StoreEEPROM>
		      			strcpy(uart_buff,"CALIB DONE!\r\n");
 8001be8:	4905      	ldr	r1, [pc, #20]	; (8001c00 <CalibSave+0x2c>)
 8001bea:	4806      	ldr	r0, [pc, #24]	; (8001c04 <CalibSave+0x30>)
 8001bec:	f004 fbcb 	bl	8006386 <strcpy>
		      			SerialPrintln(0);
 8001bf0:	0020      	movs	r0, r4
 8001bf2:	f7ff fec3 	bl	800197c <SerialPrintln>
		      		//}
}
 8001bf6:	bd10      	pop	{r4, pc}
 8001bf8:	20000240 	.word	0x20000240
 8001bfc:	200002fc 	.word	0x200002fc
 8001c00:	08006ca9 	.word	0x08006ca9
 8001c04:	20000424 	.word	0x20000424

08001c08 <CalibCmdCheck>:

int CalibCmdCheck() {
 8001c08:	b570      	push	{r4, r5, r6, lr}
				button_state_t ICAL_FLAG=buttonUpdate(&CALIB_I);
 8001c0a:	4820      	ldr	r0, [pc, #128]	; (8001c8c <CalibCmdCheck+0x84>)
 8001c0c:	f000 fac2 	bl	8002194 <buttonUpdate>
 8001c10:	0005      	movs	r5, r0
				button_state_t VCAL_FLAG=buttonUpdate(&CALIB_V);
 8001c12:	481f      	ldr	r0, [pc, #124]	; (8001c90 <CalibCmdCheck+0x88>)
 8001c14:	f000 fabe 	bl	8002194 <buttonUpdate>

				if (EEPROMStoredCnt<EEPROMDelayBeforeNewStore) {
 8001c18:	4a1e      	ldr	r2, [pc, #120]	; (8001c94 <CalibCmdCheck+0x8c>)
 8001c1a:	8813      	ldrh	r3, [r2, #0]
 8001c1c:	2b09      	cmp	r3, #9
 8001c1e:	d803      	bhi.n	8001c28 <CalibCmdCheck+0x20>
					EEPROMStoredCnt++;
					return 0;
 8001c20:	2000      	movs	r0, #0
					EEPROMStoredCnt++;
 8001c22:	3301      	adds	r3, #1
 8001c24:	8013      	strh	r3, [r2, #0]
	      					//EEPROMStoredCnt=0;
	      					CalibSave();
	      					return 1;
	      		}
	      		return 0;
}
 8001c26:	bd70      	pop	{r4, r5, r6, pc}
				if ( (VCAL_FLAG == isPressed)
 8001c28:	2802      	cmp	r0, #2
 8001c2a:	d115      	bne.n	8001c58 <CalibCmdCheck+0x50>
 8001c2c:	4c1a      	ldr	r4, [pc, #104]	; (8001c98 <CalibCmdCheck+0x90>)
	      				  && (ICAL_FLAG != isPressed)){
 8001c2e:	2d02      	cmp	r5, #2
 8001c30:	d026      	beq.n	8001c80 <CalibCmdCheck+0x78>
						EEPROM_DATA[0]=(VOLTAGE_ETALONE/(IV_RATIO*ADC_Data[0]));
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <CalibCmdCheck+0x94>)
 8001c34:	8818      	ldrh	r0, [r3, #0]
 8001c36:	b280      	uxth	r0, r0
 8001c38:	f7ff fa98 	bl	800116c <__aeabi_i2f>
 8001c3c:	4918      	ldr	r1, [pc, #96]	; (8001ca0 <CalibCmdCheck+0x98>)
 8001c3e:	f7fe ffb9 	bl	8000bb4 <__aeabi_fmul>
 8001c42:	1c01      	adds	r1, r0, #0
 8001c44:	4817      	ldr	r0, [pc, #92]	; (8001ca4 <CalibCmdCheck+0x9c>)
 8001c46:	f7fe fdc5 	bl	80007d4 <__aeabi_fdiv>
 8001c4a:	f7fe fb59 	bl	8000300 <__aeabi_f2uiz>
 8001c4e:	6020      	str	r0, [r4, #0]
	      					CalibSave();
 8001c50:	f7ff ffc0 	bl	8001bd4 <CalibSave>
	      					return 1;
 8001c54:	2001      	movs	r0, #1
 8001c56:	e7e6      	b.n	8001c26 <CalibCmdCheck+0x1e>
	      		return 0;
 8001c58:	2000      	movs	r0, #0
	      		  if ( (ICAL_FLAG == isPressed)
 8001c5a:	2d02      	cmp	r5, #2
 8001c5c:	d1e3      	bne.n	8001c26 <CalibCmdCheck+0x1e>
	      			  	EEPROM_DATA[1]=(POWER_ETALONE/(IV_RATIO*ADC_Data[1]));
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <CalibCmdCheck+0x94>)
 8001c60:	8858      	ldrh	r0, [r3, #2]
 8001c62:	b280      	uxth	r0, r0
 8001c64:	f7ff fa82 	bl	800116c <__aeabi_i2f>
 8001c68:	490d      	ldr	r1, [pc, #52]	; (8001ca0 <CalibCmdCheck+0x98>)
 8001c6a:	f7fe ffa3 	bl	8000bb4 <__aeabi_fmul>
 8001c6e:	1c01      	adds	r1, r0, #0
 8001c70:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <CalibCmdCheck+0xa0>)
 8001c72:	f7fe fdaf 	bl	80007d4 <__aeabi_fdiv>
 8001c76:	f7fe fb43 	bl	8000300 <__aeabi_f2uiz>
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <CalibCmdCheck+0x90>)
 8001c7c:	6058      	str	r0, [r3, #4]
 8001c7e:	e7e7      	b.n	8001c50 <CalibCmdCheck+0x48>
	      					USE_DEF_CALIB();
 8001c80:	f7ff ff40 	bl	8001b04 <USE_DEF_CALIB>
	      					StoreEEPROM(EEPROM_DATA[0],EEPROM_DATA[1]);
 8001c84:	cc03      	ldmia	r4!, {r0, r1}
 8001c86:	f7ff ff57 	bl	8001b38 <StoreEEPROM>
 8001c8a:	e7e1      	b.n	8001c50 <CalibCmdCheck+0x48>
 8001c8c:	20000408 	.word	0x20000408
 8001c90:	200003ec 	.word	0x200003ec
 8001c94:	20000240 	.word	0x20000240
 8001c98:	200002fc 	.word	0x200002fc
 8001c9c:	200003e4 	.word	0x200003e4
 8001ca0:	3a533333 	.word	0x3a533333
 8001ca4:	43660000 	.word	0x43660000
 8001ca8:	447a0000 	.word	0x447a0000

08001cac <Set50HzDeadTimeNS>:
//#define DeadTime64X 				1 //1331,2ns
//#define DeadTime128X 				1 //2662,4ns
void Set50HzDeadTimeNS(void) {

		// Tdts = Tck_int //
	    TIM1->CR1 &= ~TIM_CR1_CKD;
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <Set50HzDeadTimeNS+0x44>)
 8001cae:	4911      	ldr	r1, [pc, #68]	; (8001cf4 <Set50HzDeadTimeNS+0x48>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	400a      	ands	r2, r1
	    TIM1->BDTR &= ~TIM_BDTR_DTG;
 8001cb4:	21ff      	movs	r1, #255	; 0xff
	    TIM1->CR1 &= ~TIM_CR1_CKD;
 8001cb6:	601a      	str	r2, [r3, #0]
	    TIM1->BDTR &= ~TIM_BDTR_DTG;
 8001cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cba:	438a      	bics	r2, r1
 8001cbc:	645a      	str	r2, [r3, #68]	; 0x44

	    //TIM1->BDTR  |= TIM_BDTR_DTG_7;//128x //2662,4ns
	    TIM1->BDTR  |= TIM_BDTR_DTG_6;//64x //1331,2ns
 8001cbe:	2240      	movs	r2, #64	; 0x40
 8001cc0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	645a      	str	r2, [r3, #68]	; 0x44
	    //TIM1->BDTR  |= TIM_BDTR_DTG_5;//32x //665,6ns
	    TIM1->BDTR  |= TIM_BDTR_DTG_4;//16x //332,8ns
 8001cc6:	2210      	movs	r2, #16
 8001cc8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	645a      	str	r2, [r3, #68]	; 0x44
	    TIM1->BDTR  |= TIM_BDTR_DTG_3;//8x //166,4ns
 8001cce:	2208      	movs	r2, #8
 8001cd0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	645a      	str	r2, [r3, #68]	; 0x44
	    TIM1->BDTR  |= TIM_BDTR_DTG_2;//4x //83,2ns
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	645a      	str	r2, [r3, #68]	; 0x44
	    TIM1->BDTR  |= TIM_BDTR_DTG_1;//2x  //41,6ns
 8001cde:	2202      	movs	r2, #2
 8001ce0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	645a      	str	r2, [r3, #68]	; 0x44
	    TIM1->BDTR  |= TIM_BDTR_DTG_0;//1x // Dead time base value 1/Fosc=1/48000=20.8ns
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001cea:	430a      	orrs	r2, r1
 8001cec:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001cee:	4770      	bx	lr
 8001cf0:	40012c00 	.word	0x40012c00
 8001cf4:	fffffcff 	.word	0xfffffcff

08001cf8 <SetNormalSignal>:
////////////////////// DEAD TIME - END //////////////////////


////////////////////// SIGNAL INVERSE - BEGIN //////////////////////
void SetNormalSignal(void) {
		TIM1->CCER |= TIM_CCER_CC3NP; // active high level: 0 - high, 1 - low
 8001cf8:	2280      	movs	r2, #128	; 0x80
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <SetNormalSignal+0x18>)
 8001cfc:	0112      	lsls	r2, r2, #4
 8001cfe:	6a19      	ldr	r1, [r3, #32]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	621a      	str	r2, [r3, #32]
		TIM1->CCER |= TIM_CCER_CC3P; // active high level: 0 - high, 1 - low
 8001d04:	2280      	movs	r2, #128	; 0x80
 8001d06:	6a19      	ldr	r1, [r3, #32]
 8001d08:	0092      	lsls	r2, r2, #2
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	621a      	str	r2, [r3, #32]
}
 8001d0e:	4770      	bx	lr
 8001d10:	40012c00 	.word	0x40012c00

08001d14 <Idle_SET>:
////////////////////// SIGNAL INVERSE - END //////////////////////

////////////////////// IDLE STATE - BEGIN //////////////////////
void Idle_SET(void) {
	    /* output idle state HIGHT */
		TIM1->CR2 |= TIM_CR2_OIS3;
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <Idle_SET+0x18>)
 8001d18:	0152      	lsls	r2, r2, #5
 8001d1a:	6859      	ldr	r1, [r3, #4]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	605a      	str	r2, [r3, #4]
		TIM1->CR2 |= TIM_CR2_OIS3N;
 8001d20:	2280      	movs	r2, #128	; 0x80
 8001d22:	6859      	ldr	r1, [r3, #4]
 8001d24:	0192      	lsls	r2, r2, #6
 8001d26:	430a      	orrs	r2, r1
 8001d28:	605a      	str	r2, [r3, #4]
}
 8001d2a:	4770      	bx	lr
 8001d2c:	40012c00 	.word	0x40012c00

08001d30 <PWM_50Hz_Init>:
	/************************** Config PWM channel ************************************/

	TIM1->PSC = 960-1; // 960div for clock: F = SYSCLK / [PSC + 1]
	TIM1->ARR = 999; // count to 1000
	TIM1->CCR3 = 500; // duty cycle 50%
	TIM1->CR1 &= ~TIM_CR1_DIR; // count up: 0 - up, 1 - down
 8001d30:	2110      	movs	r1, #16
	TIM1->PSC = 960-1; // 960div for clock: F = SYSCLK / [PSC + 1]
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <PWM_50Hz_Init+0x48>)
 8001d34:	4a11      	ldr	r2, [pc, #68]	; (8001d7c <PWM_50Hz_Init+0x4c>)
void PWM_50Hz_Init (void) {
 8001d36:	b510      	push	{r4, lr}
	TIM1->PSC = 960-1; // 960div for clock: F = SYSCLK / [PSC + 1]
 8001d38:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 999; // count to 1000
 8001d3a:	4a11      	ldr	r2, [pc, #68]	; (8001d80 <PWM_50Hz_Init+0x50>)
    TIM1->CR1 &= ~TIM_CR1_CMS; // aligned on the front signal

    TIM1->CCMR2 &= ~TIM_CCMR2_OC3M;
 8001d3c:	2070      	movs	r0, #112	; 0x70
	TIM1->ARR = 999; // count to 1000
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR3 = 500; // duty cycle 50%
 8001d40:	3af4      	subs	r2, #244	; 0xf4
 8001d42:	3aff      	subs	r2, #255	; 0xff
 8001d44:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CR1 &= ~TIM_CR1_DIR; // count up: 0 - up, 1 - down
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	438a      	bics	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]
    TIM1->CR1 &= ~TIM_CR1_CMS; // aligned on the front signal
 8001d4c:	2260      	movs	r2, #96	; 0x60
 8001d4e:	6819      	ldr	r1, [r3, #0]
 8001d50:	4391      	bics	r1, r2
 8001d52:	6019      	str	r1, [r3, #0]
    TIM1->CCMR2 &= ~TIM_CCMR2_OC3M;
 8001d54:	69d9      	ldr	r1, [r3, #28]
 8001d56:	4381      	bics	r1, r0
 8001d58:	61d9      	str	r1, [r3, #28]
    TIM1->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1; // positiv PWM
 8001d5a:	69d9      	ldr	r1, [r3, #28]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	61da      	str	r2, [r3, #28]

	/* Enable channel outputs */
	TIM1->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE; // enable PWM complementary out
 8001d60:	22a0      	movs	r2, #160	; 0xa0
 8001d62:	6a19      	ldr	r1, [r3, #32]
 8001d64:	00d2      	lsls	r2, r2, #3
 8001d66:	430a      	orrs	r2, r1
 8001d68:	621a      	str	r2, [r3, #32]

	SetNormalSignal(); // NORMAL or INVERSE
 8001d6a:	f7ff ffc5 	bl	8001cf8 <SetNormalSignal>
	Idle_SET(); // se idle state /* output idle state HIGHT */
 8001d6e:	f7ff ffd1 	bl	8001d14 <Idle_SET>

	Set50HzDeadTimeNS(); // 1976 ns
 8001d72:	f7ff ff9b 	bl	8001cac <Set50HzDeadTimeNS>

	//ch50HZ_OUTEN(); // OUTPUT ENABLE
	//ch50HZ_START(); // start CNT

}
 8001d76:	bd10      	pop	{r4, pc}
 8001d78:	40012c00 	.word	0x40012c00
 8001d7c:	000003bf 	.word	0x000003bf
 8001d80:	000003e7 	.word	0x000003e7

08001d84 <PWM_50Hz_START>:

////////////////////// CONTROL 50Hz - BEGIN //////////////////////
void PWM_50Hz_START(void)
{
	//TIM1->CNT = 0;
	TIM1->CCR3=500;
 8001d84:	22fa      	movs	r2, #250	; 0xfa
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <PWM_50Hz_START+0x30>)
 8001d88:	0052      	lsls	r2, r2, #1
{
 8001d8a:	b510      	push	{r4, lr}
	TIM1->CCR3=500;
 8001d8c:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Enable channel outputs */
		TIM1->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE; // enable PWM complementary out
 8001d8e:	22a0      	movs	r2, #160	; 0xa0
 8001d90:	6a19      	ldr	r1, [r3, #32]
 8001d92:	00d2      	lsls	r2, r2, #3
 8001d94:	430a      	orrs	r2, r1
 8001d96:	621a      	str	r2, [r3, #32]

		SetNormalSignal(); // NORMAL or INVERSE
 8001d98:	f7ff ffae 	bl	8001cf8 <SetNormalSignal>
		Idle_SET(); // se idle state /* output idle state HIGHT */
 8001d9c:	f7ff ffba 	bl	8001d14 <Idle_SET>

		Set50HzDeadTimeNS(); // 1976 ns
 8001da0:	f7ff ff84 	bl	8001cac <Set50HzDeadTimeNS>

	//TIM1->DIER |= TIM_DIER_UIE;
	//TIM1->CR1 |= TIM_CR1_CEN;

	ResetAmplitude();
 8001da4:	f000 f8fc 	bl	8001fa0 <ResetAmplitude>
	ResetV_data();
 8001da8:	f7ff fb7e 	bl	80014a8 <ResetV_data>
	UpdateAmplitudeByV();
 8001dac:	f7ff fc6a 	bl	8001684 <UpdateAmplitudeByV>

//	TIM1->DIER |= TIM_DIER_UIE;
//	TIM1->CR1 |= TIM_CR1_CEN;
}
 8001db0:	bd10      	pop	{r4, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	40012c00 	.word	0x40012c00

08001db8 <PWM_50Hz_STOP>:

void PWM_50Hz_STOP(void)
{
	//TIM1->CNT = 0;
	TIM1->SR&=~TIM_SR_UIF; // clear update flag
 8001db8:	2101      	movs	r1, #1
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <PWM_50Hz_STOP+0x44>)
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	438a      	bics	r2, r1
 8001dc0:	611a      	str	r2, [r3, #16]

	TIM1->DIER &= ~TIM_DIER_UIE; // stop interrupt
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	438a      	bics	r2, r1
 8001dc6:	60da      	str	r2, [r3, #12]
	TIM1->CR1 &= (uint16_t)~TIM_CR1_CEN; // stop cnt
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	490d      	ldr	r1, [pc, #52]	; (8001e00 <PWM_50Hz_STOP+0x48>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

	//TIM1->CR1 &= ~TIM_CR1_CKD; // off dead time
	//TIM1->BDTR &= ~TIM_BDTR_DTG;

	TIM1->CR2 |= TIM_CR2_OIS3N; // revert level
 8001dd0:	2280      	movs	r2, #128	; 0x80
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	0192      	lsls	r2, r2, #6
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	605a      	str	r2, [r3, #4]
	TIM1->CR2 &= ~TIM_CR2_OIS3;
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4909      	ldr	r1, [pc, #36]	; (8001e04 <PWM_50Hz_STOP+0x4c>)
 8001dde:	400a      	ands	r2, r1
 8001de0:	605a      	str	r2, [r3, #4]

	TIM1->CCER |= TIM_CCER_CC3P; // active high level: 0 - high, 1 - low
 8001de2:	2280      	movs	r2, #128	; 0x80
 8001de4:	6a19      	ldr	r1, [r3, #32]
 8001de6:	0092      	lsls	r2, r2, #2
 8001de8:	430a      	orrs	r2, r1
 8001dea:	621a      	str	r2, [r3, #32]
	TIM1->CCER &= ~TIM_CCER_CC3NP; // active high level: 0 - high, 1 - low
 8001dec:	6a1a      	ldr	r2, [r3, #32]
 8001dee:	4906      	ldr	r1, [pc, #24]	; (8001e08 <PWM_50Hz_STOP+0x50>)
 8001df0:	400a      	ands	r2, r1
 8001df2:	621a      	str	r2, [r3, #32]

	TIM1->CCR3=0;
 8001df4:	2200      	movs	r2, #0
 8001df6:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8001df8:	4770      	bx	lr
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	40012c00 	.word	0x40012c00
 8001e00:	0000fffe 	.word	0x0000fffe
 8001e04:	ffffefff 	.word	0xffffefff
 8001e08:	fffff7ff 	.word	0xfffff7ff

08001e0c <PWM_50Hz_OUTEN>:

void PWM_50Hz_OUTEN(void)
{
	TIM1->BDTR |= TIM_BDTR_MOE | TIM_BDTR_AOE; // enable generation output
 8001e0c:	23c0      	movs	r3, #192	; 0xc0
 8001e0e:	4a03      	ldr	r2, [pc, #12]	; (8001e1c <PWM_50Hz_OUTEN+0x10>)
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001e14:	430b      	orrs	r3, r1
 8001e16:	6453      	str	r3, [r2, #68]	; 0x44
	//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
}
 8001e18:	4770      	bx	lr
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	40012c00 	.word	0x40012c00

08001e20 <PWM_50Hz_OUTDIS>:

void PWM_50Hz_OUTDIS(void)
{
    TIM1->BDTR &= ~TIM_BDTR_MOE;
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <PWM_50Hz_OUTDIS+0x14>)
 8001e22:	4905      	ldr	r1, [pc, #20]	; (8001e38 <PWM_50Hz_OUTDIS+0x18>)
 8001e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e26:	400a      	ands	r2, r1
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
    TIM1->BDTR &= ~TIM_BDTR_AOE;
 8001e2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e2c:	4903      	ldr	r1, [pc, #12]	; (8001e3c <PWM_50Hz_OUTDIS+0x1c>)
 8001e2e:	400a      	ands	r2, r1
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44
    //HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_3);
}
 8001e32:	4770      	bx	lr
 8001e34:	40012c00 	.word	0x40012c00
 8001e38:	ffff7fff 	.word	0xffff7fff
 8001e3c:	ffffbfff 	.word	0xffffbfff

08001e40 <PWM_50Hz_ON>:

void PWM_50Hz_ON(void){
 8001e40:	b510      	push	{r4, lr}
	PWM_50Hz_OUTEN(); // OUTPUT ENABLE
 8001e42:	f7ff ffe3 	bl	8001e0c <PWM_50Hz_OUTEN>
//	PWM_50Hz_START(); // start CNT
}
 8001e46:	bd10      	pop	{r4, pc}

08001e48 <PWM_50Hz_OFF>:

void PWM_50Hz_OFF(void){
 8001e48:	b510      	push	{r4, lr}
	PWM_50Hz_OUTDIS(); // OUTPUT ENABLE
 8001e4a:	f7ff ffe9 	bl	8001e20 <PWM_50Hz_OUTDIS>
	PWM_50Hz_STOP(); // start CNT
 8001e4e:	f7ff ffb3 	bl	8001db8 <PWM_50Hz_STOP>
}
 8001e52:	bd10      	pop	{r4, pc}

08001e54 <PWM_Sinus_START>:


////////////////////// INIT GENERATOR PWM LOW - BEGIN //////////////////////
void PWM_Sinus_START(void)
{
	sin_step=0;
 8001e54:	2300      	movs	r3, #0
{
 8001e56:	b510      	push	{r4, lr}
	sin_step=0;
 8001e58:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <PWM_Sinus_START+0x30>)
	//TIM1->CNT = 0;
	TIM3->CCR1=0;
 8001e5a:	4c0b      	ldr	r4, [pc, #44]	; (8001e88 <PWM_Sinus_START+0x34>)
	sin_step=0;
 8001e5c:	8013      	strh	r3, [r2, #0]
	TIM3->CCR1=0;
 8001e5e:	6363      	str	r3, [r4, #52]	; 0x34
	TIM3->CCR2=0;
 8001e60:	63a3      	str	r3, [r4, #56]	; 0x38
	//TIM3->DIER |= TIM_DIER_UIE;
	//TIM3->CR1 |= TIM_CR1_CEN;

	//ResetAmplitude();

	PWM_50Hz_START(); // start CNT
 8001e62:	f7ff ff8f 	bl	8001d84 <PWM_50Hz_START>
	TIM1->DIER |= TIM_DIER_UIE;
 8001e66:	2301      	movs	r3, #1
 8001e68:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <PWM_Sinus_START+0x38>)
 8001e6a:	68d1      	ldr	r1, [r2, #12]
 8001e6c:	4319      	orrs	r1, r3
 8001e6e:	60d1      	str	r1, [r2, #12]
	TIM1->CR1 |= TIM_CR1_CEN;
 8001e70:	6811      	ldr	r1, [r2, #0]
 8001e72:	4319      	orrs	r1, r3
 8001e74:	6011      	str	r1, [r2, #0]

	TIM3->DIER |= TIM_DIER_UIE;
 8001e76:	68e2      	ldr	r2, [r4, #12]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	60e2      	str	r2, [r4, #12]
	TIM3->CR1 |= TIM_CR1_CEN;
 8001e7c:	6822      	ldr	r2, [r4, #0]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	6023      	str	r3, [r4, #0]
}
 8001e82:	bd10      	pop	{r4, pc}
 8001e84:	200002ea 	.word	0x200002ea
 8001e88:	40000400 	.word	0x40000400
 8001e8c:	40012c00 	.word	0x40012c00

08001e90 <PWM_Sinus_STOP>:

void PWM_Sinus_STOP(void)
{
	//TIM1->CNT = 0;
	TIM3->SR&=~TIM_SR_UIF; // clear update flag
 8001e90:	2101      	movs	r1, #1
 8001e92:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <PWM_Sinus_STOP+0x20>)
 8001e94:	691a      	ldr	r2, [r3, #16]
 8001e96:	438a      	bics	r2, r1
 8001e98:	611a      	str	r2, [r3, #16]

	TIM3->DIER &= ~TIM_DIER_UIE; // stop interrupt
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	438a      	bics	r2, r1
 8001e9e:	60da      	str	r2, [r3, #12]
	TIM3->CR1 &= (uint16_t)~TIM_CR1_CEN; // stop cnt
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4904      	ldr	r1, [pc, #16]	; (8001eb4 <PWM_Sinus_STOP+0x24>)
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]

	TIM3->CCR1=0;
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=0;
 8001eac:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001eae:	4770      	bx	lr
 8001eb0:	40000400 	.word	0x40000400
 8001eb4:	0000fffe 	.word	0x0000fffe

08001eb8 <PWM_Sinus_OUTEN>:

void PWM_Sinus_OUTEN(void)
{
	TIM3->BDTR |= TIM_BDTR_MOE | TIM_BDTR_AOE; // enable generation output
 8001eb8:	23c0      	movs	r3, #192	; 0xc0
 8001eba:	4a03      	ldr	r2, [pc, #12]	; (8001ec8 <PWM_Sinus_OUTEN+0x10>)
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	6453      	str	r3, [r2, #68]	; 0x44

	//HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
	//HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
}
 8001ec4:	4770      	bx	lr
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	40000400 	.word	0x40000400

08001ecc <PWM_Sinus_OUTDIS>:

void PWM_Sinus_OUTDIS(void)
{
    TIM3->BDTR &= ~TIM_BDTR_MOE;
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <PWM_Sinus_OUTDIS+0x14>)
 8001ece:	4905      	ldr	r1, [pc, #20]	; (8001ee4 <PWM_Sinus_OUTDIS+0x18>)
 8001ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	645a      	str	r2, [r3, #68]	; 0x44
    TIM3->BDTR &= ~TIM_BDTR_AOE;
 8001ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ed8:	4903      	ldr	r1, [pc, #12]	; (8001ee8 <PWM_Sinus_OUTDIS+0x1c>)
 8001eda:	400a      	ands	r2, r1
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44

    //HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
    //HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
}
 8001ede:	4770      	bx	lr
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	ffff7fff 	.word	0xffff7fff
 8001ee8:	ffffbfff 	.word	0xffffbfff

08001eec <PWM_Sinus_ON>:

void PWM_Sinus_ON(void) {
 8001eec:	b510      	push	{r4, lr}
	PWM_Sinus_OUTEN(); // OUTPUT ENABLE
 8001eee:	f7ff ffe3 	bl	8001eb8 <PWM_Sinus_OUTEN>
	PWM_Sinus_START(); // start CNT
 8001ef2:	f7ff ffaf 	bl	8001e54 <PWM_Sinus_START>
}
 8001ef6:	bd10      	pop	{r4, pc}

08001ef8 <PWM_Sinus_OFF>:

void PWM_Sinus_OFF(void){
 8001ef8:	b510      	push	{r4, lr}
	PWM_Sinus_OUTDIS(); // OUTPUT ENABLE
 8001efa:	f7ff ffe7 	bl	8001ecc <PWM_Sinus_OUTDIS>
	PWM_Sinus_STOP(); // start CNT
 8001efe:	f7ff ffc7 	bl	8001e90 <PWM_Sinus_STOP>
}
 8001f02:	bd10      	pop	{r4, pc}

08001f04 <PWM_Sinus_Init>:

	//GPIOA->CRL	&= ~GPIO_CRL_MODE1;
	//GPIOA->CRL	|= GPIO_CRL_MODE1; // gpio speed 50 MHz

	/*************************** Config PWM channel ***********************************/
		TIM3->PSC = SinResPSC; // div for clock: F = SYSCLK / [PSC + 1]
 8001f04:	2201      	movs	r2, #1
 8001f06:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <PWM_Sinus_Init+0x64>)
		TIM3->ARR = 1000-1; // count to 1000
 8001f08:	4918      	ldr	r1, [pc, #96]	; (8001f6c <PWM_Sinus_Init+0x68>)
		TIM3->PSC = SinResPSC; // div for clock: F = SYSCLK / [PSC + 1]
 8001f0a:	629a      	str	r2, [r3, #40]	; 0x28
		TIM3->ARR = 1000-1; // count to 1000
 8001f0c:	62d9      	str	r1, [r3, #44]	; 0x2c
		TIM3->CCR1 = 0; // duty cycle 0%
 8001f0e:	2100      	movs	r1, #0
 8001f10:	6359      	str	r1, [r3, #52]	; 0x34
		TIM3->CCR2 = 0; // duty cycle 0%
 8001f12:	6399      	str	r1, [r3, #56]	; 0x38

			TIM3->CCER |= TIM_CCER_CC1E; // enable PWM out to PA8
 8001f14:	6a19      	ldr	r1, [r3, #32]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	621a      	str	r2, [r3, #32]
			//TIM3->CCER &= ~TIM_CCER_CC1P; // active high level: 0 - high, 1 - low
			TIM3->CCER |= TIM_CCER_CC1P;
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	6a19      	ldr	r1, [r3, #32]
 8001f1e:	430a      	orrs	r2, r1

			TIM3->CCER |= TIM_CCER_CC2E; // enable PWM complementary out to PA9
 8001f20:	2110      	movs	r1, #16
			TIM3->CCER |= TIM_CCER_CC1P;
 8001f22:	621a      	str	r2, [r3, #32]
			TIM3->CCER |= TIM_CCER_CC2E; // enable PWM complementary out to PA9
 8001f24:	6a1a      	ldr	r2, [r3, #32]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	621a      	str	r2, [r3, #32]
			//TIM3->CCER &= ~TIM_CCER_CC2P; // active high level: 0 - high, 1 - low
			TIM3->CCER |= TIM_CCER_CC2P;
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	6a18      	ldr	r0, [r3, #32]
 8001f2e:	4302      	orrs	r2, r0
 8001f30:	621a      	str	r2, [r3, #32]

		// se idle state
		TIM3->CR2 |= TIM_CR2_OIS1;
 8001f32:	2280      	movs	r2, #128	; 0x80
 8001f34:	6858      	ldr	r0, [r3, #4]
 8001f36:	0052      	lsls	r2, r2, #1
 8001f38:	4302      	orrs	r2, r0
 8001f3a:	605a      	str	r2, [r3, #4]
		TIM3->CR2 |= TIM_CR2_OIS2;
 8001f3c:	2280      	movs	r2, #128	; 0x80
 8001f3e:	6858      	ldr	r0, [r3, #4]
 8001f40:	00d2      	lsls	r2, r2, #3
 8001f42:	4302      	orrs	r2, r0
 8001f44:	605a      	str	r2, [r3, #4]

		TIM3->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	4809      	ldr	r0, [pc, #36]	; (8001f70 <PWM_Sinus_Init+0x6c>)
 8001f4a:	4002      	ands	r2, r0
 8001f4c:	619a      	str	r2, [r3, #24]
		TIM3->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 |
 8001f4e:	6998      	ldr	r0, [r3, #24]
 8001f50:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <PWM_Sinus_Init+0x70>)
 8001f52:	4302      	orrs	r2, r0
 8001f54:	619a      	str	r2, [r3, #24]
		 TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1; // positiv PWM1_CH1 and PWM1_CH2


		/*******************************************************************************/

		TIM3->CR1 &= ~TIM_CR1_DIR; // count up: 0 - up, 1 - down
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	438a      	bics	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
		TIM3->CR1 &= ~TIM_CR1_CMS; // aligned on the front signal: 00 - front; 01, 10, 11 - center
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	3150      	adds	r1, #80	; 0x50
 8001f60:	438a      	bics	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

}
 8001f64:	4770      	bx	lr
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	40000400 	.word	0x40000400
 8001f6c:	000003e7 	.word	0x000003e7
 8001f70:	ffff8f8f 	.word	0xffff8f8f
 8001f74:	00006060 	.word	0x00006060

08001f78 <SetSoftstart>:
#include "digiTOS-Sinus.h"

#ifdef AMP_CORRECTION_TYPE_STEP
void SetSoftstart() {
		#ifdef USE_SOFT_START
			Sine_Amplitude_4=SOFT_START_FROM;
 8001f78:	23fc      	movs	r3, #252	; 0xfc
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <SetSoftstart+0x18>)
 8001f7c:	059b      	lsls	r3, r3, #22
 8001f7e:	6013      	str	r3, [r2, #0]
			Sine_Amplitude_3=SOFT_START_FROM;
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <SetSoftstart+0x1c>)
 8001f82:	6013      	str	r3, [r2, #0]
			Sine_Amplitude_2=SOFT_START_FROM;
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <SetSoftstart+0x20>)
 8001f86:	6013      	str	r3, [r2, #0]
			Sine_Amplitude_1=SOFT_START_FROM;
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <SetSoftstart+0x24>)
 8001f8a:	6013      	str	r3, [r2, #0]
			Sine_Amplitude_4=1;
			Sine_Amplitude_3=1;
			Sine_Amplitude_2=1;
			Sine_Amplitude_1=1;
		#endif
}
 8001f8c:	4770      	bx	lr
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	20000024 	.word	0x20000024
 8001f94:	20000020 	.word	0x20000020
 8001f98:	2000001c 	.word	0x2000001c
 8001f9c:	20000018 	.word	0x20000018

08001fa0 <ResetAmplitude>:
#endif

void ResetAmplitude() {
 8001fa0:	b510      	push	{r4, lr}
		Sine_Amplitude_2=1;
		Sine_Amplitude_1=1;
	#endif

	#ifdef AMP_CORRECTION_TYPE_STEP
		SetSoftstart();
 8001fa2:	f7ff ffe9 	bl	8001f78 <SetSoftstart>
		VOUT_PROTECTION_CNT=0;
		VOUT_PROTECTION_CNT_BEFORESTART=0;
		VOUT_BLOCKED=0;
	#endif

}
 8001fa6:	bd10      	pop	{r4, pc}

08001fa8 <GetApmlitude>:
		return;
	}
}

float GetApmlitude() {
	if (sin_step>Sin_Amp_ind[2]) {
 8001fa8:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <GetApmlitude+0x30>)
 8001faa:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <GetApmlitude+0x34>)
 8001fac:	8811      	ldrh	r1, [r2, #0]
 8001fae:	6898      	ldr	r0, [r3, #8]
 8001fb0:	4281      	cmp	r1, r0
 8001fb2:	dd02      	ble.n	8001fba <GetApmlitude+0x12>
		return Sine_Amplitude_4;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <GetApmlitude+0x38>)
		return Sine_Amplitude_3;
	}
	if (sin_step>Sin_Amp_ind[0]) {
		return Sine_Amplitude_2;
	}
	return Sine_Amplitude_1;
 8001fb6:	6818      	ldr	r0, [r3, #0]
}
 8001fb8:	4770      	bx	lr
	if (sin_step>Sin_Amp_ind[1]) {
 8001fba:	8811      	ldrh	r1, [r2, #0]
 8001fbc:	6858      	ldr	r0, [r3, #4]
 8001fbe:	4281      	cmp	r1, r0
 8001fc0:	dd01      	ble.n	8001fc6 <GetApmlitude+0x1e>
		return Sine_Amplitude_3;
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <GetApmlitude+0x3c>)
 8001fc4:	e7f7      	b.n	8001fb6 <GetApmlitude+0xe>
	if (sin_step>Sin_Amp_ind[0]) {
 8001fc6:	8812      	ldrh	r2, [r2, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	dd01      	ble.n	8001fd2 <GetApmlitude+0x2a>
		return Sine_Amplitude_2;
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <GetApmlitude+0x40>)
 8001fd0:	e7f1      	b.n	8001fb6 <GetApmlitude+0xe>
	return Sine_Amplitude_1;
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <GetApmlitude+0x44>)
 8001fd4:	e7ef      	b.n	8001fb6 <GetApmlitude+0xe>
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	200002ea 	.word	0x200002ea
 8001fdc:	20000008 	.word	0x20000008
 8001fe0:	20000024 	.word	0x20000024
 8001fe4:	20000020 	.word	0x20000020
 8001fe8:	2000001c 	.word	0x2000001c
 8001fec:	20000018 	.word	0x20000018

08001ff0 <GetSinus>:

uint16_t GetSinus() {
	if (sin_step >= SinRes-1) {
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <GetSinus+0x54>)
uint16_t GetSinus() {
 8001ff2:	b570      	push	{r4, r5, r6, lr}
	if (sin_step >= SinRes-1) {
 8001ff4:	881a      	ldrh	r2, [r3, #0]
		//sin_step = 0;
		return 0;
 8001ff6:	2000      	movs	r0, #0
	if (sin_step >= SinRes-1) {
 8001ff8:	2aee      	cmp	r2, #238	; 0xee
 8001ffa:	d81c      	bhi.n	8002036 <GetSinus+0x46>
	}
	uint16_t fSinusData=sin_data[sin_step];
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <GetSinus+0x58>)
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	5a9c      	ldrh	r4, [r3, r2]
	float curAmplitude=GetApmlitude();
 8002004:	f7ff ffd0 	bl	8001fa8 <GetApmlitude>
	if (curAmplitude!=1) {
 8002008:	21fe      	movs	r1, #254	; 0xfe
 800200a:	0589      	lsls	r1, r1, #22
	uint16_t fSinusData=sin_data[sin_step];
 800200c:	b2a4      	uxth	r4, r4
	float curAmplitude=GetApmlitude();
 800200e:	1c05      	adds	r5, r0, #0
	if (curAmplitude!=1) {
 8002010:	f7fe f928 	bl	8000264 <__aeabi_fcmpeq>
 8002014:	2800      	cmp	r0, #0
 8002016:	d108      	bne.n	800202a <GetSinus+0x3a>
		fSinusData=(uint16_t) (curAmplitude*fSinusData);
 8002018:	0020      	movs	r0, r4
 800201a:	f7ff f8a7 	bl	800116c <__aeabi_i2f>
 800201e:	1c29      	adds	r1, r5, #0
 8002020:	f7fe fdc8 	bl	8000bb4 <__aeabi_fmul>
 8002024:	f7fe f96c 	bl	8000300 <__aeabi_f2uiz>
 8002028:	b284      	uxth	r4, r0
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <GetSinus+0x5c>)
 800202c:	1c20      	adds	r0, r4, #0
 800202e:	429c      	cmp	r4, r3
 8002030:	d902      	bls.n	8002038 <GetSinus+0x48>
 8002032:	1c18      	adds	r0, r3, #0
 8002034:	b280      	uxth	r0, r0
	}
	if (fSinusData>=MaxSinusData) {
		return MaxSinusData;
	}
	return fSinusData;
}
 8002036:	bd70      	pop	{r4, r5, r6, pc}
 8002038:	b2a3      	uxth	r3, r4
 800203a:	2b1e      	cmp	r3, #30
 800203c:	d2fa      	bcs.n	8002034 <GetSinus+0x44>
 800203e:	201e      	movs	r0, #30
 8002040:	e7f8      	b.n	8002034 <GetSinus+0x44>
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	200002ea 	.word	0x200002ea
 8002048:	20000060 	.word	0x20000060
 800204c:	000003ca 	.word	0x000003ca

08002050 <EE_Format>:

//##########################################################################################################
//##########################################################################################################
//##########################################################################################################
bool	EE_Format(void)
{
 8002050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint32_t	error;
	HAL_FLASH_Unlock();
 8002052:	f001 fe15 	bl	8003c80 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	flashErase;
	flashErase.NbPages=1;
 8002056:	2301      	movs	r3, #1
	//flashErase.Banks = FLASH_BANK_1;
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8002058:	2400      	movs	r4, #0
	flashErase.NbPages=1;
 800205a:	9303      	str	r3, [sp, #12]
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <EE_Format+0x38>)
	if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 800205e:	4669      	mov	r1, sp
 8002060:	a801      	add	r0, sp, #4
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 8002062:	9302      	str	r3, [sp, #8]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8002064:	9401      	str	r4, [sp, #4]
	if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 8002066:	f001 fecd 	bl	8003e04 <HAL_FLASHEx_Erase>
 800206a:	42a0      	cmp	r0, r4
 800206c:	d108      	bne.n	8002080 <EE_Format+0x30>
	{
		HAL_FLASH_Lock();
 800206e:	f001 fe19 	bl	8003ca4 <HAL_FLASH_Lock>
		if(error != 0xFFFFFFFF)
 8002072:	9b00      	ldr	r3, [sp, #0]
 8002074:	1c58      	adds	r0, r3, #1
 8002076:	4244      	negs	r4, r0
 8002078:	4160      	adcs	r0, r4
 800207a:	b2c0      	uxtb	r0, r0
		else
			return true;	
	}
	HAL_FLASH_Lock();
	return false;	
}
 800207c:	b004      	add	sp, #16
 800207e:	bd10      	pop	{r4, pc}
	HAL_FLASH_Lock();
 8002080:	f001 fe10 	bl	8003ca4 <HAL_FLASH_Lock>
	return false;	
 8002084:	0020      	movs	r0, r4
 8002086:	e7f9      	b.n	800207c <EE_Format+0x2c>
 8002088:	08007c00 	.word	0x08007c00

0800208c <EE_Read>:
//##########################################################################################################
bool EE_Read(uint16_t VirtualAddress, uint32_t* Data)
{
	if(VirtualAddress >=	(_EEPROM_SIZE))
		return false;
 800208c:	2300      	movs	r3, #0
	if(VirtualAddress >=	(_EEPROM_SIZE))
 800208e:	2809      	cmp	r0, #9
 8002090:	d805      	bhi.n	800209e <EE_Read+0x12>
	*Data =  (*(__IO uint32_t*)((VirtualAddress*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <EE_Read+0x18>)
 8002094:	0080      	lsls	r0, r0, #2
 8002096:	18c0      	adds	r0, r0, r3
 8002098:	6803      	ldr	r3, [r0, #0]
 800209a:	600b      	str	r3, [r1, #0]
	return true;
 800209c:	2301      	movs	r3, #1
}
 800209e:	0018      	movs	r0, r3
 80020a0:	4770      	bx	lr
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	08007c00 	.word	0x08007c00

080020a8 <EE_Reads>:

}
//##########################################################################################################
bool EE_Reads(uint16_t StartVirtualAddress,uint16_t HowMuchToRead,uint32_t* Data)
{
	if((StartVirtualAddress+HowMuchToRead) >	(_EEPROM_SIZE))
 80020a8:	1841      	adds	r1, r0, r1
{
 80020aa:	b510      	push	{r4, lr}
		return false;
 80020ac:	2300      	movs	r3, #0
	if((StartVirtualAddress+HowMuchToRead) >	(_EEPROM_SIZE))
 80020ae:	290a      	cmp	r1, #10
 80020b0:	dd08      	ble.n	80020c4 <EE_Reads+0x1c>
	{
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
		Data++;
	}
	return true;
}
 80020b2:	0018      	movs	r0, r3
 80020b4:	bd10      	pop	{r4, pc}
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 80020b6:	4c05      	ldr	r4, [pc, #20]	; (80020cc <EE_Reads+0x24>)
 80020b8:	0083      	lsls	r3, r0, #2
 80020ba:	191b      	adds	r3, r3, r4
 80020bc:	681b      	ldr	r3, [r3, #0]
	for(uint16_t	i=StartVirtualAddress ; i<HowMuchToRead+StartVirtualAddress ; i++)
 80020be:	3001      	adds	r0, #1
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 80020c0:	c208      	stmia	r2!, {r3}
	for(uint16_t	i=StartVirtualAddress ; i<HowMuchToRead+StartVirtualAddress ; i++)
 80020c2:	b280      	uxth	r0, r0
 80020c4:	4281      	cmp	r1, r0
 80020c6:	dcf6      	bgt.n	80020b6 <EE_Reads+0xe>
	return true;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e7f2      	b.n	80020b2 <EE_Reads+0xa>
 80020cc:	08007c00 	.word	0x08007c00

080020d0 <EE_Write>:
{
 80020d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d2:	0004      	movs	r4, r0
 80020d4:	000d      	movs	r5, r1
		return false;
 80020d6:	2000      	movs	r0, #0
	if(VirtualAddress >=	(_EEPROM_SIZE))
 80020d8:	2c09      	cmp	r4, #9
 80020da:	d817      	bhi.n	800210c <EE_Write+0x3c>
	if((*(__IO uint32_t*)((VirtualAddress*4)+_EEPROM_FLASH_PAGE_ADDRESS)) != 0xFFFFFFFF)
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <EE_Write+0x7c>)
 80020de:	00a4      	lsls	r4, r4, #2
 80020e0:	18e7      	adds	r7, r4, r3
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	d107      	bne.n	80020f8 <EE_Write+0x28>
	HAL_FLASH_Unlock();
 80020e8:	f001 fdca 	bl	8003c80 <HAL_FLASH_Unlock>
	if(Data!=0xFFFFFFFF)
 80020ec:	1c6b      	adds	r3, r5, #1
 80020ee:	d123      	bne.n	8002138 <EE_Write+0x68>
			HAL_FLASH_Lock();
 80020f0:	f001 fdd8 	bl	8003ca4 <HAL_FLASH_Lock>
			return true;
 80020f4:	2001      	movs	r0, #1
 80020f6:	e009      	b.n	800210c <EE_Write+0x3c>
		if( EE_Reads(0,(_EEPROM_SIZE),EEPROMPageBackup)==false)
 80020f8:	4e15      	ldr	r6, [pc, #84]	; (8002150 <EE_Write+0x80>)
 80020fa:	210a      	movs	r1, #10
 80020fc:	0032      	movs	r2, r6
 80020fe:	f7ff ffd3 	bl	80020a8 <EE_Reads>
 8002102:	2800      	cmp	r0, #0
 8002104:	d103      	bne.n	800210e <EE_Write+0x3e>
			HAL_FLASH_Lock();
 8002106:	f001 fdcd 	bl	8003ca4 <HAL_FLASH_Lock>
			return false;
 800210a:	2000      	movs	r0, #0
}
 800210c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		EEPROMPageBackup[VirtualAddress]=Data;
 800210e:	51a5      	str	r5, [r4, r6]
		EE_Format();
 8002110:	f7ff ff9e 	bl	8002050 <EE_Format>
		HAL_FLASH_Unlock();
 8002114:	f001 fdb4 	bl	8003c80 <HAL_FLASH_Unlock>
 8002118:	4c0c      	ldr	r4, [pc, #48]	; (800214c <EE_Write+0x7c>)
      if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(i*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)EEPROMPageBackup[i])!=HAL_OK)
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <EE_Write+0x84>)
 800211c:	0021      	movs	r1, r4
 800211e:	18e3      	adds	r3, r4, r3
 8002120:	58f2      	ldr	r2, [r6, r3]
 8002122:	2002      	movs	r0, #2
 8002124:	2300      	movs	r3, #0
 8002126:	f001 fdf1 	bl	8003d0c <HAL_FLASH_Program>
 800212a:	2800      	cmp	r0, #0
 800212c:	d1eb      	bne.n	8002106 <EE_Write+0x36>
		for(uint16_t	i=0 ; i<_EEPROM_SIZE ; i++)
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <EE_Write+0x88>)
 8002130:	3404      	adds	r4, #4
 8002132:	429c      	cmp	r4, r3
 8002134:	d1f1      	bne.n	800211a <EE_Write+0x4a>
 8002136:	e7d7      	b.n	80020e8 <EE_Write+0x18>
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(VirtualAddress*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)Data)==HAL_OK)
 8002138:	002a      	movs	r2, r5
 800213a:	2300      	movs	r3, #0
 800213c:	0039      	movs	r1, r7
 800213e:	2002      	movs	r0, #2
 8002140:	f001 fde4 	bl	8003d0c <HAL_FLASH_Program>
 8002144:	2800      	cmp	r0, #0
 8002146:	d1de      	bne.n	8002106 <EE_Write+0x36>
 8002148:	e7d2      	b.n	80020f0 <EE_Write+0x20>
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	08007c00 	.word	0x08007c00
 8002150:	2000050c 	.word	0x2000050c
 8002154:	f7ff8400 	.word	0xf7ff8400
 8002158:	08007c28 	.word	0x08007c28

0800215c <buttonInit>:
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		}	
		HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
	#endif
	
	button_struct->GPIO_Pin = GPIO_Pin;
 800215c:	6002      	str	r2, [r0, #0]
	button_struct->GPIO_Port = GPIO_Port;
	button_struct->debounce_time = debounce_time;
 800215e:	9a00      	ldr	r2, [sp, #0]
	button_struct->long_press_time = long_press_time;
	button_struct->active_state = active_state;
 8002160:	7203      	strb	r3, [r0, #8]
	button_struct->debounce_time = debounce_time;
 8002162:	60c2      	str	r2, [r0, #12]
	button_struct->long_press_time = long_press_time;
 8002164:	9a01      	ldr	r2, [sp, #4]
	
	button_struct->short_press_handled = 0;
 8002166:	2300      	movs	r3, #0
	button_struct->long_press_time = long_press_time;
 8002168:	6102      	str	r2, [r0, #16]
	button_struct->long_press_handled = 0;
	button_struct->_on_press_time = 0;
	button_struct->_previous_state = button_off;
 800216a:	2201      	movs	r2, #1
	button_struct->GPIO_Port = GPIO_Port;
 800216c:	6041      	str	r1, [r0, #4]
	button_struct->short_press_handled = 0;
 800216e:	7503      	strb	r3, [r0, #20]
	button_struct->long_press_handled = 0;
 8002170:	7543      	strb	r3, [r0, #21]
	button_struct->_on_press_time = 0;
 8002172:	6183      	str	r3, [r0, #24]
	button_struct->_previous_state = button_off;
 8002174:	75c2      	strb	r2, [r0, #23]
	button_struct->_state_changed = 0;
 8002176:	7583      	strb	r3, [r0, #22]
	button_struct->_state = noEvent;
 8002178:	7243      	strb	r3, [r0, #9]
}
 800217a:	4770      	bx	lr

0800217c <_button_state>:
/*	PRIVATE FUNCTIONS */
/**********************************************************/
/* Low level GPIO read routine.
button_on - button is currently read as pressed
*/
_phy_state_t _button_state(button_struct_t *button_struct){
 800217c:	b510      	push	{r4, lr}
 800217e:	0004      	movs	r4, r0
	if(HAL_GPIO_ReadPin(button_struct->GPIO_Port, button_struct->GPIO_Pin) == button_struct->active_state){
 8002180:	8801      	ldrh	r1, [r0, #0]
 8002182:	6840      	ldr	r0, [r0, #4]
 8002184:	f001 ffc4 	bl	8004110 <HAL_GPIO_ReadPin>
 8002188:	7a23      	ldrb	r3, [r4, #8]
 800218a:	1a18      	subs	r0, r3, r0
 800218c:	1e43      	subs	r3, r0, #1
 800218e:	4198      	sbcs	r0, r3
 8002190:	b2c0      	uxtb	r0, r0
		return button_on;
	}
	else{
		return button_off;
	}
}
 8002192:	bd10      	pop	{r4, pc}

08002194 <buttonUpdate>:
button_state_t buttonUpdate(button_struct_t *button_struct){
 8002194:	b570      	push	{r4, r5, r6, lr}
 8002196:	0004      	movs	r4, r0
	_phy_state_t state = _button_state(button_struct);	// get button state
 8002198:	f7ff fff0 	bl	800217c <_button_state>
	if(state != button_struct->_previous_state){	// state is	different
 800219c:	7de6      	ldrb	r6, [r4, #23]
	_phy_state_t state = _button_state(button_struct);	// get button state
 800219e:	0005      	movs	r5, r0
	if(state != button_struct->_previous_state){	// state is	different
 80021a0:	4286      	cmp	r6, r0
 80021a2:	d01a      	beq.n	80021da <buttonUpdate+0x46>
		if(state == button_on){	
 80021a4:	2800      	cmp	r0, #0
 80021a6:	d107      	bne.n	80021b8 <buttonUpdate+0x24>
			button_struct->_on_press_time = HAL_GetTick(); // get current time
 80021a8:	f000 ff24 	bl	8002ff4 <HAL_GetTick>
			button_struct->_state_changed = 1;	// state is changed
 80021ac:	2301      	movs	r3, #1
			button_struct->_on_press_time = HAL_GetTick(); // get current time
 80021ae:	61a0      	str	r0, [r4, #24]
			button_struct->_state_changed = 1;	// state is changed
 80021b0:	75a3      	strb	r3, [r4, #22]
			button_struct->_previous_state = button_on;
 80021b2:	75e5      	strb	r5, [r4, #23]
			return_status = noEvent;
 80021b4:	2000      	movs	r0, #0
 80021b6:	e00f      	b.n	80021d8 <buttonUpdate+0x44>
			if(HAL_GetTick() >= (button_struct->_on_press_time + button_struct->debounce_time)){	
 80021b8:	f000 ff1c 	bl	8002ff4 <HAL_GetTick>
 80021bc:	69a3      	ldr	r3, [r4, #24]
 80021be:	68e1      	ldr	r1, [r4, #12]
 80021c0:	0002      	movs	r2, r0
 80021c2:	185b      	adds	r3, r3, r1
 80021c4:	2001      	movs	r0, #1
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d303      	bcc.n	80021d2 <buttonUpdate+0x3e>
				button_struct->_state = isReleased;
 80021ca:	2304      	movs	r3, #4
				button_struct->_previous_state = button_off;
 80021cc:	75e0      	strb	r0, [r4, #23]
				return_status = button_struct->_state;
 80021ce:	0018      	movs	r0, r3
				button_struct->_state = isReleased;
 80021d0:	7263      	strb	r3, [r4, #9]
			button_struct->long_press_handled = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	7563      	strb	r3, [r4, #21]
			button_struct->short_press_handled = 0;
 80021d6:	7523      	strb	r3, [r4, #20]
}
 80021d8:	bd70      	pop	{r4, r5, r6, pc}
		if(state == button_on){	// state = button_on, prevous state = button_on
 80021da:	2e00      	cmp	r6, #0
 80021dc:	d1ea      	bne.n	80021b4 <buttonUpdate+0x20>
			if(HAL_GetTick() >= (button_struct->_on_press_time + button_struct->long_press_time)){	
 80021de:	f000 ff09 	bl	8002ff4 <HAL_GetTick>
 80021e2:	69a3      	ldr	r3, [r4, #24]
 80021e4:	6922      	ldr	r2, [r4, #16]
 80021e6:	189b      	adds	r3, r3, r2
 80021e8:	4298      	cmp	r0, r3
 80021ea:	d308      	bcc.n	80021fe <buttonUpdate+0x6a>
				if(button_struct->long_press_handled == 1){	//was button handled yet?
 80021ec:	7d63      	ldrb	r3, [r4, #21]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d102      	bne.n	80021f8 <buttonUpdate+0x64>
						button_struct->_state = noEvent;
 80021f2:	7266      	strb	r6, [r4, #9]
					return_status = button_struct->_state;
 80021f4:	7a60      	ldrb	r0, [r4, #9]
 80021f6:	e7ef      	b.n	80021d8 <buttonUpdate+0x44>
					button_struct->_state = isPressedLong;
 80021f8:	2303      	movs	r3, #3
						button_struct->_state = isPressed;
 80021fa:	7263      	strb	r3, [r4, #9]
 80021fc:	e7fa      	b.n	80021f4 <buttonUpdate+0x60>
				if(HAL_GetTick() >= (button_struct->_on_press_time + button_struct->debounce_time)){	
 80021fe:	f000 fef9 	bl	8002ff4 <HAL_GetTick>
 8002202:	69a3      	ldr	r3, [r4, #24]
 8002204:	68e2      	ldr	r2, [r4, #12]
 8002206:	189b      	adds	r3, r3, r2
 8002208:	4298      	cmp	r0, r3
 800220a:	d3d3      	bcc.n	80021b4 <buttonUpdate+0x20>
					if(button_struct->short_press_handled == 1){	//was button handled yet?
 800220c:	7d23      	ldrb	r3, [r4, #20]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d0ef      	beq.n	80021f2 <buttonUpdate+0x5e>
						button_struct->_state = isPressed;
 8002212:	2302      	movs	r3, #2
 8002214:	e7f1      	b.n	80021fa <buttonUpdate+0x66>
	...

08002218 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002218:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800221a:	2001      	movs	r0, #1
 800221c:	4a08      	ldr	r2, [pc, #32]	; (8002240 <MX_DMA_Init+0x28>)
 800221e:	6951      	ldr	r1, [r2, #20]
 8002220:	4301      	orrs	r1, r0
 8002222:	6151      	str	r1, [r2, #20]
 8002224:	6953      	ldr	r3, [r2, #20]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 3, 3);
 8002226:	2203      	movs	r2, #3
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002228:	4003      	ands	r3, r0
 800222a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 3, 3);
 800222c:	0011      	movs	r1, r2
 800222e:	300a      	adds	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002230:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 3, 3);
 8002232:	f001 fa5b 	bl	80036ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8002236:	200b      	movs	r0, #11
 8002238:	f001 fa92 	bl	8003760 <HAL_NVIC_EnableIRQ>

}
 800223c:	bd07      	pop	{r0, r1, r2, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	40021000 	.word	0x40021000

08002244 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002246:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002248:	2214      	movs	r2, #20
 800224a:	2100      	movs	r1, #0
 800224c:	a803      	add	r0, sp, #12
 800224e:	f004 f862 	bl	8006316 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002252:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002254:	2580      	movs	r5, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002256:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <MX_GPIO_Init+0xb4>)
 8002258:	03c0      	lsls	r0, r0, #15
 800225a:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800225c:	02ad      	lsls	r5, r5, #10
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800225e:	4301      	orrs	r1, r0
 8002260:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002262:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002264:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002266:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002268:	4002      	ands	r2, r0
 800226a:	9200      	str	r2, [sp, #0]
 800226c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800226e:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 8002270:	4e22      	ldr	r6, [pc, #136]	; (80022fc <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	432a      	orrs	r2, r5
 8002274:	615a      	str	r2, [r3, #20]
 8002276:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 8002278:	0030      	movs	r0, r6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800227a:	402a      	ands	r2, r5
 800227c:	9201      	str	r2, [sp, #4]
 800227e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002280:	695a      	ldr	r2, [r3, #20]
                          |LED4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PA0 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002284:	430a      	orrs	r2, r1
 8002286:	615a      	str	r2, [r3, #20]
 8002288:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 800228a:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800228c:	400b      	ands	r3, r1
 800228e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 8002290:	21e9      	movs	r1, #233	; 0xe9
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002292:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 8002294:	f001 ff4e 	bl	8004134 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800229a:	2703      	movs	r7, #3
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
 800229c:	4b18      	ldr	r3, [pc, #96]	; (8002300 <MX_GPIO_Init+0xbc>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	a903      	add	r1, sp, #12
 80022a0:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
 80022a2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022a4:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a8:	f001 fe1a 	bl	8003ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FAULT_FEEDBACK_Pin|DEV_MODE2_Pin|DEV_MODE1_Pin|CALIBV_Pin|CALIBI_Pin|CALIBMODE_Pin;
 80022ac:	4b15      	ldr	r3, [pc, #84]	; (8002304 <MX_GPIO_Init+0xc0>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ae:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = FAULT_FEEDBACK_Pin|DEV_MODE2_Pin|DEV_MODE1_Pin|CALIBV_Pin|CALIBI_Pin|CALIBMODE_Pin;
 80022b0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b2:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b4:	a903      	add	r1, sp, #12
 80022b6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ba:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022bc:	f001 fe10 	bl	8003ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 80022c0:	23e9      	movs	r3, #233	; 0xe9
                          |LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 80022c4:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c6:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c8:	3be8      	subs	r3, #232	; 0xe8
 80022ca:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ce:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d0:	f001 fe06 	bl	8003ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022d4:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d6:	a903      	add	r1, sp, #12
 80022d8:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022da:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022dc:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e0:	f001 fdfe 	bl	8003ee0 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB6);
 80022e4:	2080      	movs	r0, #128	; 0x80
 80022e6:	0240      	lsls	r0, r0, #9
 80022e8:	f001 ff4e 	bl	8004188 <HAL_I2CEx_EnableFastModePlus>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB7);
 80022ec:	0028      	movs	r0, r5
 80022ee:	f001 ff4b 	bl	8004188 <HAL_I2CEx_EnableFastModePlus>

}
 80022f2:	b009      	add	sp, #36	; 0x24
 80022f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	40021000 	.word	0x40021000
 80022fc:	48000400 	.word	0x48000400
 8002300:	00001801 	.word	0x00001801
 8002304:	00001919 	.word	0x00001919

08002308 <MX_IWDG_Init>:

/* IWDG init function */
void MX_IWDG_Init(void)
{

  hiwdg.Instance = IWDG;
 8002308:	4807      	ldr	r0, [pc, #28]	; (8002328 <MX_IWDG_Init+0x20>)
 800230a:	4b08      	ldr	r3, [pc, #32]	; (800232c <MX_IWDG_Init+0x24>)
{
 800230c:	b510      	push	{r4, lr}
  hiwdg.Instance = IWDG;
 800230e:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002310:	2306      	movs	r3, #6
 8002312:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <MX_IWDG_Init+0x28>)
 8002316:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 8002318:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800231a:	f001 ff63 	bl	80041e4 <HAL_IWDG_Init>
 800231e:	2800      	cmp	r0, #0
 8002320:	d001      	beq.n	8002326 <MX_IWDG_Init+0x1e>
  {
    Error_Handler();
 8002322:	f000 fa49 	bl	80027b8 <Error_Handler>
  }

}
 8002326:	bd10      	pop	{r4, pc}
 8002328:	20000534 	.word	0x20000534
 800232c:	40003000 	.word	0x40003000
 8002330:	00000fff 	.word	0x00000fff

08002334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002334:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002336:	2510      	movs	r5, #16
{
 8002338:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800233a:	2230      	movs	r2, #48	; 0x30
 800233c:	2100      	movs	r1, #0
 800233e:	a808      	add	r0, sp, #32
 8002340:	f003 ffe9 	bl	8006316 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002344:	002a      	movs	r2, r5
 8002346:	2100      	movs	r1, #0
 8002348:	4668      	mov	r0, sp
 800234a:	f003 ffe4 	bl	8006316 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800234e:	002a      	movs	r2, r5
 8002350:	2100      	movs	r1, #0
 8002352:	a804      	add	r0, sp, #16
 8002354:	f003 ffdf 	bl	8006316 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_LSI
 8002358:	2319      	movs	r3, #25
 800235a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	025b      	lsls	r3, r3, #9
 8002360:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002362:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002364:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002366:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002368:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800236a:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800236c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800236e:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002370:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002372:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002374:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002376:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002378:	f001 ff84 	bl	8004284 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800237c:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800237e:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002380:	2500      	movs	r5, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002382:	0021      	movs	r1, r4
 8002384:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002386:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002388:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800238a:	9503      	str	r5, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800238c:	f002 fa24 	bl	80047d8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002390:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002392:	9404      	str	r4, [sp, #16]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002394:	9506      	str	r5, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002396:	f002 fb27 	bl	80049e8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800239a:	b015      	add	sp, #84	; 0x54
 800239c:	bd30      	pop	{r4, r5, pc}
	...

080023a0 <main>:
		__HAL_RCC_DBGMCU_CLK_ENABLE();
 80023a0:	2080      	movs	r0, #128	; 0x80
{
 80023a2:	b5f0      	push	{r4, r5, r6, r7, lr}
	    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_WWDG_STOP;
 80023a4:	2780      	movs	r7, #128	; 0x80
		__HAL_RCC_DBGMCU_CLK_ENABLE();
 80023a6:	4ae6      	ldr	r2, [pc, #920]	; (8002740 <main+0x3a0>)
 80023a8:	03c0      	lsls	r0, r0, #15
 80023aa:	6991      	ldr	r1, [r2, #24]
{
 80023ac:	b087      	sub	sp, #28
		__HAL_RCC_DBGMCU_CLK_ENABLE();
 80023ae:	4301      	orrs	r1, r0
 80023b0:	6191      	str	r1, [r2, #24]
 80023b2:	6993      	ldr	r3, [r2, #24]
	    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_WWDG_STOP;
 80023b4:	013f      	lsls	r7, r7, #4
		__HAL_RCC_DBGMCU_CLK_ENABLE();
 80023b6:	4003      	ands	r3, r0
 80023b8:	9305      	str	r3, [sp, #20]
 80023ba:	9b05      	ldr	r3, [sp, #20]
	    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_WWDG_STOP;
 80023bc:	4be1      	ldr	r3, [pc, #900]	; (8002744 <main+0x3a4>)
	    __HAL_DBGMCU_FREEZE_IWDG();
 80023be:	2480      	movs	r4, #128	; 0x80
	    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_WWDG_STOP;
 80023c0:	689a      	ldr	r2, [r3, #8]
	    __HAL_DBGMCU_FREEZE_IWDG();
 80023c2:	0164      	lsls	r4, r4, #5
	    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_WWDG_STOP;
 80023c4:	433a      	orrs	r2, r7
 80023c6:	609a      	str	r2, [r3, #8]
	    DBGMCU->APB2FZ = 0xFFFFFFFF;
 80023c8:	2201      	movs	r2, #1
 80023ca:	4252      	negs	r2, r2
 80023cc:	60da      	str	r2, [r3, #12]
	    DBGMCU->APB1FZ = 0xFFFFFFFF;
 80023ce:	609a      	str	r2, [r3, #8]
	    DBGMCU->CR |=DBGMCU_CR_DBG_STOP;
 80023d0:	6859      	ldr	r1, [r3, #4]
 80023d2:	3203      	adds	r2, #3
 80023d4:	430a      	orrs	r2, r1
 80023d6:	605a      	str	r2, [r3, #4]
	    __HAL_DBGMCU_FREEZE_IWDG();
 80023d8:	689a      	ldr	r2, [r3, #8]
  buttonInit(&CALIB_V, CALIBV_GPIO_Port, CALIBV_Pin, GPIO_PIN_RESET, 4000, 10000);
 80023da:	4edb      	ldr	r6, [pc, #876]	; (8002748 <main+0x3a8>)
	    __HAL_DBGMCU_FREEZE_IWDG();
 80023dc:	4322      	orrs	r2, r4
 80023de:	609a      	str	r2, [r3, #8]
  HAL_Init();
 80023e0:	f000 fdf0 	bl	8002fc4 <HAL_Init>
  SystemClock_Config();
 80023e4:	f7ff ffa6 	bl	8002334 <SystemClock_Config>
  MX_GPIO_Init();
 80023e8:	f7ff ff2c 	bl	8002244 <MX_GPIO_Init>
  MX_DMA_Init();
 80023ec:	f7ff ff14 	bl	8002218 <MX_DMA_Init>
  MX_CRC_Init();
 80023f0:	f7ff f81c 	bl	800142c <MX_CRC_Init>
  MX_ADC_Init();
 80023f4:	f7fe ff7a 	bl	80012ec <MX_ADC_Init>
  MX_IWDG_Init();
 80023f8:	f7ff ff86 	bl	8002308 <MX_IWDG_Init>
  MX_TIM1_Init();
 80023fc:	f000 fc64 	bl	8002cc8 <MX_TIM1_Init>
  MX_TIM14_Init();
 8002400:	f000 fb6e 	bl	8002ae0 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8002404:	f000 fd3a 	bl	8002e7c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002408:	f000 fcd6 	bl	8002db8 <MX_TIM3_Init>
  MX_TIM16_Init();
 800240c:	f000 fb82 	bl	8002b14 <MX_TIM16_Init>
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 3);
 8002410:	2203      	movs	r2, #3
 8002412:	200a      	movs	r0, #10
 8002414:	0011      	movs	r1, r2
 8002416:	f001 f969 	bl	80036ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800241a:	200a      	movs	r0, #10
 800241c:	f001 f9a0 	bl	8003760 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002420:	2200      	movs	r2, #0
 8002422:	2004      	movs	r0, #4
 8002424:	0011      	movs	r1, r2
 8002426:	f001 f961 	bl	80036ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800242a:	2004      	movs	r0, #4
 800242c:	f001 f998 	bl	8003760 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8002430:	2200      	movs	r2, #0
 8002432:	2003      	movs	r0, #3
 8002434:	0011      	movs	r1, r2
 8002436:	f001 f959 	bl	80036ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800243a:	2003      	movs	r0, #3
 800243c:	f001 f990 	bl	8003760 <HAL_NVIC_EnableIRQ>
  StartADC();
 8002440:	f7ff f826 	bl	8001490 <StartADC>
  SinWave=swNOP;
 8002444:	2303      	movs	r3, #3
 8002446:	4ac1      	ldr	r2, [pc, #772]	; (800274c <main+0x3ac>)
 8002448:	7013      	strb	r3, [r2, #0]
  PWM_50Hz_Init();
 800244a:	f7ff fc71 	bl	8001d30 <PWM_50Hz_Init>
  PWM_50Hz_OFF();
 800244e:	f7ff fcfb 	bl	8001e48 <PWM_50Hz_OFF>
  PWM_Sinus_Init();
 8002452:	f7ff fd57 	bl	8001f04 <PWM_Sinus_Init>
  PWM_Sinus_OFF();
 8002456:	f7ff fd4f 	bl	8001ef8 <PWM_Sinus_OFF>
  ResetWDG();
 800245a:	f7ff fab7 	bl	80019cc <ResetWDG>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_SET);
 800245e:	2201      	movs	r2, #1
 8002460:	2108      	movs	r1, #8
 8002462:	48bb      	ldr	r0, [pc, #748]	; (8002750 <main+0x3b0>)
 8002464:	f001 fe66 	bl	8004134 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,GPIO_PIN_SET);
 8002468:	2201      	movs	r2, #1
 800246a:	48b9      	ldr	r0, [pc, #740]	; (8002750 <main+0x3b0>)
 800246c:	0011      	movs	r1, r2
 800246e:	f001 fe61 	bl	8004134 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,GPIO_PIN_SET);
 8002472:	2201      	movs	r2, #1
 8002474:	2140      	movs	r1, #64	; 0x40
 8002476:	48b6      	ldr	r0, [pc, #728]	; (8002750 <main+0x3b0>)
 8002478:	f001 fe5c 	bl	8004134 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,GPIO_PIN_SET);
 800247c:	2180      	movs	r1, #128	; 0x80
 800247e:	2201      	movs	r2, #1
 8002480:	48b3      	ldr	r0, [pc, #716]	; (8002750 <main+0x3b0>)
 8002482:	f001 fe57 	bl	8004134 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim16);
 8002486:	4db3      	ldr	r5, [pc, #716]	; (8002754 <main+0x3b4>)
 8002488:	0028      	movs	r0, r5
 800248a:	f002 fc69 	bl	8004d60 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim16);
 800248e:	0028      	movs	r0, r5
 8002490:	f002 fc96 	bl	8004dc0 <HAL_TIM_Base_Start_IT>
  BoardStatus=sBoot;
 8002494:	2200      	movs	r2, #0
 8002496:	4bb0      	ldr	r3, [pc, #704]	; (8002758 <main+0x3b8>)
  buttonInit(&CALIB_V, CALIBV_GPIO_Port, CALIBV_Pin, GPIO_PIN_RESET, 4000, 10000);
 8002498:	25fa      	movs	r5, #250	; 0xfa
  BoardStatus=sBoot;
 800249a:	701a      	strb	r2, [r3, #0]
  TIM16->ARR=sBoot_Delay;
 800249c:	2364      	movs	r3, #100	; 0x64
 800249e:	4aaf      	ldr	r2, [pc, #700]	; (800275c <main+0x3bc>)
  buttonInit(&CALIB_V, CALIBV_GPIO_Port, CALIBV_Pin, GPIO_PIN_RESET, 4000, 10000);
 80024a0:	012d      	lsls	r5, r5, #4
  TIM16->ARR=sBoot_Delay;
 80024a2:	62d3      	str	r3, [r2, #44]	; 0x2c
  ResetWDG();
 80024a4:	f7ff fa92 	bl	80019cc <ResetWDG>
  buttonInit(&CALIB_V, CALIBV_GPIO_Port, CALIBV_Pin, GPIO_PIN_RESET, 4000, 10000);
 80024a8:	2190      	movs	r1, #144	; 0x90
 80024aa:	003a      	movs	r2, r7
 80024ac:	9601      	str	r6, [sp, #4]
 80024ae:	9500      	str	r5, [sp, #0]
 80024b0:	2300      	movs	r3, #0
 80024b2:	05c9      	lsls	r1, r1, #23
 80024b4:	48aa      	ldr	r0, [pc, #680]	; (8002760 <main+0x3c0>)
 80024b6:	f7ff fe51 	bl	800215c <buttonInit>
  buttonInit(&CALIB_I, CALIBI_GPIO_Port, CALIBI_Pin, GPIO_PIN_RESET, 4000, 10000);
 80024ba:	2190      	movs	r1, #144	; 0x90
 80024bc:	0022      	movs	r2, r4
 80024be:	9601      	str	r6, [sp, #4]
 80024c0:	9500      	str	r5, [sp, #0]
 80024c2:	2300      	movs	r3, #0
 80024c4:	05c9      	lsls	r1, r1, #23
 80024c6:	48a7      	ldr	r0, [pc, #668]	; (8002764 <main+0x3c4>)
  buttonInit(&CALIB_MODE, CALIBMODE_GPIO_Port, CALIBMODE_Pin, GPIO_PIN_RESET, 30, 2000);
 80024c8:	25fa      	movs	r5, #250	; 0xfa
  buttonInit(&CALIB_I, CALIBI_GPIO_Port, CALIBI_Pin, GPIO_PIN_RESET, 4000, 10000);
 80024ca:	f7ff fe47 	bl	800215c <buttonInit>
  buttonInit(&CALIB_MODE, CALIBMODE_GPIO_Port, CALIBMODE_Pin, GPIO_PIN_RESET, 30, 2000);
 80024ce:	241e      	movs	r4, #30
 80024d0:	2190      	movs	r1, #144	; 0x90
 80024d2:	00ed      	lsls	r5, r5, #3
 80024d4:	9501      	str	r5, [sp, #4]
 80024d6:	9400      	str	r4, [sp, #0]
 80024d8:	2300      	movs	r3, #0
 80024da:	2201      	movs	r2, #1
 80024dc:	05c9      	lsls	r1, r1, #23
 80024de:	48a2      	ldr	r0, [pc, #648]	; (8002768 <main+0x3c8>)
 80024e0:	f7ff fe3c 	bl	800215c <buttonInit>
  buttonInit(&DevModeKey, DEV_MODE1_GPIO_Port, DEV_MODE1_Pin, GPIO_PIN_RESET, 30, 2000);
 80024e4:	2280      	movs	r2, #128	; 0x80
 80024e6:	2190      	movs	r1, #144	; 0x90
 80024e8:	4fa0      	ldr	r7, [pc, #640]	; (800276c <main+0x3cc>)
 80024ea:	9501      	str	r5, [sp, #4]
 80024ec:	9400      	str	r4, [sp, #0]
 80024ee:	2300      	movs	r3, #0
 80024f0:	0052      	lsls	r2, r2, #1
 80024f2:	05c9      	lsls	r1, r1, #23
 80024f4:	0038      	movs	r0, r7
  buttonInit(&DevModeKey2, DEV_MODE2_GPIO_Port, DEV_MODE2_Pin, GPIO_PIN_RESET, 30, 1000);
 80024f6:	25fa      	movs	r5, #250	; 0xfa
  buttonInit(&DevModeKey, DEV_MODE1_GPIO_Port, DEV_MODE1_Pin, GPIO_PIN_RESET, 30, 2000);
 80024f8:	f7ff fe30 	bl	800215c <buttonInit>
  buttonInit(&DevModeKey2, DEV_MODE2_GPIO_Port, DEV_MODE2_Pin, GPIO_PIN_RESET, 30, 1000);
 80024fc:	2190      	movs	r1, #144	; 0x90
 80024fe:	00ad      	lsls	r5, r5, #2
 8002500:	9400      	str	r4, [sp, #0]
 8002502:	2300      	movs	r3, #0
 8002504:	2210      	movs	r2, #16
 8002506:	05c9      	lsls	r1, r1, #23
 8002508:	4899      	ldr	r0, [pc, #612]	; (8002770 <main+0x3d0>)
 800250a:	9501      	str	r5, [sp, #4]
 800250c:	f7ff fe26 	bl	800215c <buttonInit>
  buttonInit(&FaultFlag, FAULT_FEEDBACK_GPIO_Port, FAULT_FEEDBACK_Pin, GPIO_PIN_RESET, 30, 1000);
 8002510:	2190      	movs	r1, #144	; 0x90
 8002512:	4e98      	ldr	r6, [pc, #608]	; (8002774 <main+0x3d4>)
 8002514:	2300      	movs	r3, #0
 8002516:	2208      	movs	r2, #8
 8002518:	05c9      	lsls	r1, r1, #23
 800251a:	9400      	str	r4, [sp, #0]
 800251c:	0030      	movs	r0, r6
 800251e:	9501      	str	r5, [sp, #4]
 8002520:	f7ff fe1c 	bl	800215c <buttonInit>
  buttonUpdate(&DevModeKey);
 8002524:	0038      	movs	r0, r7
 8002526:	f7ff fe35 	bl	8002194 <buttonUpdate>
  buttonUpdate(&DevModeKey2);
 800252a:	4891      	ldr	r0, [pc, #580]	; (8002770 <main+0x3d0>)
 800252c:	f7ff fe32 	bl	8002194 <buttonUpdate>
  buttonUpdate(&FaultFlag);
 8002530:	0030      	movs	r0, r6
 8002532:	f7ff fe2f 	bl	8002194 <buttonUpdate>
  buttonUpdate(&CALIB_V);
 8002536:	488a      	ldr	r0, [pc, #552]	; (8002760 <main+0x3c0>)
 8002538:	f7ff fe2c 	bl	8002194 <buttonUpdate>
  buttonUpdate(&CALIB_I);
 800253c:	4889      	ldr	r0, [pc, #548]	; (8002764 <main+0x3c4>)
 800253e:	f7ff fe29 	bl	8002194 <buttonUpdate>
  buttonUpdate(&CALIB_MODE);
 8002542:	4889      	ldr	r0, [pc, #548]	; (8002768 <main+0x3c8>)
 8002544:	f7ff fe26 	bl	8002194 <buttonUpdate>
  HAL_Delay(500);
 8002548:	20fa      	movs	r0, #250	; 0xfa
 800254a:	0040      	lsls	r0, r0, #1
 800254c:	f000 fd58 	bl	8003000 <HAL_Delay>
             if (InitEEPROM()==0) {
 8002550:	f7ff fb16 	bl	8001b80 <InitEEPROM>
 8002554:	4b81      	ldr	r3, [pc, #516]	; (800275c <main+0x3bc>)
 8002556:	4c88      	ldr	r4, [pc, #544]	; (8002778 <main+0x3d8>)
 8002558:	9303      	str	r3, [sp, #12]
 800255a:	2800      	cmp	r0, #0
 800255c:	d000      	beq.n	8002560 <main+0x1c0>
 800255e:	e0cf      	b.n	8002700 <main+0x360>
           	  strcpy(uart_buff,"NO EEPROM\r\n");
 8002560:	4986      	ldr	r1, [pc, #536]	; (800277c <main+0x3dc>)
 8002562:	0020      	movs	r0, r4
 8002564:	f003 ff0f 	bl	8006386 <strcpy>
           	  USE_DEF_CALIB();
 8002568:	f7ff facc 	bl	8001b04 <USE_DEF_CALIB>
           	  SerialPrintln(1);
 800256c:	2001      	movs	r0, #1
 800256e:	f7ff fa05 	bl	800197c <SerialPrintln>
  Get_Version();
 8002572:	f7ff f9e5 	bl	8001940 <Get_Version>
  SerialPrintln(1);
 8002576:	2001      	movs	r0, #1
 8002578:	f7ff fa00 	bl	800197c <SerialPrintln>
  Get_ChipID();
 800257c:	f7ff f9b0 	bl	80018e0 <Get_ChipID>
  SerialPrintln(1);
 8002580:	2001      	movs	r0, #1
 8002582:	f7ff f9fb 	bl	800197c <SerialPrintln>
  Get_FlashSize();
 8002586:	f7ff f9c7 	bl	8001918 <Get_FlashSize>
  SerialPrintln(1);
 800258a:	2001      	movs	r0, #1
 800258c:	f7ff f9f6 	bl	800197c <SerialPrintln>
  ClearUART_Buff();
 8002590:	f7ff f99c 	bl	80018cc <ClearUART_Buff>
  if(buttonUpdate(&CALIB_MODE) == isPressed){
 8002594:	4874      	ldr	r0, [pc, #464]	; (8002768 <main+0x3c8>)
 8002596:	f7ff fdfd 	bl	8002194 <buttonUpdate>
 800259a:	4d79      	ldr	r5, [pc, #484]	; (8002780 <main+0x3e0>)
	  CalibMode=0;
 800259c:	2300      	movs	r3, #0
  if(buttonUpdate(&CALIB_MODE) == isPressed){
 800259e:	2802      	cmp	r0, #2
 80025a0:	d107      	bne.n	80025b2 <main+0x212>
	  strcpy(uart_buff,"CALIB MODE ENABLED\r\n");
 80025a2:	4978      	ldr	r1, [pc, #480]	; (8002784 <main+0x3e4>)
 80025a4:	0020      	movs	r0, r4
 80025a6:	f003 feee 	bl	8006386 <strcpy>
	  SerialPrintln(1);
 80025aa:	2001      	movs	r0, #1
 80025ac:	f7ff f9e6 	bl	800197c <SerialPrintln>
	  CalibMode=1;
 80025b0:	2301      	movs	r3, #1
  buttonUpdate(&FaultFlag);
 80025b2:	0030      	movs	r0, r6
	  CalibMode=0;
 80025b4:	602b      	str	r3, [r5, #0]
  buttonUpdate(&FaultFlag);
 80025b6:	f7ff fded 	bl	8002194 <buttonUpdate>
  if(buttonUpdate(&DevModeKey) == isPressed){
 80025ba:	0038      	movs	r0, r7
 80025bc:	f7ff fdea 	bl	8002194 <buttonUpdate>
 80025c0:	2802      	cmp	r0, #2
 80025c2:	d11b      	bne.n	80025fc <main+0x25c>
	strcpy(uart_buff,"DEV MODE - wait\r\n");
 80025c4:	4970      	ldr	r1, [pc, #448]	; (8002788 <main+0x3e8>)
 80025c6:	0020      	movs	r0, r4
 80025c8:	f003 fedd 	bl	8006386 <strcpy>
	SerialPrintln(1);
 80025cc:	2001      	movs	r0, #1
 80025ce:	f7ff f9d5 	bl	800197c <SerialPrintln>
	ResetWDG();
 80025d2:	f7ff f9fb 	bl	80019cc <ResetWDG>
    HAL_Delay(500);
 80025d6:	20fa      	movs	r0, #250	; 0xfa
 80025d8:	0040      	lsls	r0, r0, #1
 80025da:	f000 fd11 	bl	8003000 <HAL_Delay>
	if(buttonUpdate(&DevModeKey) == isPressed){
 80025de:	0038      	movs	r0, r7
 80025e0:	f7ff fdd8 	bl	8002194 <buttonUpdate>
 80025e4:	2802      	cmp	r0, #2
 80025e6:	d109      	bne.n	80025fc <main+0x25c>
		strcpy(uart_buff,"DEV MODE - confirmed\r\n");
 80025e8:	4968      	ldr	r1, [pc, #416]	; (800278c <main+0x3ec>)
 80025ea:	0020      	movs	r0, r4
 80025ec:	f003 fecb 	bl	8006386 <strcpy>
	    SerialPrintln(1);
 80025f0:	2001      	movs	r0, #1
 80025f2:	f7ff f9c3 	bl	800197c <SerialPrintln>
		DevMode1=1;
 80025f6:	2201      	movs	r2, #1
 80025f8:	4b65      	ldr	r3, [pc, #404]	; (8002790 <main+0x3f0>)
 80025fa:	601a      	str	r2, [r3, #0]
  	BoardStatus=sGEN;
 80025fc:	2501      	movs	r5, #1
    strcpy(uart_buff,"Start Loop\r\n");
 80025fe:	4965      	ldr	r1, [pc, #404]	; (8002794 <main+0x3f4>)
 8002600:	0020      	movs	r0, r4
 8002602:	f003 fec0 	bl	8006386 <strcpy>
    SerialPrintln(1);
 8002606:	2001      	movs	r0, #1
 8002608:	f7ff f9b8 	bl	800197c <SerialPrintln>
  	BoardStatus=sGEN;
 800260c:	4b52      	ldr	r3, [pc, #328]	; (8002758 <main+0x3b8>)
  	TIM16->ARR=sDEF_Delay;
 800260e:	4a53      	ldr	r2, [pc, #332]	; (800275c <main+0x3bc>)
  	BoardStatus=sGEN;
 8002610:	701d      	strb	r5, [r3, #0]
  	TIM16->ARR=sDEF_Delay;
 8002612:	23fa      	movs	r3, #250	; 0xfa
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	62d3      	str	r3, [r2, #44]	; 0x2c
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_RESET);
 8002618:	2108      	movs	r1, #8
 800261a:	2200      	movs	r2, #0
 800261c:	484c      	ldr	r0, [pc, #304]	; (8002750 <main+0x3b0>)
 800261e:	f001 fd89 	bl	8004134 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,GPIO_PIN_RESET);
 8002622:	2200      	movs	r2, #0
 8002624:	0029      	movs	r1, r5
 8002626:	484a      	ldr	r0, [pc, #296]	; (8002750 <main+0x3b0>)
 8002628:	f001 fd84 	bl	8004134 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,GPIO_PIN_RESET);
 800262c:	2200      	movs	r2, #0
 800262e:	2140      	movs	r1, #64	; 0x40
 8002630:	4847      	ldr	r0, [pc, #284]	; (8002750 <main+0x3b0>)
 8002632:	f001 fd7f 	bl	8004134 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,GPIO_PIN_RESET);
 8002636:	2200      	movs	r2, #0
 8002638:	2180      	movs	r1, #128	; 0x80
 800263a:	4845      	ldr	r0, [pc, #276]	; (8002750 <main+0x3b0>)
 800263c:	f001 fd7a 	bl	8004134 <HAL_GPIO_WritePin>
       buttonUpdate(&FaultFlag);
 8002640:	0030      	movs	r0, r6
 8002642:	f7ff fda7 	bl	8002194 <buttonUpdate>
       buttonUpdate(&DevModeKey2);
 8002646:	484a      	ldr	r0, [pc, #296]	; (8002770 <main+0x3d0>)
 8002648:	f7ff fda4 	bl	8002194 <buttonUpdate>
       HAL_Delay(500);
 800264c:	20fa      	movs	r0, #250	; 0xfa
 800264e:	0040      	lsls	r0, r0, #1
 8002650:	f000 fcd6 	bl	8003000 <HAL_Delay>
       if(buttonUpdate(&DevModeKey2) == isPressedLong){
 8002654:	4846      	ldr	r0, [pc, #280]	; (8002770 <main+0x3d0>)
 8002656:	f7ff fd9d 	bl	8002194 <buttonUpdate>
 800265a:	2803      	cmp	r0, #3
 800265c:	d106      	bne.n	800266c <main+0x2cc>
    	   strcpy(uart_buff,"Start GENERATOR\r\n");
 800265e:	494e      	ldr	r1, [pc, #312]	; (8002798 <main+0x3f8>)
 8002660:	0020      	movs	r0, r4
 8002662:	f003 fe90 	bl	8006386 <strcpy>
    	   SerialPrintln(1);
 8002666:	0028      	movs	r0, r5
 8002668:	f7ff f988 	bl	800197c <SerialPrintln>
       buttonUpdate(&FaultFlag);
 800266c:	0030      	movs	r0, r6
 800266e:	f7ff fd91 	bl	8002194 <buttonUpdate>
			  SinWave=swGEN;
 8002672:	2702      	movs	r7, #2
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002674:	46c0      	nop			; (mov r8, r8)
  	if (Re_Update==1) {
 8002676:	4b49      	ldr	r3, [pc, #292]	; (800279c <main+0x3fc>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	2a01      	cmp	r2, #1
 800267c:	d103      	bne.n	8002686 <main+0x2e6>
  		Re_Update=0;
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
  		UpdateAmplitudeByV();
 8002682:	f7fe ffff 	bl	8001684 <UpdateAmplitudeByV>
  if ((buttonUpdate(&FaultFlag) == isPressed) || (buttonUpdate(&FaultFlag) == isPressedLong)) {
 8002686:	0030      	movs	r0, r6
 8002688:	f7ff fd84 	bl	8002194 <buttonUpdate>
 800268c:	2802      	cmp	r0, #2
 800268e:	d13e      	bne.n	800270e <main+0x36e>
	  BoardStatus=sFaultFlag;
 8002690:	2203      	movs	r2, #3
 8002692:	4b31      	ldr	r3, [pc, #196]	; (8002758 <main+0x3b8>)
 8002694:	701a      	strb	r2, [r3, #0]
	  FaultWaitCnt=0;
 8002696:	2200      	movs	r2, #0
 8002698:	4b41      	ldr	r3, [pc, #260]	; (80027a0 <main+0x400>)
 800269a:	601a      	str	r2, [r3, #0]
		  if (SinWave!=swGEN) {
 800269c:	4b2b      	ldr	r3, [pc, #172]	; (800274c <main+0x3ac>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d13a      	bne.n	800271a <main+0x37a>
  	  if ((SinWave==swNOP) && (BoardStatus == sGEN) && (AMP_BLOCKED==0)
 80026a4:	4b29      	ldr	r3, [pc, #164]	; (800274c <main+0x3ac>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d11a      	bne.n	80026e2 <main+0x342>
 80026ac:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <main+0x3b8>)
 80026ae:	781d      	ldrb	r5, [r3, #0]
 80026b0:	b2ed      	uxtb	r5, r5
 80026b2:	2d01      	cmp	r5, #1
 80026b4:	d115      	bne.n	80026e2 <main+0x342>
  			  && (DC_BLOCKED==0) && (VOUT_BLOCKED==0)  && (IOUT_BLOCKED==0) && (EEPROM_FLAG==0)) {
 80026b6:	4b3b      	ldr	r3, [pc, #236]	; (80027a4 <main+0x404>)
 80026b8:	681c      	ldr	r4, [r3, #0]
 80026ba:	2c00      	cmp	r4, #0
 80026bc:	d111      	bne.n	80026e2 <main+0x342>
  	  	  if  (buttonUpdate(&DevModeKey2) == isPressedLong) {
 80026be:	482c      	ldr	r0, [pc, #176]	; (8002770 <main+0x3d0>)
 80026c0:	f7ff fd68 	bl	8002194 <buttonUpdate>
 80026c4:	2803      	cmp	r0, #3
 80026c6:	d10c      	bne.n	80026e2 <main+0x342>
    		SinWave=swStart;
 80026c8:	4b20      	ldr	r3, [pc, #128]	; (800274c <main+0x3ac>)
 80026ca:	701d      	strb	r5, [r3, #0]
    		TIM3->CCR2=0;
 80026cc:	4b36      	ldr	r3, [pc, #216]	; (80027a8 <main+0x408>)
 80026ce:	639c      	str	r4, [r3, #56]	; 0x38
    		 		TIM3->CCR1=0;
 80026d0:	635c      	str	r4, [r3, #52]	; 0x34
    		 		TIM1->CCR3=0;
 80026d2:	4b36      	ldr	r3, [pc, #216]	; (80027ac <main+0x40c>)
 80026d4:	63dc      	str	r4, [r3, #60]	; 0x3c
    		 		sin_step=0;
 80026d6:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <main+0x410>)
 80026d8:	801c      	strh	r4, [r3, #0]
    		PWM_50Hz_ON();
 80026da:	f7ff fbb1 	bl	8001e40 <PWM_50Hz_ON>
    		PWM_Sinus_ON();
 80026de:	f7ff fc05 	bl	8001eec <PWM_Sinus_ON>
  if (SinWave==swGEN) {
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <main+0x3ac>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d108      	bne.n	80026fc <main+0x35c>
				if (  (BoardStatus == sFaultFlag) || (buttonUpdate(&DevModeKey2) == isReleased)
 80026ea:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <main+0x3b8>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d016      	beq.n	8002720 <main+0x380>
 80026f2:	481f      	ldr	r0, [pc, #124]	; (8002770 <main+0x3d0>)
 80026f4:	f7ff fd4e 	bl	8002194 <buttonUpdate>
 80026f8:	2804      	cmp	r0, #4
 80026fa:	d011      	beq.n	8002720 <main+0x380>
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	e7b9      	b.n	8002674 <main+0x2d4>
          	  USE_NEW_CALIB();
 8002700:	f7ff fa0c 	bl	8001b1c <USE_NEW_CALIB>
           	  strcpy(uart_buff,"OK EEPROM\r\n");
 8002704:	492b      	ldr	r1, [pc, #172]	; (80027b4 <main+0x414>)
 8002706:	0020      	movs	r0, r4
 8002708:	f003 fe3d 	bl	8006386 <strcpy>
 800270c:	e72e      	b.n	800256c <main+0x1cc>
  if ((buttonUpdate(&FaultFlag) == isPressed) || (buttonUpdate(&FaultFlag) == isPressedLong)) {
 800270e:	0030      	movs	r0, r6
 8002710:	f7ff fd40 	bl	8002194 <buttonUpdate>
 8002714:	2803      	cmp	r0, #3
 8002716:	d1c5      	bne.n	80026a4 <main+0x304>
 8002718:	e7ba      	b.n	8002690 <main+0x2f0>
			  SinWave=swGEN;
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <main+0x3ac>)
 800271c:	701f      	strb	r7, [r3, #0]
 800271e:	e7c1      	b.n	80026a4 <main+0x304>
		  SinWave=swNOP;
 8002720:	2203      	movs	r2, #3
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <main+0x3ac>)
 8002724:	701a      	strb	r2, [r3, #0]
		  	  	TIM3->CCR2=0;
 8002726:	2300      	movs	r3, #0
 8002728:	4a1f      	ldr	r2, [pc, #124]	; (80027a8 <main+0x408>)
 800272a:	6393      	str	r3, [r2, #56]	; 0x38
		   		TIM3->CCR1=0;
 800272c:	6353      	str	r3, [r2, #52]	; 0x34
		   		TIM1->CCR3=0;
 800272e:	4a1f      	ldr	r2, [pc, #124]	; (80027ac <main+0x40c>)
 8002730:	63d3      	str	r3, [r2, #60]	; 0x3c
		   		sin_step=0;
 8002732:	4a1f      	ldr	r2, [pc, #124]	; (80027b0 <main+0x410>)
 8002734:	8013      	strh	r3, [r2, #0]
		  PWM_50Hz_OFF();
 8002736:	f7ff fb87 	bl	8001e48 <PWM_50Hz_OFF>
		  PWM_Sinus_OFF();
 800273a:	f7ff fbdd 	bl	8001ef8 <PWM_Sinus_OFF>
 800273e:	e7dd      	b.n	80026fc <main+0x35c>
 8002740:	40021000 	.word	0x40021000
 8002744:	40015800 	.word	0x40015800
 8002748:	00002710 	.word	0x00002710
 800274c:	20000314 	.word	0x20000314
 8002750:	48000400 	.word	0x48000400
 8002754:	20000604 	.word	0x20000604
 8002758:	200002ec 	.word	0x200002ec
 800275c:	40014400 	.word	0x40014400
 8002760:	200003ec 	.word	0x200003ec
 8002764:	20000408 	.word	0x20000408
 8002768:	200004b8 	.word	0x200004b8
 800276c:	20000488 	.word	0x20000488
 8002770:	200004f0 	.word	0x200004f0
 8002774:	200004d4 	.word	0x200004d4
 8002778:	20000424 	.word	0x20000424
 800277c:	08006d65 	.word	0x08006d65
 8002780:	200002f0 	.word	0x200002f0
 8002784:	08006d7d 	.word	0x08006d7d
 8002788:	08006d92 	.word	0x08006d92
 800278c:	08006da4 	.word	0x08006da4
 8002790:	200002f4 	.word	0x200002f4
 8002794:	08006dbb 	.word	0x08006dbb
 8002798:	08006dc8 	.word	0x08006dc8
 800279c:	2000030c 	.word	0x2000030c
 80027a0:	20000308 	.word	0x20000308
 80027a4:	20000304 	.word	0x20000304
 80027a8:	40000400 	.word	0x40000400
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	200002ea 	.word	0x200002ea
 80027b4:	08006d71 	.word	0x08006d71

080027b8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027b8:	4770      	bx	lr

080027ba <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80027ba:	4770      	bx	lr

080027bc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027bc:	2001      	movs	r0, #1
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_MspInit+0x2c>)
{
 80027c0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c2:	6999      	ldr	r1, [r3, #24]
 80027c4:	4301      	orrs	r1, r0
 80027c6:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027c8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ca:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027cc:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ce:	4002      	ands	r2, r0
 80027d0:	9200      	str	r2, [sp, #0]
 80027d2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d4:	69da      	ldr	r2, [r3, #28]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	61da      	str	r2, [r3, #28]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	400b      	ands	r3, r1
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	9b01      	ldr	r3, [sp, #4]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027e2:	b002      	add	sp, #8
 80027e4:	4770      	bx	lr
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	40021000 	.word	0x40021000

080027ec <NMI_Handler>:
 80027ec:	4770      	bx	lr

080027ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ee:	e7fe      	b.n	80027ee <HardFault_Handler>

080027f0 <SVC_Handler>:
 80027f0:	4770      	bx	lr

080027f2 <PendSV_Handler>:
 80027f2:	4770      	bx	lr

080027f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027f6:	f000 fbf5 	bl	8002fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027fa:	bd10      	pop	{r4, pc}

080027fc <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80027fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80027fe:	f001 f9b1 	bl	8003b64 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002802:	bd10      	pop	{r4, pc}

08002804 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002804:	4770      	bx	lr
	...

08002808 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002808:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800280a:	4803      	ldr	r0, [pc, #12]	; (8002818 <DMA1_Channel2_3_IRQHandler+0x10>)
 800280c:	f001 f941 	bl	8003a92 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <DMA1_Channel2_3_IRQHandler+0x14>)
 8002812:	f001 f93e 	bl	8003a92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002816:	bd10      	pop	{r4, pc}
 8002818:	20000324 	.word	0x20000324
 800281c:	20000688 	.word	0x20000688

08002820 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8002820:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002822:	4802      	ldr	r0, [pc, #8]	; (800282c <DMA1_Channel4_5_IRQHandler+0xc>)
 8002824:	f001 f935 	bl	8003a92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8002828:	bd10      	pop	{r4, pc}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	20000644 	.word	0x20000644

08002830 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002830:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002832:	4802      	ldr	r0, [pc, #8]	; (800283c <ADC1_IRQHandler+0xc>)
 8002834:	f000 fe1c 	bl	8003470 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002838:	bd10      	pop	{r4, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	20000368 	.word	0x20000368

08002840 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
	TIM3->CNT=0;
 8002840:	2200      	movs	r2, #0
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x24>)
 8002844:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
 // HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x28>)
 8002848:	3a02      	subs	r2, #2
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	611a      	str	r2, [r3, #16]

 // sin_step=0;sinStatus=0;TIM3->CCR2=0;TIM3->CCR1=0;

  if (SinWave==swStart) {
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2c>)
 8002850:	781a      	ldrb	r2, [r3, #0]
 8002852:	2a01      	cmp	r2, #1
 8002854:	d105      	bne.n	8002862 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x22>
	  SinWave=swGEN;
 8002856:	3201      	adds	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
	  TIM1->CCR3=500;
 800285a:	32f3      	adds	r2, #243	; 0xf3
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>)
 800285e:	32ff      	adds	r2, #255	; 0xff
 8002860:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002862:	4770      	bx	lr
 8002864:	40000400 	.word	0x40000400
 8002868:	20000584 	.word	0x20000584
 800286c:	20000314 	.word	0x20000314
 8002870:	40012c00 	.word	0x40012c00

08002874 <TIM3_IRQHandler>:

  /* USER CODE END TIM3_IRQn 0 */
 // HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */

  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8002874:	2202      	movs	r2, #2
 8002876:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <TIM3_IRQHandler+0xb4>)
 8002878:	4252      	negs	r2, r2
 800287a:	681b      	ldr	r3, [r3, #0]
{
 800287c:	b570      	push	{r4, r5, r6, lr}
  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 800287e:	611a      	str	r2, [r3, #16]

	if ((SinWave==swStop) || (SinWave==swStart) || (SinWave==swNOP))  {
 8002880:	4b2a      	ldr	r3, [pc, #168]	; (800292c <TIM3_IRQHandler+0xb8>)
 8002882:	4d2b      	ldr	r5, [pc, #172]	; (8002930 <TIM3_IRQHandler+0xbc>)
 8002884:	781a      	ldrb	r2, [r3, #0]
 8002886:	2a00      	cmp	r2, #0
 8002888:	d005      	beq.n	8002896 <TIM3_IRQHandler+0x22>
 800288a:	781a      	ldrb	r2, [r3, #0]
 800288c:	2a01      	cmp	r2, #1
 800288e:	d002      	beq.n	8002896 <TIM3_IRQHandler+0x22>
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	2a03      	cmp	r2, #3
 8002894:	d10c      	bne.n	80028b0 <TIM3_IRQHandler+0x3c>
 		TIM3->CCR2=0;
 8002896:	2200      	movs	r2, #0
 8002898:	4926      	ldr	r1, [pc, #152]	; (8002934 <TIM3_IRQHandler+0xc0>)
 800289a:	638a      	str	r2, [r1, #56]	; 0x38
 		TIM3->CCR1=0;
 800289c:	634a      	str	r2, [r1, #52]	; 0x34
 		//TIM1->CCR3=0;
 		sin_step=0;
 800289e:	802a      	strh	r2, [r5, #0]
 		if (SinWave==swNOP) {return;}
 80028a0:	781a      	ldrb	r2, [r3, #0]
 80028a2:	2a03      	cmp	r2, #3
 80028a4:	d026      	beq.n	80028f4 <TIM3_IRQHandler+0x80>

 	   	if (SinWave==swStart)  {
 80028a6:	781a      	ldrb	r2, [r3, #0]
 80028a8:	2a01      	cmp	r2, #1
 80028aa:	d101      	bne.n	80028b0 <TIM3_IRQHandler+0x3c>
 	   		SinWave=swGEN;
 80028ac:	3201      	adds	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]

   /*if  (TIM1->CNT>499) {
	   sinStatus=1;}
   else {
	   sinStatus=0;}*/
	 if  ((TIM1->CNT>=497) && (sinStatus==0) ){
 80028b0:	21f8      	movs	r1, #248	; 0xf8
 80028b2:	4a21      	ldr	r2, [pc, #132]	; (8002938 <TIM3_IRQHandler+0xc4>)
 80028b4:	0049      	lsls	r1, r1, #1
 80028b6:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80028b8:	4c20      	ldr	r4, [pc, #128]	; (800293c <TIM3_IRQHandler+0xc8>)
 80028ba:	4288      	cmp	r0, r1
 80028bc:	d90b      	bls.n	80028d6 <TIM3_IRQHandler+0x62>
 80028be:	7823      	ldrb	r3, [r4, #0]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d107      	bne.n	80028d6 <TIM3_IRQHandler+0x62>
	  	sinStatus=1;
 80028c6:	2201      	movs	r2, #1
	  	TIM3->CCR1=0;
 80028c8:	491a      	ldr	r1, [pc, #104]	; (8002934 <TIM3_IRQHandler+0xc0>)
	  	sinStatus=1;
 80028ca:	7022      	strb	r2, [r4, #0]
	  	TIM3->CCR1=0;
 80028cc:	634b      	str	r3, [r1, #52]	; 0x34
	  	Re_Update=1;
 80028ce:	491c      	ldr	r1, [pc, #112]	; (8002940 <TIM3_IRQHandler+0xcc>)
 80028d0:	600a      	str	r2, [r1, #0]
   if (sinStatus==1) {
	   TIM3->CCR1=0;
	   TIM3->CCR2=GetSinus();
   }
	  	  CheckV_Feedback();
	  	  sin_step++;
 80028d2:	802b      	strh	r3, [r5, #0]
 80028d4:	e00e      	b.n	80028f4 <TIM3_IRQHandler+0x80>
	 if  ((TIM1->CNT>=998) && (sinStatus==1) ){
 80028d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028d8:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <TIM3_IRQHandler+0xd0>)
 80028da:	429a      	cmp	r2, r3
 80028dc:	d90b      	bls.n	80028f6 <TIM3_IRQHandler+0x82>
 80028de:	7823      	ldrb	r3, [r4, #0]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d107      	bne.n	80028f6 <TIM3_IRQHandler+0x82>
		sinStatus=0;
 80028e6:	2200      	movs	r2, #0
	   	TIM3->CCR2=0;
 80028e8:	4912      	ldr	r1, [pc, #72]	; (8002934 <TIM3_IRQHandler+0xc0>)
		sinStatus=0;
 80028ea:	7022      	strb	r2, [r4, #0]
	   	TIM3->CCR2=0;
 80028ec:	638a      	str	r2, [r1, #56]	; 0x38
	   	Re_Update=1;
 80028ee:	4914      	ldr	r1, [pc, #80]	; (8002940 <TIM3_IRQHandler+0xcc>)
 80028f0:	600b      	str	r3, [r1, #0]
	   	sin_step=0;
 80028f2:	802a      	strh	r2, [r5, #0]




  /* USER CODE END TIM3_IRQn 1 */
}
 80028f4:	bd70      	pop	{r4, r5, r6, pc}
   if (sinStatus==0) {
 80028f6:	7823      	ldrb	r3, [r4, #0]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d104      	bne.n	8002908 <TIM3_IRQHandler+0x94>
	   TIM3->CCR2=0;
 80028fe:	4e0d      	ldr	r6, [pc, #52]	; (8002934 <TIM3_IRQHandler+0xc0>)
 8002900:	63b3      	str	r3, [r6, #56]	; 0x38
	   TIM3->CCR1=GetSinus();
 8002902:	f7ff fb75 	bl	8001ff0 <GetSinus>
 8002906:	6370      	str	r0, [r6, #52]	; 0x34
   if (sinStatus==1) {
 8002908:	7823      	ldrb	r3, [r4, #0]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d105      	bne.n	800291a <TIM3_IRQHandler+0xa6>
	   TIM3->CCR1=0;
 800290e:	2300      	movs	r3, #0
 8002910:	4c08      	ldr	r4, [pc, #32]	; (8002934 <TIM3_IRQHandler+0xc0>)
 8002912:	6363      	str	r3, [r4, #52]	; 0x34
	   TIM3->CCR2=GetSinus();
 8002914:	f7ff fb6c 	bl	8001ff0 <GetSinus>
 8002918:	63a0      	str	r0, [r4, #56]	; 0x38
	  	  CheckV_Feedback();
 800291a:	f7fe ff21 	bl	8001760 <CheckV_Feedback>
	  	  sin_step++;
 800291e:	882b      	ldrh	r3, [r5, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	b29b      	uxth	r3, r3
 8002924:	e7d5      	b.n	80028d2 <TIM3_IRQHandler+0x5e>
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	20000544 	.word	0x20000544
 800292c:	20000314 	.word	0x20000314
 8002930:	200002ea 	.word	0x200002ea
 8002934:	40000400 	.word	0x40000400
 8002938:	40012c00 	.word	0x40012c00
 800293c:	200002e8 	.word	0x200002e8
 8002940:	2000030c 	.word	0x2000030c
 8002944:	000003e5 	.word	0x000003e5

08002948 <TIM14_IRQHandler>:

  /* USER CODE END TIM14_IRQn 0 */
 // HAL_TIM_IRQHandler(&htim14);
  /* USER CODE BEGIN TIM14_IRQn 1 */

  __HAL_TIM_CLEAR_FLAG(&htim14, TIM_FLAG_UPDATE);
 8002948:	2202      	movs	r2, #2
 800294a:	4b02      	ldr	r3, [pc, #8]	; (8002954 <TIM14_IRQHandler+0xc>)
 800294c:	4252      	negs	r2, r2
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	611a      	str	r2, [r3, #16]
  	    		sin_step = 0;
  	    	}*/


  /* USER CODE END TIM14_IRQn 1 */
}
 8002952:	4770      	bx	lr
 8002954:	200005c4 	.word	0x200005c4

08002958 <TIM16_IRQHandler>:

  /* USER CODE END TIM16_IRQn 0 */
 // HAL_TIM_IRQHandler(&htim16);
  /* USER CODE BEGIN TIM16_IRQn 1 */

  __HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE);
 8002958:	2202      	movs	r2, #2
{
 800295a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE);
 800295c:	4b3b      	ldr	r3, [pc, #236]	; (8002a4c <TIM16_IRQHandler+0xf4>)
 800295e:	4252      	negs	r2, r2
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	611a      	str	r2, [r3, #16]

    	// Reset IWDG
      ResetWDG();
 8002964:	f7ff f832 	bl	80019cc <ResetWDG>

        //
        switch(BoardStatus) {
 8002968:	4c39      	ldr	r4, [pc, #228]	; (8002a50 <TIM16_IRQHandler+0xf8>)
 800296a:	7820      	ldrb	r0, [r4, #0]
 800296c:	b2c0      	uxtb	r0, r0
 800296e:	2803      	cmp	r0, #3
 8002970:	d816      	bhi.n	80029a0 <TIM16_IRQHandler+0x48>
 8002972:	f7fd fbc9 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002976:	1602      	.short	0x1602
 8002978:	2202      	.short	0x2202
      	  case sBoot:
      	  case sUnknown:
      	  	  //TIM3->ARR=sBoot_Delay;
      	  	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800297a:	2108      	movs	r1, #8
 800297c:	4835      	ldr	r0, [pc, #212]	; (8002a54 <TIM16_IRQHandler+0xfc>)
 800297e:	f001 fbf3 	bl	8004168 <HAL_GPIO_TogglePin>
      	  	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002982:	2101      	movs	r1, #1
 8002984:	4833      	ldr	r0, [pc, #204]	; (8002a54 <TIM16_IRQHandler+0xfc>)
 8002986:	f001 fbef 	bl	8004168 <HAL_GPIO_TogglePin>
      	  	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800298a:	2140      	movs	r1, #64	; 0x40
 800298c:	4831      	ldr	r0, [pc, #196]	; (8002a54 <TIM16_IRQHandler+0xfc>)
 800298e:	f001 fbeb 	bl	8004168 <HAL_GPIO_TogglePin>
      	  	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8002992:	4830      	ldr	r0, [pc, #192]	; (8002a54 <TIM16_IRQHandler+0xfc>)
 8002994:	2180      	movs	r1, #128	; 0x80
 8002996:	f001 fbe7 	bl	8004168 <HAL_GPIO_TogglePin>

      	  	  // when boot check faultflag
      	  	  buttonUpdate(&FaultFlag);
 800299a:	482f      	ldr	r0, [pc, #188]	; (8002a58 <TIM16_IRQHandler+0x100>)
 800299c:	f7ff fbfa 	bl	8002194 <buttonUpdate>
					  }
      		  	  break;
        }

  /* USER CODE END TIM16_IRQn 1 */
}
 80029a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      		  if (CalibMode == 1) {
 80029a2:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <TIM16_IRQHandler+0x104>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d002      	beq.n	80029b0 <TIM16_IRQHandler+0x58>
      		  	PrintCurrentState();
 80029aa:	f7ff f817 	bl	80019dc <PrintCurrentState>
    		  break;
 80029ae:	e7f7      	b.n	80029a0 <TIM16_IRQHandler+0x48>
      			  if (CalibCmdCheck()==1) {
 80029b0:	f7ff f92a 	bl	8001c08 <CalibCmdCheck>
 80029b4:	2801      	cmp	r0, #1
 80029b6:	d1f8      	bne.n	80029aa <TIM16_IRQHandler+0x52>
 80029b8:	e7f2      	b.n	80029a0 <TIM16_IRQHandler+0x48>
      		  	  	PrintCurrentState();
 80029ba:	f7ff f80f 	bl	80019dc <PrintCurrentState>
					if ((buttonUpdate(&FaultFlag) == isPressed) || (buttonUpdate(&FaultFlag) == isPressedLong)
 80029be:	4f26      	ldr	r7, [pc, #152]	; (8002a58 <TIM16_IRQHandler+0x100>)
 80029c0:	0038      	movs	r0, r7
 80029c2:	f7ff fbe7 	bl	8002194 <buttonUpdate>
 80029c6:	4d26      	ldr	r5, [pc, #152]	; (8002a60 <TIM16_IRQHandler+0x108>)
 80029c8:	4e26      	ldr	r6, [pc, #152]	; (8002a64 <TIM16_IRQHandler+0x10c>)
 80029ca:	2802      	cmp	r0, #2
 80029cc:	d11a      	bne.n	8002a04 <TIM16_IRQHandler+0xac>
						RstCnt++;
 80029ce:	682b      	ldr	r3, [r5, #0]
 80029d0:	4f25      	ldr	r7, [pc, #148]	; (8002a68 <TIM16_IRQHandler+0x110>)
 80029d2:	3301      	adds	r3, #1
 80029d4:	602b      	str	r3, [r5, #0]
						if (RstCnt==DelaySecBeforeAttemRst) {
 80029d6:	2b0a      	cmp	r3, #10
 80029d8:	d12a      	bne.n	8002a30 <TIM16_IRQHandler+0xd8>
							RstCnt=0;
 80029da:	2300      	movs	r3, #0
							HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin,GPIO_PIN_SET);
 80029dc:	2201      	movs	r2, #1
 80029de:	2120      	movs	r1, #32
 80029e0:	481c      	ldr	r0, [pc, #112]	; (8002a54 <TIM16_IRQHandler+0xfc>)
							RstCnt=0;
 80029e2:	602b      	str	r3, [r5, #0]
							HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin,GPIO_PIN_SET);
 80029e4:	f001 fba6 	bl	8004134 <HAL_GPIO_WritePin>
							TIM16->ARR=sRST_Delay;
 80029e8:	23fa      	movs	r3, #250	; 0xfa
 80029ea:	005b      	lsls	r3, r3, #1
							TIM16->ARR=sDEF_Delay;
 80029ec:	62fb      	str	r3, [r7, #44]	; 0x2c
						HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80029ee:	2180      	movs	r1, #128	; 0x80
 80029f0:	4818      	ldr	r0, [pc, #96]	; (8002a54 <TIM16_IRQHandler+0xfc>)
 80029f2:	f001 fbb9 	bl	8004168 <HAL_GPIO_TogglePin>
						BoardStatus=sFaultFlag;
 80029f6:	2303      	movs	r3, #3
						SinWave=swNOP;
 80029f8:	4a1c      	ldr	r2, [pc, #112]	; (8002a6c <TIM16_IRQHandler+0x114>)
						BoardStatus=sFaultFlag;
 80029fa:	7023      	strb	r3, [r4, #0]
						SinWave=swNOP;
 80029fc:	7013      	strb	r3, [r2, #0]
						FaultWaitCnt=0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	6033      	str	r3, [r6, #0]
 8002a02:	e7cd      	b.n	80029a0 <TIM16_IRQHandler+0x48>
					if ((buttonUpdate(&FaultFlag) == isPressed) || (buttonUpdate(&FaultFlag) == isPressedLong)
 8002a04:	0038      	movs	r0, r7
 8002a06:	f7ff fbc5 	bl	8002194 <buttonUpdate>
 8002a0a:	2803      	cmp	r0, #3
 8002a0c:	d0df      	beq.n	80029ce <TIM16_IRQHandler+0x76>
						  SinWave=swNOP;
 8002a0e:	2103      	movs	r1, #3
						  RstCnt=0;
 8002a10:	2200      	movs	r2, #0
						  SinWave=swNOP;
 8002a12:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <TIM16_IRQHandler+0x114>)
						  RstCnt=0;
 8002a14:	602a      	str	r2, [r5, #0]
						  SinWave=swNOP;
 8002a16:	7019      	strb	r1, [r3, #0]
						  FaultWaitCnt++;
 8002a18:	6833      	ldr	r3, [r6, #0]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	6033      	str	r3, [r6, #0]
						  if (FaultWaitCnt>=DelaySecBeforeStartAfterFault) {
 8002a1e:	2b09      	cmp	r3, #9
 8002a20:	dd0e      	ble.n	8002a40 <TIM16_IRQHandler+0xe8>
							  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,GPIO_PIN_RESET);
 8002a22:	317d      	adds	r1, #125	; 0x7d
 8002a24:	480b      	ldr	r0, [pc, #44]	; (8002a54 <TIM16_IRQHandler+0xfc>)
 8002a26:	f001 fb85 	bl	8004134 <HAL_GPIO_WritePin>
							  BoardStatus=sGEN;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	7023      	strb	r3, [r4, #0]
 8002a2e:	e7b7      	b.n	80029a0 <TIM16_IRQHandler+0x48>
							HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin,GPIO_PIN_RESET);
 8002a30:	2200      	movs	r2, #0
 8002a32:	2120      	movs	r1, #32
 8002a34:	4807      	ldr	r0, [pc, #28]	; (8002a54 <TIM16_IRQHandler+0xfc>)
 8002a36:	f001 fb7d 	bl	8004134 <HAL_GPIO_WritePin>
							TIM16->ARR=sDEF_Delay;
 8002a3a:	23fa      	movs	r3, #250	; 0xfa
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	e7d5      	b.n	80029ec <TIM16_IRQHandler+0x94>
							  BoardStatus=sFaultFlag;
 8002a40:	7021      	strb	r1, [r4, #0]
							  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8002a42:	4804      	ldr	r0, [pc, #16]	; (8002a54 <TIM16_IRQHandler+0xfc>)
 8002a44:	2180      	movs	r1, #128	; 0x80
 8002a46:	f001 fb8f 	bl	8004168 <HAL_GPIO_TogglePin>
 8002a4a:	e7a9      	b.n	80029a0 <TIM16_IRQHandler+0x48>
 8002a4c:	20000604 	.word	0x20000604
 8002a50:	200002ec 	.word	0x200002ec
 8002a54:	48000400 	.word	0x48000400
 8002a58:	200004d4 	.word	0x200004d4
 8002a5c:	200002f0 	.word	0x200002f0
 8002a60:	20000310 	.word	0x20000310
 8002a64:	20000308 	.word	0x20000308
 8002a68:	40014400 	.word	0x40014400
 8002a6c:	20000314 	.word	0x20000314

08002a70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a70:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a72:	4802      	ldr	r0, [pc, #8]	; (8002a7c <USART1_IRQHandler+0xc>)
 8002a74:	f003 fb6c 	bl	8006150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */


  /* USER CODE END USART1_IRQn 1 */
}
 8002a78:	bd10      	pop	{r4, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	200006cc 	.word	0x200006cc

08002a80 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002a80:	2101      	movs	r1, #1
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002a84:	4811      	ldr	r0, [pc, #68]	; (8002acc <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	4002      	ands	r2, r0
 8002a90:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	480e      	ldr	r0, [pc, #56]	; (8002ad0 <SystemInit+0x50>)
 8002a96:	4002      	ands	r2, r0
 8002a98:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	480d      	ldr	r0, [pc, #52]	; (8002ad4 <SystemInit+0x54>)
 8002a9e:	4002      	ands	r2, r0
 8002aa0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <SystemInit+0x58>)
 8002aa6:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002aa8:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002aaa:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aae:	4382      	bics	r2, r0
 8002ab0:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8002ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab4:	4809      	ldr	r0, [pc, #36]	; (8002adc <SystemInit+0x5c>)
 8002ab6:	4002      	ands	r2, r0
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002abc:	438a      	bics	r2, r1
 8002abe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	609a      	str	r2, [r3, #8]

}
 8002ac4:	4770      	bx	lr
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	08ffb80c 	.word	0x08ffb80c
 8002ad0:	fef6ffff 	.word	0xfef6ffff
 8002ad4:	fffbffff 	.word	0xfffbffff
 8002ad8:	ffc0ffff 	.word	0xffc0ffff
 8002adc:	fffffeec 	.word	0xfffffeec

08002ae0 <MX_TIM14_Init>:
}
/* TIM14 init function */
void MX_TIM14_Init(void)
{

  htim14.Instance = TIM14;
 8002ae0:	480a      	ldr	r0, [pc, #40]	; (8002b0c <MX_TIM14_Init+0x2c>)
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <MX_TIM14_Init+0x30>)
{
 8002ae4:	b510      	push	{r4, lr}
  htim14.Instance = TIM14;
 8002ae6:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 1;
 8002ae8:	2301      	movs	r3, #1
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim14.Init.Period = 1000;
 8002aea:	22fa      	movs	r2, #250	; 0xfa
  htim14.Init.Prescaler = 1;
 8002aec:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aee:	2300      	movs	r3, #0
  htim14.Init.Period = 1000;
 8002af0:	0092      	lsls	r2, r2, #2
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af2:	6083      	str	r3, [r0, #8]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af4:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002af6:	3380      	adds	r3, #128	; 0x80
  htim14.Init.Period = 1000;
 8002af8:	60c2      	str	r2, [r0, #12]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002afa:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002afc:	f002 f9d0 	bl	8004ea0 <HAL_TIM_Base_Init>
 8002b00:	2800      	cmp	r0, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM14_Init+0x28>
  {
    Error_Handler();
 8002b04:	f7ff fe58 	bl	80027b8 <Error_Handler>
  }

}
 8002b08:	bd10      	pop	{r4, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	200005c4 	.word	0x200005c4
 8002b10:	40002000 	.word	0x40002000

08002b14 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{

  htim16.Instance = TIM16;
 8002b14:	480a      	ldr	r0, [pc, #40]	; (8002b40 <MX_TIM16_Init+0x2c>)
 8002b16:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <MX_TIM16_Init+0x30>)
{
 8002b18:	b510      	push	{r4, lr}
  htim16.Instance = TIM16;
 8002b1a:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 47999;
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <MX_TIM16_Init+0x34>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim16.Init.Period = 1000;
 8002b1e:	22fa      	movs	r2, #250	; 0xfa
  htim16.Init.Prescaler = 47999;
 8002b20:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b22:	2300      	movs	r3, #0
  htim16.Init.Period = 1000;
 8002b24:	0092      	lsls	r2, r2, #2
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b26:	6083      	str	r3, [r0, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b28:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8002b2a:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b2c:	3380      	adds	r3, #128	; 0x80
  htim16.Init.Period = 1000;
 8002b2e:	60c2      	str	r2, [r0, #12]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b30:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002b32:	f002 f9b5 	bl	8004ea0 <HAL_TIM_Base_Init>
 8002b36:	2800      	cmp	r0, #0
 8002b38:	d001      	beq.n	8002b3e <MX_TIM16_Init+0x2a>
  {
    Error_Handler();
 8002b3a:	f7ff fe3d 	bl	80027b8 <Error_Handler>
  }

}
 8002b3e:	bd10      	pop	{r4, pc}
 8002b40:	20000604 	.word	0x20000604
 8002b44:	40014400 	.word	0x40014400
 8002b48:	0000bb7f 	.word	0x0000bb7f

08002b4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM1)
 8002b4e:	6803      	ldr	r3, [r0, #0]
 8002b50:	4a28      	ldr	r2, [pc, #160]	; (8002bf4 <HAL_TIM_Base_MspInit+0xa8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d113      	bne.n	8002b7e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b56:	2080      	movs	r0, #128	; 0x80
 8002b58:	4a27      	ldr	r2, [pc, #156]	; (8002bf8 <HAL_TIM_Base_MspInit+0xac>)
 8002b5a:	0100      	lsls	r0, r0, #4
 8002b5c:	6991      	ldr	r1, [r2, #24]
 8002b5e:	4301      	orrs	r1, r0
 8002b60:	6191      	str	r1, [r2, #24]
 8002b62:	6993      	ldr	r3, [r2, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002b64:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b66:	4003      	ands	r3, r0
 8002b68:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002b6a:	200d      	movs	r0, #13
 8002b6c:	0011      	movs	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b6e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002b70:	f000 fdbc 	bl	80036ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002b74:	200d      	movs	r0, #13
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 3, 3);
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002b76:	f000 fdf3 	bl	8003760 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002b7a:	b005      	add	sp, #20
 8002b7c:	bd00      	pop	{pc}
  else if(tim_baseHandle->Instance==TIM3)
 8002b7e:	4a1f      	ldr	r2, [pc, #124]	; (8002bfc <HAL_TIM_Base_MspInit+0xb0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d10f      	bne.n	8002ba4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b84:	2002      	movs	r0, #2
 8002b86:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <HAL_TIM_Base_MspInit+0xac>)
 8002b88:	69d1      	ldr	r1, [r2, #28]
 8002b8a:	4301      	orrs	r1, r0
 8002b8c:	61d1      	str	r1, [r2, #28]
 8002b8e:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b90:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b92:	4003      	ands	r3, r0
 8002b94:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b96:	300e      	adds	r0, #14
 8002b98:	0011      	movs	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b9a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b9c:	f000 fda6 	bl	80036ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ba0:	2010      	movs	r0, #16
 8002ba2:	e7e8      	b.n	8002b76 <HAL_TIM_Base_MspInit+0x2a>
  else if(tim_baseHandle->Instance==TIM14)
 8002ba4:	4a16      	ldr	r2, [pc, #88]	; (8002c00 <HAL_TIM_Base_MspInit+0xb4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d110      	bne.n	8002bcc <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002baa:	2080      	movs	r0, #128	; 0x80
 8002bac:	4a12      	ldr	r2, [pc, #72]	; (8002bf8 <HAL_TIM_Base_MspInit+0xac>)
 8002bae:	0040      	lsls	r0, r0, #1
 8002bb0:	69d1      	ldr	r1, [r2, #28]
 8002bb2:	4301      	orrs	r1, r0
 8002bb4:	61d1      	str	r1, [r2, #28]
 8002bb6:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8002bb8:	2203      	movs	r2, #3
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002bba:	4003      	ands	r3, r0
 8002bbc:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8002bbe:	38ed      	subs	r0, #237	; 0xed
 8002bc0:	0011      	movs	r1, r2
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002bc2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8002bc4:	f000 fd92 	bl	80036ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002bc8:	2013      	movs	r0, #19
 8002bca:	e7d4      	b.n	8002b76 <HAL_TIM_Base_MspInit+0x2a>
  else if(tim_baseHandle->Instance==TIM16)
 8002bcc:	4a0d      	ldr	r2, [pc, #52]	; (8002c04 <HAL_TIM_Base_MspInit+0xb8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d1d3      	bne.n	8002b7a <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002bd2:	2080      	movs	r0, #128	; 0x80
 8002bd4:	4a08      	ldr	r2, [pc, #32]	; (8002bf8 <HAL_TIM_Base_MspInit+0xac>)
 8002bd6:	0280      	lsls	r0, r0, #10
 8002bd8:	6991      	ldr	r1, [r2, #24]
 8002bda:	4301      	orrs	r1, r0
 8002bdc:	6191      	str	r1, [r2, #24]
 8002bde:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 3, 3);
 8002be0:	2203      	movs	r2, #3
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002be2:	4003      	ands	r3, r0
 8002be4:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 3, 3);
 8002be6:	2015      	movs	r0, #21
 8002be8:	0011      	movs	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002bea:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 3, 3);
 8002bec:	f000 fd7e 	bl	80036ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002bf0:	2015      	movs	r0, #21
 8002bf2:	e7c0      	b.n	8002b76 <HAL_TIM_Base_MspInit+0x2a>
 8002bf4:	40012c00 	.word	0x40012c00
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	40002000 	.word	0x40002000
 8002c04:	40014400 	.word	0x40014400

08002c08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c08:	b530      	push	{r4, r5, lr}
 8002c0a:	0004      	movs	r4, r0
 8002c0c:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0e:	2214      	movs	r2, #20
 8002c10:	2100      	movs	r1, #0
 8002c12:	a803      	add	r0, sp, #12
 8002c14:	f003 fb7f 	bl	8006316 <memset>
  if(timHandle->Instance==TIM1)
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	4a27      	ldr	r2, [pc, #156]	; (8002cb8 <HAL_TIM_MspPostInit+0xb0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d12f      	bne.n	8002c80 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c20:	2080      	movs	r0, #128	; 0x80
 8002c22:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <HAL_TIM_MspPostInit+0xb4>)
 8002c24:	02c0      	lsls	r0, r0, #11
 8002c26:	6959      	ldr	r1, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM1 GPIO Configuration    
    PB1     ------> TIM1_CH3N
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = CH4_Pin;
 8002c28:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2a:	4301      	orrs	r1, r0
 8002c2c:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2e:	2180      	movs	r1, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c30:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c32:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c34:	0289      	lsls	r1, r1, #10
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c36:	4002      	ands	r2, r0
 8002c38:	9200      	str	r2, [sp, #0]
 8002c3a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3c:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8002c3e:	4820      	ldr	r0, [pc, #128]	; (8002cc0 <HAL_TIM_MspPostInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c40:	430a      	orrs	r2, r1
 8002c42:	615a      	str	r2, [r3, #20]
 8002c44:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = CH4_Pin;
 8002c46:	9403      	str	r4, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c48:	400b      	ands	r3, r1
 8002c4a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8002c4c:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c50:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c52:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002c54:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8002c56:	f001 f943 	bl	8003ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CH3_Pin;
 8002c5a:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8002c5c:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = CH3_Pin;
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
    HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8002c64:	05c0      	lsls	r0, r0, #23
 8002c66:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c6c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002c6e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8002c70:	f001 f936 	bl	8003ee0 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PA10);
 8002c74:	2080      	movs	r0, #128	; 0x80
 8002c76:	0400      	lsls	r0, r0, #16
 8002c78:	f001 fa86 	bl	8004188 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c7c:	b009      	add	sp, #36	; 0x24
 8002c7e:	bd30      	pop	{r4, r5, pc}
  else if(timHandle->Instance==TIM3)
 8002c80:	4a10      	ldr	r2, [pc, #64]	; (8002cc4 <HAL_TIM_MspPostInit+0xbc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d1fa      	bne.n	8002c7c <HAL_TIM_MspPostInit+0x74>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c86:	2080      	movs	r0, #128	; 0x80
 8002c88:	4a0c      	ldr	r2, [pc, #48]	; (8002cbc <HAL_TIM_MspPostInit+0xb4>)
 8002c8a:	0280      	lsls	r0, r0, #10
 8002c8c:	6951      	ldr	r1, [r2, #20]
 8002c8e:	4301      	orrs	r1, r0
 8002c90:	6151      	str	r1, [r2, #20]
 8002c92:	6953      	ldr	r3, [r2, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c94:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c96:	4003      	ands	r3, r0
 8002c98:	9302      	str	r3, [sp, #8]
 8002c9a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = CH1_Pin|CH2_Pin;
 8002c9c:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9e:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = CH1_Pin|CH2_Pin;
 8002ca0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	3bbe      	subs	r3, #190	; 0xbe
 8002ca4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002caa:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002cac:	3b02      	subs	r3, #2
 8002cae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb0:	f001 f916 	bl	8003ee0 <HAL_GPIO_Init>
}
 8002cb4:	e7e2      	b.n	8002c7c <HAL_TIM_MspPostInit+0x74>
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	40012c00 	.word	0x40012c00
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	48000400 	.word	0x48000400
 8002cc4:	40000400 	.word	0x40000400

08002cc8 <MX_TIM1_Init>:
{
 8002cc8:	b530      	push	{r4, r5, lr}
 8002cca:	b095      	sub	sp, #84	; 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ccc:	2210      	movs	r2, #16
 8002cce:	2100      	movs	r1, #0
 8002cd0:	a802      	add	r0, sp, #8
 8002cd2:	f003 fb20 	bl	8006316 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4668      	mov	r0, sp
 8002cdc:	f003 fb1b 	bl	8006316 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ce0:	221c      	movs	r2, #28
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	a806      	add	r0, sp, #24
 8002ce6:	f003 fb16 	bl	8006316 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002cea:	221c      	movs	r2, #28
 8002cec:	2100      	movs	r1, #0
 8002cee:	a80d      	add	r0, sp, #52	; 0x34
 8002cf0:	f003 fb11 	bl	8006316 <memset>
  htim1.Instance = TIM1;
 8002cf4:	4c2e      	ldr	r4, [pc, #184]	; (8002db0 <MX_TIM1_Init+0xe8>)
 8002cf6:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <MX_TIM1_Init+0xec>)
  htim1.Init.Period = 1000;
 8002cf8:	22fa      	movs	r2, #250	; 0xfa
  htim1.Instance = TIM1;
 8002cfa:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 960;
 8002cfc:	23f0      	movs	r3, #240	; 0xf0
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d02:	2300      	movs	r3, #0
  htim1.Init.Period = 1000;
 8002d04:	0092      	lsls	r2, r2, #2
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d06:	60a3      	str	r3, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d08:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d0a:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d0c:	0020      	movs	r0, r4
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d0e:	3380      	adds	r3, #128	; 0x80
  htim1.Init.Period = 1000;
 8002d10:	60e2      	str	r2, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d12:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d14:	f002 f8c4 	bl	8004ea0 <HAL_TIM_Base_Init>
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_TIM1_Init+0x58>
    Error_Handler();
 8002d1c:	f7ff fd4c 	bl	80027b8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d20:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d22:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d24:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d26:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d28:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d2a:	f002 fbe3 	bl	80054f4 <HAL_TIM_ConfigClockSource>
 8002d2e:	2800      	cmp	r0, #0
 8002d30:	d001      	beq.n	8002d36 <MX_TIM1_Init+0x6e>
    Error_Handler();
 8002d32:	f7ff fd41 	bl	80027b8 <Error_Handler>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002d36:	0020      	movs	r0, r4
 8002d38:	f002 f914 	bl	8004f64 <HAL_TIM_OC_Init>
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM1_Init+0x7c>
    Error_Handler();
 8002d40:	f7ff fd3a 	bl	80027b8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d44:	2500      	movs	r5, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d46:	4669      	mov	r1, sp
 8002d48:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4a:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d4c:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d4e:	f002 fdd5 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 8002d52:	42a8      	cmp	r0, r5
 8002d54:	d001      	beq.n	8002d5a <MX_TIM1_Init+0x92>
    Error_Handler();
 8002d56:	f7ff fd2f 	bl	80027b8 <Error_Handler>
  sConfigOC.Pulse = 500;
 8002d5a:	23fa      	movs	r3, #250	; 0xfa
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d60:	2208      	movs	r2, #8
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8002d62:	3bf4      	subs	r3, #244	; 0xf4
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d64:	a906      	add	r1, sp, #24
 8002d66:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002d68:	9506      	str	r5, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d6a:	9508      	str	r5, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d6c:	9509      	str	r5, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d6e:	950a      	str	r5, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8002d70:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCIDLESTATE_SET;
 8002d72:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d74:	f002 fa28 	bl	80051c8 <HAL_TIM_OC_ConfigChannel>
 8002d78:	2800      	cmp	r0, #0
 8002d7a:	d001      	beq.n	8002d80 <MX_TIM1_Init+0xb8>
    Error_Handler();
 8002d7c:	f7ff fd1c 	bl	80027b8 <Error_Handler>
  sBreakDeadTimeConfig.DeadTime = 0b01011111;
 8002d80:	225f      	movs	r2, #95	; 0x5f
 8002d82:	9210      	str	r2, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d84:	2280      	movs	r2, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d86:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d88:	0192      	lsls	r2, r2, #6
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d8a:	a90d      	add	r1, sp, #52	; 0x34
 8002d8c:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d8e:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d90:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d92:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d94:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d96:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d98:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d9a:	f002 fdfb 	bl	8005994 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d001      	beq.n	8002da6 <MX_TIM1_Init+0xde>
    Error_Handler();
 8002da2:	f7ff fd09 	bl	80027b8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8002da6:	0020      	movs	r0, r4
 8002da8:	f7ff ff2e 	bl	8002c08 <HAL_TIM_MspPostInit>
}
 8002dac:	b015      	add	sp, #84	; 0x54
 8002dae:	bd30      	pop	{r4, r5, pc}
 8002db0:	20000584 	.word	0x20000584
 8002db4:	40012c00 	.word	0x40012c00

08002db8 <MX_TIM3_Init>:
{
 8002db8:	b510      	push	{r4, lr}
 8002dba:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dbc:	2210      	movs	r2, #16
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	a803      	add	r0, sp, #12
 8002dc2:	f003 faa8 	bl	8006316 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc6:	2208      	movs	r2, #8
 8002dc8:	2100      	movs	r1, #0
 8002dca:	a801      	add	r0, sp, #4
 8002dcc:	f003 faa3 	bl	8006316 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dd0:	221c      	movs	r2, #28
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	a807      	add	r0, sp, #28
 8002dd6:	f003 fa9e 	bl	8006316 <memset>
  htim3.Instance = TIM3;
 8002dda:	4c26      	ldr	r4, [pc, #152]	; (8002e74 <MX_TIM3_Init+0xbc>)
 8002ddc:	4b26      	ldr	r3, [pc, #152]	; (8002e78 <MX_TIM3_Init+0xc0>)
  htim3.Init.Period = 1000;
 8002dde:	22fa      	movs	r2, #250	; 0xfa
  htim3.Instance = TIM3;
 8002de0:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 1;
 8002de2:	2301      	movs	r3, #1
 8002de4:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de6:	2300      	movs	r3, #0
  htim3.Init.Period = 1000;
 8002de8:	0092      	lsls	r2, r2, #2
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dea:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dec:	6123      	str	r3, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002dee:	0020      	movs	r0, r4
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002df0:	3380      	adds	r3, #128	; 0x80
  htim3.Init.Period = 1000;
 8002df2:	60e2      	str	r2, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002df4:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002df6:	f002 f853 	bl	8004ea0 <HAL_TIM_Base_Init>
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM3_Init+0x4a>
    Error_Handler();
 8002dfe:	f7ff fcdb 	bl	80027b8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e02:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e04:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e06:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e08:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e0a:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e0c:	f002 fb72 	bl	80054f4 <HAL_TIM_ConfigClockSource>
 8002e10:	2800      	cmp	r0, #0
 8002e12:	d001      	beq.n	8002e18 <MX_TIM3_Init+0x60>
    Error_Handler();
 8002e14:	f7ff fcd0 	bl	80027b8 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e18:	0020      	movs	r0, r4
 8002e1a:	f002 f909 	bl	8005030 <HAL_TIM_PWM_Init>
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	d001      	beq.n	8002e26 <MX_TIM3_Init+0x6e>
    Error_Handler();
 8002e22:	f7ff fcc9 	bl	80027b8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e26:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e28:	a901      	add	r1, sp, #4
 8002e2a:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e2c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e2e:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e30:	f002 fd64 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 8002e34:	2800      	cmp	r0, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM3_Init+0x84>
    Error_Handler();
 8002e38:	f7ff fcbe 	bl	80027b8 <Error_Handler>
  sConfigOC.Pulse = 0;
 8002e3c:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e3e:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e40:	a907      	add	r1, sp, #28
 8002e42:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e44:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8002e46:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e48:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e4a:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e4c:	f002 fa64 	bl	8005318 <HAL_TIM_PWM_ConfigChannel>
 8002e50:	2800      	cmp	r0, #0
 8002e52:	d001      	beq.n	8002e58 <MX_TIM3_Init+0xa0>
    Error_Handler();
 8002e54:	f7ff fcb0 	bl	80027b8 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e58:	2204      	movs	r2, #4
 8002e5a:	a907      	add	r1, sp, #28
 8002e5c:	0020      	movs	r0, r4
 8002e5e:	f002 fa5b 	bl	8005318 <HAL_TIM_PWM_ConfigChannel>
 8002e62:	2800      	cmp	r0, #0
 8002e64:	d001      	beq.n	8002e6a <MX_TIM3_Init+0xb2>
    Error_Handler();
 8002e66:	f7ff fca7 	bl	80027b8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8002e6a:	0020      	movs	r0, r4
 8002e6c:	f7ff fecc 	bl	8002c08 <HAL_TIM_MspPostInit>
}
 8002e70:	b00e      	add	sp, #56	; 0x38
 8002e72:	bd10      	pop	{r4, pc}
 8002e74:	20000544 	.word	0x20000544
 8002e78:	40000400 	.word	0x40000400

08002e7c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8002e7c:	480b      	ldr	r0, [pc, #44]	; (8002eac <MX_USART1_UART_Init+0x30>)
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <MX_USART1_UART_Init+0x34>)
{
 8002e80:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8002e82:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002e84:	23e1      	movs	r3, #225	; 0xe1
 8002e86:	025b      	lsls	r3, r3, #9
 8002e88:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e8a:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e8c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e8e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e90:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e92:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e94:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e96:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e98:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e9a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e9c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e9e:	f003 f887 	bl	8005fb0 <HAL_UART_Init>
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 8002ea6:	f7ff fc87 	bl	80027b8 <Error_Handler>
  }

}
 8002eaa:	bd10      	pop	{r4, pc}
 8002eac:	200006cc 	.word	0x200006cc
 8002eb0:	40013800 	.word	0x40013800

08002eb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002eb4:	b530      	push	{r4, r5, lr}
 8002eb6:	0005      	movs	r5, r0
 8002eb8:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eba:	2214      	movs	r2, #20
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	a803      	add	r0, sp, #12
 8002ec0:	f003 fa29 	bl	8006316 <memset>
  if(uartHandle->Instance==USART1)
 8002ec4:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <HAL_UART_MspInit+0xd0>)
 8002ec6:	682a      	ldr	r2, [r5, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d159      	bne.n	8002f80 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ecc:	2080      	movs	r0, #128	; 0x80
 8002ece:	4b2e      	ldr	r3, [pc, #184]	; (8002f88 <HAL_UART_MspInit+0xd4>)
 8002ed0:	01c0      	lsls	r0, r0, #7
 8002ed2:	6999      	ldr	r1, [r3, #24]
 8002ed4:	4301      	orrs	r1, r0
 8002ed6:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8002eda:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002edc:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ede:	4002      	ands	r2, r0
 8002ee0:	9201      	str	r2, [sp, #4]
 8002ee2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee4:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee6:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	615a      	str	r2, [r3, #20]
 8002eec:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eee:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef0:	400b      	ands	r3, r1
 8002ef2:	9302      	str	r3, [sp, #8]
 8002ef4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8002ef6:	2382      	movs	r3, #130	; 0x82
 8002ef8:	021b      	lsls	r3, r3, #8
 8002efa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efc:	2302      	movs	r3, #2
 8002efe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f00:	3301      	adds	r3, #1
 8002f02:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f04:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002f06:	3b02      	subs	r3, #2
 8002f08:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0a:	f000 ffe9 	bl	8003ee0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002f0e:	4c1f      	ldr	r4, [pc, #124]	; (8002f8c <HAL_UART_MspInit+0xd8>)
 8002f10:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <HAL_UART_MspInit+0xdc>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f12:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002f14:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f16:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f18:	0020      	movs	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f1a:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f1c:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f1e:	60e2      	str	r2, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f20:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f22:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002f24:	61a3      	str	r3, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f26:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f28:	f000 fca2 	bl	8003870 <HAL_DMA_Init>
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8002f30:	f7ff fc42 	bl	80027b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002f34:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <HAL_UART_MspInit+0xe0>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002f36:	666c      	str	r4, [r5, #100]	; 0x64
 8002f38:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002f3a:	4c17      	ldr	r4, [pc, #92]	; (8002f98 <HAL_UART_MspInit+0xe4>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f3c:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002f3e:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f40:	2310      	movs	r3, #16
 8002f42:	6063      	str	r3, [r4, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f44:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f46:	0020      	movs	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f48:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f4a:	60e2      	str	r2, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f4c:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f4e:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f50:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f52:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f54:	f000 fc8c 	bl	8003870 <HAL_DMA_Init>
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_UART_MspInit+0xac>
    {
      Error_Handler();
 8002f5c:	f7ff fc2c 	bl	80027b8 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	4a0e      	ldr	r2, [pc, #56]	; (8002f9c <HAL_UART_MspInit+0xe8>)
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	6811      	ldr	r1, [r2, #0]

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 3);
 8002f68:	201b      	movs	r0, #27
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 3);
 8002f6e:	2203      	movs	r2, #3
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002f70:	662c      	str	r4, [r5, #96]	; 0x60
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 3);
 8002f72:	0011      	movs	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002f74:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 3);
 8002f76:	f000 fbb9 	bl	80036ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f7a:	201b      	movs	r0, #27
 8002f7c:	f000 fbf0 	bl	8003760 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f80:	b009      	add	sp, #36	; 0x24
 8002f82:	bd30      	pop	{r4, r5, pc}
 8002f84:	40013800 	.word	0x40013800
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	20000688 	.word	0x20000688
 8002f90:	40020030 	.word	0x40020030
 8002f94:	40020044 	.word	0x40020044
 8002f98:	20000644 	.word	0x20000644
 8002f9c:	40010000 	.word	0x40010000

08002fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa0:	b510      	push	{r4, lr}
 8002fa2:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8002fa4:	f001 fd0a 	bl	80049bc <HAL_RCC_GetHCLKFreq>
 8002fa8:	21fa      	movs	r1, #250	; 0xfa
 8002faa:	0089      	lsls	r1, r1, #2
 8002fac:	f7fd f8b6 	bl	800011c <__udivsi3>
 8002fb0:	f000 fbe8 	bl	8003784 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	0021      	movs	r1, r4
 8002fba:	4240      	negs	r0, r0
 8002fbc:	f000 fb96 	bl	80036ec <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	bd10      	pop	{r4, pc}

08002fc4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fc4:	2310      	movs	r3, #16
 8002fc6:	4a06      	ldr	r2, [pc, #24]	; (8002fe0 <HAL_Init+0x1c>)
{
 8002fc8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fca:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fcc:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fd2:	f7ff ffe5 	bl	8002fa0 <HAL_InitTick>
  HAL_MspInit();
 8002fd6:	f7ff fbf1 	bl	80027bc <HAL_MspInit>
}
 8002fda:	2000      	movs	r0, #0
 8002fdc:	bd10      	pop	{r4, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	40022000 	.word	0x40022000

08002fe4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002fe4:	4a02      	ldr	r2, [pc, #8]	; (8002ff0 <HAL_IncTick+0xc>)
 8002fe6:	6813      	ldr	r3, [r2, #0]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	6013      	str	r3, [r2, #0]
}
 8002fec:	4770      	bx	lr
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	2000073c 	.word	0x2000073c

08002ff4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002ff4:	4b01      	ldr	r3, [pc, #4]	; (8002ffc <HAL_GetTick+0x8>)
 8002ff6:	6818      	ldr	r0, [r3, #0]
}
 8002ff8:	4770      	bx	lr
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	2000073c 	.word	0x2000073c

08003000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8003000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003002:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8003004:	f7ff fff6 	bl	8002ff4 <HAL_GetTick>
  uint32_t wait = Delay;
 8003008:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800300a:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 800300c:	1c63      	adds	r3, r4, #1
 800300e:	1e5a      	subs	r2, r3, #1
 8003010:	4193      	sbcs	r3, r2
 8003012:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003014:	f7ff ffee 	bl	8002ff4 <HAL_GetTick>
 8003018:	1b40      	subs	r0, r0, r5
 800301a:	42a0      	cmp	r0, r4
 800301c:	d3fa      	bcc.n	8003014 <HAL_Delay+0x14>
  {
  }
}
 800301e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08003020 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8003020:	2300      	movs	r3, #0
{
 8003022:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003024:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8003026:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003028:	6803      	ldr	r3, [r0, #0]
{
 800302a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	400a      	ands	r2, r1
 8003030:	2a01      	cmp	r2, #1
 8003032:	d107      	bne.n	8003044 <ADC_Enable+0x24>
 8003034:	6819      	ldr	r1, [r3, #0]
 8003036:	4211      	tst	r1, r2
 8003038:	d001      	beq.n	800303e <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800303a:	2000      	movs	r0, #0
}
 800303c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	0412      	lsls	r2, r2, #16
 8003042:	d4fa      	bmi.n	800303a <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003044:	6899      	ldr	r1, [r3, #8]
 8003046:	4a19      	ldr	r2, [pc, #100]	; (80030ac <ADC_Enable+0x8c>)
 8003048:	4211      	tst	r1, r2
 800304a:	d008      	beq.n	800305e <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304c:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003050:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003052:	4313      	orrs	r3, r2
 8003054:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003056:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003058:	4303      	orrs	r3, r0
 800305a:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800305c:	e7ee      	b.n	800303c <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 800305e:	2201      	movs	r2, #1
 8003060:	6899      	ldr	r1, [r3, #8]
 8003062:	430a      	orrs	r2, r1
 8003064:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003066:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <ADC_Enable+0x90>)
 8003068:	4912      	ldr	r1, [pc, #72]	; (80030b4 <ADC_Enable+0x94>)
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	f7fd f856 	bl	800011c <__udivsi3>
 8003070:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8003072:	9b01      	ldr	r3, [sp, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d115      	bne.n	80030a4 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8003078:	f7ff ffbc 	bl	8002ff4 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800307c:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800307e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	422b      	tst	r3, r5
 8003086:	d1d8      	bne.n	800303a <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003088:	f7ff ffb4 	bl	8002ff4 <HAL_GetTick>
 800308c:	1b80      	subs	r0, r0, r6
 800308e:	2802      	cmp	r0, #2
 8003090:	d9f6      	bls.n	8003080 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003092:	2310      	movs	r3, #16
 8003094:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 8003096:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003098:	4313      	orrs	r3, r2
 800309a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800309c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800309e:	432b      	orrs	r3, r5
 80030a0:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80030a2:	e7cb      	b.n	800303c <ADC_Enable+0x1c>
      wait_loop_index--;
 80030a4:	9b01      	ldr	r3, [sp, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	e7e2      	b.n	8003072 <ADC_Enable+0x52>
 80030ac:	80000017 	.word	0x80000017
 80030b0:	20000248 	.word	0x20000248
 80030b4:	000f4240 	.word	0x000f4240

080030b8 <HAL_ADC_Init>:
{
 80030b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ba:	0004      	movs	r4, r0
    return HAL_ERROR;
 80030bc:	2001      	movs	r0, #1
  if(hadc == NULL)
 80030be:	2c00      	cmp	r4, #0
 80030c0:	d100      	bne.n	80030c4 <HAL_ADC_Init+0xc>
 80030c2:	e0f6      	b.n	80032b2 <HAL_ADC_Init+0x1fa>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80030c4:	4b8f      	ldr	r3, [pc, #572]	; (8003304 <HAL_ADC_Init+0x24c>)
 80030c6:	6822      	ldr	r2, [r4, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d004      	beq.n	80030d6 <HAL_ADC_Init+0x1e>
 80030cc:	2174      	movs	r1, #116	; 0x74
 80030ce:	488e      	ldr	r0, [pc, #568]	; (8003308 <HAL_ADC_Init+0x250>)
 80030d0:	31ff      	adds	r1, #255	; 0xff
 80030d2:	f7ff fb72 	bl	80027ba <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80030d6:	6863      	ldr	r3, [r4, #4]
 80030d8:	4a8c      	ldr	r2, [pc, #560]	; (800330c <HAL_ADC_Init+0x254>)
 80030da:	4213      	tst	r3, r2
 80030dc:	d008      	beq.n	80030f0 <HAL_ADC_Init+0x38>
 80030de:	2280      	movs	r2, #128	; 0x80
 80030e0:	0612      	lsls	r2, r2, #24
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d004      	beq.n	80030f0 <HAL_ADC_Init+0x38>
 80030e6:	21ba      	movs	r1, #186	; 0xba
 80030e8:	4887      	ldr	r0, [pc, #540]	; (8003308 <HAL_ADC_Init+0x250>)
 80030ea:	0049      	lsls	r1, r1, #1
 80030ec:	f7ff fb65 	bl	80027ba <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80030f0:	2318      	movs	r3, #24
 80030f2:	68a2      	ldr	r2, [r4, #8]
 80030f4:	439a      	bics	r2, r3
 80030f6:	d004      	beq.n	8003102 <HAL_ADC_Init+0x4a>
 80030f8:	2176      	movs	r1, #118	; 0x76
 80030fa:	4883      	ldr	r0, [pc, #524]	; (8003308 <HAL_ADC_Init+0x250>)
 80030fc:	31ff      	adds	r1, #255	; 0xff
 80030fe:	f7ff fb5c 	bl	80027ba <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8003102:	2320      	movs	r3, #32
 8003104:	68e2      	ldr	r2, [r4, #12]
 8003106:	439a      	bics	r2, r3
 8003108:	d004      	beq.n	8003114 <HAL_ADC_Init+0x5c>
 800310a:	21bb      	movs	r1, #187	; 0xbb
 800310c:	487e      	ldr	r0, [pc, #504]	; (8003308 <HAL_ADC_Init+0x250>)
 800310e:	0049      	lsls	r1, r1, #1
 8003110:	f7ff fb53 	bl	80027ba <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8003114:	6923      	ldr	r3, [r4, #16]
 8003116:	3b01      	subs	r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	d904      	bls.n	8003126 <HAL_ADC_Init+0x6e>
 800311c:	2178      	movs	r1, #120	; 0x78
 800311e:	487a      	ldr	r0, [pc, #488]	; (8003308 <HAL_ADC_Init+0x250>)
 8003120:	31ff      	adds	r1, #255	; 0xff
 8003122:	f7ff fb4a 	bl	80027ba <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003126:	6a23      	ldr	r3, [r4, #32]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d904      	bls.n	8003136 <HAL_ADC_Init+0x7e>
 800312c:	21bc      	movs	r1, #188	; 0xbc
 800312e:	4876      	ldr	r0, [pc, #472]	; (8003308 <HAL_ADC_Init+0x250>)
 8003130:	0049      	lsls	r1, r1, #1
 8003132:	f7ff fb42 	bl	80027ba <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8003136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003138:	2b01      	cmp	r3, #1
 800313a:	d904      	bls.n	8003146 <HAL_ADC_Init+0x8e>
 800313c:	217a      	movs	r1, #122	; 0x7a
 800313e:	4872      	ldr	r0, [pc, #456]	; (8003308 <HAL_ADC_Init+0x250>)
 8003140:	31ff      	adds	r1, #255	; 0xff
 8003142:	f7ff fb3a 	bl	80027ba <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));   
 8003146:	4b72      	ldr	r3, [pc, #456]	; (8003310 <HAL_ADC_Init+0x258>)
 8003148:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800314a:	421a      	tst	r2, r3
 800314c:	d004      	beq.n	8003158 <HAL_ADC_Init+0xa0>
 800314e:	21bd      	movs	r1, #189	; 0xbd
 8003150:	486d      	ldr	r0, [pc, #436]	; (8003308 <HAL_ADC_Init+0x250>)
 8003152:	0049      	lsls	r1, r1, #1
 8003154:	f7ff fb31 	bl	80027ba <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));   
 8003158:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800315a:	2240      	movs	r2, #64	; 0x40
 800315c:	0019      	movs	r1, r3
 800315e:	4391      	bics	r1, r2
 8003160:	d00a      	beq.n	8003178 <HAL_ADC_Init+0xc0>
 8003162:	2bc0      	cmp	r3, #192	; 0xc0
 8003164:	d008      	beq.n	8003178 <HAL_ADC_Init+0xc0>
 8003166:	22c2      	movs	r2, #194	; 0xc2
 8003168:	32ff      	adds	r2, #255	; 0xff
 800316a:	4293      	cmp	r3, r2
 800316c:	d004      	beq.n	8003178 <HAL_ADC_Init+0xc0>
 800316e:	217c      	movs	r1, #124	; 0x7c
 8003170:	4865      	ldr	r0, [pc, #404]	; (8003308 <HAL_ADC_Init+0x250>)
 8003172:	31ff      	adds	r1, #255	; 0xff
 8003174:	f7ff fb21 	bl	80027ba <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8003178:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800317a:	2b01      	cmp	r3, #1
 800317c:	d904      	bls.n	8003188 <HAL_ADC_Init+0xd0>
 800317e:	21be      	movs	r1, #190	; 0xbe
 8003180:	4861      	ldr	r0, [pc, #388]	; (8003308 <HAL_ADC_Init+0x250>)
 8003182:	0049      	lsls	r1, r1, #1
 8003184:	f7ff fb19 	bl	80027ba <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8003188:	2204      	movs	r2, #4
 800318a:	6963      	ldr	r3, [r4, #20]
 800318c:	3b04      	subs	r3, #4
 800318e:	4393      	bics	r3, r2
 8003190:	d004      	beq.n	800319c <HAL_ADC_Init+0xe4>
 8003192:	217e      	movs	r1, #126	; 0x7e
 8003194:	485c      	ldr	r0, [pc, #368]	; (8003308 <HAL_ADC_Init+0x250>)
 8003196:	31ff      	adds	r1, #255	; 0xff
 8003198:	f7ff fb0f 	bl	80027ba <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 800319c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d904      	bls.n	80031ac <HAL_ADC_Init+0xf4>
 80031a2:	21bf      	movs	r1, #191	; 0xbf
 80031a4:	4858      	ldr	r0, [pc, #352]	; (8003308 <HAL_ADC_Init+0x250>)
 80031a6:	0049      	lsls	r1, r1, #1
 80031a8:	f7ff fb07 	bl	80027ba <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 80031ac:	69a3      	ldr	r3, [r4, #24]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d904      	bls.n	80031bc <HAL_ADC_Init+0x104>
 80031b2:	2180      	movs	r1, #128	; 0x80
 80031b4:	4854      	ldr	r0, [pc, #336]	; (8003308 <HAL_ADC_Init+0x250>)
 80031b6:	31ff      	adds	r1, #255	; 0xff
 80031b8:	f7ff faff 	bl	80027ba <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 80031bc:	69e3      	ldr	r3, [r4, #28]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d904      	bls.n	80031cc <HAL_ADC_Init+0x114>
 80031c2:	21c0      	movs	r1, #192	; 0xc0
 80031c4:	4850      	ldr	r0, [pc, #320]	; (8003308 <HAL_ADC_Init+0x250>)
 80031c6:	0049      	lsls	r1, r1, #1
 80031c8:	f7ff faf7 	bl	80027ba <assert_failed>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_ADC_Init+0x128>
    hadc->Lock = HAL_UNLOCKED;
 80031d2:	0022      	movs	r2, r4
 80031d4:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 80031d6:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 80031d8:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80031da:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80031dc:	f7fe f8d2 	bl	8001384 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80031e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031e2:	06db      	lsls	r3, r3, #27
 80031e4:	d500      	bpl.n	80031e8 <HAL_ADC_Init+0x130>
 80031e6:	e079      	b.n	80032dc <HAL_ADC_Init+0x224>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80031e8:	2204      	movs	r2, #4
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	6898      	ldr	r0, [r3, #8]
 80031ee:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 80031f0:	d000      	beq.n	80031f4 <HAL_ADC_Init+0x13c>
 80031f2:	e073      	b.n	80032dc <HAL_ADC_Init+0x224>
    ADC_STATE_CLR_SET(hadc->State,
 80031f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80031f6:	4947      	ldr	r1, [pc, #284]	; (8003314 <HAL_ADC_Init+0x25c>)
 80031f8:	4011      	ands	r1, r2
 80031fa:	2202      	movs	r2, #2
 80031fc:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 80031fe:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8003200:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	400a      	ands	r2, r1
 8003206:	2a01      	cmp	r2, #1
 8003208:	d000      	beq.n	800320c <HAL_ADC_Init+0x154>
 800320a:	e06d      	b.n	80032e8 <HAL_ADC_Init+0x230>
 800320c:	6819      	ldr	r1, [r3, #0]
 800320e:	4211      	tst	r1, r2
 8003210:	d102      	bne.n	8003218 <HAL_ADC_Init+0x160>
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	0412      	lsls	r2, r2, #16
 8003216:	d567      	bpl.n	80032e8 <HAL_ADC_Init+0x230>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	493f      	ldr	r1, [pc, #252]	; (8003318 <HAL_ADC_Init+0x260>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800321c:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800321e:	400a      	ands	r2, r1
 8003220:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8003222:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8003224:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8003226:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8003228:	69e2      	ldr	r2, [r4, #28]
 800322a:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800322c:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800322e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003230:	3a01      	subs	r2, #1
 8003232:	1e56      	subs	r6, r2, #1
 8003234:	41b2      	sbcs	r2, r6
 8003236:	0316      	lsls	r6, r2, #12
 8003238:	68e2      	ldr	r2, [r4, #12]
 800323a:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800323c:	6922      	ldr	r2, [r4, #16]
 800323e:	430f      	orrs	r7, r1
 8003240:	2a02      	cmp	r2, #2
 8003242:	d100      	bne.n	8003246 <HAL_ADC_Init+0x18e>
 8003244:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8003246:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003248:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800324a:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800324c:	433a      	orrs	r2, r7
 800324e:	4332      	orrs	r2, r6
 8003250:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003252:	2901      	cmp	r1, #1
 8003254:	d104      	bne.n	8003260 <HAL_ADC_Init+0x1a8>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003256:	2d00      	cmp	r5, #0
 8003258:	d12c      	bne.n	80032b4 <HAL_ADC_Init+0x1fc>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800325a:	2180      	movs	r1, #128	; 0x80
 800325c:	0249      	lsls	r1, r1, #9
 800325e:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003260:	20c2      	movs	r0, #194	; 0xc2
 8003262:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003264:	30ff      	adds	r0, #255	; 0xff
 8003266:	4281      	cmp	r1, r0
 8003268:	d002      	beq.n	8003270 <HAL_ADC_Init+0x1b8>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800326a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800326c:	4301      	orrs	r1, r0
 800326e:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003270:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003272:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003274:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003276:	4311      	orrs	r1, r2
 8003278:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800327a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800327c:	4281      	cmp	r1, r0
 800327e:	d002      	beq.n	8003286 <HAL_ADC_Init+0x1ce>
 8003280:	1e48      	subs	r0, r1, #1
 8003282:	2806      	cmp	r0, #6
 8003284:	d807      	bhi.n	8003296 <HAL_ADC_Init+0x1de>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003286:	2507      	movs	r5, #7
 8003288:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800328a:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800328c:	43a8      	bics	r0, r5
 800328e:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003290:	6958      	ldr	r0, [r3, #20]
 8003292:	4301      	orrs	r1, r0
 8003294:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4920      	ldr	r1, [pc, #128]	; (800331c <HAL_ADC_Init+0x264>)
 800329a:	400b      	ands	r3, r1
 800329c:	429a      	cmp	r2, r3
 800329e:	d111      	bne.n	80032c4 <HAL_ADC_Init+0x20c>
      ADC_CLEAR_ERRORCODE(hadc);
 80032a0:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80032a2:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80032a4:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 80032a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80032a8:	4393      	bics	r3, r2
 80032aa:	001a      	movs	r2, r3
 80032ac:	2301      	movs	r3, #1
 80032ae:	4313      	orrs	r3, r2
 80032b0:	6463      	str	r3, [r4, #68]	; 0x44
}
 80032b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b4:	2020      	movs	r0, #32
 80032b6:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80032b8:	4328      	orrs	r0, r5
 80032ba:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032bc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80032be:	4301      	orrs	r1, r0
 80032c0:	64a1      	str	r1, [r4, #72]	; 0x48
 80032c2:	e7cd      	b.n	8003260 <HAL_ADC_Init+0x1a8>
      ADC_STATE_CLR_SET(hadc->State,
 80032c4:	2212      	movs	r2, #18
 80032c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c8:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80032ca:	4393      	bics	r3, r2
 80032cc:	001a      	movs	r2, r3
 80032ce:	2310      	movs	r3, #16
 80032d0:	4313      	orrs	r3, r2
 80032d2:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80032d6:	4303      	orrs	r3, r0
 80032d8:	64a3      	str	r3, [r4, #72]	; 0x48
 80032da:	e7ea      	b.n	80032b2 <HAL_ADC_Init+0x1fa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032dc:	2310      	movs	r3, #16
 80032de:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80032e0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e2:	4313      	orrs	r3, r2
 80032e4:	6463      	str	r3, [r4, #68]	; 0x44
 80032e6:	e7e4      	b.n	80032b2 <HAL_ADC_Init+0x1fa>
      MODIFY_REG(hadc->Instance->CFGR1,
 80032e8:	2118      	movs	r1, #24
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	438a      	bics	r2, r1
 80032ee:	68a1      	ldr	r1, [r4, #8]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80032f4:	6919      	ldr	r1, [r3, #16]
 80032f6:	6862      	ldr	r2, [r4, #4]
 80032f8:	0089      	lsls	r1, r1, #2
 80032fa:	0889      	lsrs	r1, r1, #2
 80032fc:	4311      	orrs	r1, r2
 80032fe:	6119      	str	r1, [r3, #16]
 8003300:	e78a      	b.n	8003218 <HAL_ADC_Init+0x160>
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	40012400 	.word	0x40012400
 8003308:	08006df2 	.word	0x08006df2
 800330c:	bfffffff 	.word	0xbfffffff
 8003310:	fffff3ff 	.word	0xfffff3ff
 8003314:	fffffefd 	.word	0xfffffefd
 8003318:	fffe0219 	.word	0xfffe0219
 800331c:	833fffe7 	.word	0x833fffe7

08003320 <HAL_ADC_Start_DMA>:
{
 8003320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003322:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <HAL_ADC_Start_DMA+0x94>)
{
 8003324:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003326:	6802      	ldr	r2, [r0, #0]
{
 8003328:	0004      	movs	r4, r0
 800332a:	000f      	movs	r7, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800332c:	429a      	cmp	r2, r3
 800332e:	d003      	beq.n	8003338 <HAL_ADC_Start_DMA+0x18>
 8003330:	4921      	ldr	r1, [pc, #132]	; (80033b8 <HAL_ADC_Start_DMA+0x98>)
 8003332:	4822      	ldr	r0, [pc, #136]	; (80033bc <HAL_ADC_Start_DMA+0x9c>)
 8003334:	f7ff fa41 	bl	80027ba <assert_failed>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003338:	6823      	ldr	r3, [r4, #0]
    tmp_hal_status = HAL_BUSY;
 800333a:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	075b      	lsls	r3, r3, #29
 8003340:	d430      	bmi.n	80033a4 <HAL_ADC_Start_DMA+0x84>
    __HAL_LOCK(hadc);
 8003342:	0026      	movs	r6, r4
 8003344:	3640      	adds	r6, #64	; 0x40
 8003346:	7833      	ldrb	r3, [r6, #0]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d02b      	beq.n	80033a4 <HAL_ADC_Start_DMA+0x84>
 800334c:	2301      	movs	r3, #1
 800334e:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003350:	69e3      	ldr	r3, [r4, #28]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d127      	bne.n	80033a6 <HAL_ADC_Start_DMA+0x86>
      ADC_STATE_CLR_SET(hadc->State,
 8003356:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003358:	4a19      	ldr	r2, [pc, #100]	; (80033c0 <HAL_ADC_Start_DMA+0xa0>)
      ADC_CLEAR_ERRORCODE(hadc);
 800335a:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 800335c:	401a      	ands	r2, r3
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4313      	orrs	r3, r2
 8003364:	6463      	str	r3, [r4, #68]	; 0x44
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003366:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003368:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 800336a:	64a5      	str	r5, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800336c:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800336e:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003370:	4b15      	ldr	r3, [pc, #84]	; (80033c8 <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003372:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003374:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003376:	4b15      	ldr	r3, [pc, #84]	; (80033cc <HAL_ADC_Start_DMA+0xac>)
 8003378:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800337a:	231c      	movs	r3, #28
 800337c:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800337e:	684a      	ldr	r2, [r1, #4]
 8003380:	3b0c      	subs	r3, #12
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003386:	2301      	movs	r3, #1
 8003388:	68ca      	ldr	r2, [r1, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800338e:	003a      	movs	r2, r7
 8003390:	3140      	adds	r1, #64	; 0x40
 8003392:	9b01      	ldr	r3, [sp, #4]
 8003394:	f000 fb0e 	bl	80039b4 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003398:	2304      	movs	r3, #4
 800339a:	0028      	movs	r0, r5
 800339c:	6822      	ldr	r2, [r4, #0]
 800339e:	6891      	ldr	r1, [r2, #8]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6093      	str	r3, [r2, #8]
}
 80033a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80033a6:	0020      	movs	r0, r4
 80033a8:	f7ff fe3a 	bl	8003020 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80033ac:	2800      	cmp	r0, #0
 80033ae:	d1f9      	bne.n	80033a4 <HAL_ADC_Start_DMA+0x84>
 80033b0:	e7d1      	b.n	8003356 <HAL_ADC_Start_DMA+0x36>
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	40012400 	.word	0x40012400
 80033b8:	000004bc 	.word	0x000004bc
 80033bc:	08006df2 	.word	0x08006df2
 80033c0:	fffff0fe 	.word	0xfffff0fe
 80033c4:	080033d5 	.word	0x080033d5
 80033c8:	08003447 	.word	0x08003447
 80033cc:	08003455 	.word	0x08003455

080033d0 <HAL_ADC_ConvCpltCallback>:
 80033d0:	4770      	bx	lr
	...

080033d4 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80033d4:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80033d8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80033da:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80033dc:	4211      	tst	r1, r2
 80033de:	d12a      	bne.n	8003436 <ADC_DMAConvCplt+0x62>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80033e0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80033e2:	32b1      	adds	r2, #177	; 0xb1
 80033e4:	32ff      	adds	r2, #255	; 0xff
 80033e6:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033e8:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80033ea:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	0109      	lsls	r1, r1, #4
 80033f0:	68d0      	ldr	r0, [r2, #12]
 80033f2:	4208      	tst	r0, r1
 80033f4:	d112      	bne.n	800341c <ADC_DMAConvCplt+0x48>
 80033f6:	6a19      	ldr	r1, [r3, #32]
 80033f8:	2900      	cmp	r1, #0
 80033fa:	d10f      	bne.n	800341c <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80033fc:	6811      	ldr	r1, [r2, #0]
 80033fe:	0709      	lsls	r1, r1, #28
 8003400:	d50c      	bpl.n	800341c <ADC_DMAConvCplt+0x48>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003402:	6891      	ldr	r1, [r2, #8]
 8003404:	0749      	lsls	r1, r1, #29
 8003406:	d40d      	bmi.n	8003424 <ADC_DMAConvCplt+0x50>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003408:	200c      	movs	r0, #12
 800340a:	6851      	ldr	r1, [r2, #4]
 800340c:	4381      	bics	r1, r0
 800340e:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003412:	490b      	ldr	r1, [pc, #44]	; (8003440 <ADC_DMAConvCplt+0x6c>)
 8003414:	4011      	ands	r1, r2
 8003416:	2201      	movs	r2, #1
 8003418:	430a      	orrs	r2, r1
 800341a:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 800341c:	0018      	movs	r0, r3
 800341e:	f7ff ffd7 	bl	80033d0 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003422:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003424:	2220      	movs	r2, #32
 8003426:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003428:	430a      	orrs	r2, r1
 800342a:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800342c:	2201      	movs	r2, #1
 800342e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003430:	430a      	orrs	r2, r1
 8003432:	649a      	str	r2, [r3, #72]	; 0x48
 8003434:	e7f2      	b.n	800341c <ADC_DMAConvCplt+0x48>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	4798      	blx	r3
}
 800343c:	e7f1      	b.n	8003422 <ADC_DMAConvCplt+0x4e>
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	fffffefe 	.word	0xfffffefe

08003444 <HAL_ADC_ConvHalfCpltCallback>:
 8003444:	4770      	bx	lr

08003446 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003446:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003448:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800344a:	f7ff fffb 	bl	8003444 <HAL_ADC_ConvHalfCpltCallback>
}
 800344e:	bd10      	pop	{r4, pc}

08003450 <HAL_ADC_LevelOutOfWindowCallback>:
 8003450:	4770      	bx	lr

08003452 <HAL_ADC_ErrorCallback>:
}
 8003452:	4770      	bx	lr

08003454 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003454:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003456:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8003458:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800345a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800345c:	4313      	orrs	r3, r2
 800345e:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003460:	2304      	movs	r3, #4
 8003462:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003464:	4313      	orrs	r3, r2
 8003466:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8003468:	f7ff fff3 	bl	8003452 <HAL_ADC_ErrorCallback>
}
 800346c:	bd10      	pop	{r4, pc}
	...

08003470 <HAL_ADC_IRQHandler>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003470:	4b42      	ldr	r3, [pc, #264]	; (800357c <HAL_ADC_IRQHandler+0x10c>)
 8003472:	6802      	ldr	r2, [r0, #0]
{
 8003474:	b570      	push	{r4, r5, r6, lr}
 8003476:	0004      	movs	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003478:	429a      	cmp	r2, r3
 800347a:	d003      	beq.n	8003484 <HAL_ADC_IRQHandler+0x14>
 800347c:	4940      	ldr	r1, [pc, #256]	; (8003580 <HAL_ADC_IRQHandler+0x110>)
 800347e:	4841      	ldr	r0, [pc, #260]	; (8003584 <HAL_ADC_IRQHandler+0x114>)
 8003480:	f7ff f99b 	bl	80027ba <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003484:	6a23      	ldr	r3, [r4, #32]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d903      	bls.n	8003492 <HAL_ADC_IRQHandler+0x22>
 800348a:	493f      	ldr	r1, [pc, #252]	; (8003588 <HAL_ADC_IRQHandler+0x118>)
 800348c:	483d      	ldr	r0, [pc, #244]	; (8003584 <HAL_ADC_IRQHandler+0x114>)
 800348e:	f7ff f994 	bl	80027ba <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8003492:	2204      	movs	r2, #4
 8003494:	6963      	ldr	r3, [r4, #20]
 8003496:	3b04      	subs	r3, #4
 8003498:	4393      	bics	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_ADC_IRQHandler+0x36>
 800349c:	21af      	movs	r1, #175	; 0xaf
 800349e:	4839      	ldr	r0, [pc, #228]	; (8003584 <HAL_ADC_IRQHandler+0x114>)
 80034a0:	00c9      	lsls	r1, r1, #3
 80034a2:	f7ff f98a 	bl	80027ba <assert_failed>
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80034a6:	2204      	movs	r2, #4
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	6819      	ldr	r1, [r3, #0]
 80034ac:	4211      	tst	r1, r2
 80034ae:	d002      	beq.n	80034b6 <HAL_ADC_IRQHandler+0x46>
 80034b0:	6859      	ldr	r1, [r3, #4]
 80034b2:	4211      	tst	r1, r2
 80034b4:	d106      	bne.n	80034c4 <HAL_ADC_IRQHandler+0x54>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80034b6:	2208      	movs	r2, #8
 80034b8:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80034ba:	4211      	tst	r1, r2
 80034bc:	d028      	beq.n	8003510 <HAL_ADC_IRQHandler+0xa0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	4211      	tst	r1, r2
 80034c2:	d025      	beq.n	8003510 <HAL_ADC_IRQHandler+0xa0>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034c4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80034c6:	06d2      	lsls	r2, r2, #27
 80034c8:	d404      	bmi.n	80034d4 <HAL_ADC_IRQHandler+0x64>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80034ca:	2280      	movs	r2, #128	; 0x80
 80034cc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80034ce:	0092      	lsls	r2, r2, #2
 80034d0:	430a      	orrs	r2, r1
 80034d2:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034d4:	22c0      	movs	r2, #192	; 0xc0
 80034d6:	68d9      	ldr	r1, [r3, #12]
 80034d8:	0112      	lsls	r2, r2, #4
 80034da:	4211      	tst	r1, r2
 80034dc:	d112      	bne.n	8003504 <HAL_ADC_IRQHandler+0x94>
 80034de:	6a22      	ldr	r2, [r4, #32]
 80034e0:	2a00      	cmp	r2, #0
 80034e2:	d10f      	bne.n	8003504 <HAL_ADC_IRQHandler+0x94>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	0712      	lsls	r2, r2, #28
 80034e8:	d50c      	bpl.n	8003504 <HAL_ADC_IRQHandler+0x94>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	0752      	lsls	r2, r2, #29
 80034ee:	d43c      	bmi.n	800356a <HAL_ADC_IRQHandler+0xfa>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80034f0:	210c      	movs	r1, #12
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	438a      	bics	r2, r1
 80034f6:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80034f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034fa:	4a24      	ldr	r2, [pc, #144]	; (800358c <HAL_ADC_IRQHandler+0x11c>)
 80034fc:	401a      	ands	r2, r3
 80034fe:	2301      	movs	r3, #1
 8003500:	4313      	orrs	r3, r2
 8003502:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8003504:	0020      	movs	r0, r4
 8003506:	f7ff ff63 	bl	80033d0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800350a:	220c      	movs	r2, #12
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003510:	2580      	movs	r5, #128	; 0x80
 8003512:	6823      	ldr	r3, [r4, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	422a      	tst	r2, r5
 8003518:	d00c      	beq.n	8003534 <HAL_ADC_IRQHandler+0xc4>
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	422b      	tst	r3, r5
 800351e:	d009      	beq.n	8003534 <HAL_ADC_IRQHandler+0xc4>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003520:	2380      	movs	r3, #128	; 0x80
 8003522:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003524:	025b      	lsls	r3, r3, #9
 8003526:	4313      	orrs	r3, r2
 8003528:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800352a:	0020      	movs	r0, r4
 800352c:	f7ff ff90 	bl	8003450 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003530:	6823      	ldr	r3, [r4, #0]
 8003532:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003534:	2210      	movs	r2, #16
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	6819      	ldr	r1, [r3, #0]
 800353a:	4211      	tst	r1, r2
 800353c:	d014      	beq.n	8003568 <HAL_ADC_IRQHandler+0xf8>
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	4211      	tst	r1, r2
 8003542:	d011      	beq.n	8003568 <HAL_ADC_IRQHandler+0xf8>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003544:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003546:	2a01      	cmp	r2, #1
 8003548:	d002      	beq.n	8003550 <HAL_ADC_IRQHandler+0xe0>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800354a:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800354c:	07d2      	lsls	r2, r2, #31
 800354e:	d508      	bpl.n	8003562 <HAL_ADC_IRQHandler+0xf2>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003550:	2202      	movs	r2, #2
 8003552:	6ca1      	ldr	r1, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 8003554:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003556:	430a      	orrs	r2, r1
 8003558:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800355a:	2210      	movs	r2, #16
 800355c:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800355e:	f7ff ff78 	bl	8003452 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003562:	2210      	movs	r2, #16
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	601a      	str	r2, [r3, #0]
}
 8003568:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800356a:	2320      	movs	r3, #32
 800356c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800356e:	4313      	orrs	r3, r2
 8003570:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003572:	2301      	movs	r3, #1
 8003574:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003576:	4313      	orrs	r3, r2
 8003578:	64a3      	str	r3, [r4, #72]	; 0x48
 800357a:	e7c3      	b.n	8003504 <HAL_ADC_IRQHandler+0x94>
 800357c:	40012400 	.word	0x40012400
 8003580:	00000576 	.word	0x00000576
 8003584:	08006df2 	.word	0x08006df2
 8003588:	00000577 	.word	0x00000577
 800358c:	fffffefe 	.word	0xfffffefe

08003590 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8003590:	2300      	movs	r3, #0
{
 8003592:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003594:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003596:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003598:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_ADC_ConfigChannel+0x128>)
{
 800359a:	0004      	movs	r4, r0
 800359c:	000d      	movs	r5, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800359e:	429a      	cmp	r2, r3
 80035a0:	d003      	beq.n	80035aa <HAL_ADC_ConfigChannel+0x1a>
 80035a2:	4946      	ldr	r1, [pc, #280]	; (80036bc <HAL_ADC_ConfigChannel+0x12c>)
 80035a4:	4846      	ldr	r0, [pc, #280]	; (80036c0 <HAL_ADC_ConfigChannel+0x130>)
 80035a6:	f7ff f908 	bl	80027ba <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80035aa:	682b      	ldr	r3, [r5, #0]
 80035ac:	2b11      	cmp	r3, #17
 80035ae:	d903      	bls.n	80035b8 <HAL_ADC_ConfigChannel+0x28>
 80035b0:	4944      	ldr	r1, [pc, #272]	; (80036c4 <HAL_ADC_ConfigChannel+0x134>)
 80035b2:	4843      	ldr	r0, [pc, #268]	; (80036c0 <HAL_ADC_ConfigChannel+0x130>)
 80035b4:	f7ff f901 	bl	80027ba <assert_failed>
  assert_param(IS_ADC_RANK(sConfig->Rank));
 80035b8:	686b      	ldr	r3, [r5, #4]
 80035ba:	4a43      	ldr	r2, [pc, #268]	; (80036c8 <HAL_ADC_ConfigChannel+0x138>)
 80035bc:	189b      	adds	r3, r3, r2
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d903      	bls.n	80035ca <HAL_ADC_ConfigChannel+0x3a>
 80035c2:	4942      	ldr	r1, [pc, #264]	; (80036cc <HAL_ADC_ConfigChannel+0x13c>)
 80035c4:	483e      	ldr	r0, [pc, #248]	; (80036c0 <HAL_ADC_ConfigChannel+0x130>)
 80035c6:	f7ff f8f8 	bl	80027ba <assert_failed>
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035ce:	0552      	lsls	r2, r2, #21
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00c      	beq.n	80035ee <HAL_ADC_ConfigChannel+0x5e>
 80035d4:	3b01      	subs	r3, #1
 80035d6:	2b06      	cmp	r3, #6
 80035d8:	d909      	bls.n	80035ee <HAL_ADC_ConfigChannel+0x5e>
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80035da:	68ab      	ldr	r3, [r5, #8]
 80035dc:	4293      	cmp	r3, r2
 80035de:	d006      	beq.n	80035ee <HAL_ADC_ConfigChannel+0x5e>
 80035e0:	3b01      	subs	r3, #1
 80035e2:	2b06      	cmp	r3, #6
 80035e4:	d903      	bls.n	80035ee <HAL_ADC_ConfigChannel+0x5e>
 80035e6:	493a      	ldr	r1, [pc, #232]	; (80036d0 <HAL_ADC_ConfigChannel+0x140>)
 80035e8:	4835      	ldr	r0, [pc, #212]	; (80036c0 <HAL_ADC_ConfigChannel+0x130>)
 80035ea:	f7ff f8e6 	bl	80027ba <assert_failed>
  __HAL_LOCK(hadc);
 80035ee:	0026      	movs	r6, r4
 80035f0:	3640      	adds	r6, #64	; 0x40
 80035f2:	7833      	ldrb	r3, [r6, #0]
 80035f4:	2002      	movs	r0, #2
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d02a      	beq.n	8003650 <HAL_ADC_ConfigChannel+0xc0>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80035fa:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(hadc);
 80035fc:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80035fe:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 8003600:	7030      	strb	r0, [r6, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003602:	0752      	lsls	r2, r2, #29
 8003604:	d452      	bmi.n	80036ac <HAL_ADC_ConfigChannel+0x11c>
    if (sConfig->Rank != ADC_RANK_NONE)
 8003606:	4933      	ldr	r1, [pc, #204]	; (80036d4 <HAL_ADC_ConfigChannel+0x144>)
 8003608:	686f      	ldr	r7, [r5, #4]
 800360a:	682a      	ldr	r2, [r5, #0]
 800360c:	428f      	cmp	r7, r1
 800360e:	d03b      	beq.n	8003688 <HAL_ADC_ConfigChannel+0xf8>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003610:	4090      	lsls	r0, r2
 8003612:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003614:	4308      	orrs	r0, r1
 8003616:	6298      	str	r0, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003618:	2080      	movs	r0, #128	; 0x80
 800361a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800361c:	0540      	lsls	r0, r0, #21
 800361e:	4281      	cmp	r1, r0
 8003620:	d00f      	beq.n	8003642 <HAL_ADC_ConfigChannel+0xb2>
 8003622:	3901      	subs	r1, #1
 8003624:	2906      	cmp	r1, #6
 8003626:	d90c      	bls.n	8003642 <HAL_ADC_ConfigChannel+0xb2>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003628:	2007      	movs	r0, #7
 800362a:	695c      	ldr	r4, [r3, #20]
 800362c:	68a9      	ldr	r1, [r5, #8]
 800362e:	4004      	ands	r4, r0
 8003630:	42a1      	cmp	r1, r4
 8003632:	d006      	beq.n	8003642 <HAL_ADC_ConfigChannel+0xb2>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003634:	695c      	ldr	r4, [r3, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003636:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003638:	4384      	bics	r4, r0
 800363a:	615c      	str	r4, [r3, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800363c:	695c      	ldr	r4, [r3, #20]
 800363e:	4321      	orrs	r1, r4
 8003640:	6159      	str	r1, [r3, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003642:	0013      	movs	r3, r2
 8003644:	3b10      	subs	r3, #16
 8003646:	2b01      	cmp	r3, #1
 8003648:	d903      	bls.n	8003652 <HAL_ADC_ConfigChannel+0xc2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800364a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800364c:	2300      	movs	r3, #0
 800364e:	7033      	strb	r3, [r6, #0]
}
 8003650:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003652:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <HAL_ADC_ConfigChannel+0x148>)
 8003654:	2180      	movs	r1, #128	; 0x80
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	2a10      	cmp	r2, #16
 800365a:	d013      	beq.n	8003684 <HAL_ADC_ConfigChannel+0xf4>
 800365c:	03c9      	lsls	r1, r1, #15
 800365e:	4301      	orrs	r1, r0
 8003660:	6019      	str	r1, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003662:	2a10      	cmp	r2, #16
 8003664:	d1f1      	bne.n	800364a <HAL_ADC_ConfigChannel+0xba>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003666:	4b1d      	ldr	r3, [pc, #116]	; (80036dc <HAL_ADC_ConfigChannel+0x14c>)
 8003668:	491d      	ldr	r1, [pc, #116]	; (80036e0 <HAL_ADC_ConfigChannel+0x150>)
 800366a:	6818      	ldr	r0, [r3, #0]
 800366c:	f7fc fd56 	bl	800011c <__udivsi3>
 8003670:	230a      	movs	r3, #10
 8003672:	4358      	muls	r0, r3
 8003674:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8003676:	9b01      	ldr	r3, [sp, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0e6      	beq.n	800364a <HAL_ADC_ConfigChannel+0xba>
            wait_loop_index--;
 800367c:	9b01      	ldr	r3, [sp, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	e7f8      	b.n	8003676 <HAL_ADC_ConfigChannel+0xe6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003684:	0409      	lsls	r1, r1, #16
 8003686:	e7ea      	b.n	800365e <HAL_ADC_ConfigChannel+0xce>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003688:	4090      	lsls	r0, r2
 800368a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800368c:	4381      	bics	r1, r0
 800368e:	6299      	str	r1, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003690:	0013      	movs	r3, r2
 8003692:	3b10      	subs	r3, #16
 8003694:	2b01      	cmp	r3, #1
 8003696:	d8d8      	bhi.n	800364a <HAL_ADC_ConfigChannel+0xba>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003698:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <HAL_ADC_ConfigChannel+0x148>)
 800369a:	6819      	ldr	r1, [r3, #0]
 800369c:	2a10      	cmp	r2, #16
 800369e:	d003      	beq.n	80036a8 <HAL_ADC_ConfigChannel+0x118>
 80036a0:	4a10      	ldr	r2, [pc, #64]	; (80036e4 <HAL_ADC_ConfigChannel+0x154>)
 80036a2:	400a      	ands	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e7d0      	b.n	800364a <HAL_ADC_ConfigChannel+0xba>
 80036a8:	4a0f      	ldr	r2, [pc, #60]	; (80036e8 <HAL_ADC_ConfigChannel+0x158>)
 80036aa:	e7fa      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x112>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ac:	2320      	movs	r3, #32
 80036ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80036b0:	4313      	orrs	r3, r2
 80036b2:	6463      	str	r3, [r4, #68]	; 0x44
 80036b4:	e7ca      	b.n	800364c <HAL_ADC_ConfigChannel+0xbc>
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	40012400 	.word	0x40012400
 80036bc:	00000651 	.word	0x00000651
 80036c0:	08006df2 	.word	0x08006df2
 80036c4:	00000652 	.word	0x00000652
 80036c8:	fffff000 	.word	0xfffff000
 80036cc:	00000653 	.word	0x00000653
 80036d0:	00000657 	.word	0x00000657
 80036d4:	00001001 	.word	0x00001001
 80036d8:	40012708 	.word	0x40012708
 80036dc:	20000248 	.word	0x20000248
 80036e0:	000f4240 	.word	0x000f4240
 80036e4:	ffbfffff 	.word	0xffbfffff
 80036e8:	ff7fffff 	.word	0xff7fffff

080036ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036ec:	b570      	push	{r4, r5, r6, lr}
 80036ee:	0004      	movs	r4, r0
 80036f0:	000d      	movs	r5, r1
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80036f2:	2903      	cmp	r1, #3
 80036f4:	d903      	bls.n	80036fe <HAL_NVIC_SetPriority+0x12>
 80036f6:	219b      	movs	r1, #155	; 0x9b
 80036f8:	4816      	ldr	r0, [pc, #88]	; (8003754 <HAL_NVIC_SetPriority+0x68>)
 80036fa:	f7ff f85e 	bl	80027ba <assert_failed>
 80036fe:	01a9      	lsls	r1, r5, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8003700:	2c00      	cmp	r4, #0
 8003702:	da14      	bge.n	800372e <HAL_NVIC_SetPriority+0x42>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003704:	230f      	movs	r3, #15
 8003706:	b2e4      	uxtb	r4, r4
 8003708:	4023      	ands	r3, r4
 800370a:	3b08      	subs	r3, #8
 800370c:	4a12      	ldr	r2, [pc, #72]	; (8003758 <HAL_NVIC_SetPriority+0x6c>)
 800370e:	089b      	lsrs	r3, r3, #2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	189b      	adds	r3, r3, r2
 8003714:	2203      	movs	r2, #3
 8003716:	4014      	ands	r4, r2
 8003718:	4094      	lsls	r4, r2
 800371a:	32fc      	adds	r2, #252	; 0xfc
 800371c:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800371e:	400a      	ands	r2, r1
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003720:	40a5      	lsls	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003722:	40a2      	lsls	r2, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003724:	69d8      	ldr	r0, [r3, #28]
 8003726:	43a8      	bics	r0, r5
 8003728:	4302      	orrs	r2, r0
 800372a:	61da      	str	r2, [r3, #28]
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800372c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800372e:	2503      	movs	r5, #3
 8003730:	08a3      	lsrs	r3, r4, #2
 8003732:	402c      	ands	r4, r5
 8003734:	40ac      	lsls	r4, r5
 8003736:	35fc      	adds	r5, #252	; 0xfc
 8003738:	002e      	movs	r6, r5
 800373a:	4a08      	ldr	r2, [pc, #32]	; (800375c <HAL_NVIC_SetPriority+0x70>)
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	189b      	adds	r3, r3, r2
 8003740:	22c0      	movs	r2, #192	; 0xc0
 8003742:	40a6      	lsls	r6, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003744:	4029      	ands	r1, r5
 8003746:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003748:	0092      	lsls	r2, r2, #2
 800374a:	5898      	ldr	r0, [r3, r2]
 800374c:	43b0      	bics	r0, r6
 800374e:	4301      	orrs	r1, r0
 8003750:	5099      	str	r1, [r3, r2]
 8003752:	e7eb      	b.n	800372c <HAL_NVIC_SetPriority+0x40>
 8003754:	08006e2a 	.word	0x08006e2a
 8003758:	e000ed00 	.word	0xe000ed00
 800375c:	e000e100 	.word	0xe000e100

08003760 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003760:	b510      	push	{r4, lr}
 8003762:	1e04      	subs	r4, r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003764:	da03      	bge.n	800376e <HAL_NVIC_EnableIRQ+0xe>
 8003766:	21ab      	movs	r1, #171	; 0xab
 8003768:	4804      	ldr	r0, [pc, #16]	; (800377c <HAL_NVIC_EnableIRQ+0x1c>)
 800376a:	f7ff f826 	bl	80027ba <assert_failed>
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800376e:	231f      	movs	r3, #31
 8003770:	401c      	ands	r4, r3
 8003772:	3b1e      	subs	r3, #30
 8003774:	40a3      	lsls	r3, r4
 8003776:	4a02      	ldr	r2, [pc, #8]	; (8003780 <HAL_NVIC_EnableIRQ+0x20>)
 8003778:	6013      	str	r3, [r2, #0]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800377a:	bd10      	pop	{r4, pc}
 800377c:	08006e2a 	.word	0x08006e2a
 8003780:	e000e100 	.word	0xe000e100

08003784 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003784:	4a09      	ldr	r2, [pc, #36]	; (80037ac <HAL_SYSTICK_Config+0x28>)
 8003786:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8003788:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800378a:	4293      	cmp	r3, r2
 800378c:	d80d      	bhi.n	80037aa <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800378e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003790:	4a07      	ldr	r2, [pc, #28]	; (80037b0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003792:	4808      	ldr	r0, [pc, #32]	; (80037b4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003794:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003796:	6a03      	ldr	r3, [r0, #32]
 8003798:	0609      	lsls	r1, r1, #24
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	0a1b      	lsrs	r3, r3, #8
 800379e:	430b      	orrs	r3, r1
 80037a0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037a2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037a4:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037a6:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037a8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80037aa:	4770      	bx	lr
 80037ac:	00ffffff 	.word	0x00ffffff
 80037b0:	e000e010 	.word	0xe000e010
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and initialize the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	1e04      	subs	r4, r0, #0
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80037bc:	d102      	bne.n	80037c4 <HAL_CRC_Init+0xc>
  {
    return HAL_ERROR;
 80037be:	2501      	movs	r5, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 80037c0:	0028      	movs	r0, r5
 80037c2:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80037c4:	4b27      	ldr	r3, [pc, #156]	; (8003864 <HAL_CRC_Init+0xac>)
 80037c6:	6802      	ldr	r2, [r0, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d003      	beq.n	80037d4 <HAL_CRC_Init+0x1c>
 80037cc:	2180      	movs	r1, #128	; 0x80
 80037ce:	4826      	ldr	r0, [pc, #152]	; (8003868 <HAL_CRC_Init+0xb0>)
 80037d0:	f7fe fff3 	bl	80027ba <assert_failed>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 80037d4:	7f63      	ldrb	r3, [r4, #29]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d103      	bne.n	80037e4 <HAL_CRC_Init+0x2c>
    hcrc->Lock = HAL_UNLOCKED;
 80037dc:	7723      	strb	r3, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 80037de:	0020      	movs	r0, r4
 80037e0:	f7fd fe42 	bl	8001468 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80037e4:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80037e6:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80037e8:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80037ea:	f000 f83f 	bl	800386c <HAL_CRCEx_Init>
 80037ee:	1e05      	subs	r5, r0, #0
 80037f0:	d1e5      	bne.n	80037be <HAL_CRC_Init+0x6>
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 80037f2:	7963      	ldrb	r3, [r4, #5]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d903      	bls.n	8003800 <HAL_CRC_Init+0x48>
 80037f8:	2199      	movs	r1, #153	; 0x99
 80037fa:	481b      	ldr	r0, [pc, #108]	; (8003868 <HAL_CRC_Init+0xb0>)
 80037fc:	f7fe ffdd 	bl	80027ba <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003800:	7962      	ldrb	r2, [r4, #5]
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	2a00      	cmp	r2, #0
 8003806:	d12a      	bne.n	800385e <HAL_CRC_Init+0xa6>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8003808:	3a01      	subs	r2, #1
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800380a:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
 800380c:	2360      	movs	r3, #96	; 0x60
 800380e:	6962      	ldr	r2, [r4, #20]
 8003810:	439a      	bics	r2, r3
 8003812:	d003      	beq.n	800381c <HAL_CRC_Init+0x64>
 8003814:	21a5      	movs	r1, #165	; 0xa5
 8003816:	4814      	ldr	r0, [pc, #80]	; (8003868 <HAL_CRC_Init+0xb0>)
 8003818:	f7fe ffcf 	bl	80027ba <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800381c:	2160      	movs	r1, #96	; 0x60
 800381e:	6822      	ldr	r2, [r4, #0]
 8003820:	6893      	ldr	r3, [r2, #8]
 8003822:	438b      	bics	r3, r1
 8003824:	6961      	ldr	r1, [r4, #20]
 8003826:	430b      	orrs	r3, r1
 8003828:	6093      	str	r3, [r2, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	69a2      	ldr	r2, [r4, #24]
 800382e:	439a      	bics	r2, r3
 8003830:	d003      	beq.n	800383a <HAL_CRC_Init+0x82>
 8003832:	21a9      	movs	r1, #169	; 0xa9
 8003834:	480c      	ldr	r0, [pc, #48]	; (8003868 <HAL_CRC_Init+0xb0>)
 8003836:	f7fe ffc0 	bl	80027ba <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800383a:	2180      	movs	r1, #128	; 0x80
 800383c:	6822      	ldr	r2, [r4, #0]
 800383e:	6893      	ldr	r3, [r2, #8]
 8003840:	438b      	bics	r3, r1
 8003842:	69a1      	ldr	r1, [r4, #24]
 8003844:	430b      	orrs	r3, r1
 8003846:	6093      	str	r3, [r2, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8003848:	6a23      	ldr	r3, [r4, #32]
 800384a:	3b01      	subs	r3, #1
 800384c:	2b02      	cmp	r3, #2
 800384e:	d903      	bls.n	8003858 <HAL_CRC_Init+0xa0>
 8003850:	21ae      	movs	r1, #174	; 0xae
 8003852:	4805      	ldr	r0, [pc, #20]	; (8003868 <HAL_CRC_Init+0xb0>)
 8003854:	f7fe ffb1 	bl	80027ba <assert_failed>
  hcrc->State = HAL_CRC_STATE_READY;
 8003858:	2301      	movs	r3, #1
 800385a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800385c:	e7b0      	b.n	80037c0 <HAL_CRC_Init+0x8>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800385e:	6922      	ldr	r2, [r4, #16]
 8003860:	e7d3      	b.n	800380a <HAL_CRC_Init+0x52>
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	40023000 	.word	0x40023000
 8003868:	08006e65 	.word	0x08006e65

0800386c <HAL_CRCEx_Init>:
    }
  }
#endif /* defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F091xC) || defined (STM32F098xx) */    

   return HAL_OK;
}
 800386c:	2000      	movs	r0, #0
 800386e:	4770      	bx	lr

08003870 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003870:	b570      	push	{r4, r5, r6, lr}
 8003872:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 8003874:	2001      	movs	r0, #1
  if(NULL == hdma)
 8003876:	2c00      	cmp	r4, #0
 8003878:	d100      	bne.n	800387c <HAL_DMA_Init+0xc>
 800387a:	e081      	b.n	8003980 <HAL_DMA_Init+0x110>
  }
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	4a41      	ldr	r2, [pc, #260]	; (8003984 <HAL_DMA_Init+0x114>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00f      	beq.n	80038a4 <HAL_DMA_Init+0x34>
 8003884:	4a40      	ldr	r2, [pc, #256]	; (8003988 <HAL_DMA_Init+0x118>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d00c      	beq.n	80038a4 <HAL_DMA_Init+0x34>
 800388a:	4a40      	ldr	r2, [pc, #256]	; (800398c <HAL_DMA_Init+0x11c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d009      	beq.n	80038a4 <HAL_DMA_Init+0x34>
 8003890:	4a3f      	ldr	r2, [pc, #252]	; (8003990 <HAL_DMA_Init+0x120>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d006      	beq.n	80038a4 <HAL_DMA_Init+0x34>
 8003896:	4a3f      	ldr	r2, [pc, #252]	; (8003994 <HAL_DMA_Init+0x124>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d003      	beq.n	80038a4 <HAL_DMA_Init+0x34>
 800389c:	21a5      	movs	r1, #165	; 0xa5
 800389e:	483e      	ldr	r0, [pc, #248]	; (8003998 <HAL_DMA_Init+0x128>)
 80038a0:	f7fe ff8b 	bl	80027ba <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80038a4:	6863      	ldr	r3, [r4, #4]
 80038a6:	2210      	movs	r2, #16
 80038a8:	0019      	movs	r1, r3
 80038aa:	4391      	bics	r1, r2
 80038ac:	d007      	beq.n	80038be <HAL_DMA_Init+0x4e>
 80038ae:	2280      	movs	r2, #128	; 0x80
 80038b0:	01d2      	lsls	r2, r2, #7
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d003      	beq.n	80038be <HAL_DMA_Init+0x4e>
 80038b6:	21a6      	movs	r1, #166	; 0xa6
 80038b8:	4837      	ldr	r0, [pc, #220]	; (8003998 <HAL_DMA_Init+0x128>)
 80038ba:	f7fe ff7e 	bl	80027ba <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80038be:	2340      	movs	r3, #64	; 0x40
 80038c0:	68a2      	ldr	r2, [r4, #8]
 80038c2:	439a      	bics	r2, r3
 80038c4:	d003      	beq.n	80038ce <HAL_DMA_Init+0x5e>
 80038c6:	21a7      	movs	r1, #167	; 0xa7
 80038c8:	4833      	ldr	r0, [pc, #204]	; (8003998 <HAL_DMA_Init+0x128>)
 80038ca:	f7fe ff76 	bl	80027ba <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	68e2      	ldr	r2, [r4, #12]
 80038d2:	439a      	bics	r2, r3
 80038d4:	d003      	beq.n	80038de <HAL_DMA_Init+0x6e>
 80038d6:	21a8      	movs	r1, #168	; 0xa8
 80038d8:	482f      	ldr	r0, [pc, #188]	; (8003998 <HAL_DMA_Init+0x128>)
 80038da:	f7fe ff6e 	bl	80027ba <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80038de:	6923      	ldr	r3, [r4, #16]
 80038e0:	4a2e      	ldr	r2, [pc, #184]	; (800399c <HAL_DMA_Init+0x12c>)
 80038e2:	4213      	tst	r3, r2
 80038e4:	d007      	beq.n	80038f6 <HAL_DMA_Init+0x86>
 80038e6:	2280      	movs	r2, #128	; 0x80
 80038e8:	0092      	lsls	r2, r2, #2
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d003      	beq.n	80038f6 <HAL_DMA_Init+0x86>
 80038ee:	21a9      	movs	r1, #169	; 0xa9
 80038f0:	4829      	ldr	r0, [pc, #164]	; (8003998 <HAL_DMA_Init+0x128>)
 80038f2:	f7fe ff62 	bl	80027ba <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80038f6:	6963      	ldr	r3, [r4, #20]
 80038f8:	4a29      	ldr	r2, [pc, #164]	; (80039a0 <HAL_DMA_Init+0x130>)
 80038fa:	4213      	tst	r3, r2
 80038fc:	d007      	beq.n	800390e <HAL_DMA_Init+0x9e>
 80038fe:	2280      	movs	r2, #128	; 0x80
 8003900:	0112      	lsls	r2, r2, #4
 8003902:	4293      	cmp	r3, r2
 8003904:	d003      	beq.n	800390e <HAL_DMA_Init+0x9e>
 8003906:	21aa      	movs	r1, #170	; 0xaa
 8003908:	4823      	ldr	r0, [pc, #140]	; (8003998 <HAL_DMA_Init+0x128>)
 800390a:	f7fe ff56 	bl	80027ba <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800390e:	2320      	movs	r3, #32
 8003910:	69a2      	ldr	r2, [r4, #24]
 8003912:	439a      	bics	r2, r3
 8003914:	d003      	beq.n	800391e <HAL_DMA_Init+0xae>
 8003916:	21ab      	movs	r1, #171	; 0xab
 8003918:	481f      	ldr	r0, [pc, #124]	; (8003998 <HAL_DMA_Init+0x128>)
 800391a:	f7fe ff4e 	bl	80027ba <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800391e:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <HAL_DMA_Init+0x134>)
 8003920:	69e2      	ldr	r2, [r4, #28]
 8003922:	421a      	tst	r2, r3
 8003924:	d003      	beq.n	800392e <HAL_DMA_Init+0xbe>
 8003926:	21ac      	movs	r1, #172	; 0xac
 8003928:	481b      	ldr	r0, [pc, #108]	; (8003998 <HAL_DMA_Init+0x128>)
 800392a:	f7fe ff46 	bl	80027ba <assert_failed>
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800392e:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003930:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8003932:	1ca5      	adds	r5, r4, #2
 8003934:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 8003936:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003938:	4b1b      	ldr	r3, [pc, #108]	; (80039a8 <HAL_DMA_Init+0x138>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800393a:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800393c:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800393e:	6863      	ldr	r3, [r4, #4]
 8003940:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003942:	68e1      	ldr	r1, [r4, #12]
 8003944:	430b      	orrs	r3, r1
 8003946:	6921      	ldr	r1, [r4, #16]
 8003948:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800394a:	6961      	ldr	r1, [r4, #20]
 800394c:	430b      	orrs	r3, r1
 800394e:	69a1      	ldr	r1, [r4, #24]
 8003950:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8003952:	69e1      	ldr	r1, [r4, #28]
 8003954:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8003956:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003958:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800395a:	4b14      	ldr	r3, [pc, #80]	; (80039ac <HAL_DMA_Init+0x13c>)
 800395c:	2114      	movs	r1, #20
 800395e:	18c0      	adds	r0, r0, r3
 8003960:	f7fc fbdc 	bl	800011c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003964:	4b12      	ldr	r3, [pc, #72]	; (80039b0 <HAL_DMA_Init+0x140>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003966:	0080      	lsls	r0, r0, #2
 8003968:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800396a:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 800396c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800396e:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 8003970:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8003972:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8003974:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8003976:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003978:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 800397a:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 800397c:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 800397e:	77e0      	strb	r0, [r4, #31]
}  
 8003980:	bd70      	pop	{r4, r5, r6, pc}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	40020008 	.word	0x40020008
 8003988:	4002001c 	.word	0x4002001c
 800398c:	40020030 	.word	0x40020030
 8003990:	40020044 	.word	0x40020044
 8003994:	40020058 	.word	0x40020058
 8003998:	08006e9d 	.word	0x08006e9d
 800399c:	fffffeff 	.word	0xfffffeff
 80039a0:	fffffbff 	.word	0xfffffbff
 80039a4:	ffffcfff 	.word	0xffffcfff
 80039a8:	ffffc00f 	.word	0xffffc00f
 80039ac:	bffdfff8 	.word	0xbffdfff8
 80039b0:	40020000 	.word	0x40020000

080039b4 <HAL_DMA_Start_IT>:
{
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	0015      	movs	r5, r2
 80039b8:	001f      	movs	r7, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80039ba:	1e5a      	subs	r2, r3, #1
 80039bc:	4b21      	ldr	r3, [pc, #132]	; (8003a44 <HAL_DMA_Start_IT+0x90>)
{
 80039be:	0004      	movs	r4, r0
 80039c0:	000e      	movs	r6, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d904      	bls.n	80039d0 <HAL_DMA_Start_IT+0x1c>
 80039c6:	21af      	movs	r1, #175	; 0xaf
 80039c8:	481f      	ldr	r0, [pc, #124]	; (8003a48 <HAL_DMA_Start_IT+0x94>)
 80039ca:	0049      	lsls	r1, r1, #1
 80039cc:	f7fe fef5 	bl	80027ba <assert_failed>
  __HAL_LOCK(hdma);
 80039d0:	1c63      	adds	r3, r4, #1
 80039d2:	7fda      	ldrb	r2, [r3, #31]
 80039d4:	2002      	movs	r0, #2
 80039d6:	2a01      	cmp	r2, #1
 80039d8:	d026      	beq.n	8003a28 <HAL_DMA_Start_IT+0x74>
 80039da:	2201      	movs	r2, #1
 80039dc:	77da      	strb	r2, [r3, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 80039de:	1822      	adds	r2, r4, r0
 80039e0:	4694      	mov	ip, r2
 80039e2:	7fd2      	ldrb	r2, [r2, #31]
 80039e4:	2100      	movs	r1, #0
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	2a01      	cmp	r2, #1
 80039ea:	d128      	bne.n	8003a3e <HAL_DMA_Start_IT+0x8a>
  	hdma->State = HAL_DMA_STATE_BUSY;
 80039ec:	4663      	mov	r3, ip
 80039ee:	77d8      	strb	r0, [r3, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80039f0:	6823      	ldr	r3, [r4, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039f2:	63a1      	str	r1, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80039f4:	6819      	ldr	r1, [r3, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80039f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80039f8:	4391      	bics	r1, r2
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80039fa:	4082      	lsls	r2, r0
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80039fc:	6019      	str	r1, [r3, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80039fe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003a00:	604a      	str	r2, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a02:	6862      	ldr	r2, [r4, #4]
  hdma->Instance->CNDTR = DataLength;
 8003a04:	605f      	str	r7, [r3, #4]
 8003a06:	6821      	ldr	r1, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a08:	2a10      	cmp	r2, #16
 8003a0a:	d10e      	bne.n	8003a2a <HAL_DMA_Start_IT+0x76>
    hdma->Instance->CPAR = DstAddress;
 8003a0c:	609d      	str	r5, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003a0e:	60de      	str	r6, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003a10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a12:	6818      	ldr	r0, [r3, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 8003a14:	2a00      	cmp	r2, #0
 8003a16:	d00b      	beq.n	8003a30 <HAL_DMA_Start_IT+0x7c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a18:	220e      	movs	r2, #14
 8003a1a:	4302      	orrs	r2, r0
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003a1c:	601a      	str	r2, [r3, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003a1e:	2301      	movs	r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8003a20:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003a22:	680a      	ldr	r2, [r1, #0]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]
} 
 8003a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8003a2a:	609e      	str	r6, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a2c:	60dd      	str	r5, [r3, #12]
 8003a2e:	e7ef      	b.n	8003a10 <HAL_DMA_Start_IT+0x5c>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003a30:	220a      	movs	r2, #10
 8003a32:	4302      	orrs	r2, r0
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003a34:	2004      	movs	r0, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003a36:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4382      	bics	r2, r0
 8003a3c:	e7ee      	b.n	8003a1c <HAL_DMA_Start_IT+0x68>
    __HAL_UNLOCK(hdma); 
 8003a3e:	77d9      	strb	r1, [r3, #31]
 8003a40:	e7f2      	b.n	8003a28 <HAL_DMA_Start_IT+0x74>
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	0000fffe 	.word	0x0000fffe
 8003a48:	08006e9d 	.word	0x08006e9d

08003a4c <HAL_DMA_Abort_IT>:
{  
 8003a4c:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a4e:	1c84      	adds	r4, r0, #2
 8003a50:	7fe3      	ldrb	r3, [r4, #31]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d004      	beq.n	8003a60 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a56:	2304      	movs	r3, #4
 8003a58:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8003a5a:	3b03      	subs	r3, #3
}
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a60:	210e      	movs	r1, #14
 8003a62:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003a64:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	438a      	bics	r2, r1
 8003a6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	6819      	ldr	r1, [r3, #0]
 8003a70:	4391      	bics	r1, r2
 8003a72:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003a74:	0011      	movs	r1, r2
 8003a76:	40a9      	lsls	r1, r5
 8003a78:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003a7a:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003a7c:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8003a7e:	2400      	movs	r4, #0
 8003a80:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 8003a82:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8003a84:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8003a86:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8003a88:	42a2      	cmp	r2, r4
 8003a8a:	d0e7      	beq.n	8003a5c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8003a8c:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003a8e:	0023      	movs	r3, r4
 8003a90:	e7e4      	b.n	8003a5c <HAL_DMA_Abort_IT+0x10>

08003a92 <HAL_DMA_IRQHandler>:
{
 8003a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003a94:	2704      	movs	r7, #4
 8003a96:	003e      	movs	r6, r7
 8003a98:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a9a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003a9c:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a9e:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003aa0:	6803      	ldr	r3, [r0, #0]
 8003aa2:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003aa4:	422e      	tst	r6, r5
 8003aa6:	d00d      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x32>
 8003aa8:	423c      	tst	r4, r7
 8003aaa:	d00b      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aac:	6819      	ldr	r1, [r3, #0]
 8003aae:	0689      	lsls	r1, r1, #26
 8003ab0:	d402      	bmi.n	8003ab8 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ab2:	6819      	ldr	r1, [r3, #0]
 8003ab4:	43b9      	bics	r1, r7
 8003ab6:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8003ab8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003aba:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d019      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8003ac0:	4798      	blx	r3
}  
 8003ac2:	e017      	b.n	8003af4 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003ac4:	2702      	movs	r7, #2
 8003ac6:	003e      	movs	r6, r7
 8003ac8:	408e      	lsls	r6, r1
 8003aca:	422e      	tst	r6, r5
 8003acc:	d013      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x64>
 8003ace:	423c      	tst	r4, r7
 8003ad0:	d011      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ad2:	6819      	ldr	r1, [r3, #0]
 8003ad4:	0689      	lsls	r1, r1, #26
 8003ad6:	d406      	bmi.n	8003ae6 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003ad8:	240a      	movs	r4, #10
 8003ada:	6819      	ldr	r1, [r3, #0]
 8003adc:	43a1      	bics	r1, r4
 8003ade:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	19c3      	adds	r3, r0, r7
 8003ae4:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003ae6:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	1c43      	adds	r3, r0, #1
 8003aec:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8003aee:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d1e5      	bne.n	8003ac0 <HAL_DMA_IRQHandler+0x2e>
}  
 8003af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003af6:	2608      	movs	r6, #8
 8003af8:	0037      	movs	r7, r6
 8003afa:	408f      	lsls	r7, r1
 8003afc:	423d      	tst	r5, r7
 8003afe:	d0f9      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x62>
 8003b00:	4234      	tst	r4, r6
 8003b02:	d0f7      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b04:	250e      	movs	r5, #14
 8003b06:	681c      	ldr	r4, [r3, #0]
 8003b08:	43ac      	bics	r4, r5
 8003b0a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	001c      	movs	r4, r3
 8003b10:	408c      	lsls	r4, r1
 8003b12:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 8003b14:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b16:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8003b18:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	18c3      	adds	r3, r0, r3
 8003b1e:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8003b20:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003b22:	e7e5      	b.n	8003af0 <HAL_DMA_IRQHandler+0x5e>

08003b24 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003b24:	2110      	movs	r1, #16
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <FLASH_SetErrorCode+0x34>)
{
 8003b28:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003b2a:	68d8      	ldr	r0, [r3, #12]
  uint32_t flags = 0U;
 8003b2c:	2200      	movs	r2, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003b2e:	4208      	tst	r0, r1
 8003b30:	d005      	beq.n	8003b3e <FLASH_SetErrorCode+0x1a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003b32:	480a      	ldr	r0, [pc, #40]	; (8003b5c <FLASH_SetErrorCode+0x38>)
 8003b34:	3202      	adds	r2, #2
 8003b36:	69c4      	ldr	r4, [r0, #28]
 8003b38:	4322      	orrs	r2, r4
 8003b3a:	61c2      	str	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 8003b3c:	000a      	movs	r2, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003b3e:	2004      	movs	r0, #4
 8003b40:	68d9      	ldr	r1, [r3, #12]
 8003b42:	4201      	tst	r1, r0
 8003b44:	d005      	beq.n	8003b52 <FLASH_SetErrorCode+0x2e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003b46:	2101      	movs	r1, #1
 8003b48:	4c04      	ldr	r4, [pc, #16]	; (8003b5c <FLASH_SetErrorCode+0x38>)
    flags |= FLASH_FLAG_PGERR;
 8003b4a:	4302      	orrs	r2, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003b4c:	69e5      	ldr	r5, [r4, #28]
 8003b4e:	4329      	orrs	r1, r5
 8003b50:	61e1      	str	r1, [r4, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b52:	60da      	str	r2, [r3, #12]
}  
 8003b54:	bd30      	pop	{r4, r5, pc}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	40022000 	.word	0x40022000
 8003b5c:	20000740 	.word	0x20000740

08003b60 <HAL_FLASH_EndOfOperationCallback>:
 8003b60:	4770      	bx	lr

08003b62 <HAL_FLASH_OperationErrorCallback>:
}
 8003b62:	4770      	bx	lr

08003b64 <HAL_FLASH_IRQHandler>:
{
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003b66:	4d43      	ldr	r5, [pc, #268]	; (8003c74 <HAL_FLASH_IRQHandler+0x110>)
 8003b68:	4c43      	ldr	r4, [pc, #268]	; (8003c78 <HAL_FLASH_IRQHandler+0x114>)
 8003b6a:	68eb      	ldr	r3, [r5, #12]
 8003b6c:	06db      	lsls	r3, r3, #27
 8003b6e:	d402      	bmi.n	8003b76 <HAL_FLASH_IRQHandler+0x12>
 8003b70:	68eb      	ldr	r3, [r5, #12]
 8003b72:	075b      	lsls	r3, r3, #29
 8003b74:	d50a      	bpl.n	8003b8c <HAL_FLASH_IRQHandler+0x28>
    pFlash.Address = 0xFFFFFFFFU;
 8003b76:	2301      	movs	r3, #1
    addresstmp = pFlash.Address;
 8003b78:	68a6      	ldr	r6, [r4, #8]
    pFlash.Address = 0xFFFFFFFFU;
 8003b7a:	425b      	negs	r3, r3
 8003b7c:	60a3      	str	r3, [r4, #8]
    FLASH_SetErrorCode();
 8003b7e:	f7ff ffd1 	bl	8003b24 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8003b82:	0030      	movs	r0, r6
 8003b84:	f7ff ffed 	bl	8003b62 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	7023      	strb	r3, [r4, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003b8c:	2320      	movs	r3, #32
 8003b8e:	68ea      	ldr	r2, [r5, #12]
 8003b90:	421a      	tst	r2, r3
 8003b92:	d01a      	beq.n	8003bca <HAL_FLASH_IRQHandler+0x66>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003b94:	60eb      	str	r3, [r5, #12]
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8003b96:	7823      	ldrb	r3, [r4, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d016      	beq.n	8003bca <HAL_FLASH_IRQHandler+0x66>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8003b9c:	7823      	ldrb	r3, [r4, #0]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d128      	bne.n	8003bf4 <HAL_FLASH_IRQHandler+0x90>
        pFlash.DataRemaining--;
 8003ba2:	6863      	ldr	r3, [r4, #4]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 8003ba8:	6863      	ldr	r3, [r4, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01b      	beq.n	8003be6 <HAL_FLASH_IRQHandler+0x82>
          addresstmp = pFlash.Address;
 8003bae:	68a0      	ldr	r0, [r4, #8]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003bb0:	f7ff ffd6 	bl	8003b60 <HAL_FLASH_EndOfOperationCallback>
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8003bb4:	2380      	movs	r3, #128	; 0x80
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003bb6:	2202      	movs	r2, #2
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8003bb8:	68a0      	ldr	r0, [r4, #8]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	18c0      	adds	r0, r0, r3
          pFlash.Address = addresstmp;
 8003bbe:	60a0      	str	r0, [r4, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003bc0:	692b      	ldr	r3, [r5, #16]
 8003bc2:	4393      	bics	r3, r2
 8003bc4:	612b      	str	r3, [r5, #16]
          FLASH_PageErase(addresstmp);
 8003bc6:	f000 f90b 	bl	8003de0 <FLASH_PageErase>
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8003bca:	7823      	ldrb	r3, [r4, #0]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d108      	bne.n	8003be4 <HAL_FLASH_IRQHandler+0x80>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8003bd2:	2107      	movs	r1, #7
 8003bd4:	692a      	ldr	r2, [r5, #16]
 8003bd6:	438a      	bics	r2, r1
 8003bd8:	612a      	str	r2, [r5, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8003bda:	692a      	ldr	r2, [r5, #16]
 8003bdc:	4927      	ldr	r1, [pc, #156]	; (8003c7c <HAL_FLASH_IRQHandler+0x118>)
 8003bde:	400a      	ands	r2, r1
 8003be0:	612a      	str	r2, [r5, #16]
    __HAL_UNLOCK(&pFlash);
 8003be2:	7623      	strb	r3, [r4, #24]
}
 8003be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8003be6:	2001      	movs	r0, #1
 8003be8:	4240      	negs	r0, r0
 8003bea:	60a0      	str	r0, [r4, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003bec:	7023      	strb	r3, [r4, #0]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003bee:	f7ff ffb7 	bl	8003b60 <HAL_FLASH_EndOfOperationCallback>
 8003bf2:	e7ea      	b.n	8003bca <HAL_FLASH_IRQHandler+0x66>
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8003bf4:	7823      	ldrb	r3, [r4, #0]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d109      	bne.n	8003c0e <HAL_FLASH_IRQHandler+0xaa>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	692b      	ldr	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0);
 8003bfe:	2000      	movs	r0, #0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003c00:	4393      	bics	r3, r2
 8003c02:	612b      	str	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0);
 8003c04:	f7ff ffac 	bl	8003b60 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	7023      	strb	r3, [r4, #0]
 8003c0c:	e7dd      	b.n	8003bca <HAL_FLASH_IRQHandler+0x66>
        pFlash.DataRemaining--;
 8003c0e:	6863      	ldr	r3, [r4, #4]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 8003c14:	6863      	ldr	r3, [r4, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d019      	beq.n	8003c4e <HAL_FLASH_IRQHandler+0xea>
          pFlash.Address += 2;
 8003c1a:	68a3      	ldr	r3, [r4, #8]
 8003c1c:	3302      	adds	r3, #2
 8003c1e:	60a3      	str	r3, [r4, #8]
          addresstmp = pFlash.Address;
 8003c20:	68a6      	ldr	r6, [r4, #8]
          pFlash.Data = (pFlash.Data >> 16U);
 8003c22:	6920      	ldr	r0, [r4, #16]
 8003c24:	6961      	ldr	r1, [r4, #20]
 8003c26:	0c0b      	lsrs	r3, r1, #16
 8003c28:	040f      	lsls	r7, r1, #16
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003c2a:	2101      	movs	r1, #1
          pFlash.Data = (pFlash.Data >> 16U);
 8003c2c:	0c02      	lsrs	r2, r0, #16
 8003c2e:	433a      	orrs	r2, r7
 8003c30:	6122      	str	r2, [r4, #16]
 8003c32:	6163      	str	r3, [r4, #20]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003c34:	692b      	ldr	r3, [r5, #16]
 8003c36:	438b      	bics	r3, r1
 8003c38:	612b      	str	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8003c3a:	6922      	ldr	r2, [r4, #16]
 8003c3c:	6963      	ldr	r3, [r4, #20]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61e3      	str	r3, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003c42:	692b      	ldr	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8003c44:	b292      	uxth	r2, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003c46:	4319      	orrs	r1, r3
 8003c48:	6129      	str	r1, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 8003c4a:	8032      	strh	r2, [r6, #0]
 8003c4c:	e7bd      	b.n	8003bca <HAL_FLASH_IRQHandler+0x66>
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8003c4e:	7823      	ldrb	r3, [r4, #0]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d106      	bne.n	8003c62 <HAL_FLASH_IRQHandler+0xfe>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003c54:	68a0      	ldr	r0, [r4, #8]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8003c56:	f7ff ff83 	bl	8003b60 <HAL_FLASH_EndOfOperationCallback>
          pFlash.Address = 0xFFFFFFFFU;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	425b      	negs	r3, r3
 8003c5e:	60a3      	str	r3, [r4, #8]
 8003c60:	e7d2      	b.n	8003c08 <HAL_FLASH_IRQHandler+0xa4>
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8003c62:	7823      	ldrb	r3, [r4, #0]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8003c64:	68a0      	ldr	r0, [r4, #8]
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d101      	bne.n	8003c6e <HAL_FLASH_IRQHandler+0x10a>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8003c6a:	3802      	subs	r0, #2
 8003c6c:	e7f3      	b.n	8003c56 <HAL_FLASH_IRQHandler+0xf2>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8003c6e:	3806      	subs	r0, #6
 8003c70:	e7f1      	b.n	8003c56 <HAL_FLASH_IRQHandler+0xf2>
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	40022000 	.word	0x40022000
 8003c78:	20000740 	.word	0x20000740
 8003c7c:	ffffebff 	.word	0xffffebff

08003c80 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_FLASH_Unlock+0x18>)
    return HAL_ERROR;
 8003c82:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8003c84:	691a      	ldr	r2, [r3, #16]
 8003c86:	0612      	lsls	r2, r2, #24
 8003c88:	d504      	bpl.n	8003c94 <HAL_FLASH_Unlock+0x14>
  return HAL_OK; 
 8003c8a:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003c8c:	4a03      	ldr	r2, [pc, #12]	; (8003c9c <HAL_FLASH_Unlock+0x1c>)
 8003c8e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003c90:	4a03      	ldr	r2, [pc, #12]	; (8003ca0 <HAL_FLASH_Unlock+0x20>)
 8003c92:	605a      	str	r2, [r3, #4]
}
 8003c94:	4770      	bx	lr
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	40022000 	.word	0x40022000
 8003c9c:	45670123 	.word	0x45670123
 8003ca0:	cdef89ab 	.word	0xcdef89ab

08003ca4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	4a03      	ldr	r2, [pc, #12]	; (8003cb4 <HAL_FLASH_Lock+0x10>)
}
 8003ca8:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003caa:	6911      	ldr	r1, [r2, #16]
 8003cac:	430b      	orrs	r3, r1
 8003cae:	6113      	str	r3, [r2, #16]
}
 8003cb0:	4770      	bx	lr
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	40022000 	.word	0x40022000

08003cb8 <FLASH_WaitForLastOperation>:
{
 8003cb8:	b570      	push	{r4, r5, r6, lr}
 8003cba:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003cbc:	f7ff f99a 	bl	8002ff4 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003cc0:	2501      	movs	r5, #1
  uint32_t tickstart = HAL_GetTick();
 8003cc2:	0006      	movs	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003cc4:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <FLASH_WaitForLastOperation+0x50>)
 8003cc6:	001a      	movs	r2, r3
 8003cc8:	68d9      	ldr	r1, [r3, #12]
 8003cca:	4229      	tst	r1, r5
 8003ccc:	d10f      	bne.n	8003cee <FLASH_WaitForLastOperation+0x36>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003cce:	2120      	movs	r1, #32
 8003cd0:	68d8      	ldr	r0, [r3, #12]
 8003cd2:	4208      	tst	r0, r1
 8003cd4:	d000      	beq.n	8003cd8 <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003cd6:	60d9      	str	r1, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003cd8:	2310      	movs	r3, #16
 8003cda:	68d0      	ldr	r0, [r2, #12]
 8003cdc:	4018      	ands	r0, r3
 8003cde:	d102      	bne.n	8003ce6 <FLASH_WaitForLastOperation+0x2e>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003ce0:	68d3      	ldr	r3, [r2, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003ce2:	075b      	lsls	r3, r3, #29
 8003ce4:	d508      	bpl.n	8003cf8 <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 8003ce6:	f7ff ff1d 	bl	8003b24 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003cea:	2001      	movs	r0, #1
 8003cec:	e004      	b.n	8003cf8 <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8003cee:	1c61      	adds	r1, r4, #1
 8003cf0:	d0ea      	beq.n	8003cc8 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003cf2:	2c00      	cmp	r4, #0
 8003cf4:	d101      	bne.n	8003cfa <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 8003cf6:	2003      	movs	r0, #3
}
 8003cf8:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003cfa:	f7ff f97b 	bl	8002ff4 <HAL_GetTick>
 8003cfe:	1b80      	subs	r0, r0, r6
 8003d00:	4284      	cmp	r4, r0
 8003d02:	d2df      	bcs.n	8003cc4 <FLASH_WaitForLastOperation+0xc>
 8003d04:	e7f7      	b.n	8003cf6 <FLASH_WaitForLastOperation+0x3e>
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	40022000 	.word	0x40022000

08003d0c <HAL_FLASH_Program>:
{
 8003d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	9202      	str	r2, [sp, #8]
 8003d12:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(&pFlash);
 8003d14:	4b24      	ldr	r3, [pc, #144]	; (8003da8 <HAL_FLASH_Program+0x9c>)
{
 8003d16:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(&pFlash);
 8003d18:	7e1a      	ldrb	r2, [r3, #24]
{
 8003d1a:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8003d1c:	2002      	movs	r0, #2
 8003d1e:	2a01      	cmp	r2, #1
 8003d20:	d040      	beq.n	8003da4 <HAL_FLASH_Program+0x98>
 8003d22:	2201      	movs	r2, #1
 8003d24:	761a      	strb	r2, [r3, #24]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8003d26:	1e63      	subs	r3, r4, #1
 8003d28:	4283      	cmp	r3, r0
 8003d2a:	d903      	bls.n	8003d34 <HAL_FLASH_Program+0x28>
 8003d2c:	21c1      	movs	r1, #193	; 0xc1
 8003d2e:	481f      	ldr	r0, [pc, #124]	; (8003dac <HAL_FLASH_Program+0xa0>)
 8003d30:	f7fe fd43 	bl	80027ba <assert_failed>
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 8003d34:	21f8      	movs	r1, #248	; 0xf8
 8003d36:	9b01      	ldr	r3, [sp, #4]
 8003d38:	0609      	lsls	r1, r1, #24
 8003d3a:	4a1d      	ldr	r2, [pc, #116]	; (8003db0 <HAL_FLASH_Program+0xa4>)
 8003d3c:	185b      	adds	r3, r3, r1
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d903      	bls.n	8003d4a <HAL_FLASH_Program+0x3e>
 8003d42:	21c2      	movs	r1, #194	; 0xc2
 8003d44:	4819      	ldr	r0, [pc, #100]	; (8003dac <HAL_FLASH_Program+0xa0>)
 8003d46:	f7fe fd38 	bl	80027ba <assert_failed>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d4a:	481a      	ldr	r0, [pc, #104]	; (8003db4 <HAL_FLASH_Program+0xa8>)
 8003d4c:	f7ff ffb4 	bl	8003cb8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8003d50:	2800      	cmp	r0, #0
 8003d52:	d124      	bne.n	8003d9e <HAL_FLASH_Program+0x92>
      nbiterations = 1U;
 8003d54:	0026      	movs	r6, r4
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003d56:	2c01      	cmp	r4, #1
 8003d58:	d002      	beq.n	8003d60 <HAL_FLASH_Program+0x54>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003d5a:	2c02      	cmp	r4, #2
 8003d5c:	d000      	beq.n	8003d60 <HAL_FLASH_Program+0x54>
      nbiterations = 4U;
 8003d5e:	2604      	movs	r6, #4
 8003d60:	2400      	movs	r4, #0
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003d62:	9802      	ldr	r0, [sp, #8]
 8003d64:	9903      	ldr	r1, [sp, #12]
 8003d66:	0122      	lsls	r2, r4, #4
 8003d68:	f7fc fa64 	bl	8000234 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d6c:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003d6e:	2701      	movs	r7, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d70:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <HAL_FLASH_Program+0x9c>)
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003d72:	4d11      	ldr	r5, [pc, #68]	; (8003db8 <HAL_FLASH_Program+0xac>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d74:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003d76:	692b      	ldr	r3, [r5, #16]
 8003d78:	9a01      	ldr	r2, [sp, #4]
 8003d7a:	433b      	orrs	r3, r7
 8003d7c:	612b      	str	r3, [r5, #16]
 8003d7e:	0063      	lsls	r3, r4, #1
 8003d80:	189b      	adds	r3, r3, r2
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003d82:	b280      	uxth	r0, r0
  *(__IO uint16_t*)Address = Data;
 8003d84:	8018      	strh	r0, [r3, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d86:	480b      	ldr	r0, [pc, #44]	; (8003db4 <HAL_FLASH_Program+0xa8>)
 8003d88:	f7ff ff96 	bl	8003cb8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003d8c:	692b      	ldr	r3, [r5, #16]
 8003d8e:	43bb      	bics	r3, r7
 8003d90:	612b      	str	r3, [r5, #16]
      if (status != HAL_OK)
 8003d92:	2800      	cmp	r0, #0
 8003d94:	d103      	bne.n	8003d9e <HAL_FLASH_Program+0x92>
 8003d96:	19e4      	adds	r4, r4, r7
    for (index = 0U; index < nbiterations; index++)
 8003d98:	b2e3      	uxtb	r3, r4
 8003d9a:	429e      	cmp	r6, r3
 8003d9c:	d8e1      	bhi.n	8003d62 <HAL_FLASH_Program+0x56>
  __HAL_UNLOCK(&pFlash);
 8003d9e:	2200      	movs	r2, #0
 8003da0:	4b01      	ldr	r3, [pc, #4]	; (8003da8 <HAL_FLASH_Program+0x9c>)
 8003da2:	761a      	strb	r2, [r3, #24]
}
 8003da4:	b005      	add	sp, #20
 8003da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003da8:	20000740 	.word	0x20000740
 8003dac:	08006ed5 	.word	0x08006ed5
 8003db0:	00007fff 	.word	0x00007fff
 8003db4:	0000c350 	.word	0x0000c350
 8003db8:	40022000 	.word	0x40022000

08003dbc <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <FLASH_MassErase+0x1c>)
 8003dc0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <FLASH_MassErase+0x20>)
 8003dc4:	3204      	adds	r2, #4
 8003dc6:	6919      	ldr	r1, [r3, #16]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003dcc:	2240      	movs	r2, #64	; 0x40
 8003dce:	6919      	ldr	r1, [r3, #16]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	611a      	str	r2, [r3, #16]
}
 8003dd4:	4770      	bx	lr
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	20000740 	.word	0x20000740
 8003ddc:	40022000 	.word	0x40022000

08003de0 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003de0:	2200      	movs	r2, #0
 8003de2:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <FLASH_PageErase+0x1c>)
 8003de4:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <FLASH_PageErase+0x20>)
 8003de8:	3202      	adds	r2, #2
 8003dea:	6919      	ldr	r1, [r3, #16]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003df0:	2240      	movs	r2, #64	; 0x40
    WRITE_REG(FLASH->AR, PageAddress);
 8003df2:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003df4:	6919      	ldr	r1, [r3, #16]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	611a      	str	r2, [r3, #16]
}
 8003dfa:	4770      	bx	lr
 8003dfc:	20000740 	.word	0x20000740
 8003e00:	40022000 	.word	0x40022000

08003e04 <HAL_FLASHEx_Erase>:
{
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8003e06:	4e30      	ldr	r6, [pc, #192]	; (8003ec8 <HAL_FLASHEx_Erase+0xc4>)
{
 8003e08:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8003e0a:	7e33      	ldrb	r3, [r6, #24]
{
 8003e0c:	000f      	movs	r7, r1
  __HAL_LOCK(&pFlash);
 8003e0e:	2002      	movs	r0, #2
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d013      	beq.n	8003e3c <HAL_FLASHEx_Erase+0x38>
 8003e14:	2301      	movs	r3, #1
 8003e16:	7633      	strb	r3, [r6, #24]
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d903      	bls.n	8003e26 <HAL_FLASHEx_Erase+0x22>
 8003e1e:	21b8      	movs	r1, #184	; 0xb8
 8003e20:	482a      	ldr	r0, [pc, #168]	; (8003ecc <HAL_FLASHEx_Erase+0xc8>)
 8003e22:	f7fe fcca 	bl	80027ba <assert_failed>
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d113      	bne.n	8003e54 <HAL_FLASHEx_Erase+0x50>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003e2c:	4828      	ldr	r0, [pc, #160]	; (8003ed0 <HAL_FLASHEx_Erase+0xcc>)
 8003e2e:	f7ff ff43 	bl	8003cb8 <FLASH_WaitForLastOperation>
 8003e32:	2800      	cmp	r0, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_FLASHEx_Erase+0x3a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e36:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	7633      	strb	r3, [r6, #24]
}
 8003e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8003e3e:	f7ff ffbd 	bl	8003dbc <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e42:	4823      	ldr	r0, [pc, #140]	; (8003ed0 <HAL_FLASHEx_Erase+0xcc>)
 8003e44:	f7ff ff38 	bl	8003cb8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003e48:	2104      	movs	r1, #4
 8003e4a:	4a22      	ldr	r2, [pc, #136]	; (8003ed4 <HAL_FLASHEx_Erase+0xd0>)
 8003e4c:	6913      	ldr	r3, [r2, #16]
 8003e4e:	438b      	bics	r3, r1
 8003e50:	6113      	str	r3, [r2, #16]
 8003e52:	e7f1      	b.n	8003e38 <HAL_FLASHEx_Erase+0x34>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 8003e54:	22f8      	movs	r2, #248	; 0xf8
 8003e56:	6863      	ldr	r3, [r4, #4]
 8003e58:	0612      	lsls	r2, r2, #24
 8003e5a:	189b      	adds	r3, r3, r2
 8003e5c:	4a1e      	ldr	r2, [pc, #120]	; (8003ed8 <HAL_FLASHEx_Erase+0xd4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d903      	bls.n	8003e6a <HAL_FLASHEx_Erase+0x66>
 8003e62:	21ce      	movs	r1, #206	; 0xce
 8003e64:	4819      	ldr	r0, [pc, #100]	; (8003ecc <HAL_FLASHEx_Erase+0xc8>)
 8003e66:	f7fe fca8 	bl	80027ba <assert_failed>
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
 8003e6a:	68a3      	ldr	r3, [r4, #8]
 8003e6c:	6862      	ldr	r2, [r4, #4]
 8003e6e:	029b      	lsls	r3, r3, #10
 8003e70:	3a01      	subs	r2, #1
 8003e72:	189b      	adds	r3, r3, r2
 8003e74:	4a19      	ldr	r2, [pc, #100]	; (8003edc <HAL_FLASHEx_Erase+0xd8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d903      	bls.n	8003e82 <HAL_FLASHEx_Erase+0x7e>
 8003e7a:	21cf      	movs	r1, #207	; 0xcf
 8003e7c:	4813      	ldr	r0, [pc, #76]	; (8003ecc <HAL_FLASHEx_Erase+0xc8>)
 8003e7e:	f7fe fc9c 	bl	80027ba <assert_failed>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003e82:	4813      	ldr	r0, [pc, #76]	; (8003ed0 <HAL_FLASHEx_Erase+0xcc>)
 8003e84:	f7ff ff18 	bl	8003cb8 <FLASH_WaitForLastOperation>
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	d1d4      	bne.n	8003e36 <HAL_FLASHEx_Erase+0x32>
        *PageError = 0xFFFFFFFFU;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	425b      	negs	r3, r3
 8003e90:	603b      	str	r3, [r7, #0]
        for(address = pEraseInit->PageAddress;
 8003e92:	6865      	ldr	r5, [r4, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e94:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003e96:	68a3      	ldr	r3, [r4, #8]
 8003e98:	6862      	ldr	r2, [r4, #4]
 8003e9a:	029b      	lsls	r3, r3, #10
 8003e9c:	189b      	adds	r3, r3, r2
        for(address = pEraseInit->PageAddress;
 8003e9e:	429d      	cmp	r5, r3
 8003ea0:	d2ca      	bcs.n	8003e38 <HAL_FLASHEx_Erase+0x34>
          FLASH_PageErase(address);
 8003ea2:	0028      	movs	r0, r5
 8003ea4:	f7ff ff9c 	bl	8003de0 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ea8:	4809      	ldr	r0, [pc, #36]	; (8003ed0 <HAL_FLASHEx_Erase+0xcc>)
 8003eaa:	f7ff ff05 	bl	8003cb8 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003eae:	2102      	movs	r1, #2
 8003eb0:	4a08      	ldr	r2, [pc, #32]	; (8003ed4 <HAL_FLASHEx_Erase+0xd0>)
 8003eb2:	6913      	ldr	r3, [r2, #16]
 8003eb4:	438b      	bics	r3, r1
 8003eb6:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_FLASHEx_Erase+0xbc>
            *PageError = address;
 8003ebc:	603d      	str	r5, [r7, #0]
            break;
 8003ebe:	e7bb      	b.n	8003e38 <HAL_FLASHEx_Erase+0x34>
            address += FLASH_PAGE_SIZE)
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	18ed      	adds	r5, r5, r3
 8003ec6:	e7e6      	b.n	8003e96 <HAL_FLASHEx_Erase+0x92>
 8003ec8:	20000740 	.word	0x20000740
 8003ecc:	08006f0f 	.word	0x08006f0f
 8003ed0:	0000c350 	.word	0x0000c350
 8003ed4:	40022000 	.word	0x40022000
 8003ed8:	00007fff 	.word	0x00007fff
 8003edc:	08007fff 	.word	0x08007fff

08003ee0 <HAL_GPIO_Init>:
  uint32_t position = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003ee0:	2390      	movs	r3, #144	; 0x90
{ 
 8003ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003ee4:	05db      	lsls	r3, r3, #23
{ 
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	0004      	movs	r4, r0
 8003eea:	000d      	movs	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003eec:	4298      	cmp	r0, r3
 8003eee:	d00f      	beq.n	8003f10 <HAL_GPIO_Init+0x30>
 8003ef0:	4b7b      	ldr	r3, [pc, #492]	; (80040e0 <HAL_GPIO_Init+0x200>)
 8003ef2:	4298      	cmp	r0, r3
 8003ef4:	d00c      	beq.n	8003f10 <HAL_GPIO_Init+0x30>
 8003ef6:	4b7b      	ldr	r3, [pc, #492]	; (80040e4 <HAL_GPIO_Init+0x204>)
 8003ef8:	4298      	cmp	r0, r3
 8003efa:	d009      	beq.n	8003f10 <HAL_GPIO_Init+0x30>
 8003efc:	4b7a      	ldr	r3, [pc, #488]	; (80040e8 <HAL_GPIO_Init+0x208>)
 8003efe:	4298      	cmp	r0, r3
 8003f00:	d006      	beq.n	8003f10 <HAL_GPIO_Init+0x30>
 8003f02:	4b7a      	ldr	r3, [pc, #488]	; (80040ec <HAL_GPIO_Init+0x20c>)
 8003f04:	4298      	cmp	r0, r3
 8003f06:	d003      	beq.n	8003f10 <HAL_GPIO_Init+0x30>
 8003f08:	21c1      	movs	r1, #193	; 0xc1
 8003f0a:	4879      	ldr	r0, [pc, #484]	; (80040f0 <HAL_GPIO_Init+0x210>)
 8003f0c:	f7fe fc55 	bl	80027ba <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	2a00      	cmp	r2, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_GPIO_Init+0x3c>
 8003f18:	0c1b      	lsrs	r3, r3, #16
 8003f1a:	d003      	beq.n	8003f24 <HAL_GPIO_Init+0x44>
 8003f1c:	21c2      	movs	r1, #194	; 0xc2
 8003f1e:	4874      	ldr	r0, [pc, #464]	; (80040f0 <HAL_GPIO_Init+0x210>)
 8003f20:	f7fe fc4b 	bl	80027ba <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003f24:	686b      	ldr	r3, [r5, #4]
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d912      	bls.n	8003f50 <HAL_GPIO_Init+0x70>
 8003f2a:	001a      	movs	r2, r3
 8003f2c:	3a11      	subs	r2, #17
 8003f2e:	2a01      	cmp	r2, #1
 8003f30:	d90e      	bls.n	8003f50 <HAL_GPIO_Init+0x70>
 8003f32:	4a70      	ldr	r2, [pc, #448]	; (80040f4 <HAL_GPIO_Init+0x214>)
 8003f34:	4970      	ldr	r1, [pc, #448]	; (80040f8 <HAL_GPIO_Init+0x218>)
 8003f36:	401a      	ands	r2, r3
 8003f38:	1852      	adds	r2, r2, r1
 8003f3a:	4970      	ldr	r1, [pc, #448]	; (80040fc <HAL_GPIO_Init+0x21c>)
 8003f3c:	420a      	tst	r2, r1
 8003f3e:	d007      	beq.n	8003f50 <HAL_GPIO_Init+0x70>
 8003f40:	4a6f      	ldr	r2, [pc, #444]	; (8004100 <HAL_GPIO_Init+0x220>)
 8003f42:	189b      	adds	r3, r3, r2
 8003f44:	420b      	tst	r3, r1
 8003f46:	d003      	beq.n	8003f50 <HAL_GPIO_Init+0x70>
 8003f48:	21c3      	movs	r1, #195	; 0xc3
 8003f4a:	4869      	ldr	r0, [pc, #420]	; (80040f0 <HAL_GPIO_Init+0x210>)
 8003f4c:	f7fe fc35 	bl	80027ba <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 8003f50:	68ab      	ldr	r3, [r5, #8]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d903      	bls.n	8003f5e <HAL_GPIO_Init+0x7e>
 8003f56:	21c4      	movs	r1, #196	; 0xc4
 8003f58:	4865      	ldr	r0, [pc, #404]	; (80040f0 <HAL_GPIO_Init+0x210>)
 8003f5a:	f7fe fc2e 	bl	80027ba <assert_failed>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f5e:	2300      	movs	r3, #0
        }
        EXTI->FTSR = temp;
      }
    }
    
    position++;
 8003f60:	9301      	str	r3, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003f62:	682b      	ldr	r3, [r5, #0]
 8003f64:	9901      	ldr	r1, [sp, #4]
 8003f66:	001a      	movs	r2, r3
 8003f68:	40ca      	lsrs	r2, r1
 8003f6a:	d101      	bne.n	8003f70 <HAL_GPIO_Init+0x90>
  } 
}
 8003f6c:	b007      	add	sp, #28
 8003f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003f70:	2201      	movs	r2, #1
 8003f72:	9901      	ldr	r1, [sp, #4]
 8003f74:	408a      	lsls	r2, r1
 8003f76:	9203      	str	r2, [sp, #12]
 8003f78:	401a      	ands	r2, r3
 8003f7a:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 8003f7c:	d100      	bne.n	8003f80 <HAL_GPIO_Init+0xa0>
 8003f7e:	e0ab      	b.n	80040d8 <HAL_GPIO_Init+0x1f8>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003f80:	2210      	movs	r2, #16
 8003f82:	686b      	ldr	r3, [r5, #4]
 8003f84:	4393      	bics	r3, r2
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d122      	bne.n	8003fd0 <HAL_GPIO_Init+0xf0>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003f8a:	2390      	movs	r3, #144	; 0x90
 8003f8c:	05db      	lsls	r3, r3, #23
 8003f8e:	429c      	cmp	r4, r3
 8003f90:	d006      	beq.n	8003fa0 <HAL_GPIO_Init+0xc0>
 8003f92:	4b53      	ldr	r3, [pc, #332]	; (80040e0 <HAL_GPIO_Init+0x200>)
 8003f94:	429c      	cmp	r4, r3
 8003f96:	d003      	beq.n	8003fa0 <HAL_GPIO_Init+0xc0>
 8003f98:	21d3      	movs	r1, #211	; 0xd3
 8003f9a:	4855      	ldr	r0, [pc, #340]	; (80040f0 <HAL_GPIO_Init+0x210>)
 8003f9c:	f7fe fc0d 	bl	80027ba <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003fa0:	692b      	ldr	r3, [r5, #16]
 8003fa2:	2b06      	cmp	r3, #6
 8003fa4:	d903      	bls.n	8003fae <HAL_GPIO_Init+0xce>
 8003fa6:	21d4      	movs	r1, #212	; 0xd4
 8003fa8:	4851      	ldr	r0, [pc, #324]	; (80040f0 <HAL_GPIO_Init+0x210>)
 8003faa:	f7fe fc06 	bl	80027ba <assert_failed>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8003fae:	2207      	movs	r2, #7
 8003fb0:	9801      	ldr	r0, [sp, #4]
        temp = GPIOx->AFR[position >> 3];
 8003fb2:	9b01      	ldr	r3, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8003fb4:	4002      	ands	r2, r0
 8003fb6:	200f      	movs	r0, #15
 8003fb8:	0092      	lsls	r2, r2, #2
 8003fba:	4090      	lsls	r0, r2
        temp = GPIOx->AFR[position >> 3];
 8003fbc:	08db      	lsrs	r3, r3, #3
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	18e3      	adds	r3, r4, r3
 8003fc2:	6a19      	ldr	r1, [r3, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8003fc4:	4381      	bics	r1, r0
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8003fc6:	6928      	ldr	r0, [r5, #16]
 8003fc8:	4090      	lsls	r0, r2
 8003fca:	0002      	movs	r2, r0
 8003fcc:	430a      	orrs	r2, r1
        GPIOx->AFR[position >> 3U] = temp;
 8003fce:	621a      	str	r2, [r3, #32]
 8003fd0:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fd2:	686a      	ldr	r2, [r5, #4]
 8003fd4:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	001e      	movs	r6, r3
 8003fda:	40be      	lsls	r6, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fdc:	4013      	ands	r3, r2
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003fde:	43f6      	mvns	r6, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fe0:	40bb      	lsls	r3, r7
      temp = GPIOx->MODER;
 8003fe2:	6821      	ldr	r1, [r4, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003fe4:	4031      	ands	r1, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fe6:	430b      	orrs	r3, r1
      GPIOx->MODER = temp;
 8003fe8:	6023      	str	r3, [r4, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fea:	2310      	movs	r3, #16
 8003fec:	439a      	bics	r2, r3
 8003fee:	3a01      	subs	r2, #1
 8003ff0:	2a01      	cmp	r2, #1
 8003ff2:	d819      	bhi.n	8004028 <HAL_GPIO_Init+0x148>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003ff4:	68eb      	ldr	r3, [r5, #12]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d905      	bls.n	8004006 <HAL_GPIO_Init+0x126>
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_Init+0x126>
 8003ffe:	21e8      	movs	r1, #232	; 0xe8
 8004000:	483b      	ldr	r0, [pc, #236]	; (80040f0 <HAL_GPIO_Init+0x210>)
 8004002:	f7fe fbda 	bl	80027ba <assert_failed>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8004006:	68eb      	ldr	r3, [r5, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004008:	2101      	movs	r1, #1
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800400a:	40bb      	lsls	r3, r7
        temp = GPIOx->OSPEEDR; 
 800400c:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800400e:	4032      	ands	r2, r6
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8004010:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8004012:	60a3      	str	r3, [r4, #8]
        temp = GPIOx->OTYPER;
 8004014:	6862      	ldr	r2, [r4, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8004016:	9b03      	ldr	r3, [sp, #12]
 8004018:	439a      	bics	r2, r3
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800401a:	686b      	ldr	r3, [r5, #4]
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	400b      	ands	r3, r1
 8004020:	9901      	ldr	r1, [sp, #4]
 8004022:	408b      	lsls	r3, r1
 8004024:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8004026:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 8004028:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800402a:	6869      	ldr	r1, [r5, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800402c:	4033      	ands	r3, r6
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800402e:	68ae      	ldr	r6, [r5, #8]
 8004030:	40be      	lsls	r6, r7
 8004032:	431e      	orrs	r6, r3
      GPIOx->PUPDR = temp;
 8004034:	60e6      	str	r6, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8004036:	00cb      	lsls	r3, r1, #3
 8004038:	d54e      	bpl.n	80040d8 <HAL_GPIO_Init+0x1f8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800403a:	2001      	movs	r0, #1
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800403c:	2603      	movs	r6, #3
 800403e:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004040:	4b30      	ldr	r3, [pc, #192]	; (8004104 <HAL_GPIO_Init+0x224>)
 8004042:	699a      	ldr	r2, [r3, #24]
 8004044:	4302      	orrs	r2, r0
 8004046:	619a      	str	r2, [r3, #24]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	4003      	ands	r3, r0
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800404c:	9801      	ldr	r0, [sp, #4]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800404e:	9305      	str	r3, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8004050:	4030      	ands	r0, r6
 8004052:	0080      	lsls	r0, r0, #2
 8004054:	4087      	lsls	r7, r0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004056:	9b05      	ldr	r3, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2];
 8004058:	9b01      	ldr	r3, [sp, #4]
 800405a:	089a      	lsrs	r2, r3, #2
 800405c:	4b2a      	ldr	r3, [pc, #168]	; (8004108 <HAL_GPIO_Init+0x228>)
 800405e:	0092      	lsls	r2, r2, #2
 8004060:	18d2      	adds	r2, r2, r3
 8004062:	6893      	ldr	r3, [r2, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8004064:	43bb      	bics	r3, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004066:	2790      	movs	r7, #144	; 0x90
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8004068:	469c      	mov	ip, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800406a:	05ff      	lsls	r7, r7, #23
 800406c:	2300      	movs	r3, #0
 800406e:	42bc      	cmp	r4, r7
 8004070:	d00c      	beq.n	800408c <HAL_GPIO_Init+0x1ac>
 8004072:	4f1b      	ldr	r7, [pc, #108]	; (80040e0 <HAL_GPIO_Init+0x200>)
 8004074:	3301      	adds	r3, #1
 8004076:	42bc      	cmp	r4, r7
 8004078:	d008      	beq.n	800408c <HAL_GPIO_Init+0x1ac>
 800407a:	4f1a      	ldr	r7, [pc, #104]	; (80040e4 <HAL_GPIO_Init+0x204>)
 800407c:	3301      	adds	r3, #1
 800407e:	42bc      	cmp	r4, r7
 8004080:	d004      	beq.n	800408c <HAL_GPIO_Init+0x1ac>
 8004082:	4f19      	ldr	r7, [pc, #100]	; (80040e8 <HAL_GPIO_Init+0x208>)
 8004084:	199b      	adds	r3, r3, r6
 8004086:	42bc      	cmp	r4, r7
 8004088:	d100      	bne.n	800408c <HAL_GPIO_Init+0x1ac>
 800408a:	0033      	movs	r3, r6
 800408c:	4083      	lsls	r3, r0
 800408e:	4660      	mov	r0, ip
 8004090:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2] = temp;
 8004092:	6093      	str	r3, [r2, #8]
        temp = EXTI->IMR;
 8004094:	4a1d      	ldr	r2, [pc, #116]	; (800410c <HAL_GPIO_Init+0x22c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004096:	9b02      	ldr	r3, [sp, #8]
        temp = EXTI->IMR;
 8004098:	6816      	ldr	r6, [r2, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800409a:	43d8      	mvns	r0, r3
          SET_BIT(temp, iocurrent); 
 800409c:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800409e:	03cf      	lsls	r7, r1, #15
 80040a0:	d401      	bmi.n	80040a6 <HAL_GPIO_Init+0x1c6>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80040a2:	0033      	movs	r3, r6
 80040a4:	4003      	ands	r3, r0
        EXTI->IMR = temp;
 80040a6:	6013      	str	r3, [r2, #0]
        temp = EXTI->EMR;
 80040a8:	6856      	ldr	r6, [r2, #4]
          SET_BIT(temp, iocurrent); 
 80040aa:	9b02      	ldr	r3, [sp, #8]
 80040ac:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040ae:	038f      	lsls	r7, r1, #14
 80040b0:	d401      	bmi.n	80040b6 <HAL_GPIO_Init+0x1d6>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80040b2:	0033      	movs	r3, r6
 80040b4:	4003      	ands	r3, r0
        EXTI->EMR = temp;
 80040b6:	6053      	str	r3, [r2, #4]
        temp = EXTI->RTSR;
 80040b8:	6896      	ldr	r6, [r2, #8]
          SET_BIT(temp, iocurrent); 
 80040ba:	9b02      	ldr	r3, [sp, #8]
 80040bc:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040be:	02cf      	lsls	r7, r1, #11
 80040c0:	d401      	bmi.n	80040c6 <HAL_GPIO_Init+0x1e6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80040c2:	0033      	movs	r3, r6
 80040c4:	4003      	ands	r3, r0
        EXTI->RTSR = temp;
 80040c6:	6093      	str	r3, [r2, #8]
        temp = EXTI->FTSR;
 80040c8:	68d6      	ldr	r6, [r2, #12]
          SET_BIT(temp, iocurrent); 
 80040ca:	9b02      	ldr	r3, [sp, #8]
 80040cc:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040ce:	0289      	lsls	r1, r1, #10
 80040d0:	d401      	bmi.n	80040d6 <HAL_GPIO_Init+0x1f6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80040d2:	0033      	movs	r3, r6
 80040d4:	4003      	ands	r3, r0
        EXTI->FTSR = temp;
 80040d6:	60d3      	str	r3, [r2, #12]
    position++;
 80040d8:	9b01      	ldr	r3, [sp, #4]
 80040da:	3301      	adds	r3, #1
 80040dc:	e740      	b.n	8003f60 <HAL_GPIO_Init+0x80>
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	48000400 	.word	0x48000400
 80040e4:	48000800 	.word	0x48000800
 80040e8:	48000c00 	.word	0x48000c00
 80040ec:	48001400 	.word	0x48001400
 80040f0:	08006f4c 	.word	0x08006f4c
 80040f4:	ffdfffff 	.word	0xffdfffff
 80040f8:	efef0000 	.word	0xefef0000
 80040fc:	fffeffff 	.word	0xfffeffff
 8004100:	efdf0000 	.word	0xefdf0000
 8004104:	40021000 	.word	0x40021000
 8004108:	40010000 	.word	0x40010000
 800410c:	40010400 	.word	0x40010400

08004110 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	0005      	movs	r5, r0
 8004114:	1e0c      	subs	r4, r1, #0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004116:	d104      	bne.n	8004122 <HAL_GPIO_ReadPin+0x12>
 8004118:	218e      	movs	r1, #142	; 0x8e
 800411a:	4805      	ldr	r0, [pc, #20]	; (8004130 <HAL_GPIO_ReadPin+0x20>)
 800411c:	31ff      	adds	r1, #255	; 0xff
 800411e:	f7fe fb4c 	bl	80027ba <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004122:	6928      	ldr	r0, [r5, #16]
 8004124:	4020      	ands	r0, r4
 8004126:	1e43      	subs	r3, r0, #1
 8004128:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800412a:	b2c0      	uxtb	r0, r0
  }
 800412c:	bd70      	pop	{r4, r5, r6, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	08006f4c 	.word	0x08006f4c

08004134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	0005      	movs	r5, r0
 8004138:	000c      	movs	r4, r1
 800413a:	0016      	movs	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800413c:	2900      	cmp	r1, #0
 800413e:	d104      	bne.n	800414a <HAL_GPIO_WritePin+0x16>
 8004140:	21d6      	movs	r1, #214	; 0xd6
 8004142:	4808      	ldr	r0, [pc, #32]	; (8004164 <HAL_GPIO_WritePin+0x30>)
 8004144:	0049      	lsls	r1, r1, #1
 8004146:	f7fe fb38 	bl	80027ba <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800414a:	2e01      	cmp	r6, #1
 800414c:	d906      	bls.n	800415c <HAL_GPIO_WritePin+0x28>
 800414e:	21ae      	movs	r1, #174	; 0xae
 8004150:	4804      	ldr	r0, [pc, #16]	; (8004164 <HAL_GPIO_WritePin+0x30>)
 8004152:	31ff      	adds	r1, #255	; 0xff
 8004154:	f7fe fb31 	bl	80027ba <assert_failed>

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004158:	61ac      	str	r4, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800415a:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
 800415c:	2e00      	cmp	r6, #0
 800415e:	d1fb      	bne.n	8004158 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004160:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8004162:	e7fa      	b.n	800415a <HAL_GPIO_WritePin+0x26>
 8004164:	08006f4c 	.word	0x08006f4c

08004168 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	0005      	movs	r5, r0
 800416c:	1e0c      	subs	r4, r1, #0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800416e:	d104      	bne.n	800417a <HAL_GPIO_TogglePin+0x12>
 8004170:	21e1      	movs	r1, #225	; 0xe1
 8004172:	4804      	ldr	r0, [pc, #16]	; (8004184 <HAL_GPIO_TogglePin+0x1c>)
 8004174:	0049      	lsls	r1, r1, #1
 8004176:	f7fe fb20 	bl	80027ba <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 800417a:	696b      	ldr	r3, [r5, #20]
 800417c:	405c      	eors	r4, r3
 800417e:	616c      	str	r4, [r5, #20]
}
 8004180:	bd70      	pop	{r4, r5, r6, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	08006f4c 	.word	0x08006f4c

08004188 <HAL_I2CEx_EnableFastModePlus>:
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));
 8004188:	0002      	movs	r2, r0
 800418a:	4b11      	ldr	r3, [pc, #68]	; (80041d0 <HAL_I2CEx_EnableFastModePlus+0x48>)
{
 800418c:	b513      	push	{r0, r1, r4, lr}
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));
 800418e:	401a      	ands	r2, r3
{
 8004190:	0004      	movs	r4, r0
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));
 8004192:	429a      	cmp	r2, r3
 8004194:	d008      	beq.n	80041a8 <HAL_I2CEx_EnableFastModePlus+0x20>
 8004196:	23df      	movs	r3, #223	; 0xdf
 8004198:	041b      	lsls	r3, r3, #16
 800419a:	4218      	tst	r0, r3
 800419c:	d109      	bne.n	80041b2 <HAL_I2CEx_EnableFastModePlus+0x2a>
 800419e:	0002      	movs	r2, r0
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <HAL_I2CEx_EnableFastModePlus+0x4c>)
 80041a2:	401a      	ands	r2, r3
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d004      	beq.n	80041b2 <HAL_I2CEx_EnableFastModePlus+0x2a>
 80041a8:	2194      	movs	r1, #148	; 0x94
 80041aa:	480b      	ldr	r0, [pc, #44]	; (80041d8 <HAL_I2CEx_EnableFastModePlus+0x50>)
 80041ac:	0049      	lsls	r1, r1, #1
 80041ae:	f7fe fb04 	bl	80027ba <assert_failed>

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041b2:	2001      	movs	r0, #1
 80041b4:	4a09      	ldr	r2, [pc, #36]	; (80041dc <HAL_I2CEx_EnableFastModePlus+0x54>)
 80041b6:	6991      	ldr	r1, [r2, #24]
 80041b8:	4301      	orrs	r1, r0
 80041ba:	6191      	str	r1, [r2, #24]
 80041bc:	6993      	ldr	r3, [r2, #24]
 80041be:	4003      	ands	r3, r0
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	9b01      	ldr	r3, [sp, #4]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80041c4:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <HAL_I2CEx_EnableFastModePlus+0x58>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4314      	orrs	r4, r2
 80041ca:	601c      	str	r4, [r3, #0]
}
 80041cc:	bd13      	pop	{r0, r1, r4, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	aaaa0000 	.word	0xaaaa0000
 80041d4:	aaaa0200 	.word	0xaaaa0200
 80041d8:	08006f85 	.word	0x08006f85
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40010000 	.word	0x40010000

080041e4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80041e4:	b570      	push	{r4, r5, r6, lr}
 80041e6:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
  {
    return HAL_ERROR;
 80041e8:	2001      	movs	r0, #1
  if(hiwdg == NULL)
 80041ea:	2c00      	cmp	r4, #0
 80041ec:	d032      	beq.n	8004254 <HAL_IWDG_Init+0x70>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 80041ee:	4b1f      	ldr	r3, [pc, #124]	; (800426c <HAL_IWDG_Init+0x88>)
 80041f0:	6822      	ldr	r2, [r4, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d003      	beq.n	80041fe <HAL_IWDG_Init+0x1a>
 80041f6:	21b5      	movs	r1, #181	; 0xb5
 80041f8:	481d      	ldr	r0, [pc, #116]	; (8004270 <HAL_IWDG_Init+0x8c>)
 80041fa:	f7fe fade 	bl	80027ba <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 80041fe:	6863      	ldr	r3, [r4, #4]
 8004200:	2b06      	cmp	r3, #6
 8004202:	d903      	bls.n	800420c <HAL_IWDG_Init+0x28>
 8004204:	21b6      	movs	r1, #182	; 0xb6
 8004206:	481a      	ldr	r0, [pc, #104]	; (8004270 <HAL_IWDG_Init+0x8c>)
 8004208:	f7fe fad7 	bl	80027ba <assert_failed>
 800420c:	4d19      	ldr	r5, [pc, #100]	; (8004274 <HAL_IWDG_Init+0x90>)
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800420e:	68a3      	ldr	r3, [r4, #8]
 8004210:	42ab      	cmp	r3, r5
 8004212:	d903      	bls.n	800421c <HAL_IWDG_Init+0x38>
 8004214:	21b7      	movs	r1, #183	; 0xb7
 8004216:	4816      	ldr	r0, [pc, #88]	; (8004270 <HAL_IWDG_Init+0x8c>)
 8004218:	f7fe facf 	bl	80027ba <assert_failed>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800421c:	68e3      	ldr	r3, [r4, #12]
 800421e:	42ab      	cmp	r3, r5
 8004220:	d903      	bls.n	800422a <HAL_IWDG_Init+0x46>
 8004222:	21b8      	movs	r1, #184	; 0xb8
 8004224:	4812      	ldr	r0, [pc, #72]	; (8004270 <HAL_IWDG_Init+0x8c>)
 8004226:	f7fe fac8 	bl	80027ba <assert_failed>

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	4a12      	ldr	r2, [pc, #72]	; (8004278 <HAL_IWDG_Init+0x94>)
 800422e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004230:	4a12      	ldr	r2, [pc, #72]	; (800427c <HAL_IWDG_Init+0x98>)
 8004232:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004234:	6862      	ldr	r2, [r4, #4]
 8004236:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004238:	68a2      	ldr	r2, [r4, #8]
 800423a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800423c:	f7fe feda 	bl	8002ff4 <HAL_GetTick>
 8004240:	0005      	movs	r5, r0

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	68d8      	ldr	r0, [r3, #12]
 8004246:	2800      	cmp	r0, #0
 8004248:	d105      	bne.n	8004256 <HAL_IWDG_Init+0x72>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 800424a:	6919      	ldr	r1, [r3, #16]
 800424c:	68e2      	ldr	r2, [r4, #12]
 800424e:	4291      	cmp	r1, r2
 8004250:	d008      	beq.n	8004264 <HAL_IWDG_Init+0x80>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004252:	611a      	str	r2, [r3, #16]
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 8004254:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004256:	f7fe fecd 	bl	8002ff4 <HAL_GetTick>
 800425a:	1b40      	subs	r0, r0, r5
 800425c:	2827      	cmp	r0, #39	; 0x27
 800425e:	d9f0      	bls.n	8004242 <HAL_IWDG_Init+0x5e>
      return HAL_TIMEOUT;
 8004260:	2003      	movs	r0, #3
 8004262:	e7f7      	b.n	8004254 <HAL_IWDG_Init+0x70>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004264:	4a06      	ldr	r2, [pc, #24]	; (8004280 <HAL_IWDG_Init+0x9c>)
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	e7f4      	b.n	8004254 <HAL_IWDG_Init+0x70>
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	40003000 	.word	0x40003000
 8004270:	08006fc0 	.word	0x08006fc0
 8004274:	00000fff 	.word	0x00000fff
 8004278:	0000cccc 	.word	0x0000cccc
 800427c:	00005555 	.word	0x00005555
 8004280:	0000aaaa 	.word	0x0000aaaa

08004284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004286:	0004      	movs	r4, r0
 8004288:	b085      	sub	sp, #20
   uint32_t tickstart = 0U;
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 800428a:	2800      	cmp	r0, #0
 800428c:	d104      	bne.n	8004298 <HAL_RCC_OscConfig+0x14>
 800428e:	2189      	movs	r1, #137	; 0x89
 8004290:	48b8      	ldr	r0, [pc, #736]	; (8004574 <HAL_RCC_OscConfig+0x2f0>)
 8004292:	0049      	lsls	r1, r1, #1
 8004294:	f7fe fa91 	bl	80027ba <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d006      	beq.n	80042ac <HAL_RCC_OscConfig+0x28>
 800429e:	06db      	lsls	r3, r3, #27
 80042a0:	d104      	bne.n	80042ac <HAL_RCC_OscConfig+0x28>
 80042a2:	2114      	movs	r1, #20
 80042a4:	48b3      	ldr	r0, [pc, #716]	; (8004574 <HAL_RCC_OscConfig+0x2f0>)
 80042a6:	31ff      	adds	r1, #255	; 0xff
 80042a8:	f7fe fa87 	bl	80027ba <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	07db      	lsls	r3, r3, #31
 80042b0:	d448      	bmi.n	8004344 <HAL_RCC_OscConfig+0xc0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	079b      	lsls	r3, r3, #30
 80042b6:	d500      	bpl.n	80042ba <HAL_RCC_OscConfig+0x36>
 80042b8:	e0a5      	b.n	8004406 <HAL_RCC_OscConfig+0x182>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	071b      	lsls	r3, r3, #28
 80042be:	d500      	bpl.n	80042c2 <HAL_RCC_OscConfig+0x3e>
 80042c0:	e0f0      	b.n	80044a4 <HAL_RCC_OscConfig+0x220>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	075b      	lsls	r3, r3, #29
 80042c6:	d500      	bpl.n	80042ca <HAL_RCC_OscConfig+0x46>
 80042c8:	e11b      	b.n	8004502 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	06db      	lsls	r3, r3, #27
 80042ce:	d52b      	bpl.n	8004328 <HAL_RCC_OscConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
 80042d0:	6963      	ldr	r3, [r4, #20]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d906      	bls.n	80042e4 <HAL_RCC_OscConfig+0x60>
 80042d6:	3305      	adds	r3, #5
 80042d8:	d004      	beq.n	80042e4 <HAL_RCC_OscConfig+0x60>
 80042da:	2180      	movs	r1, #128	; 0x80
 80042dc:	48a5      	ldr	r0, [pc, #660]	; (8004574 <HAL_RCC_OscConfig+0x2f0>)
 80042de:	0089      	lsls	r1, r1, #2
 80042e0:	f7fe fa6b 	bl	80027ba <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));
 80042e4:	69a3      	ldr	r3, [r4, #24]
 80042e6:	2b1f      	cmp	r3, #31
 80042e8:	d903      	bls.n	80042f2 <HAL_RCC_OscConfig+0x6e>
 80042ea:	49a3      	ldr	r1, [pc, #652]	; (8004578 <HAL_RCC_OscConfig+0x2f4>)
 80042ec:	48a1      	ldr	r0, [pc, #644]	; (8004574 <HAL_RCC_OscConfig+0x2f0>)
 80042ee:	f7fe fa64 	bl	80027ba <assert_failed>

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80042f2:	6962      	ldr	r2, [r4, #20]
 80042f4:	4da1      	ldr	r5, [pc, #644]	; (800457c <HAL_RCC_OscConfig+0x2f8>)
 80042f6:	2304      	movs	r3, #4
 80042f8:	2a01      	cmp	r2, #1
 80042fa:	d000      	beq.n	80042fe <HAL_RCC_OscConfig+0x7a>
 80042fc:	e18d      	b.n	800461a <HAL_RCC_OscConfig+0x396>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80042fe:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004300:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8004302:	430b      	orrs	r3, r1
 8004304:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8004306:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004308:	431a      	orrs	r2, r3
 800430a:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800430c:	f7fe fe72 	bl	8002ff4 <HAL_GetTick>
 8004310:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004312:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004314:	4233      	tst	r3, r6
 8004316:	d100      	bne.n	800431a <HAL_RCC_OscConfig+0x96>
 8004318:	e178      	b.n	800460c <HAL_RCC_OscConfig+0x388>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800431a:	21f8      	movs	r1, #248	; 0xf8
 800431c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800431e:	69a3      	ldr	r3, [r4, #24]
 8004320:	438a      	bics	r2, r1
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4313      	orrs	r3, r2
 8004326:	636b      	str	r3, [r5, #52]	; 0x34
  }
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004328:	6a23      	ldr	r3, [r4, #32]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d904      	bls.n	8004338 <HAL_RCC_OscConfig+0xb4>
 800432e:	219d      	movs	r1, #157	; 0x9d
 8004330:	4890      	ldr	r0, [pc, #576]	; (8004574 <HAL_RCC_OscConfig+0x2f0>)
 8004332:	0089      	lsls	r1, r1, #2
 8004334:	f7fe fa41 	bl	80027ba <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004338:	6a22      	ldr	r2, [r4, #32]
 800433a:	2a00      	cmp	r2, #0
 800433c:	d000      	beq.n	8004340 <HAL_RCC_OscConfig+0xbc>
 800433e:	e187      	b.n	8004650 <HAL_RCC_OscConfig+0x3cc>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8004340:	2000      	movs	r0, #0
 8004342:	e01d      	b.n	8004380 <HAL_RCC_OscConfig+0xfc>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004344:	6863      	ldr	r3, [r4, #4]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d906      	bls.n	8004358 <HAL_RCC_OscConfig+0xd4>
 800434a:	2b05      	cmp	r3, #5
 800434c:	d004      	beq.n	8004358 <HAL_RCC_OscConfig+0xd4>
 800434e:	211a      	movs	r1, #26
 8004350:	4888      	ldr	r0, [pc, #544]	; (8004574 <HAL_RCC_OscConfig+0x2f0>)
 8004352:	31ff      	adds	r1, #255	; 0xff
 8004354:	f7fe fa31 	bl	80027ba <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004358:	210c      	movs	r1, #12
 800435a:	4d88      	ldr	r5, [pc, #544]	; (800457c <HAL_RCC_OscConfig+0x2f8>)
 800435c:	686a      	ldr	r2, [r5, #4]
 800435e:	400a      	ands	r2, r1
 8004360:	2a04      	cmp	r2, #4
 8004362:	d006      	beq.n	8004372 <HAL_RCC_OscConfig+0xee>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004364:	686b      	ldr	r3, [r5, #4]
 8004366:	400b      	ands	r3, r1
 8004368:	2b08      	cmp	r3, #8
 800436a:	d10b      	bne.n	8004384 <HAL_RCC_OscConfig+0x100>
 800436c:	686b      	ldr	r3, [r5, #4]
 800436e:	03db      	lsls	r3, r3, #15
 8004370:	d508      	bpl.n	8004384 <HAL_RCC_OscConfig+0x100>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004372:	682b      	ldr	r3, [r5, #0]
 8004374:	039b      	lsls	r3, r3, #14
 8004376:	d59c      	bpl.n	80042b2 <HAL_RCC_OscConfig+0x2e>
 8004378:	6863      	ldr	r3, [r4, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d199      	bne.n	80042b2 <HAL_RCC_OscConfig+0x2e>
        return HAL_ERROR;
 800437e:	2001      	movs	r0, #1
}
 8004380:	b005      	add	sp, #20
 8004382:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004384:	6863      	ldr	r3, [r4, #4]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d114      	bne.n	80043b4 <HAL_RCC_OscConfig+0x130>
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	682a      	ldr	r2, [r5, #0]
 800438e:	025b      	lsls	r3, r3, #9
 8004390:	4313      	orrs	r3, r2
 8004392:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004394:	f7fe fe2e 	bl	8002ff4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004398:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800439a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439c:	02b6      	lsls	r6, r6, #10
 800439e:	682b      	ldr	r3, [r5, #0]
 80043a0:	4233      	tst	r3, r6
 80043a2:	d000      	beq.n	80043a6 <HAL_RCC_OscConfig+0x122>
 80043a4:	e785      	b.n	80042b2 <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a6:	f7fe fe25 	bl	8002ff4 <HAL_GetTick>
 80043aa:	1bc0      	subs	r0, r0, r7
 80043ac:	2864      	cmp	r0, #100	; 0x64
 80043ae:	d9f6      	bls.n	800439e <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 80043b0:	2003      	movs	r0, #3
 80043b2:	e7e5      	b.n	8004380 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d116      	bne.n	80043e6 <HAL_RCC_OscConfig+0x162>
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	4a71      	ldr	r2, [pc, #452]	; (8004580 <HAL_RCC_OscConfig+0x2fc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043bc:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043be:	4013      	ands	r3, r2
 80043c0:	602b      	str	r3, [r5, #0]
 80043c2:	682b      	ldr	r3, [r5, #0]
 80043c4:	4a6f      	ldr	r2, [pc, #444]	; (8004584 <HAL_RCC_OscConfig+0x300>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c6:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043c8:	4013      	ands	r3, r2
 80043ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80043cc:	f7fe fe12 	bl	8002ff4 <HAL_GetTick>
 80043d0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d2:	682b      	ldr	r3, [r5, #0]
 80043d4:	4233      	tst	r3, r6
 80043d6:	d100      	bne.n	80043da <HAL_RCC_OscConfig+0x156>
 80043d8:	e76b      	b.n	80042b2 <HAL_RCC_OscConfig+0x2e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043da:	f7fe fe0b 	bl	8002ff4 <HAL_GetTick>
 80043de:	1bc0      	subs	r0, r0, r7
 80043e0:	2864      	cmp	r0, #100	; 0x64
 80043e2:	d9f6      	bls.n	80043d2 <HAL_RCC_OscConfig+0x14e>
 80043e4:	e7e4      	b.n	80043b0 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e6:	2b05      	cmp	r3, #5
 80043e8:	d105      	bne.n	80043f6 <HAL_RCC_OscConfig+0x172>
 80043ea:	2380      	movs	r3, #128	; 0x80
 80043ec:	682a      	ldr	r2, [r5, #0]
 80043ee:	02db      	lsls	r3, r3, #11
 80043f0:	4313      	orrs	r3, r2
 80043f2:	602b      	str	r3, [r5, #0]
 80043f4:	e7c9      	b.n	800438a <HAL_RCC_OscConfig+0x106>
 80043f6:	682b      	ldr	r3, [r5, #0]
 80043f8:	4a61      	ldr	r2, [pc, #388]	; (8004580 <HAL_RCC_OscConfig+0x2fc>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	602b      	str	r3, [r5, #0]
 80043fe:	682b      	ldr	r3, [r5, #0]
 8004400:	4a60      	ldr	r2, [pc, #384]	; (8004584 <HAL_RCC_OscConfig+0x300>)
 8004402:	4013      	ands	r3, r2
 8004404:	e7c5      	b.n	8004392 <HAL_RCC_OscConfig+0x10e>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004406:	68e3      	ldr	r3, [r4, #12]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d904      	bls.n	8004416 <HAL_RCC_OscConfig+0x192>
 800440c:	214e      	movs	r1, #78	; 0x4e
 800440e:	4859      	ldr	r0, [pc, #356]	; (8004574 <HAL_RCC_OscConfig+0x2f0>)
 8004410:	31ff      	adds	r1, #255	; 0xff
 8004412:	f7fe f9d2 	bl	80027ba <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004416:	6923      	ldr	r3, [r4, #16]
 8004418:	2b1f      	cmp	r3, #31
 800441a:	d904      	bls.n	8004426 <HAL_RCC_OscConfig+0x1a2>
 800441c:	21a7      	movs	r1, #167	; 0xa7
 800441e:	4855      	ldr	r0, [pc, #340]	; (8004574 <HAL_RCC_OscConfig+0x2f0>)
 8004420:	0049      	lsls	r1, r1, #1
 8004422:	f7fe f9ca 	bl	80027ba <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004426:	220c      	movs	r2, #12
 8004428:	4d54      	ldr	r5, [pc, #336]	; (800457c <HAL_RCC_OscConfig+0x2f8>)
 800442a:	686b      	ldr	r3, [r5, #4]
 800442c:	4213      	tst	r3, r2
 800442e:	d006      	beq.n	800443e <HAL_RCC_OscConfig+0x1ba>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004430:	686b      	ldr	r3, [r5, #4]
 8004432:	4013      	ands	r3, r2
 8004434:	2b08      	cmp	r3, #8
 8004436:	d110      	bne.n	800445a <HAL_RCC_OscConfig+0x1d6>
 8004438:	686b      	ldr	r3, [r5, #4]
 800443a:	03db      	lsls	r3, r3, #15
 800443c:	d40d      	bmi.n	800445a <HAL_RCC_OscConfig+0x1d6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800443e:	682b      	ldr	r3, [r5, #0]
 8004440:	079b      	lsls	r3, r3, #30
 8004442:	d502      	bpl.n	800444a <HAL_RCC_OscConfig+0x1c6>
 8004444:	68e3      	ldr	r3, [r4, #12]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d199      	bne.n	800437e <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444a:	21f8      	movs	r1, #248	; 0xf8
 800444c:	682a      	ldr	r2, [r5, #0]
 800444e:	6923      	ldr	r3, [r4, #16]
 8004450:	438a      	bics	r2, r1
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	4313      	orrs	r3, r2
 8004456:	602b      	str	r3, [r5, #0]
 8004458:	e72f      	b.n	80042ba <HAL_RCC_OscConfig+0x36>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800445a:	68e2      	ldr	r2, [r4, #12]
 800445c:	2301      	movs	r3, #1
 800445e:	2a00      	cmp	r2, #0
 8004460:	d00f      	beq.n	8004482 <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_ENABLE();
 8004462:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004464:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8004466:	4313      	orrs	r3, r2
 8004468:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800446a:	f7fe fdc3 	bl	8002ff4 <HAL_GetTick>
 800446e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	4233      	tst	r3, r6
 8004474:	d1e9      	bne.n	800444a <HAL_RCC_OscConfig+0x1c6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004476:	f7fe fdbd 	bl	8002ff4 <HAL_GetTick>
 800447a:	1bc0      	subs	r0, r0, r7
 800447c:	2802      	cmp	r0, #2
 800447e:	d9f7      	bls.n	8004470 <HAL_RCC_OscConfig+0x1ec>
 8004480:	e796      	b.n	80043b0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8004482:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004484:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8004486:	439a      	bics	r2, r3
 8004488:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 800448a:	f7fe fdb3 	bl	8002ff4 <HAL_GetTick>
 800448e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004490:	682b      	ldr	r3, [r5, #0]
 8004492:	4233      	tst	r3, r6
 8004494:	d100      	bne.n	8004498 <HAL_RCC_OscConfig+0x214>
 8004496:	e710      	b.n	80042ba <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004498:	f7fe fdac 	bl	8002ff4 <HAL_GetTick>
 800449c:	1bc0      	subs	r0, r0, r7
 800449e:	2802      	cmp	r0, #2
 80044a0:	d9f6      	bls.n	8004490 <HAL_RCC_OscConfig+0x20c>
 80044a2:	e785      	b.n	80043b0 <HAL_RCC_OscConfig+0x12c>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80044a4:	69e3      	ldr	r3, [r4, #28]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d904      	bls.n	80044b4 <HAL_RCC_OscConfig+0x230>
 80044aa:	21c7      	movs	r1, #199	; 0xc7
 80044ac:	4831      	ldr	r0, [pc, #196]	; (8004574 <HAL_RCC_OscConfig+0x2f0>)
 80044ae:	0049      	lsls	r1, r1, #1
 80044b0:	f7fe f983 	bl	80027ba <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044b4:	69e2      	ldr	r2, [r4, #28]
 80044b6:	2301      	movs	r3, #1
 80044b8:	4d30      	ldr	r5, [pc, #192]	; (800457c <HAL_RCC_OscConfig+0x2f8>)
 80044ba:	2a00      	cmp	r2, #0
 80044bc:	d010      	beq.n	80044e0 <HAL_RCC_OscConfig+0x25c>
      __HAL_RCC_LSI_ENABLE();
 80044be:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c0:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80044c2:	4313      	orrs	r3, r2
 80044c4:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80044c6:	f7fe fd95 	bl	8002ff4 <HAL_GetTick>
 80044ca:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80044ce:	4233      	tst	r3, r6
 80044d0:	d000      	beq.n	80044d4 <HAL_RCC_OscConfig+0x250>
 80044d2:	e6f6      	b.n	80042c2 <HAL_RCC_OscConfig+0x3e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044d4:	f7fe fd8e 	bl	8002ff4 <HAL_GetTick>
 80044d8:	1bc0      	subs	r0, r0, r7
 80044da:	2802      	cmp	r0, #2
 80044dc:	d9f6      	bls.n	80044cc <HAL_RCC_OscConfig+0x248>
 80044de:	e767      	b.n	80043b0 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_LSI_DISABLE();
 80044e0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e2:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80044e4:	439a      	bics	r2, r3
 80044e6:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80044e8:	f7fe fd84 	bl	8002ff4 <HAL_GetTick>
 80044ec:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80044f0:	4233      	tst	r3, r6
 80044f2:	d100      	bne.n	80044f6 <HAL_RCC_OscConfig+0x272>
 80044f4:	e6e5      	b.n	80042c2 <HAL_RCC_OscConfig+0x3e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044f6:	f7fe fd7d 	bl	8002ff4 <HAL_GetTick>
 80044fa:	1bc0      	subs	r0, r0, r7
 80044fc:	2802      	cmp	r0, #2
 80044fe:	d9f6      	bls.n	80044ee <HAL_RCC_OscConfig+0x26a>
 8004500:	e756      	b.n	80043b0 <HAL_RCC_OscConfig+0x12c>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004502:	68a3      	ldr	r3, [r4, #8]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d906      	bls.n	8004516 <HAL_RCC_OscConfig+0x292>
 8004508:	2b05      	cmp	r3, #5
 800450a:	d004      	beq.n	8004516 <HAL_RCC_OscConfig+0x292>
 800450c:	21dd      	movs	r1, #221	; 0xdd
 800450e:	4819      	ldr	r0, [pc, #100]	; (8004574 <HAL_RCC_OscConfig+0x2f0>)
 8004510:	0049      	lsls	r1, r1, #1
 8004512:	f7fe f952 	bl	80027ba <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004516:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004518:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800451a:	4d18      	ldr	r5, [pc, #96]	; (800457c <HAL_RCC_OscConfig+0x2f8>)
 800451c:	0552      	lsls	r2, r2, #21
 800451e:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8004520:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004522:	4213      	tst	r3, r2
 8004524:	d108      	bne.n	8004538 <HAL_RCC_OscConfig+0x2b4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004526:	69eb      	ldr	r3, [r5, #28]
 8004528:	4313      	orrs	r3, r2
 800452a:	61eb      	str	r3, [r5, #28]
 800452c:	69eb      	ldr	r3, [r5, #28]
 800452e:	4013      	ands	r3, r2
 8004530:	9303      	str	r3, [sp, #12]
 8004532:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8004534:	2301      	movs	r3, #1
 8004536:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004538:	2780      	movs	r7, #128	; 0x80
 800453a:	4e13      	ldr	r6, [pc, #76]	; (8004588 <HAL_RCC_OscConfig+0x304>)
 800453c:	007f      	lsls	r7, r7, #1
 800453e:	6833      	ldr	r3, [r6, #0]
 8004540:	423b      	tst	r3, r7
 8004542:	d006      	beq.n	8004552 <HAL_RCC_OscConfig+0x2ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004544:	68a3      	ldr	r3, [r4, #8]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d120      	bne.n	800458c <HAL_RCC_OscConfig+0x308>
 800454a:	6a2a      	ldr	r2, [r5, #32]
 800454c:	4313      	orrs	r3, r2
 800454e:	622b      	str	r3, [r5, #32]
 8004550:	e03d      	b.n	80045ce <HAL_RCC_OscConfig+0x34a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004552:	6833      	ldr	r3, [r6, #0]
 8004554:	433b      	orrs	r3, r7
 8004556:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004558:	f7fe fd4c 	bl	8002ff4 <HAL_GetTick>
 800455c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455e:	6833      	ldr	r3, [r6, #0]
 8004560:	423b      	tst	r3, r7
 8004562:	d1ef      	bne.n	8004544 <HAL_RCC_OscConfig+0x2c0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004564:	f7fe fd46 	bl	8002ff4 <HAL_GetTick>
 8004568:	9b01      	ldr	r3, [sp, #4]
 800456a:	1ac0      	subs	r0, r0, r3
 800456c:	2864      	cmp	r0, #100	; 0x64
 800456e:	d9f6      	bls.n	800455e <HAL_RCC_OscConfig+0x2da>
 8004570:	e71e      	b.n	80043b0 <HAL_RCC_OscConfig+0x12c>
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	08006ff9 	.word	0x08006ff9
 8004578:	00000201 	.word	0x00000201
 800457c:	40021000 	.word	0x40021000
 8004580:	fffeffff 	.word	0xfffeffff
 8004584:	fffbffff 	.word	0xfffbffff
 8004588:	40007000 	.word	0x40007000
 800458c:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800458e:	2b00      	cmp	r3, #0
 8004590:	d114      	bne.n	80045bc <HAL_RCC_OscConfig+0x338>
 8004592:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004594:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004596:	4393      	bics	r3, r2
 8004598:	622b      	str	r3, [r5, #32]
 800459a:	6a2b      	ldr	r3, [r5, #32]
 800459c:	3203      	adds	r2, #3
 800459e:	4393      	bics	r3, r2
 80045a0:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80045a2:	f7fe fd27 	bl	8002ff4 <HAL_GetTick>
 80045a6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a8:	6a2b      	ldr	r3, [r5, #32]
 80045aa:	423b      	tst	r3, r7
 80045ac:	d025      	beq.n	80045fa <HAL_RCC_OscConfig+0x376>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ae:	f7fe fd21 	bl	8002ff4 <HAL_GetTick>
 80045b2:	4b64      	ldr	r3, [pc, #400]	; (8004744 <HAL_RCC_OscConfig+0x4c0>)
 80045b4:	1b80      	subs	r0, r0, r6
 80045b6:	4298      	cmp	r0, r3
 80045b8:	d9f6      	bls.n	80045a8 <HAL_RCC_OscConfig+0x324>
 80045ba:	e6f9      	b.n	80043b0 <HAL_RCC_OscConfig+0x12c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045bc:	2b05      	cmp	r3, #5
 80045be:	d10b      	bne.n	80045d8 <HAL_RCC_OscConfig+0x354>
 80045c0:	6a29      	ldr	r1, [r5, #32]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	430b      	orrs	r3, r1
 80045c6:	622b      	str	r3, [r5, #32]
 80045c8:	6a2b      	ldr	r3, [r5, #32]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 80045ce:	f7fe fd11 	bl	8002ff4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d2:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80045d4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d6:	e00d      	b.n	80045f4 <HAL_RCC_OscConfig+0x370>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045d8:	6a2b      	ldr	r3, [r5, #32]
 80045da:	4393      	bics	r3, r2
 80045dc:	2204      	movs	r2, #4
 80045de:	622b      	str	r3, [r5, #32]
 80045e0:	6a2b      	ldr	r3, [r5, #32]
 80045e2:	4393      	bics	r3, r2
 80045e4:	e7b3      	b.n	800454e <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fe fd05 	bl	8002ff4 <HAL_GetTick>
 80045ea:	4b56      	ldr	r3, [pc, #344]	; (8004744 <HAL_RCC_OscConfig+0x4c0>)
 80045ec:	1b80      	subs	r0, r0, r6
 80045ee:	4298      	cmp	r0, r3
 80045f0:	d900      	bls.n	80045f4 <HAL_RCC_OscConfig+0x370>
 80045f2:	e6dd      	b.n	80043b0 <HAL_RCC_OscConfig+0x12c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f4:	6a2b      	ldr	r3, [r5, #32]
 80045f6:	423b      	tst	r3, r7
 80045f8:	d0f5      	beq.n	80045e6 <HAL_RCC_OscConfig+0x362>
    if(pwrclkchanged == SET)
 80045fa:	9b00      	ldr	r3, [sp, #0]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d000      	beq.n	8004602 <HAL_RCC_OscConfig+0x37e>
 8004600:	e663      	b.n	80042ca <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004602:	69eb      	ldr	r3, [r5, #28]
 8004604:	4a50      	ldr	r2, [pc, #320]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 8004606:	4013      	ands	r3, r2
 8004608:	61eb      	str	r3, [r5, #28]
 800460a:	e65e      	b.n	80042ca <HAL_RCC_OscConfig+0x46>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800460c:	f7fe fcf2 	bl	8002ff4 <HAL_GetTick>
 8004610:	1bc0      	subs	r0, r0, r7
 8004612:	2802      	cmp	r0, #2
 8004614:	d800      	bhi.n	8004618 <HAL_RCC_OscConfig+0x394>
 8004616:	e67c      	b.n	8004312 <HAL_RCC_OscConfig+0x8e>
 8004618:	e6ca      	b.n	80043b0 <HAL_RCC_OscConfig+0x12c>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800461a:	3205      	adds	r2, #5
 800461c:	d103      	bne.n	8004626 <HAL_RCC_OscConfig+0x3a2>
      __HAL_RCC_HSI14ADC_ENABLE();
 800461e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004620:	439a      	bics	r2, r3
 8004622:	636a      	str	r2, [r5, #52]	; 0x34
 8004624:	e679      	b.n	800431a <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004626:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004628:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800462a:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 800462c:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800462e:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8004630:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004632:	4393      	bics	r3, r2
 8004634:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8004636:	f7fe fcdd 	bl	8002ff4 <HAL_GetTick>
 800463a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800463c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800463e:	4233      	tst	r3, r6
 8004640:	d100      	bne.n	8004644 <HAL_RCC_OscConfig+0x3c0>
 8004642:	e671      	b.n	8004328 <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004644:	f7fe fcd6 	bl	8002ff4 <HAL_GetTick>
 8004648:	1bc0      	subs	r0, r0, r7
 800464a:	2802      	cmp	r0, #2
 800464c:	d9f6      	bls.n	800463c <HAL_RCC_OscConfig+0x3b8>
 800464e:	e6af      	b.n	80043b0 <HAL_RCC_OscConfig+0x12c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004650:	210c      	movs	r1, #12
 8004652:	4d3e      	ldr	r5, [pc, #248]	; (800474c <HAL_RCC_OscConfig+0x4c8>)
      return HAL_ERROR;
 8004654:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004656:	686b      	ldr	r3, [r5, #4]
 8004658:	400b      	ands	r3, r1
 800465a:	2b08      	cmp	r3, #8
 800465c:	d100      	bne.n	8004660 <HAL_RCC_OscConfig+0x3dc>
 800465e:	e68f      	b.n	8004380 <HAL_RCC_OscConfig+0xfc>
 8004660:	4e3b      	ldr	r6, [pc, #236]	; (8004750 <HAL_RCC_OscConfig+0x4cc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004662:	2a02      	cmp	r2, #2
 8004664:	d15b      	bne.n	800471e <HAL_RCC_OscConfig+0x49a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004666:	4b3b      	ldr	r3, [pc, #236]	; (8004754 <HAL_RCC_OscConfig+0x4d0>)
 8004668:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800466a:	421a      	tst	r2, r3
 800466c:	d003      	beq.n	8004676 <HAL_RCC_OscConfig+0x3f2>
 800466e:	493a      	ldr	r1, [pc, #232]	; (8004758 <HAL_RCC_OscConfig+0x4d4>)
 8004670:	483a      	ldr	r0, [pc, #232]	; (800475c <HAL_RCC_OscConfig+0x4d8>)
 8004672:	f7fe f8a2 	bl	80027ba <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004676:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004678:	4939      	ldr	r1, [pc, #228]	; (8004760 <HAL_RCC_OscConfig+0x4dc>)
 800467a:	4b3a      	ldr	r3, [pc, #232]	; (8004764 <HAL_RCC_OscConfig+0x4e0>)
 800467c:	4011      	ands	r1, r2
 800467e:	4013      	ands	r3, r2
 8004680:	d013      	beq.n	80046aa <HAL_RCC_OscConfig+0x426>
 8004682:	2080      	movs	r0, #128	; 0x80
 8004684:	0340      	lsls	r0, r0, #13
 8004686:	4283      	cmp	r3, r0
 8004688:	d00f      	beq.n	80046aa <HAL_RCC_OscConfig+0x426>
 800468a:	2080      	movs	r0, #128	; 0x80
 800468c:	0380      	lsls	r0, r0, #14
 800468e:	4283      	cmp	r3, r0
 8004690:	d00b      	beq.n	80046aa <HAL_RCC_OscConfig+0x426>
 8004692:	23c0      	movs	r3, #192	; 0xc0
 8004694:	039b      	lsls	r3, r3, #14
 8004696:	4299      	cmp	r1, r3
 8004698:	d007      	beq.n	80046aa <HAL_RCC_OscConfig+0x426>
 800469a:	23e0      	movs	r3, #224	; 0xe0
 800469c:	039b      	lsls	r3, r3, #14
 800469e:	429a      	cmp	r2, r3
 80046a0:	d003      	beq.n	80046aa <HAL_RCC_OscConfig+0x426>
 80046a2:	4931      	ldr	r1, [pc, #196]	; (8004768 <HAL_RCC_OscConfig+0x4e4>)
 80046a4:	482d      	ldr	r0, [pc, #180]	; (800475c <HAL_RCC_OscConfig+0x4d8>)
 80046a6:	f7fe f888 	bl	80027ba <assert_failed>
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 80046aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80046ac:	2b0f      	cmp	r3, #15
 80046ae:	d903      	bls.n	80046b8 <HAL_RCC_OscConfig+0x434>
 80046b0:	492e      	ldr	r1, [pc, #184]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 80046b2:	482a      	ldr	r0, [pc, #168]	; (800475c <HAL_RCC_OscConfig+0x4d8>)
 80046b4:	f7fe f881 	bl	80027ba <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 80046b8:	682b      	ldr	r3, [r5, #0]
 80046ba:	401e      	ands	r6, r3
 80046bc:	602e      	str	r6, [r5, #0]
        tickstart = HAL_GetTick();
 80046be:	f7fe fc99 	bl	8002ff4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c2:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80046c4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c6:	04b6      	lsls	r6, r6, #18
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	4233      	tst	r3, r6
 80046cc:	d121      	bne.n	8004712 <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ce:	220f      	movs	r2, #15
 80046d0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80046d2:	4393      	bics	r3, r2
 80046d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80046d6:	4313      	orrs	r3, r2
 80046d8:	62eb      	str	r3, [r5, #44]	; 0x2c
 80046da:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80046dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046de:	686a      	ldr	r2, [r5, #4]
 80046e0:	430b      	orrs	r3, r1
 80046e2:	4923      	ldr	r1, [pc, #140]	; (8004770 <HAL_RCC_OscConfig+0x4ec>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046e4:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e6:	400a      	ands	r2, r1
 80046e8:	4313      	orrs	r3, r2
 80046ea:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80046ec:	2380      	movs	r3, #128	; 0x80
 80046ee:	682a      	ldr	r2, [r5, #0]
 80046f0:	045b      	lsls	r3, r3, #17
 80046f2:	4313      	orrs	r3, r2
 80046f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80046f6:	f7fe fc7d 	bl	8002ff4 <HAL_GetTick>
 80046fa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046fc:	04a4      	lsls	r4, r4, #18
 80046fe:	682b      	ldr	r3, [r5, #0]
 8004700:	4223      	tst	r3, r4
 8004702:	d000      	beq.n	8004706 <HAL_RCC_OscConfig+0x482>
 8004704:	e61c      	b.n	8004340 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004706:	f7fe fc75 	bl	8002ff4 <HAL_GetTick>
 800470a:	1b80      	subs	r0, r0, r6
 800470c:	2802      	cmp	r0, #2
 800470e:	d9f6      	bls.n	80046fe <HAL_RCC_OscConfig+0x47a>
 8004710:	e64e      	b.n	80043b0 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004712:	f7fe fc6f 	bl	8002ff4 <HAL_GetTick>
 8004716:	1bc0      	subs	r0, r0, r7
 8004718:	2802      	cmp	r0, #2
 800471a:	d9d5      	bls.n	80046c8 <HAL_RCC_OscConfig+0x444>
 800471c:	e648      	b.n	80043b0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_PLL_DISABLE();
 800471e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004720:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004722:	401e      	ands	r6, r3
 8004724:	602e      	str	r6, [r5, #0]
        tickstart = HAL_GetTick();
 8004726:	f7fe fc65 	bl	8002ff4 <HAL_GetTick>
 800472a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800472c:	04a4      	lsls	r4, r4, #18
 800472e:	682b      	ldr	r3, [r5, #0]
 8004730:	4223      	tst	r3, r4
 8004732:	d100      	bne.n	8004736 <HAL_RCC_OscConfig+0x4b2>
 8004734:	e604      	b.n	8004340 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004736:	f7fe fc5d 	bl	8002ff4 <HAL_GetTick>
 800473a:	1b80      	subs	r0, r0, r6
 800473c:	2802      	cmp	r0, #2
 800473e:	d9f6      	bls.n	800472e <HAL_RCC_OscConfig+0x4aa>
 8004740:	e636      	b.n	80043b0 <HAL_RCC_OscConfig+0x12c>
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	00001388 	.word	0x00001388
 8004748:	efffffff 	.word	0xefffffff
 800474c:	40021000 	.word	0x40021000
 8004750:	feffffff 	.word	0xfeffffff
 8004754:	fffeffff 	.word	0xfffeffff
 8004758:	0000027d 	.word	0x0000027d
 800475c:	08006ff9 	.word	0x08006ff9
 8004760:	fffbffff 	.word	0xfffbffff
 8004764:	fff3ffff 	.word	0xfff3ffff
 8004768:	0000027e 	.word	0x0000027e
 800476c:	0000027f 	.word	0x0000027f
 8004770:	ffc2ffff 	.word	0xffc2ffff

08004774 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004774:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004776:	4c14      	ldr	r4, [pc, #80]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8004778:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800477a:	2210      	movs	r2, #16
 800477c:	0021      	movs	r1, r4
 800477e:	4668      	mov	r0, sp
 8004780:	f001 fdc0 	bl	8006304 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004784:	0021      	movs	r1, r4
 8004786:	ad04      	add	r5, sp, #16
 8004788:	2210      	movs	r2, #16
 800478a:	3110      	adds	r1, #16
 800478c:	0028      	movs	r0, r5
 800478e:	f001 fdb9 	bl	8006304 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004792:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8004794:	4e0d      	ldr	r6, [pc, #52]	; (80047cc <HAL_RCC_GetSysClockFreq+0x58>)
 8004796:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004798:	401a      	ands	r2, r3
 800479a:	2a08      	cmp	r2, #8
 800479c:	d111      	bne.n	80047c2 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800479e:	200f      	movs	r0, #15
 80047a0:	466a      	mov	r2, sp
 80047a2:	0c99      	lsrs	r1, r3, #18
 80047a4:	4001      	ands	r1, r0
 80047a6:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80047a8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80047aa:	4002      	ands	r2, r0
 80047ac:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047ae:	03db      	lsls	r3, r3, #15
 80047b0:	d505      	bpl.n	80047be <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80047b2:	4807      	ldr	r0, [pc, #28]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x5c>)
 80047b4:	f7fb fcb2 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80047b8:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80047ba:	b008      	add	sp, #32
 80047bc:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80047be:	4805      	ldr	r0, [pc, #20]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x60>)
 80047c0:	e7fa      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 80047c2:	4803      	ldr	r0, [pc, #12]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80047c4:	e7f9      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x46>
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	08006bbc 	.word	0x08006bbc
 80047cc:	40021000 	.word	0x40021000
 80047d0:	007a1200 	.word	0x007a1200
 80047d4:	003d0900 	.word	0x003d0900

080047d8 <HAL_RCC_ClockConfig>:
{
 80047d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047da:	0004      	movs	r4, r0
 80047dc:	000f      	movs	r7, r1
  assert_param(RCC_ClkInitStruct != NULL);
 80047de:	2800      	cmp	r0, #0
 80047e0:	d103      	bne.n	80047ea <HAL_RCC_ClockConfig+0x12>
 80047e2:	4968      	ldr	r1, [pc, #416]	; (8004984 <HAL_RCC_ClockConfig+0x1ac>)
 80047e4:	4868      	ldr	r0, [pc, #416]	; (8004988 <HAL_RCC_ClockConfig+0x1b0>)
 80047e6:	f7fd ffe8 	bl	80027ba <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	075b      	lsls	r3, r3, #29
 80047ee:	d103      	bne.n	80047f8 <HAL_RCC_ClockConfig+0x20>
 80047f0:	4966      	ldr	r1, [pc, #408]	; (800498c <HAL_RCC_ClockConfig+0x1b4>)
 80047f2:	4865      	ldr	r0, [pc, #404]	; (8004988 <HAL_RCC_ClockConfig+0x1b0>)
 80047f4:	f7fd ffe1 	bl	80027ba <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80047f8:	2f01      	cmp	r7, #1
 80047fa:	d904      	bls.n	8004806 <HAL_RCC_ClockConfig+0x2e>
 80047fc:	21b7      	movs	r1, #183	; 0xb7
 80047fe:	4862      	ldr	r0, [pc, #392]	; (8004988 <HAL_RCC_ClockConfig+0x1b0>)
 8004800:	0089      	lsls	r1, r1, #2
 8004802:	f7fd ffda 	bl	80027ba <assert_failed>
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004806:	2201      	movs	r2, #1
 8004808:	4d61      	ldr	r5, [pc, #388]	; (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 800480a:	682b      	ldr	r3, [r5, #0]
 800480c:	4013      	ands	r3, r2
 800480e:	429f      	cmp	r7, r3
 8004810:	d81f      	bhi.n	8004852 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	079b      	lsls	r3, r3, #30
 8004816:	d426      	bmi.n	8004866 <HAL_RCC_ClockConfig+0x8e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	07db      	lsls	r3, r3, #31
 800481c:	d445      	bmi.n	80048aa <HAL_RCC_ClockConfig+0xd2>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800481e:	2301      	movs	r3, #1
 8004820:	682a      	ldr	r2, [r5, #0]
 8004822:	401a      	ands	r2, r3
 8004824:	4297      	cmp	r7, r2
 8004826:	d200      	bcs.n	800482a <HAL_RCC_ClockConfig+0x52>
 8004828:	e08a      	b.n	8004940 <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	4d59      	ldr	r5, [pc, #356]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	075b      	lsls	r3, r3, #29
 8004830:	d500      	bpl.n	8004834 <HAL_RCC_ClockConfig+0x5c>
 8004832:	e08d      	b.n	8004950 <HAL_RCC_ClockConfig+0x178>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004834:	f7ff ff9e 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 8004838:	686b      	ldr	r3, [r5, #4]
 800483a:	4a57      	ldr	r2, [pc, #348]	; (8004998 <HAL_RCC_ClockConfig+0x1c0>)
 800483c:	061b      	lsls	r3, r3, #24
 800483e:	0f1b      	lsrs	r3, r3, #28
 8004840:	5cd3      	ldrb	r3, [r2, r3]
 8004842:	40d8      	lsrs	r0, r3
 8004844:	4b55      	ldr	r3, [pc, #340]	; (800499c <HAL_RCC_ClockConfig+0x1c4>)
 8004846:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004848:	2000      	movs	r0, #0
 800484a:	f7fe fba9 	bl	8002fa0 <HAL_InitTick>
  return HAL_OK;
 800484e:	2000      	movs	r0, #0
 8004850:	e008      	b.n	8004864 <HAL_RCC_ClockConfig+0x8c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004852:	682b      	ldr	r3, [r5, #0]
 8004854:	4393      	bics	r3, r2
 8004856:	433b      	orrs	r3, r7
 8004858:	602b      	str	r3, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800485a:	682b      	ldr	r3, [r5, #0]
 800485c:	4013      	ands	r3, r2
 800485e:	429f      	cmp	r7, r3
 8004860:	d0d7      	beq.n	8004812 <HAL_RCC_ClockConfig+0x3a>
      return HAL_ERROR;
 8004862:	2001      	movs	r0, #1
}
 8004864:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004866:	68a3      	ldr	r3, [r4, #8]
 8004868:	2280      	movs	r2, #128	; 0x80
 800486a:	0019      	movs	r1, r3
 800486c:	4391      	bics	r1, r2
 800486e:	d014      	beq.n	800489a <HAL_RCC_ClockConfig+0xc2>
 8004870:	2220      	movs	r2, #32
 8004872:	0019      	movs	r1, r3
 8004874:	4391      	bics	r1, r2
 8004876:	2990      	cmp	r1, #144	; 0x90
 8004878:	d00f      	beq.n	800489a <HAL_RCC_ClockConfig+0xc2>
 800487a:	2240      	movs	r2, #64	; 0x40
 800487c:	0019      	movs	r1, r3
 800487e:	4391      	bics	r1, r2
 8004880:	29a0      	cmp	r1, #160	; 0xa0
 8004882:	d00a      	beq.n	800489a <HAL_RCC_ClockConfig+0xc2>
 8004884:	2210      	movs	r2, #16
 8004886:	0019      	movs	r1, r3
 8004888:	4391      	bics	r1, r2
 800488a:	29c0      	cmp	r1, #192	; 0xc0
 800488c:	d005      	beq.n	800489a <HAL_RCC_ClockConfig+0xc2>
 800488e:	2bf0      	cmp	r3, #240	; 0xf0
 8004890:	d003      	beq.n	800489a <HAL_RCC_ClockConfig+0xc2>
 8004892:	4943      	ldr	r1, [pc, #268]	; (80049a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004894:	483c      	ldr	r0, [pc, #240]	; (8004988 <HAL_RCC_ClockConfig+0x1b0>)
 8004896:	f7fd ff90 	bl	80027ba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800489a:	21f0      	movs	r1, #240	; 0xf0
 800489c:	4a3d      	ldr	r2, [pc, #244]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	6853      	ldr	r3, [r2, #4]
 80048a0:	438b      	bics	r3, r1
 80048a2:	68a1      	ldr	r1, [r4, #8]
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6053      	str	r3, [r2, #4]
 80048a8:	e7b6      	b.n	8004818 <HAL_RCC_ClockConfig+0x40>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80048aa:	6863      	ldr	r3, [r4, #4]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d903      	bls.n	80048b8 <HAL_RCC_ClockConfig+0xe0>
 80048b0:	493c      	ldr	r1, [pc, #240]	; (80049a4 <HAL_RCC_ClockConfig+0x1cc>)
 80048b2:	4835      	ldr	r0, [pc, #212]	; (8004988 <HAL_RCC_ClockConfig+0x1b0>)
 80048b4:	f7fd ff81 	bl	80027ba <assert_failed>
 80048b8:	4e36      	ldr	r6, [pc, #216]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ba:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048bc:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048be:	2a01      	cmp	r2, #1
 80048c0:	d11a      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	039b      	lsls	r3, r3, #14
 80048c4:	d5cd      	bpl.n	8004862 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048c6:	2103      	movs	r1, #3
 80048c8:	6873      	ldr	r3, [r6, #4]
 80048ca:	438b      	bics	r3, r1
 80048cc:	4313      	orrs	r3, r2
 80048ce:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80048d0:	f7fe fb90 	bl	8002ff4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048d4:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80048d6:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d115      	bne.n	8004908 <HAL_RCC_ClockConfig+0x130>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80048dc:	220c      	movs	r2, #12
 80048de:	6873      	ldr	r3, [r6, #4]
 80048e0:	4013      	ands	r3, r2
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d09b      	beq.n	800481e <HAL_RCC_ClockConfig+0x46>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e6:	f7fe fb85 	bl	8002ff4 <HAL_GetTick>
 80048ea:	9b01      	ldr	r3, [sp, #4]
 80048ec:	1ac0      	subs	r0, r0, r3
 80048ee:	4b2e      	ldr	r3, [pc, #184]	; (80049a8 <HAL_RCC_ClockConfig+0x1d0>)
 80048f0:	4298      	cmp	r0, r3
 80048f2:	d9f3      	bls.n	80048dc <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 80048f4:	2003      	movs	r0, #3
 80048f6:	e7b5      	b.n	8004864 <HAL_RCC_ClockConfig+0x8c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048f8:	2a02      	cmp	r2, #2
 80048fa:	d102      	bne.n	8004902 <HAL_RCC_ClockConfig+0x12a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fc:	019b      	lsls	r3, r3, #6
 80048fe:	d4e2      	bmi.n	80048c6 <HAL_RCC_ClockConfig+0xee>
 8004900:	e7af      	b.n	8004862 <HAL_RCC_ClockConfig+0x8a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004902:	079b      	lsls	r3, r3, #30
 8004904:	d4df      	bmi.n	80048c6 <HAL_RCC_ClockConfig+0xee>
 8004906:	e7ac      	b.n	8004862 <HAL_RCC_ClockConfig+0x8a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004908:	2b02      	cmp	r3, #2
 800490a:	d013      	beq.n	8004934 <HAL_RCC_ClockConfig+0x15c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800490c:	220c      	movs	r2, #12
 800490e:	6873      	ldr	r3, [r6, #4]
 8004910:	4213      	tst	r3, r2
 8004912:	d100      	bne.n	8004916 <HAL_RCC_ClockConfig+0x13e>
 8004914:	e783      	b.n	800481e <HAL_RCC_ClockConfig+0x46>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004916:	f7fe fb6d 	bl	8002ff4 <HAL_GetTick>
 800491a:	9b01      	ldr	r3, [sp, #4]
 800491c:	1ac0      	subs	r0, r0, r3
 800491e:	4b22      	ldr	r3, [pc, #136]	; (80049a8 <HAL_RCC_ClockConfig+0x1d0>)
 8004920:	4298      	cmp	r0, r3
 8004922:	d9f3      	bls.n	800490c <HAL_RCC_ClockConfig+0x134>
 8004924:	e7e6      	b.n	80048f4 <HAL_RCC_ClockConfig+0x11c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004926:	f7fe fb65 	bl	8002ff4 <HAL_GetTick>
 800492a:	9b01      	ldr	r3, [sp, #4]
 800492c:	1ac0      	subs	r0, r0, r3
 800492e:	4b1e      	ldr	r3, [pc, #120]	; (80049a8 <HAL_RCC_ClockConfig+0x1d0>)
 8004930:	4298      	cmp	r0, r3
 8004932:	d8df      	bhi.n	80048f4 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004934:	220c      	movs	r2, #12
 8004936:	6873      	ldr	r3, [r6, #4]
 8004938:	4013      	ands	r3, r2
 800493a:	2b08      	cmp	r3, #8
 800493c:	d1f3      	bne.n	8004926 <HAL_RCC_ClockConfig+0x14e>
 800493e:	e76e      	b.n	800481e <HAL_RCC_ClockConfig+0x46>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004940:	682a      	ldr	r2, [r5, #0]
 8004942:	439a      	bics	r2, r3
 8004944:	602a      	str	r2, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004946:	682a      	ldr	r2, [r5, #0]
 8004948:	421a      	tst	r2, r3
 800494a:	d000      	beq.n	800494e <HAL_RCC_ClockConfig+0x176>
 800494c:	e789      	b.n	8004862 <HAL_RCC_ClockConfig+0x8a>
 800494e:	e76c      	b.n	800482a <HAL_RCC_ClockConfig+0x52>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004950:	68e3      	ldr	r3, [r4, #12]
 8004952:	4a16      	ldr	r2, [pc, #88]	; (80049ac <HAL_RCC_ClockConfig+0x1d4>)
 8004954:	4213      	tst	r3, r2
 8004956:	d00d      	beq.n	8004974 <HAL_RCC_ClockConfig+0x19c>
 8004958:	21a0      	movs	r1, #160	; 0xa0
 800495a:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <HAL_RCC_ClockConfig+0x1d8>)
 800495c:	00c9      	lsls	r1, r1, #3
 800495e:	401a      	ands	r2, r3
 8004960:	428a      	cmp	r2, r1
 8004962:	d007      	beq.n	8004974 <HAL_RCC_ClockConfig+0x19c>
 8004964:	22c0      	movs	r2, #192	; 0xc0
 8004966:	00d2      	lsls	r2, r2, #3
 8004968:	4293      	cmp	r3, r2
 800496a:	d003      	beq.n	8004974 <HAL_RCC_ClockConfig+0x19c>
 800496c:	4911      	ldr	r1, [pc, #68]	; (80049b4 <HAL_RCC_ClockConfig+0x1dc>)
 800496e:	4806      	ldr	r0, [pc, #24]	; (8004988 <HAL_RCC_ClockConfig+0x1b0>)
 8004970:	f7fd ff23 	bl	80027ba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004974:	686b      	ldr	r3, [r5, #4]
 8004976:	4a10      	ldr	r2, [pc, #64]	; (80049b8 <HAL_RCC_ClockConfig+0x1e0>)
 8004978:	4013      	ands	r3, r2
 800497a:	68e2      	ldr	r2, [r4, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	606b      	str	r3, [r5, #4]
 8004980:	e758      	b.n	8004834 <HAL_RCC_ClockConfig+0x5c>
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	000002da 	.word	0x000002da
 8004988:	08006ff9 	.word	0x08006ff9
 800498c:	000002db 	.word	0x000002db
 8004990:	40022000 	.word	0x40022000
 8004994:	40021000 	.word	0x40021000
 8004998:	08006dda 	.word	0x08006dda
 800499c:	20000248 	.word	0x20000248
 80049a0:	000002f3 	.word	0x000002f3
 80049a4:	000002fa 	.word	0x000002fa
 80049a8:	00001388 	.word	0x00001388
 80049ac:	fffffbff 	.word	0xfffffbff
 80049b0:	fffffdff 	.word	0xfffffdff
 80049b4:	00000363 	.word	0x00000363
 80049b8:	fffff8ff 	.word	0xfffff8ff

080049bc <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80049bc:	4b01      	ldr	r3, [pc, #4]	; (80049c4 <HAL_RCC_GetHCLKFreq+0x8>)
 80049be:	6818      	ldr	r0, [r3, #0]
}
 80049c0:	4770      	bx	lr
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	20000248 	.word	0x20000248

080049c8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <HAL_RCC_GetPCLK1Freq+0x14>)
 80049ca:	4a05      	ldr	r2, [pc, #20]	; (80049e0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	055b      	lsls	r3, r3, #21
 80049d0:	0f5b      	lsrs	r3, r3, #29
 80049d2:	5cd3      	ldrb	r3, [r2, r3]
 80049d4:	4a03      	ldr	r2, [pc, #12]	; (80049e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80049d6:	6810      	ldr	r0, [r2, #0]
 80049d8:	40d8      	lsrs	r0, r3
}    
 80049da:	4770      	bx	lr
 80049dc:	40021000 	.word	0x40021000
 80049e0:	08006dea 	.word	0x08006dea
 80049e4:	20000248 	.word	0x20000248

080049e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  uint32_t temp_reg = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80049ea:	4b4c      	ldr	r3, [pc, #304]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049ec:	6802      	ldr	r2, [r0, #0]
{
 80049ee:	b085      	sub	sp, #20
 80049f0:	0005      	movs	r5, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d903      	bls.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x16>
 80049f6:	217e      	movs	r1, #126	; 0x7e
 80049f8:	4849      	ldr	r0, [pc, #292]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80049fa:	f7fd fede 	bl	80027ba <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049fe:	682b      	ldr	r3, [r5, #0]
 8004a00:	03db      	lsls	r3, r3, #15
 8004a02:	d530      	bpl.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004a04:	686b      	ldr	r3, [r5, #4]
 8004a06:	4a47      	ldr	r2, [pc, #284]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a08:	4213      	tst	r3, r2
 8004a0a:	d003      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8004a0c:	2184      	movs	r1, #132	; 0x84
 8004a0e:	4844      	ldr	r0, [pc, #272]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8004a10:	f7fd fed3 	bl	80027ba <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a14:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004a16:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a18:	4c43      	ldr	r4, [pc, #268]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004a1a:	0552      	lsls	r2, r2, #21
 8004a1c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8004a1e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a20:	4213      	tst	r3, r2
 8004a22:	d108      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a24:	69e3      	ldr	r3, [r4, #28]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	61e3      	str	r3, [r4, #28]
 8004a2a:	69e3      	ldr	r3, [r4, #28]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	9303      	str	r3, [sp, #12]
 8004a30:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8004a32:	2301      	movs	r3, #1
 8004a34:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a36:	2780      	movs	r7, #128	; 0x80
 8004a38:	4e3c      	ldr	r6, [pc, #240]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8004a3a:	007f      	lsls	r7, r7, #1
 8004a3c:	6833      	ldr	r3, [r6, #0]
 8004a3e:	423b      	tst	r3, r7
 8004a40:	d038      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a42:	22c0      	movs	r2, #192	; 0xc0
 8004a44:	6a23      	ldr	r3, [r4, #32]
 8004a46:	0092      	lsls	r2, r2, #2
 8004a48:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a4a:	d145      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a4c:	6a23      	ldr	r3, [r4, #32]
 8004a4e:	4a35      	ldr	r2, [pc, #212]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	686a      	ldr	r2, [r5, #4]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a58:	9b00      	ldr	r3, [sp, #0]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d103      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a5e:	69e3      	ldr	r3, [r4, #28]
 8004a60:	4a33      	ldr	r2, [pc, #204]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a66:	682b      	ldr	r3, [r5, #0]
 8004a68:	07db      	lsls	r3, r3, #31
 8004a6a:	d50d      	bpl.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004a6c:	68ab      	ldr	r3, [r5, #8]
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d903      	bls.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004a72:	21cb      	movs	r1, #203	; 0xcb
 8004a74:	482a      	ldr	r0, [pc, #168]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8004a76:	f7fd fea0 	bl	80027ba <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a7a:	2103      	movs	r1, #3
 8004a7c:	4a2a      	ldr	r2, [pc, #168]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004a7e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004a80:	438b      	bics	r3, r1
 8004a82:	68a9      	ldr	r1, [r5, #8]
 8004a84:	430b      	orrs	r3, r1
 8004a86:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a88:	682b      	ldr	r3, [r5, #0]
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004a8a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a8c:	069b      	lsls	r3, r3, #26
 8004a8e:	d521      	bpl.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004a90:	2310      	movs	r3, #16
 8004a92:	68ea      	ldr	r2, [r5, #12]
 8004a94:	439a      	bics	r2, r3
 8004a96:	4282      	cmp	r2, r0
 8004a98:	d003      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xba>
 8004a9a:	21ef      	movs	r1, #239	; 0xef
 8004a9c:	4820      	ldr	r0, [pc, #128]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8004a9e:	f7fd fe8c 	bl	80027ba <assert_failed>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004aa2:	2110      	movs	r1, #16
 8004aa4:	4a20      	ldr	r2, [pc, #128]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x140>)
  return HAL_OK;
 8004aa6:	2000      	movs	r0, #0
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004aa8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004aaa:	438b      	bics	r3, r1
 8004aac:	68e9      	ldr	r1, [r5, #12]
 8004aae:	430b      	orrs	r3, r1
 8004ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ab2:	e00f      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ab4:	6833      	ldr	r3, [r6, #0]
 8004ab6:	433b      	orrs	r3, r7
 8004ab8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004aba:	f7fe fa9b 	bl	8002ff4 <HAL_GetTick>
 8004abe:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac0:	6833      	ldr	r3, [r6, #0]
 8004ac2:	423b      	tst	r3, r7
 8004ac4:	d1bd      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac6:	f7fe fa95 	bl	8002ff4 <HAL_GetTick>
 8004aca:	9b01      	ldr	r3, [sp, #4]
 8004acc:	1ac0      	subs	r0, r0, r3
 8004ace:	2864      	cmp	r0, #100	; 0x64
 8004ad0:	d9f6      	bls.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
          return HAL_TIMEOUT;
 8004ad2:	2003      	movs	r0, #3
}
 8004ad4:	b005      	add	sp, #20
 8004ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ad8:	6869      	ldr	r1, [r5, #4]
 8004ada:	400a      	ands	r2, r1
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d0b5      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x64>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ae0:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ae2:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ae4:	6a20      	ldr	r0, [r4, #32]
 8004ae6:	025b      	lsls	r3, r3, #9
 8004ae8:	4303      	orrs	r3, r0
 8004aea:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004aec:	6a23      	ldr	r3, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004aee:	490d      	ldr	r1, [pc, #52]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004af0:	4810      	ldr	r0, [pc, #64]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004af2:	4011      	ands	r1, r2
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004af4:	4003      	ands	r3, r0
 8004af6:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8004af8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004afa:	07d3      	lsls	r3, r2, #31
 8004afc:	d5a6      	bpl.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x64>
        tickstart = HAL_GetTick();
 8004afe:	f7fe fa79 	bl	8002ff4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b02:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8004b04:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b06:	6a23      	ldr	r3, [r4, #32]
 8004b08:	423b      	tst	r3, r7
 8004b0a:	d19f      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x64>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b0c:	f7fe fa72 	bl	8002ff4 <HAL_GetTick>
 8004b10:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004b12:	1b80      	subs	r0, r0, r6
 8004b14:	4298      	cmp	r0, r3
 8004b16:	d9f6      	bls.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8004b18:	e7db      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	00010021 	.word	0x00010021
 8004b20:	08007031 	.word	0x08007031
 8004b24:	fffffcff 	.word	0xfffffcff
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	40007000 	.word	0x40007000
 8004b30:	efffffff 	.word	0xefffffff
 8004b34:	fffeffff 	.word	0xfffeffff
 8004b38:	00001388 	.word	0x00001388

08004b3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b3e:	2201      	movs	r2, #1
 8004b40:	6a03      	ldr	r3, [r0, #32]
{
 8004b42:	0004      	movs	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b44:	4393      	bics	r3, r2
 8004b46:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b48:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b4a:	6847      	ldr	r7, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b4c:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b4e:	3272      	adds	r2, #114	; 0x72
 8004b50:	4393      	bics	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b52:	680a      	ldr	r2, [r1, #0]
{
 8004b54:	000e      	movs	r6, r1
  tmpccmrx |= OC_Config->OCMode;
 8004b56:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b58:	2302      	movs	r3, #2
 8004b5a:	439d      	bics	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b5c:	688b      	ldr	r3, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8004b5e:	9201      	str	r2, [sp, #4]
  tmpccer |= OC_Config->OCPolarity;
 8004b60:	431d      	orrs	r5, r3

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b62:	4b1e      	ldr	r3, [pc, #120]	; (8004bdc <TIM_OC1_SetConfig+0xa0>)
 8004b64:	4298      	cmp	r0, r3
 8004b66:	d005      	beq.n	8004b74 <TIM_OC1_SetConfig+0x38>
 8004b68:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <TIM_OC1_SetConfig+0xa4>)
 8004b6a:	4298      	cmp	r0, r3
 8004b6c:	d002      	beq.n	8004b74 <TIM_OC1_SetConfig+0x38>
 8004b6e:	4b1d      	ldr	r3, [pc, #116]	; (8004be4 <TIM_OC1_SetConfig+0xa8>)
 8004b70:	4298      	cmp	r0, r3
 8004b72:	d12c      	bne.n	8004bce <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004b74:	2308      	movs	r3, #8
 8004b76:	68f2      	ldr	r2, [r6, #12]
 8004b78:	439a      	bics	r2, r3
 8004b7a:	d003      	beq.n	8004b84 <TIM_OC1_SetConfig+0x48>
 8004b7c:	491a      	ldr	r1, [pc, #104]	; (8004be8 <TIM_OC1_SetConfig+0xac>)
 8004b7e:	481b      	ldr	r0, [pc, #108]	; (8004bec <TIM_OC1_SetConfig+0xb0>)
 8004b80:	f7fd fe1b 	bl	80027ba <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b84:	2308      	movs	r3, #8
 8004b86:	439d      	bics	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b88:	68f3      	ldr	r3, [r6, #12]
 8004b8a:	431d      	orrs	r5, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	439d      	bics	r5, r3
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004b90:	4b12      	ldr	r3, [pc, #72]	; (8004bdc <TIM_OC1_SetConfig+0xa0>)
 8004b92:	429c      	cmp	r4, r3
 8004b94:	d005      	beq.n	8004ba2 <TIM_OC1_SetConfig+0x66>
 8004b96:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <TIM_OC1_SetConfig+0xa4>)
 8004b98:	429c      	cmp	r4, r3
 8004b9a:	d002      	beq.n	8004ba2 <TIM_OC1_SetConfig+0x66>
 8004b9c:	4b11      	ldr	r3, [pc, #68]	; (8004be4 <TIM_OC1_SetConfig+0xa8>)
 8004b9e:	429c      	cmp	r4, r3
 8004ba0:	d115      	bne.n	8004bce <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004ba2:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <TIM_OC1_SetConfig+0xb4>)
 8004ba4:	69b2      	ldr	r2, [r6, #24]
 8004ba6:	421a      	tst	r2, r3
 8004ba8:	d003      	beq.n	8004bb2 <TIM_OC1_SetConfig+0x76>
 8004baa:	4912      	ldr	r1, [pc, #72]	; (8004bf4 <TIM_OC1_SetConfig+0xb8>)
 8004bac:	480f      	ldr	r0, [pc, #60]	; (8004bec <TIM_OC1_SetConfig+0xb0>)
 8004bae:	f7fd fe04 	bl	80027ba <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004bb2:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <TIM_OC1_SetConfig+0xbc>)
 8004bb4:	6972      	ldr	r2, [r6, #20]
 8004bb6:	421a      	tst	r2, r3
 8004bb8:	d003      	beq.n	8004bc2 <TIM_OC1_SetConfig+0x86>
 8004bba:	4910      	ldr	r1, [pc, #64]	; (8004bfc <TIM_OC1_SetConfig+0xc0>)
 8004bbc:	480b      	ldr	r0, [pc, #44]	; (8004bec <TIM_OC1_SetConfig+0xb0>)
 8004bbe:	f7fd fdfc 	bl	80027ba <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bc2:	4b0f      	ldr	r3, [pc, #60]	; (8004c00 <TIM_OC1_SetConfig+0xc4>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bc4:	69b2      	ldr	r2, [r6, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bc6:	401f      	ands	r7, r3
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bc8:	6973      	ldr	r3, [r6, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	431f      	orrs	r7, r3
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bce:	9b01      	ldr	r3, [sp, #4]
  TIMx->CR2 = tmpcr2;
 8004bd0:	6067      	str	r7, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004bd2:	61a3      	str	r3, [r4, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bd4:	6873      	ldr	r3, [r6, #4]
 8004bd6:	6363      	str	r3, [r4, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd8:	6225      	str	r5, [r4, #32]
}
 8004bda:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004bdc:	40012c00 	.word	0x40012c00
 8004be0:	40014400 	.word	0x40014400
 8004be4:	40014800 	.word	0x40014800
 8004be8:	00001290 	.word	0x00001290
 8004bec:	0800706c 	.word	0x0800706c
 8004bf0:	fffffdff 	.word	0xfffffdff
 8004bf4:	0000129d 	.word	0x0000129d
 8004bf8:	fffffeff 	.word	0xfffffeff
 8004bfc:	0000129e 	.word	0x0000129e
 8004c00:	fffffcff 	.word	0xfffffcff

08004c04 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c06:	000f      	movs	r7, r1
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c08:	2173      	movs	r1, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c0a:	6a03      	ldr	r3, [r0, #32]
 8004c0c:	4a25      	ldr	r2, [pc, #148]	; (8004ca4 <TIM_OC3_SetConfig+0xa0>)
{
 8004c0e:	b085      	sub	sp, #20
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c10:	4013      	ands	r3, r2
 8004c12:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004c14:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004c16:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8004c18:	69c3      	ldr	r3, [r0, #28]
{
 8004c1a:	0005      	movs	r5, r0
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c1c:	438b      	bics	r3, r1
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c1e:	6839      	ldr	r1, [r7, #0]
 8004c20:	9202      	str	r2, [sp, #8]
 8004c22:	4319      	orrs	r1, r3
 8004c24:	9101      	str	r1, [sp, #4]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c26:	68bb      	ldr	r3, [r7, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004c28:	491f      	ldr	r1, [pc, #124]	; (8004ca8 <TIM_OC3_SetConfig+0xa4>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c2a:	021b      	lsls	r3, r3, #8
  tmpccer &= ~TIM_CCER_CC3P;
 8004c2c:	400c      	ands	r4, r1
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c2e:	431c      	orrs	r4, r3

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c30:	4b1e      	ldr	r3, [pc, #120]	; (8004cac <TIM_OC3_SetConfig+0xa8>)
 8004c32:	9103      	str	r1, [sp, #12]
 8004c34:	4298      	cmp	r0, r3
 8004c36:	d126      	bne.n	8004c86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004c38:	2308      	movs	r3, #8
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	439a      	bics	r2, r3
 8004c3e:	d003      	beq.n	8004c48 <TIM_OC3_SetConfig+0x44>
 8004c40:	491b      	ldr	r1, [pc, #108]	; (8004cb0 <TIM_OC3_SetConfig+0xac>)
 8004c42:	481c      	ldr	r0, [pc, #112]	; (8004cb4 <TIM_OC3_SetConfig+0xb0>)
 8004c44:	f7fd fdb9 	bl	80027ba <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c48:	4b1b      	ldr	r3, [pc, #108]	; (8004cb8 <TIM_OC3_SetConfig+0xb4>)
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c4a:	68fa      	ldr	r2, [r7, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c4c:	4023      	ands	r3, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c4e:	0214      	lsls	r4, r2, #8
 8004c50:	431c      	orrs	r4, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c52:	4b1a      	ldr	r3, [pc, #104]	; (8004cbc <TIM_OC3_SetConfig+0xb8>)
 8004c54:	401c      	ands	r4, r3
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	9a03      	ldr	r2, [sp, #12]
 8004c5a:	4213      	tst	r3, r2
 8004c5c:	d003      	beq.n	8004c66 <TIM_OC3_SetConfig+0x62>
 8004c5e:	4918      	ldr	r1, [pc, #96]	; (8004cc0 <TIM_OC3_SetConfig+0xbc>)
 8004c60:	4814      	ldr	r0, [pc, #80]	; (8004cb4 <TIM_OC3_SetConfig+0xb0>)
 8004c62:	f7fd fdaa 	bl	80027ba <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	9a02      	ldr	r2, [sp, #8]
 8004c6a:	4213      	tst	r3, r2
 8004c6c:	d003      	beq.n	8004c76 <TIM_OC3_SetConfig+0x72>
 8004c6e:	4915      	ldr	r1, [pc, #84]	; (8004cc4 <TIM_OC3_SetConfig+0xc0>)
 8004c70:	4810      	ldr	r0, [pc, #64]	; (8004cb4 <TIM_OC3_SetConfig+0xb0>)
 8004c72:	f7fd fda2 	bl	80027ba <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c76:	4b14      	ldr	r3, [pc, #80]	; (8004cc8 <TIM_OC3_SetConfig+0xc4>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c78:	697a      	ldr	r2, [r7, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c7a:	4033      	ands	r3, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c7c:	69be      	ldr	r6, [r7, #24]
 8004c7e:	4316      	orrs	r6, r2
 8004c80:	0136      	lsls	r6, r6, #4
 8004c82:	431e      	orrs	r6, r3
 8004c84:	e005      	b.n	8004c92 <TIM_OC3_SetConfig+0x8e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004c86:	4b11      	ldr	r3, [pc, #68]	; (8004ccc <TIM_OC3_SetConfig+0xc8>)
 8004c88:	4298      	cmp	r0, r3
 8004c8a:	d0e4      	beq.n	8004c56 <TIM_OC3_SetConfig+0x52>
 8004c8c:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <TIM_OC3_SetConfig+0xcc>)
 8004c8e:	429d      	cmp	r5, r3
 8004c90:	d0e1      	beq.n	8004c56 <TIM_OC3_SetConfig+0x52>

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c92:	9b01      	ldr	r3, [sp, #4]
  TIMx->CR2 = tmpcr2;
 8004c94:	606e      	str	r6, [r5, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004c96:	61eb      	str	r3, [r5, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	63eb      	str	r3, [r5, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c9c:	622c      	str	r4, [r5, #32]
}
 8004c9e:	b005      	add	sp, #20
 8004ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	fffffeff 	.word	0xfffffeff
 8004ca8:	fffffdff 	.word	0xfffffdff
 8004cac:	40012c00 	.word	0x40012c00
 8004cb0:	00001325 	.word	0x00001325
 8004cb4:	0800706c 	.word	0x0800706c
 8004cb8:	fffff7ff 	.word	0xfffff7ff
 8004cbc:	fffffbff 	.word	0xfffffbff
 8004cc0:	00001332 	.word	0x00001332
 8004cc4:	00001333 	.word	0x00001333
 8004cc8:	ffffcfff 	.word	0xffffcfff
 8004ccc:	40014400 	.word	0x40014400
 8004cd0:	40014800 	.word	0x40014800

08004cd4 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cd6:	6a03      	ldr	r3, [r0, #32]
 8004cd8:	4a17      	ldr	r2, [pc, #92]	; (8004d38 <TIM_OC4_SetConfig+0x64>)
{
 8004cda:	0004      	movs	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cdc:	4013      	ands	r3, r2
 8004cde:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ce2:	4a16      	ldr	r2, [pc, #88]	; (8004d3c <TIM_OC4_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8004ce4:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8004ce6:	69c7      	ldr	r7, [r0, #28]
{
 8004ce8:	000e      	movs	r6, r1
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cea:	4017      	ands	r7, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cec:	680a      	ldr	r2, [r1, #0]
 8004cee:	0212      	lsls	r2, r2, #8
 8004cf0:	4317      	orrs	r7, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cf2:	4a13      	ldr	r2, [pc, #76]	; (8004d40 <TIM_OC4_SetConfig+0x6c>)
 8004cf4:	4013      	ands	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cf6:	688a      	ldr	r2, [r1, #8]
 8004cf8:	0312      	lsls	r2, r2, #12
 8004cfa:	431a      	orrs	r2, r3

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004cfc:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <TIM_OC4_SetConfig+0x70>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cfe:	9201      	str	r2, [sp, #4]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004d00:	4298      	cmp	r0, r3
 8004d02:	d005      	beq.n	8004d10 <TIM_OC4_SetConfig+0x3c>
 8004d04:	4b10      	ldr	r3, [pc, #64]	; (8004d48 <TIM_OC4_SetConfig+0x74>)
 8004d06:	4298      	cmp	r0, r3
 8004d08:	d002      	beq.n	8004d10 <TIM_OC4_SetConfig+0x3c>
 8004d0a:	4b10      	ldr	r3, [pc, #64]	; (8004d4c <TIM_OC4_SetConfig+0x78>)
 8004d0c:	4298      	cmp	r0, r3
 8004d0e:	d10c      	bne.n	8004d2a <TIM_OC4_SetConfig+0x56>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004d10:	4b0f      	ldr	r3, [pc, #60]	; (8004d50 <TIM_OC4_SetConfig+0x7c>)
 8004d12:	6972      	ldr	r2, [r6, #20]
 8004d14:	421a      	tst	r2, r3
 8004d16:	d003      	beq.n	8004d20 <TIM_OC4_SetConfig+0x4c>
 8004d18:	490e      	ldr	r1, [pc, #56]	; (8004d54 <TIM_OC4_SetConfig+0x80>)
 8004d1a:	480f      	ldr	r0, [pc, #60]	; (8004d58 <TIM_OC4_SetConfig+0x84>)
 8004d1c:	f7fd fd4d 	bl	80027ba <assert_failed>

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d20:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <TIM_OC4_SetConfig+0x88>)
 8004d22:	401d      	ands	r5, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d24:	6973      	ldr	r3, [r6, #20]
 8004d26:	019b      	lsls	r3, r3, #6
 8004d28:	431d      	orrs	r5, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d2a:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 8004d2c:	6065      	str	r5, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004d2e:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004d30:	6423      	str	r3, [r4, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d32:	9b01      	ldr	r3, [sp, #4]
 8004d34:	6223      	str	r3, [r4, #32]
}
 8004d36:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004d38:	ffffefff 	.word	0xffffefff
 8004d3c:	ffff8cff 	.word	0xffff8cff
 8004d40:	ffffdfff 	.word	0xffffdfff
 8004d44:	40012c00 	.word	0x40012c00
 8004d48:	40014400 	.word	0x40014400
 8004d4c:	40014800 	.word	0x40014800
 8004d50:	fffffeff 	.word	0xfffffeff
 8004d54:	00001370 	.word	0x00001370
 8004d58:	0800706c 	.word	0x0800706c
 8004d5c:	ffffbfff 	.word	0xffffbfff

08004d60 <HAL_TIM_Base_Start>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004d60:	6803      	ldr	r3, [r0, #0]
 8004d62:	4a11      	ldr	r2, [pc, #68]	; (8004da8 <HAL_TIM_Base_Start+0x48>)
{
 8004d64:	b510      	push	{r4, lr}
 8004d66:	0004      	movs	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d010      	beq.n	8004d8e <HAL_TIM_Base_Start+0x2e>
 8004d6c:	4a0f      	ldr	r2, [pc, #60]	; (8004dac <HAL_TIM_Base_Start+0x4c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00d      	beq.n	8004d8e <HAL_TIM_Base_Start+0x2e>
 8004d72:	4a0f      	ldr	r2, [pc, #60]	; (8004db0 <HAL_TIM_Base_Start+0x50>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00a      	beq.n	8004d8e <HAL_TIM_Base_Start+0x2e>
 8004d78:	4a0e      	ldr	r2, [pc, #56]	; (8004db4 <HAL_TIM_Base_Start+0x54>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d007      	beq.n	8004d8e <HAL_TIM_Base_Start+0x2e>
 8004d7e:	4a0e      	ldr	r2, [pc, #56]	; (8004db8 <HAL_TIM_Base_Start+0x58>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d004      	beq.n	8004d8e <HAL_TIM_Base_Start+0x2e>
 8004d84:	2198      	movs	r1, #152	; 0x98
 8004d86:	480d      	ldr	r0, [pc, #52]	; (8004dbc <HAL_TIM_Base_Start+0x5c>)
 8004d88:	0049      	lsls	r1, r1, #1
 8004d8a:	f7fd fd16 	bl	80027ba <assert_failed>
  htim->State= HAL_TIM_STATE_BUSY;
 8004d8e:	0022      	movs	r2, r4
 8004d90:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8004d92:	2101      	movs	r1, #1
 8004d94:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8004d96:	323d      	adds	r2, #61	; 0x3d
 8004d98:	7013      	strb	r3, [r2, #0]
  __HAL_TIM_ENABLE(htim);
 8004d9a:	6803      	ldr	r3, [r0, #0]
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6003      	str	r3, [r0, #0]
}
 8004da0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8004da2:	7011      	strb	r1, [r2, #0]
}
 8004da4:	bd10      	pop	{r4, pc}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	40012c00 	.word	0x40012c00
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40002000 	.word	0x40002000
 8004db4:	40014400 	.word	0x40014400
 8004db8:	40014800 	.word	0x40014800
 8004dbc:	0800706c 	.word	0x0800706c

08004dc0 <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004dc0:	6803      	ldr	r3, [r0, #0]
 8004dc2:	4a10      	ldr	r2, [pc, #64]	; (8004e04 <HAL_TIM_Base_Start_IT+0x44>)
{
 8004dc4:	b510      	push	{r4, lr}
 8004dc6:	0004      	movs	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d010      	beq.n	8004dee <HAL_TIM_Base_Start_IT+0x2e>
 8004dcc:	4a0e      	ldr	r2, [pc, #56]	; (8004e08 <HAL_TIM_Base_Start_IT+0x48>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00d      	beq.n	8004dee <HAL_TIM_Base_Start_IT+0x2e>
 8004dd2:	4a0e      	ldr	r2, [pc, #56]	; (8004e0c <HAL_TIM_Base_Start_IT+0x4c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00a      	beq.n	8004dee <HAL_TIM_Base_Start_IT+0x2e>
 8004dd8:	4a0d      	ldr	r2, [pc, #52]	; (8004e10 <HAL_TIM_Base_Start_IT+0x50>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d007      	beq.n	8004dee <HAL_TIM_Base_Start_IT+0x2e>
 8004dde:	4a0d      	ldr	r2, [pc, #52]	; (8004e14 <HAL_TIM_Base_Start_IT+0x54>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d004      	beq.n	8004dee <HAL_TIM_Base_Start_IT+0x2e>
 8004de4:	21af      	movs	r1, #175	; 0xaf
 8004de6:	480c      	ldr	r0, [pc, #48]	; (8004e18 <HAL_TIM_Base_Start_IT+0x58>)
 8004de8:	0049      	lsls	r1, r1, #1
 8004dea:	f7fd fce6 	bl	80027ba <assert_failed>
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dee:	2201      	movs	r2, #1
 8004df0:	6823      	ldr	r3, [r4, #0]
}
 8004df2:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004df4:	68d9      	ldr	r1, [r3, #12]
 8004df6:	4311      	orrs	r1, r2
 8004df8:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8004dfa:	6819      	ldr	r1, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	601a      	str	r2, [r3, #0]
}
 8004e00:	bd10      	pop	{r4, pc}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	40000400 	.word	0x40000400
 8004e0c:	40002000 	.word	0x40002000
 8004e10:	40014400 	.word	0x40014400
 8004e14:	40014800 	.word	0x40014800
 8004e18:	0800706c 	.word	0x0800706c

08004e1c <HAL_TIM_OC_MspInit>:
 8004e1c:	4770      	bx	lr

08004e1e <HAL_TIM_PWM_MspInit>:
 8004e1e:	4770      	bx	lr

08004e20 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e20:	4a19      	ldr	r2, [pc, #100]	; (8004e88 <TIM_Base_SetConfig+0x68>)
{
 8004e22:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8004e24:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e26:	4290      	cmp	r0, r2
 8004e28:	d002      	beq.n	8004e30 <TIM_Base_SetConfig+0x10>
 8004e2a:	4c18      	ldr	r4, [pc, #96]	; (8004e8c <TIM_Base_SetConfig+0x6c>)
 8004e2c:	42a0      	cmp	r0, r4
 8004e2e:	d108      	bne.n	8004e42 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e30:	2470      	movs	r4, #112	; 0x70
 8004e32:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004e34:	684c      	ldr	r4, [r1, #4]
 8004e36:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e38:	4290      	cmp	r0, r2
 8004e3a:	d00b      	beq.n	8004e54 <TIM_Base_SetConfig+0x34>
 8004e3c:	4c13      	ldr	r4, [pc, #76]	; (8004e8c <TIM_Base_SetConfig+0x6c>)
 8004e3e:	42a0      	cmp	r0, r4
 8004e40:	d008      	beq.n	8004e54 <TIM_Base_SetConfig+0x34>
 8004e42:	4c13      	ldr	r4, [pc, #76]	; (8004e90 <TIM_Base_SetConfig+0x70>)
 8004e44:	42a0      	cmp	r0, r4
 8004e46:	d005      	beq.n	8004e54 <TIM_Base_SetConfig+0x34>
 8004e48:	4c12      	ldr	r4, [pc, #72]	; (8004e94 <TIM_Base_SetConfig+0x74>)
 8004e4a:	42a0      	cmp	r0, r4
 8004e4c:	d002      	beq.n	8004e54 <TIM_Base_SetConfig+0x34>
 8004e4e:	4c12      	ldr	r4, [pc, #72]	; (8004e98 <TIM_Base_SetConfig+0x78>)
 8004e50:	42a0      	cmp	r0, r4
 8004e52:	d103      	bne.n	8004e5c <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e54:	4c11      	ldr	r4, [pc, #68]	; (8004e9c <TIM_Base_SetConfig+0x7c>)
 8004e56:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e58:	68cc      	ldr	r4, [r1, #12]
 8004e5a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e5c:	2480      	movs	r4, #128	; 0x80
 8004e5e:	43a3      	bics	r3, r4
 8004e60:	694c      	ldr	r4, [r1, #20]
 8004e62:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8004e64:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e66:	688b      	ldr	r3, [r1, #8]
 8004e68:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004e6a:	680b      	ldr	r3, [r1, #0]
 8004e6c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e6e:	4290      	cmp	r0, r2
 8004e70:	d005      	beq.n	8004e7e <TIM_Base_SetConfig+0x5e>
 8004e72:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <TIM_Base_SetConfig+0x74>)
 8004e74:	4298      	cmp	r0, r3
 8004e76:	d002      	beq.n	8004e7e <TIM_Base_SetConfig+0x5e>
 8004e78:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <TIM_Base_SetConfig+0x78>)
 8004e7a:	4298      	cmp	r0, r3
 8004e7c:	d101      	bne.n	8004e82 <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 8004e7e:	690b      	ldr	r3, [r1, #16]
 8004e80:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004e82:	2301      	movs	r3, #1
 8004e84:	6143      	str	r3, [r0, #20]
}
 8004e86:	bd10      	pop	{r4, pc}
 8004e88:	40012c00 	.word	0x40012c00
 8004e8c:	40000400 	.word	0x40000400
 8004e90:	40002000 	.word	0x40002000
 8004e94:	40014400 	.word	0x40014400
 8004e98:	40014800 	.word	0x40014800
 8004e9c:	fffffcff 	.word	0xfffffcff

08004ea0 <HAL_TIM_Base_Init>:
{
 8004ea0:	b570      	push	{r4, r5, r6, lr}
 8004ea2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004ea4:	2001      	movs	r0, #1
  if(htim == NULL)
 8004ea6:	2c00      	cmp	r4, #0
 8004ea8:	d04c      	beq.n	8004f44 <HAL_TIM_Base_Init+0xa4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	4a26      	ldr	r2, [pc, #152]	; (8004f48 <HAL_TIM_Base_Init+0xa8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00f      	beq.n	8004ed2 <HAL_TIM_Base_Init+0x32>
 8004eb2:	4a26      	ldr	r2, [pc, #152]	; (8004f4c <HAL_TIM_Base_Init+0xac>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00c      	beq.n	8004ed2 <HAL_TIM_Base_Init+0x32>
 8004eb8:	4a25      	ldr	r2, [pc, #148]	; (8004f50 <HAL_TIM_Base_Init+0xb0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d009      	beq.n	8004ed2 <HAL_TIM_Base_Init+0x32>
 8004ebe:	4a25      	ldr	r2, [pc, #148]	; (8004f54 <HAL_TIM_Base_Init+0xb4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d006      	beq.n	8004ed2 <HAL_TIM_Base_Init+0x32>
 8004ec4:	4a24      	ldr	r2, [pc, #144]	; (8004f58 <HAL_TIM_Base_Init+0xb8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d003      	beq.n	8004ed2 <HAL_TIM_Base_Init+0x32>
 8004eca:	21d4      	movs	r1, #212	; 0xd4
 8004ecc:	4823      	ldr	r0, [pc, #140]	; (8004f5c <HAL_TIM_Base_Init+0xbc>)
 8004ece:	f7fd fc74 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004ed2:	68a3      	ldr	r3, [r4, #8]
 8004ed4:	2210      	movs	r2, #16
 8004ed6:	0019      	movs	r1, r3
 8004ed8:	4391      	bics	r1, r2
 8004eda:	d00a      	beq.n	8004ef2 <HAL_TIM_Base_Init+0x52>
 8004edc:	2240      	movs	r2, #64	; 0x40
 8004ede:	0019      	movs	r1, r3
 8004ee0:	4391      	bics	r1, r2
 8004ee2:	2920      	cmp	r1, #32
 8004ee4:	d005      	beq.n	8004ef2 <HAL_TIM_Base_Init+0x52>
 8004ee6:	2b40      	cmp	r3, #64	; 0x40
 8004ee8:	d003      	beq.n	8004ef2 <HAL_TIM_Base_Init+0x52>
 8004eea:	21d5      	movs	r1, #213	; 0xd5
 8004eec:	481b      	ldr	r0, [pc, #108]	; (8004f5c <HAL_TIM_Base_Init+0xbc>)
 8004eee:	f7fd fc64 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004ef2:	6923      	ldr	r3, [r4, #16]
 8004ef4:	4a1a      	ldr	r2, [pc, #104]	; (8004f60 <HAL_TIM_Base_Init+0xc0>)
 8004ef6:	4213      	tst	r3, r2
 8004ef8:	d007      	beq.n	8004f0a <HAL_TIM_Base_Init+0x6a>
 8004efa:	2280      	movs	r2, #128	; 0x80
 8004efc:	0092      	lsls	r2, r2, #2
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d003      	beq.n	8004f0a <HAL_TIM_Base_Init+0x6a>
 8004f02:	21d6      	movs	r1, #214	; 0xd6
 8004f04:	4815      	ldr	r0, [pc, #84]	; (8004f5c <HAL_TIM_Base_Init+0xbc>)
 8004f06:	f7fd fc58 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004f0a:	2380      	movs	r3, #128	; 0x80
 8004f0c:	69a2      	ldr	r2, [r4, #24]
 8004f0e:	439a      	bics	r2, r3
 8004f10:	d003      	beq.n	8004f1a <HAL_TIM_Base_Init+0x7a>
 8004f12:	21d7      	movs	r1, #215	; 0xd7
 8004f14:	4811      	ldr	r0, [pc, #68]	; (8004f5c <HAL_TIM_Base_Init+0xbc>)
 8004f16:	f7fd fc50 	bl	80027ba <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8004f1a:	0025      	movs	r5, r4
 8004f1c:	353d      	adds	r5, #61	; 0x3d
 8004f1e:	782b      	ldrb	r3, [r5, #0]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d105      	bne.n	8004f32 <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8004f26:	0022      	movs	r2, r4
 8004f28:	323c      	adds	r2, #60	; 0x3c
 8004f2a:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8004f2c:	0020      	movs	r0, r4
 8004f2e:	f7fd fe0d 	bl	8002b4c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8004f32:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f34:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8004f36:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f38:	1d21      	adds	r1, r4, #4
 8004f3a:	f7ff ff71 	bl	8004e20 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8004f3e:	2301      	movs	r3, #1
  return HAL_OK;
 8004f40:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8004f42:	702b      	strb	r3, [r5, #0]
}
 8004f44:	bd70      	pop	{r4, r5, r6, pc}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	40012c00 	.word	0x40012c00
 8004f4c:	40000400 	.word	0x40000400
 8004f50:	40002000 	.word	0x40002000
 8004f54:	40014400 	.word	0x40014400
 8004f58:	40014800 	.word	0x40014800
 8004f5c:	0800706c 	.word	0x0800706c
 8004f60:	fffffeff 	.word	0xfffffeff

08004f64 <HAL_TIM_OC_Init>:
{
 8004f64:	b570      	push	{r4, r5, r6, lr}
 8004f66:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004f68:	2001      	movs	r0, #1
  if(htim == NULL)
 8004f6a:	2c00      	cmp	r4, #0
 8004f6c:	d050      	beq.n	8005010 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	4a28      	ldr	r2, [pc, #160]	; (8005014 <HAL_TIM_OC_Init+0xb0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d010      	beq.n	8004f98 <HAL_TIM_OC_Init+0x34>
 8004f76:	4a28      	ldr	r2, [pc, #160]	; (8005018 <HAL_TIM_OC_Init+0xb4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00d      	beq.n	8004f98 <HAL_TIM_OC_Init+0x34>
 8004f7c:	4a27      	ldr	r2, [pc, #156]	; (800501c <HAL_TIM_OC_Init+0xb8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00a      	beq.n	8004f98 <HAL_TIM_OC_Init+0x34>
 8004f82:	4a27      	ldr	r2, [pc, #156]	; (8005020 <HAL_TIM_OC_Init+0xbc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d007      	beq.n	8004f98 <HAL_TIM_OC_Init+0x34>
 8004f88:	4a26      	ldr	r2, [pc, #152]	; (8005024 <HAL_TIM_OC_Init+0xc0>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d004      	beq.n	8004f98 <HAL_TIM_OC_Init+0x34>
 8004f8e:	21f5      	movs	r1, #245	; 0xf5
 8004f90:	4825      	ldr	r0, [pc, #148]	; (8005028 <HAL_TIM_OC_Init+0xc4>)
 8004f92:	0049      	lsls	r1, r1, #1
 8004f94:	f7fd fc11 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004f98:	68a3      	ldr	r3, [r4, #8]
 8004f9a:	2210      	movs	r2, #16
 8004f9c:	0019      	movs	r1, r3
 8004f9e:	4391      	bics	r1, r2
 8004fa0:	d00b      	beq.n	8004fba <HAL_TIM_OC_Init+0x56>
 8004fa2:	2240      	movs	r2, #64	; 0x40
 8004fa4:	0019      	movs	r1, r3
 8004fa6:	4391      	bics	r1, r2
 8004fa8:	2920      	cmp	r1, #32
 8004faa:	d006      	beq.n	8004fba <HAL_TIM_OC_Init+0x56>
 8004fac:	2b40      	cmp	r3, #64	; 0x40
 8004fae:	d004      	beq.n	8004fba <HAL_TIM_OC_Init+0x56>
 8004fb0:	21ec      	movs	r1, #236	; 0xec
 8004fb2:	481d      	ldr	r0, [pc, #116]	; (8005028 <HAL_TIM_OC_Init+0xc4>)
 8004fb4:	31ff      	adds	r1, #255	; 0xff
 8004fb6:	f7fd fc00 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004fba:	6923      	ldr	r3, [r4, #16]
 8004fbc:	4a1b      	ldr	r2, [pc, #108]	; (800502c <HAL_TIM_OC_Init+0xc8>)
 8004fbe:	4213      	tst	r3, r2
 8004fc0:	d008      	beq.n	8004fd4 <HAL_TIM_OC_Init+0x70>
 8004fc2:	2280      	movs	r2, #128	; 0x80
 8004fc4:	0092      	lsls	r2, r2, #2
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d004      	beq.n	8004fd4 <HAL_TIM_OC_Init+0x70>
 8004fca:	21f6      	movs	r1, #246	; 0xf6
 8004fcc:	4816      	ldr	r0, [pc, #88]	; (8005028 <HAL_TIM_OC_Init+0xc4>)
 8004fce:	0049      	lsls	r1, r1, #1
 8004fd0:	f7fd fbf3 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004fd4:	2380      	movs	r3, #128	; 0x80
 8004fd6:	69a2      	ldr	r2, [r4, #24]
 8004fd8:	439a      	bics	r2, r3
 8004fda:	d004      	beq.n	8004fe6 <HAL_TIM_OC_Init+0x82>
 8004fdc:	21ee      	movs	r1, #238	; 0xee
 8004fde:	4812      	ldr	r0, [pc, #72]	; (8005028 <HAL_TIM_OC_Init+0xc4>)
 8004fe0:	31ff      	adds	r1, #255	; 0xff
 8004fe2:	f7fd fbea 	bl	80027ba <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8004fe6:	0025      	movs	r5, r4
 8004fe8:	353d      	adds	r5, #61	; 0x3d
 8004fea:	782b      	ldrb	r3, [r5, #0]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d105      	bne.n	8004ffe <HAL_TIM_OC_Init+0x9a>
    htim->Lock = HAL_UNLOCKED;
 8004ff2:	0022      	movs	r2, r4
 8004ff4:	323c      	adds	r2, #60	; 0x3c
 8004ff6:	7013      	strb	r3, [r2, #0]
    HAL_TIM_OC_MspInit(htim);
 8004ff8:	0020      	movs	r0, r4
 8004ffa:	f7ff ff0f 	bl	8004e1c <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8004ffe:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005000:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8005002:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005004:	1d21      	adds	r1, r4, #4
 8005006:	f7ff ff0b 	bl	8004e20 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800500a:	2301      	movs	r3, #1
  return HAL_OK;
 800500c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800500e:	702b      	strb	r3, [r5, #0]
}
 8005010:	bd70      	pop	{r4, r5, r6, pc}
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	40012c00 	.word	0x40012c00
 8005018:	40000400 	.word	0x40000400
 800501c:	40002000 	.word	0x40002000
 8005020:	40014400 	.word	0x40014400
 8005024:	40014800 	.word	0x40014800
 8005028:	0800706c 	.word	0x0800706c
 800502c:	fffffeff 	.word	0xfffffeff

08005030 <HAL_TIM_PWM_Init>:
{
 8005030:	b570      	push	{r4, r5, r6, lr}
 8005032:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005034:	2001      	movs	r0, #1
  if(htim == NULL)
 8005036:	2c00      	cmp	r4, #0
 8005038:	d04d      	beq.n	80050d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	4a26      	ldr	r2, [pc, #152]	; (80050d8 <HAL_TIM_PWM_Init+0xa8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00f      	beq.n	8005062 <HAL_TIM_PWM_Init+0x32>
 8005042:	4a26      	ldr	r2, [pc, #152]	; (80050dc <HAL_TIM_PWM_Init+0xac>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00c      	beq.n	8005062 <HAL_TIM_PWM_Init+0x32>
 8005048:	4a25      	ldr	r2, [pc, #148]	; (80050e0 <HAL_TIM_PWM_Init+0xb0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d009      	beq.n	8005062 <HAL_TIM_PWM_Init+0x32>
 800504e:	4a25      	ldr	r2, [pc, #148]	; (80050e4 <HAL_TIM_PWM_Init+0xb4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d006      	beq.n	8005062 <HAL_TIM_PWM_Init+0x32>
 8005054:	4a24      	ldr	r2, [pc, #144]	; (80050e8 <HAL_TIM_PWM_Init+0xb8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d003      	beq.n	8005062 <HAL_TIM_PWM_Init+0x32>
 800505a:	4924      	ldr	r1, [pc, #144]	; (80050ec <HAL_TIM_PWM_Init+0xbc>)
 800505c:	4824      	ldr	r0, [pc, #144]	; (80050f0 <HAL_TIM_PWM_Init+0xc0>)
 800505e:	f7fd fbac 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005062:	68a3      	ldr	r3, [r4, #8]
 8005064:	2210      	movs	r2, #16
 8005066:	0019      	movs	r1, r3
 8005068:	4391      	bics	r1, r2
 800506a:	d00a      	beq.n	8005082 <HAL_TIM_PWM_Init+0x52>
 800506c:	2240      	movs	r2, #64	; 0x40
 800506e:	0019      	movs	r1, r3
 8005070:	4391      	bics	r1, r2
 8005072:	2920      	cmp	r1, #32
 8005074:	d005      	beq.n	8005082 <HAL_TIM_PWM_Init+0x52>
 8005076:	2b40      	cmp	r3, #64	; 0x40
 8005078:	d003      	beq.n	8005082 <HAL_TIM_PWM_Init+0x52>
 800507a:	491e      	ldr	r1, [pc, #120]	; (80050f4 <HAL_TIM_PWM_Init+0xc4>)
 800507c:	481c      	ldr	r0, [pc, #112]	; (80050f0 <HAL_TIM_PWM_Init+0xc0>)
 800507e:	f7fd fb9c 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005082:	6923      	ldr	r3, [r4, #16]
 8005084:	4a1c      	ldr	r2, [pc, #112]	; (80050f8 <HAL_TIM_PWM_Init+0xc8>)
 8005086:	4213      	tst	r3, r2
 8005088:	d007      	beq.n	800509a <HAL_TIM_PWM_Init+0x6a>
 800508a:	2280      	movs	r2, #128	; 0x80
 800508c:	0092      	lsls	r2, r2, #2
 800508e:	4293      	cmp	r3, r2
 8005090:	d003      	beq.n	800509a <HAL_TIM_PWM_Init+0x6a>
 8005092:	491a      	ldr	r1, [pc, #104]	; (80050fc <HAL_TIM_PWM_Init+0xcc>)
 8005094:	4816      	ldr	r0, [pc, #88]	; (80050f0 <HAL_TIM_PWM_Init+0xc0>)
 8005096:	f7fd fb90 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800509a:	2380      	movs	r3, #128	; 0x80
 800509c:	69a2      	ldr	r2, [r4, #24]
 800509e:	439a      	bics	r2, r3
 80050a0:	d004      	beq.n	80050ac <HAL_TIM_PWM_Init+0x7c>
 80050a2:	21fa      	movs	r1, #250	; 0xfa
 80050a4:	4812      	ldr	r0, [pc, #72]	; (80050f0 <HAL_TIM_PWM_Init+0xc0>)
 80050a6:	0089      	lsls	r1, r1, #2
 80050a8:	f7fd fb87 	bl	80027ba <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80050ac:	0025      	movs	r5, r4
 80050ae:	353d      	adds	r5, #61	; 0x3d
 80050b0:	782b      	ldrb	r3, [r5, #0]
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d105      	bne.n	80050c4 <HAL_TIM_PWM_Init+0x94>
    htim->Lock = HAL_UNLOCKED;
 80050b8:	0022      	movs	r2, r4
 80050ba:	323c      	adds	r2, #60	; 0x3c
 80050bc:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 80050be:	0020      	movs	r0, r4
 80050c0:	f7ff fead 	bl	8004e1e <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80050c4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80050c8:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ca:	1d21      	adds	r1, r4, #4
 80050cc:	f7ff fea8 	bl	8004e20 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80050d0:	2301      	movs	r3, #1
  return HAL_OK;
 80050d2:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80050d4:	702b      	strb	r3, [r5, #0]
}
 80050d6:	bd70      	pop	{r4, r5, r6, pc}
 80050d8:	40012c00 	.word	0x40012c00
 80050dc:	40000400 	.word	0x40000400
 80050e0:	40002000 	.word	0x40002000
 80050e4:	40014400 	.word	0x40014400
 80050e8:	40014800 	.word	0x40014800
 80050ec:	000003e5 	.word	0x000003e5
 80050f0:	0800706c 	.word	0x0800706c
 80050f4:	000003e6 	.word	0x000003e6
 80050f8:	fffffeff 	.word	0xfffffeff
 80050fc:	000003e7 	.word	0x000003e7

08005100 <TIM_OC2_SetConfig>:
{
 8005100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005102:	2210      	movs	r2, #16
 8005104:	6a03      	ldr	r3, [r0, #32]
{
 8005106:	0004      	movs	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005108:	4393      	bics	r3, r2
 800510a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800510c:	6a06      	ldr	r6, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800510e:	4a23      	ldr	r2, [pc, #140]	; (800519c <TIM_OC2_SetConfig+0x9c>)
  tmpcr2 =  TIMx->CR2;
 8005110:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005112:	6983      	ldr	r3, [r0, #24]
{
 8005114:	000f      	movs	r7, r1
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005116:	4013      	ands	r3, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005118:	680a      	ldr	r2, [r1, #0]
 800511a:	0212      	lsls	r2, r2, #8
 800511c:	431a      	orrs	r2, r3
  tmpccer &= ~TIM_CCER_CC2P;
 800511e:	2320      	movs	r3, #32
 8005120:	439e      	bics	r6, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005122:	688b      	ldr	r3, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005124:	9201      	str	r2, [sp, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	431e      	orrs	r6, r3
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800512a:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <TIM_OC2_SetConfig+0xa0>)
 800512c:	4298      	cmp	r0, r3
 800512e:	d127      	bne.n	8005180 <TIM_OC2_SetConfig+0x80>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005130:	2308      	movs	r3, #8
 8005132:	68ca      	ldr	r2, [r1, #12]
 8005134:	439a      	bics	r2, r3
 8005136:	d003      	beq.n	8005140 <TIM_OC2_SetConfig+0x40>
 8005138:	491a      	ldr	r1, [pc, #104]	; (80051a4 <TIM_OC2_SetConfig+0xa4>)
 800513a:	481b      	ldr	r0, [pc, #108]	; (80051a8 <TIM_OC2_SetConfig+0xa8>)
 800513c:	f7fd fb3d 	bl	80027ba <assert_failed>
    tmpccer &= ~TIM_CCER_CC2NP;
 8005140:	2380      	movs	r3, #128	; 0x80
 8005142:	439e      	bics	r6, r3
 8005144:	0033      	movs	r3, r6
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	0116      	lsls	r6, r2, #4
 800514a:	431e      	orrs	r6, r3
    tmpccer &= ~TIM_CCER_CC2NE;
 800514c:	2340      	movs	r3, #64	; 0x40
 800514e:	439e      	bics	r6, r3
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005150:	4b16      	ldr	r3, [pc, #88]	; (80051ac <TIM_OC2_SetConfig+0xac>)
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	421a      	tst	r2, r3
 8005156:	d003      	beq.n	8005160 <TIM_OC2_SetConfig+0x60>
 8005158:	4915      	ldr	r1, [pc, #84]	; (80051b0 <TIM_OC2_SetConfig+0xb0>)
 800515a:	4813      	ldr	r0, [pc, #76]	; (80051a8 <TIM_OC2_SetConfig+0xa8>)
 800515c:	f7fd fb2d 	bl	80027ba <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005160:	4b14      	ldr	r3, [pc, #80]	; (80051b4 <TIM_OC2_SetConfig+0xb4>)
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	421a      	tst	r2, r3
 8005166:	d003      	beq.n	8005170 <TIM_OC2_SetConfig+0x70>
 8005168:	4913      	ldr	r1, [pc, #76]	; (80051b8 <TIM_OC2_SetConfig+0xb8>)
 800516a:	480f      	ldr	r0, [pc, #60]	; (80051a8 <TIM_OC2_SetConfig+0xa8>)
 800516c:	f7fd fb25 	bl	80027ba <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005170:	4b12      	ldr	r3, [pc, #72]	; (80051bc <TIM_OC2_SetConfig+0xbc>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005172:	697a      	ldr	r2, [r7, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005174:	402b      	ands	r3, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005176:	69bd      	ldr	r5, [r7, #24]
 8005178:	4315      	orrs	r5, r2
 800517a:	00ad      	lsls	r5, r5, #2
 800517c:	431d      	orrs	r5, r3
 800517e:	e005      	b.n	800518c <TIM_OC2_SetConfig+0x8c>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005180:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <TIM_OC2_SetConfig+0xc0>)
 8005182:	4298      	cmp	r0, r3
 8005184:	d0e4      	beq.n	8005150 <TIM_OC2_SetConfig+0x50>
 8005186:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <TIM_OC2_SetConfig+0xc4>)
 8005188:	429c      	cmp	r4, r3
 800518a:	d0e1      	beq.n	8005150 <TIM_OC2_SetConfig+0x50>
  TIMx->CCMR1 = tmpccmrx;
 800518c:	9b01      	ldr	r3, [sp, #4]
  TIMx->CR2 = tmpcr2;
 800518e:	6065      	str	r5, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005190:	61a3      	str	r3, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005196:	6226      	str	r6, [r4, #32]
}
 8005198:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	ffff8cff 	.word	0xffff8cff
 80051a0:	40012c00 	.word	0x40012c00
 80051a4:	000012da 	.word	0x000012da
 80051a8:	0800706c 	.word	0x0800706c
 80051ac:	fffffdff 	.word	0xfffffdff
 80051b0:	000012e8 	.word	0x000012e8
 80051b4:	fffffeff 	.word	0xfffffeff
 80051b8:	000012e9 	.word	0x000012e9
 80051bc:	fffff3ff 	.word	0xfffff3ff
 80051c0:	40014400 	.word	0x40014400
 80051c4:	40014800 	.word	0x40014800

080051c8 <HAL_TIM_OC_ConfigChannel>:
{
 80051c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051ca:	0004      	movs	r4, r0
 80051cc:	000d      	movs	r5, r1
 80051ce:	0016      	movs	r6, r2
  assert_param(IS_TIM_CHANNELS(Channel));
 80051d0:	2a18      	cmp	r2, #24
 80051d2:	d803      	bhi.n	80051dc <HAL_TIM_OC_ConfigChannel+0x14>
 80051d4:	4b42      	ldr	r3, [pc, #264]	; (80052e0 <HAL_TIM_OC_ConfigChannel+0x118>)
 80051d6:	40d3      	lsrs	r3, r2
 80051d8:	07db      	lsls	r3, r3, #31
 80051da:	d403      	bmi.n	80051e4 <HAL_TIM_OC_ConfigChannel+0x1c>
 80051dc:	4941      	ldr	r1, [pc, #260]	; (80052e4 <HAL_TIM_OC_ConfigChannel+0x11c>)
 80051de:	4842      	ldr	r0, [pc, #264]	; (80052e8 <HAL_TIM_OC_ConfigChannel+0x120>)
 80051e0:	f7fd faeb 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	2210      	movs	r2, #16
 80051e8:	0019      	movs	r1, r3
 80051ea:	4391      	bics	r1, r2
 80051ec:	000a      	movs	r2, r1
 80051ee:	2130      	movs	r1, #48	; 0x30
 80051f0:	438b      	bics	r3, r1
 80051f2:	d005      	beq.n	8005200 <HAL_TIM_OC_ConfigChannel+0x38>
 80051f4:	2a40      	cmp	r2, #64	; 0x40
 80051f6:	d003      	beq.n	8005200 <HAL_TIM_OC_ConfigChannel+0x38>
 80051f8:	493c      	ldr	r1, [pc, #240]	; (80052ec <HAL_TIM_OC_ConfigChannel+0x124>)
 80051fa:	483b      	ldr	r0, [pc, #236]	; (80052e8 <HAL_TIM_OC_ConfigChannel+0x120>)
 80051fc:	f7fd fadd 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8005200:	2302      	movs	r3, #2
 8005202:	68aa      	ldr	r2, [r5, #8]
 8005204:	439a      	bics	r2, r3
 8005206:	d003      	beq.n	8005210 <HAL_TIM_OC_ConfigChannel+0x48>
 8005208:	4939      	ldr	r1, [pc, #228]	; (80052f0 <HAL_TIM_OC_ConfigChannel+0x128>)
 800520a:	4837      	ldr	r0, [pc, #220]	; (80052e8 <HAL_TIM_OC_ConfigChannel+0x120>)
 800520c:	f7fd fad5 	bl	80027ba <assert_failed>
  __HAL_LOCK(htim);
 8005210:	0027      	movs	r7, r4
 8005212:	2302      	movs	r3, #2
 8005214:	373c      	adds	r7, #60	; 0x3c
 8005216:	783a      	ldrb	r2, [r7, #0]
 8005218:	0018      	movs	r0, r3
 800521a:	2a01      	cmp	r2, #1
 800521c:	d02e      	beq.n	800527c <HAL_TIM_OC_ConfigChannel+0xb4>
 800521e:	2201      	movs	r2, #1
 8005220:	703a      	strb	r2, [r7, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005222:	0022      	movs	r2, r4
 8005224:	323d      	adds	r2, #61	; 0x3d
 8005226:	9201      	str	r2, [sp, #4]
 8005228:	7013      	strb	r3, [r2, #0]
  switch (Channel)
 800522a:	2e0c      	cmp	r6, #12
 800522c:	d821      	bhi.n	8005272 <HAL_TIM_OC_ConfigChannel+0xaa>
 800522e:	0030      	movs	r0, r6
 8005230:	f7fa ff6a 	bl	8000108 <__gnu_thumb1_case_uqi>
 8005234:	1f1f1f07 	.word	0x1f1f1f07
 8005238:	1f1f1f25 	.word	0x1f1f1f25
 800523c:	1f1f1f35 	.word	0x1f1f1f35
 8005240:	45          	.byte	0x45
 8005241:	00          	.byte	0x00
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	4a2b      	ldr	r2, [pc, #172]	; (80052f4 <HAL_TIM_OC_ConfigChannel+0x12c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00f      	beq.n	800526a <HAL_TIM_OC_ConfigChannel+0xa2>
 800524a:	4a2b      	ldr	r2, [pc, #172]	; (80052f8 <HAL_TIM_OC_ConfigChannel+0x130>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00c      	beq.n	800526a <HAL_TIM_OC_ConfigChannel+0xa2>
 8005250:	4a2a      	ldr	r2, [pc, #168]	; (80052fc <HAL_TIM_OC_ConfigChannel+0x134>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d009      	beq.n	800526a <HAL_TIM_OC_ConfigChannel+0xa2>
 8005256:	4a2a      	ldr	r2, [pc, #168]	; (8005300 <HAL_TIM_OC_ConfigChannel+0x138>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d006      	beq.n	800526a <HAL_TIM_OC_ConfigChannel+0xa2>
 800525c:	4a29      	ldr	r2, [pc, #164]	; (8005304 <HAL_TIM_OC_ConfigChannel+0x13c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d003      	beq.n	800526a <HAL_TIM_OC_ConfigChannel+0xa2>
 8005262:	4929      	ldr	r1, [pc, #164]	; (8005308 <HAL_TIM_OC_ConfigChannel+0x140>)
 8005264:	4820      	ldr	r0, [pc, #128]	; (80052e8 <HAL_TIM_OC_ConfigChannel+0x120>)
 8005266:	f7fd faa8 	bl	80027ba <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800526a:	0029      	movs	r1, r5
 800526c:	6820      	ldr	r0, [r4, #0]
 800526e:	f7ff fc65 	bl	8004b3c <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005272:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005274:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005276:	9a01      	ldr	r2, [sp, #4]
 8005278:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(htim);
 800527a:	7038      	strb	r0, [r7, #0]
}
 800527c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	4a1c      	ldr	r2, [pc, #112]	; (80052f4 <HAL_TIM_OC_ConfigChannel+0x12c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d006      	beq.n	8005294 <HAL_TIM_OC_ConfigChannel+0xcc>
 8005286:	4a1c      	ldr	r2, [pc, #112]	; (80052f8 <HAL_TIM_OC_ConfigChannel+0x130>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d003      	beq.n	8005294 <HAL_TIM_OC_ConfigChannel+0xcc>
 800528c:	491f      	ldr	r1, [pc, #124]	; (800530c <HAL_TIM_OC_ConfigChannel+0x144>)
 800528e:	4816      	ldr	r0, [pc, #88]	; (80052e8 <HAL_TIM_OC_ConfigChannel+0x120>)
 8005290:	f7fd fa93 	bl	80027ba <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005294:	0029      	movs	r1, r5
 8005296:	6820      	ldr	r0, [r4, #0]
 8005298:	f7ff ff32 	bl	8005100 <TIM_OC2_SetConfig>
    break;
 800529c:	e7e9      	b.n	8005272 <HAL_TIM_OC_ConfigChannel+0xaa>
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	4a14      	ldr	r2, [pc, #80]	; (80052f4 <HAL_TIM_OC_ConfigChannel+0x12c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d006      	beq.n	80052b4 <HAL_TIM_OC_ConfigChannel+0xec>
 80052a6:	4a14      	ldr	r2, [pc, #80]	; (80052f8 <HAL_TIM_OC_ConfigChannel+0x130>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d003      	beq.n	80052b4 <HAL_TIM_OC_ConfigChannel+0xec>
 80052ac:	4918      	ldr	r1, [pc, #96]	; (8005310 <HAL_TIM_OC_ConfigChannel+0x148>)
 80052ae:	480e      	ldr	r0, [pc, #56]	; (80052e8 <HAL_TIM_OC_ConfigChannel+0x120>)
 80052b0:	f7fd fa83 	bl	80027ba <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052b4:	0029      	movs	r1, r5
 80052b6:	6820      	ldr	r0, [r4, #0]
 80052b8:	f7ff fca4 	bl	8004c04 <TIM_OC3_SetConfig>
    break;
 80052bc:	e7d9      	b.n	8005272 <HAL_TIM_OC_ConfigChannel+0xaa>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	4a0c      	ldr	r2, [pc, #48]	; (80052f4 <HAL_TIM_OC_ConfigChannel+0x12c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d006      	beq.n	80052d4 <HAL_TIM_OC_ConfigChannel+0x10c>
 80052c6:	4a0c      	ldr	r2, [pc, #48]	; (80052f8 <HAL_TIM_OC_ConfigChannel+0x130>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d003      	beq.n	80052d4 <HAL_TIM_OC_ConfigChannel+0x10c>
 80052cc:	4911      	ldr	r1, [pc, #68]	; (8005314 <HAL_TIM_OC_ConfigChannel+0x14c>)
 80052ce:	4806      	ldr	r0, [pc, #24]	; (80052e8 <HAL_TIM_OC_ConfigChannel+0x120>)
 80052d0:	f7fd fa73 	bl	80027ba <assert_failed>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052d4:	0029      	movs	r1, r5
 80052d6:	6820      	ldr	r0, [r4, #0]
 80052d8:	f7ff fcfc 	bl	8004cd4 <TIM_OC4_SetConfig>
    break;
 80052dc:	e7c9      	b.n	8005272 <HAL_TIM_OC_ConfigChannel+0xaa>
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	01001111 	.word	0x01001111
 80052e4:	00000b77 	.word	0x00000b77
 80052e8:	0800706c 	.word	0x0800706c
 80052ec:	00000b78 	.word	0x00000b78
 80052f0:	00000b79 	.word	0x00000b79
 80052f4:	40012c00 	.word	0x40012c00
 80052f8:	40000400 	.word	0x40000400
 80052fc:	40002000 	.word	0x40002000
 8005300:	40014400 	.word	0x40014400
 8005304:	40014800 	.word	0x40014800
 8005308:	00000b84 	.word	0x00000b84
 800530c:	00000b8c 	.word	0x00000b8c
 8005310:	00000b94 	.word	0x00000b94
 8005314:	00000b9c 	.word	0x00000b9c

08005318 <HAL_TIM_PWM_ConfigChannel>:
{
 8005318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800531a:	0007      	movs	r7, r0
 800531c:	373c      	adds	r7, #60	; 0x3c
 800531e:	783b      	ldrb	r3, [r7, #0]
{
 8005320:	0004      	movs	r4, r0
 8005322:	000d      	movs	r5, r1
 8005324:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 8005326:	2002      	movs	r0, #2
 8005328:	2b01      	cmp	r3, #1
 800532a:	d061      	beq.n	80053f0 <HAL_TIM_PWM_ConfigChannel+0xd8>
 800532c:	2301      	movs	r3, #1
 800532e:	703b      	strb	r3, [r7, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
 8005330:	2a18      	cmp	r2, #24
 8005332:	d803      	bhi.n	800533c <HAL_TIM_PWM_ConfigChannel+0x24>
 8005334:	4a5a      	ldr	r2, [pc, #360]	; (80054a0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005336:	40f2      	lsrs	r2, r6
 8005338:	4393      	bics	r3, r2
 800533a:	d003      	beq.n	8005344 <HAL_TIM_PWM_ConfigChannel+0x2c>
 800533c:	4959      	ldr	r1, [pc, #356]	; (80054a4 <HAL_TIM_PWM_ConfigChannel+0x18c>)
 800533e:	485a      	ldr	r0, [pc, #360]	; (80054a8 <HAL_TIM_PWM_ConfigChannel+0x190>)
 8005340:	f7fd fa3b 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8005344:	2310      	movs	r3, #16
 8005346:	682a      	ldr	r2, [r5, #0]
 8005348:	439a      	bics	r2, r3
 800534a:	2a60      	cmp	r2, #96	; 0x60
 800534c:	d003      	beq.n	8005356 <HAL_TIM_PWM_ConfigChannel+0x3e>
 800534e:	4957      	ldr	r1, [pc, #348]	; (80054ac <HAL_TIM_PWM_ConfigChannel+0x194>)
 8005350:	4855      	ldr	r0, [pc, #340]	; (80054a8 <HAL_TIM_PWM_ConfigChannel+0x190>)
 8005352:	f7fd fa32 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8005356:	2302      	movs	r3, #2
 8005358:	68aa      	ldr	r2, [r5, #8]
 800535a:	439a      	bics	r2, r3
 800535c:	d004      	beq.n	8005368 <HAL_TIM_PWM_ConfigChannel+0x50>
 800535e:	21c2      	movs	r1, #194	; 0xc2
 8005360:	4851      	ldr	r0, [pc, #324]	; (80054a8 <HAL_TIM_PWM_ConfigChannel+0x190>)
 8005362:	0109      	lsls	r1, r1, #4
 8005364:	f7fd fa29 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8005368:	2304      	movs	r3, #4
 800536a:	692a      	ldr	r2, [r5, #16]
 800536c:	439a      	bics	r2, r3
 800536e:	d003      	beq.n	8005378 <HAL_TIM_PWM_ConfigChannel+0x60>
 8005370:	494f      	ldr	r1, [pc, #316]	; (80054b0 <HAL_TIM_PWM_ConfigChannel+0x198>)
 8005372:	484d      	ldr	r0, [pc, #308]	; (80054a8 <HAL_TIM_PWM_ConfigChannel+0x190>)
 8005374:	f7fd fa21 	bl	80027ba <assert_failed>
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	0023      	movs	r3, r4
 800537a:	333d      	adds	r3, #61	; 0x3d
 800537c:	9301      	str	r3, [sp, #4]
 800537e:	2302      	movs	r3, #2
 8005380:	9a01      	ldr	r2, [sp, #4]
 8005382:	7013      	strb	r3, [r2, #0]
  switch (Channel)
 8005384:	2e0c      	cmp	r6, #12
 8005386:	d82e      	bhi.n	80053e6 <HAL_TIM_PWM_ConfigChannel+0xce>
 8005388:	0030      	movs	r0, r6
 800538a:	f7fa febd 	bl	8000108 <__gnu_thumb1_case_uqi>
 800538e:	2c07      	.short	0x2c07
 8005390:	2c322c2c 	.word	0x2c322c2c
 8005394:	2c4f2c2c 	.word	0x2c4f2c2c
 8005398:	2c2c      	.short	0x2c2c
 800539a:	6c          	.byte	0x6c
 800539b:	00          	.byte	0x00
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	4a45      	ldr	r2, [pc, #276]	; (80054b4 <HAL_TIM_PWM_ConfigChannel+0x19c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00f      	beq.n	80053c4 <HAL_TIM_PWM_ConfigChannel+0xac>
 80053a4:	4a44      	ldr	r2, [pc, #272]	; (80054b8 <HAL_TIM_PWM_ConfigChannel+0x1a0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00c      	beq.n	80053c4 <HAL_TIM_PWM_ConfigChannel+0xac>
 80053aa:	4a44      	ldr	r2, [pc, #272]	; (80054bc <HAL_TIM_PWM_ConfigChannel+0x1a4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d009      	beq.n	80053c4 <HAL_TIM_PWM_ConfigChannel+0xac>
 80053b0:	4a43      	ldr	r2, [pc, #268]	; (80054c0 <HAL_TIM_PWM_ConfigChannel+0x1a8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d006      	beq.n	80053c4 <HAL_TIM_PWM_ConfigChannel+0xac>
 80053b6:	4a43      	ldr	r2, [pc, #268]	; (80054c4 <HAL_TIM_PWM_ConfigChannel+0x1ac>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d003      	beq.n	80053c4 <HAL_TIM_PWM_ConfigChannel+0xac>
 80053bc:	4942      	ldr	r1, [pc, #264]	; (80054c8 <HAL_TIM_PWM_ConfigChannel+0x1b0>)
 80053be:	483a      	ldr	r0, [pc, #232]	; (80054a8 <HAL_TIM_PWM_ConfigChannel+0x190>)
 80053c0:	f7fd f9fb 	bl	80027ba <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053c4:	0029      	movs	r1, r5
 80053c6:	6820      	ldr	r0, [r4, #0]
 80053c8:	f7ff fbb8 	bl	8004b3c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053cc:	2208      	movs	r2, #8
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	6999      	ldr	r1, [r3, #24]
 80053d2:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053d4:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	438a      	bics	r2, r1
 80053dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053de:	699a      	ldr	r2, [r3, #24]
 80053e0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053e2:	430a      	orrs	r2, r1
 80053e4:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80053e6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80053e8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80053ea:	9a01      	ldr	r2, [sp, #4]
 80053ec:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(htim);
 80053ee:	7038      	strb	r0, [r7, #0]
}
 80053f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	4a2f      	ldr	r2, [pc, #188]	; (80054b4 <HAL_TIM_PWM_ConfigChannel+0x19c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d006      	beq.n	8005408 <HAL_TIM_PWM_ConfigChannel+0xf0>
 80053fa:	4a2f      	ldr	r2, [pc, #188]	; (80054b8 <HAL_TIM_PWM_ConfigChannel+0x1a0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d003      	beq.n	8005408 <HAL_TIM_PWM_ConfigChannel+0xf0>
 8005400:	4932      	ldr	r1, [pc, #200]	; (80054cc <HAL_TIM_PWM_ConfigChannel+0x1b4>)
 8005402:	4829      	ldr	r0, [pc, #164]	; (80054a8 <HAL_TIM_PWM_ConfigChannel+0x190>)
 8005404:	f7fd f9d9 	bl	80027ba <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005408:	0029      	movs	r1, r5
 800540a:	6820      	ldr	r0, [r4, #0]
 800540c:	f7ff fe78 	bl	8005100 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005410:	2280      	movs	r2, #128	; 0x80
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	0112      	lsls	r2, r2, #4
 8005416:	6999      	ldr	r1, [r3, #24]
 8005418:	430a      	orrs	r2, r1
 800541a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800541c:	699a      	ldr	r2, [r3, #24]
 800541e:	492c      	ldr	r1, [pc, #176]	; (80054d0 <HAL_TIM_PWM_ConfigChannel+0x1b8>)
 8005420:	400a      	ands	r2, r1
 8005422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005424:	692a      	ldr	r2, [r5, #16]
 8005426:	6999      	ldr	r1, [r3, #24]
 8005428:	0212      	lsls	r2, r2, #8
 800542a:	e7da      	b.n	80053e2 <HAL_TIM_PWM_ConfigChannel+0xca>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	4a21      	ldr	r2, [pc, #132]	; (80054b4 <HAL_TIM_PWM_ConfigChannel+0x19c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d006      	beq.n	8005442 <HAL_TIM_PWM_ConfigChannel+0x12a>
 8005434:	4a20      	ldr	r2, [pc, #128]	; (80054b8 <HAL_TIM_PWM_ConfigChannel+0x1a0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d003      	beq.n	8005442 <HAL_TIM_PWM_ConfigChannel+0x12a>
 800543a:	4926      	ldr	r1, [pc, #152]	; (80054d4 <HAL_TIM_PWM_ConfigChannel+0x1bc>)
 800543c:	481a      	ldr	r0, [pc, #104]	; (80054a8 <HAL_TIM_PWM_ConfigChannel+0x190>)
 800543e:	f7fd f9bc 	bl	80027ba <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005442:	0029      	movs	r1, r5
 8005444:	6820      	ldr	r0, [r4, #0]
 8005446:	f7ff fbdd 	bl	8004c04 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800544a:	2208      	movs	r2, #8
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	69d9      	ldr	r1, [r3, #28]
 8005450:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005452:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005456:	69da      	ldr	r2, [r3, #28]
 8005458:	438a      	bics	r2, r1
 800545a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800545c:	69da      	ldr	r2, [r3, #28]
 800545e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005460:	430a      	orrs	r2, r1
 8005462:	61da      	str	r2, [r3, #28]
    break;
 8005464:	e7bf      	b.n	80053e6 <HAL_TIM_PWM_ConfigChannel+0xce>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	4a12      	ldr	r2, [pc, #72]	; (80054b4 <HAL_TIM_PWM_ConfigChannel+0x19c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d006      	beq.n	800547c <HAL_TIM_PWM_ConfigChannel+0x164>
 800546e:	4a12      	ldr	r2, [pc, #72]	; (80054b8 <HAL_TIM_PWM_ConfigChannel+0x1a0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <HAL_TIM_PWM_ConfigChannel+0x164>
 8005474:	4918      	ldr	r1, [pc, #96]	; (80054d8 <HAL_TIM_PWM_ConfigChannel+0x1c0>)
 8005476:	480c      	ldr	r0, [pc, #48]	; (80054a8 <HAL_TIM_PWM_ConfigChannel+0x190>)
 8005478:	f7fd f99f 	bl	80027ba <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800547c:	0029      	movs	r1, r5
 800547e:	6820      	ldr	r0, [r4, #0]
 8005480:	f7ff fc28 	bl	8004cd4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005484:	2280      	movs	r2, #128	; 0x80
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	0112      	lsls	r2, r2, #4
 800548a:	69d9      	ldr	r1, [r3, #28]
 800548c:	430a      	orrs	r2, r1
 800548e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005490:	69da      	ldr	r2, [r3, #28]
 8005492:	490f      	ldr	r1, [pc, #60]	; (80054d0 <HAL_TIM_PWM_ConfigChannel+0x1b8>)
 8005494:	400a      	ands	r2, r1
 8005496:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005498:	692a      	ldr	r2, [r5, #16]
 800549a:	69d9      	ldr	r1, [r3, #28]
 800549c:	0212      	lsls	r2, r2, #8
 800549e:	e7df      	b.n	8005460 <HAL_TIM_PWM_ConfigChannel+0x148>
 80054a0:	01001111 	.word	0x01001111
 80054a4:	00000c1e 	.word	0x00000c1e
 80054a8:	0800706c 	.word	0x0800706c
 80054ac:	00000c1f 	.word	0x00000c1f
 80054b0:	00000c21 	.word	0x00000c21
 80054b4:	40012c00 	.word	0x40012c00
 80054b8:	40000400 	.word	0x40000400
 80054bc:	40002000 	.word	0x40002000
 80054c0:	40014400 	.word	0x40014400
 80054c4:	40014800 	.word	0x40014800
 80054c8:	00000c29 	.word	0x00000c29
 80054cc:	00000c38 	.word	0x00000c38
 80054d0:	fffffbff 	.word	0xfffffbff
 80054d4:	00000c47 	.word	0x00000c47
 80054d8:	00000c56 	.word	0x00000c56

080054dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054dc:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80054de:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e0:	4d03      	ldr	r5, [pc, #12]	; (80054f0 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054e2:	430a      	orrs	r2, r1
 80054e4:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e6:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054e8:	4313      	orrs	r3, r2
 80054ea:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ec:	6083      	str	r3, [r0, #8]
}
 80054ee:	bd30      	pop	{r4, r5, pc}
 80054f0:	ffff00ff 	.word	0xffff00ff

080054f4 <HAL_TIM_ConfigClockSource>:
{
 80054f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80054f6:	0006      	movs	r6, r0
 80054f8:	2302      	movs	r3, #2
 80054fa:	363c      	adds	r6, #60	; 0x3c
 80054fc:	7832      	ldrb	r2, [r6, #0]
{
 80054fe:	0005      	movs	r5, r0
 8005500:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8005502:	0018      	movs	r0, r3
 8005504:	2a01      	cmp	r2, #1
 8005506:	d028      	beq.n	800555a <HAL_TIM_ConfigClockSource+0x66>
  htim->State = HAL_TIM_STATE_BUSY;
 8005508:	002f      	movs	r7, r5
  __HAL_LOCK(htim);
 800550a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800550c:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 800550e:	7032      	strb	r2, [r6, #0]
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005510:	4aa0      	ldr	r2, [pc, #640]	; (8005794 <HAL_TIM_ConfigClockSource+0x2a0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005512:	703b      	strb	r3, [r7, #0]
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005514:	680b      	ldr	r3, [r1, #0]
 8005516:	1899      	adds	r1, r3, r2
 8005518:	4a9f      	ldr	r2, [pc, #636]	; (8005798 <HAL_TIM_ConfigClockSource+0x2a4>)
 800551a:	4211      	tst	r1, r2
 800551c:	d008      	beq.n	8005530 <HAL_TIM_ConfigClockSource+0x3c>
 800551e:	2230      	movs	r2, #48	; 0x30
 8005520:	4393      	bics	r3, r2
 8005522:	d005      	beq.n	8005530 <HAL_TIM_ConfigClockSource+0x3c>
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d003      	beq.n	8005530 <HAL_TIM_ConfigClockSource+0x3c>
 8005528:	499c      	ldr	r1, [pc, #624]	; (800579c <HAL_TIM_ConfigClockSource+0x2a8>)
 800552a:	489d      	ldr	r0, [pc, #628]	; (80057a0 <HAL_TIM_ConfigClockSource+0x2ac>)
 800552c:	f7fd f945 	bl	80027ba <assert_failed>
  tmpsmcr = htim->Instance->SMCR;
 8005530:	682b      	ldr	r3, [r5, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005532:	499c      	ldr	r1, [pc, #624]	; (80057a4 <HAL_TIM_ConfigClockSource+0x2b0>)
  tmpsmcr = htim->Instance->SMCR;
 8005534:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005536:	400a      	ands	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 8005538:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800553a:	6822      	ldr	r2, [r4, #0]
 800553c:	2a40      	cmp	r2, #64	; 0x40
 800553e:	d100      	bne.n	8005542 <HAL_TIM_ConfigClockSource+0x4e>
 8005540:	e15c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x308>
 8005542:	d821      	bhi.n	8005588 <HAL_TIM_ConfigClockSource+0x94>
 8005544:	2a10      	cmp	r2, #16
 8005546:	d100      	bne.n	800554a <HAL_TIM_ConfigClockSource+0x56>
 8005548:	e1a3      	b.n	8005892 <HAL_TIM_ConfigClockSource+0x39e>
 800554a:	d807      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x68>
 800554c:	2a00      	cmp	r2, #0
 800554e:	d100      	bne.n	8005552 <HAL_TIM_ConfigClockSource+0x5e>
 8005550:	e18c      	b.n	800586c <HAL_TIM_ConfigClockSource+0x378>
  htim->State = HAL_TIM_STATE_READY;
 8005552:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005554:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005556:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 8005558:	7030      	strb	r0, [r6, #0]
}
 800555a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 800555c:	2a20      	cmp	r2, #32
 800555e:	d100      	bne.n	8005562 <HAL_TIM_ConfigClockSource+0x6e>
 8005560:	e1a8      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x3c0>
 8005562:	2a30      	cmp	r2, #48	; 0x30
 8005564:	d1f5      	bne.n	8005552 <HAL_TIM_ConfigClockSource+0x5e>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8005566:	4a90      	ldr	r2, [pc, #576]	; (80057a8 <HAL_TIM_ConfigClockSource+0x2b4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d006      	beq.n	800557a <HAL_TIM_ConfigClockSource+0x86>
 800556c:	4a8f      	ldr	r2, [pc, #572]	; (80057ac <HAL_TIM_ConfigClockSource+0x2b8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <HAL_TIM_ConfigClockSource+0x86>
 8005572:	498f      	ldr	r1, [pc, #572]	; (80057b0 <HAL_TIM_ConfigClockSource+0x2bc>)
 8005574:	488a      	ldr	r0, [pc, #552]	; (80057a0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8005576:	f7fd f920 	bl	80027ba <assert_failed>
   tmpsmcr &= ~TIM_SMCR_TS;
 800557a:	2270      	movs	r2, #112	; 0x70
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800557c:	6829      	ldr	r1, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 800557e:	688b      	ldr	r3, [r1, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8005580:	4393      	bics	r3, r2
 8005582:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8005584:	2337      	movs	r3, #55	; 0x37
 8005586:	e181      	b.n	800588c <HAL_TIM_ConfigClockSource+0x398>
  switch (sClockSourceConfig->ClockSource)
 8005588:	2a70      	cmp	r2, #112	; 0x70
 800558a:	d100      	bne.n	800558e <HAL_TIM_ConfigClockSource+0x9a>
 800558c:	e093      	b.n	80056b6 <HAL_TIM_ConfigClockSource+0x1c2>
 800558e:	d83d      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0x118>
 8005590:	2a50      	cmp	r2, #80	; 0x50
 8005592:	d100      	bne.n	8005596 <HAL_TIM_ConfigClockSource+0xa2>
 8005594:	e0c2      	b.n	800571c <HAL_TIM_ConfigClockSource+0x228>
 8005596:	2a60      	cmp	r2, #96	; 0x60
 8005598:	d1db      	bne.n	8005552 <HAL_TIM_ConfigClockSource+0x5e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800559a:	4a83      	ldr	r2, [pc, #524]	; (80057a8 <HAL_TIM_ConfigClockSource+0x2b4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d006      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0xba>
 80055a0:	4a82      	ldr	r2, [pc, #520]	; (80057ac <HAL_TIM_ConfigClockSource+0x2b8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d003      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0xba>
 80055a6:	4983      	ldr	r1, [pc, #524]	; (80057b4 <HAL_TIM_ConfigClockSource+0x2c0>)
 80055a8:	487d      	ldr	r0, [pc, #500]	; (80057a0 <HAL_TIM_ConfigClockSource+0x2ac>)
 80055aa:	f7fd f906 	bl	80027ba <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80055ae:	2280      	movs	r2, #128	; 0x80
 80055b0:	6863      	ldr	r3, [r4, #4]
 80055b2:	0212      	lsls	r2, r2, #8
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d009      	beq.n	80055cc <HAL_TIM_ConfigClockSource+0xd8>
 80055b8:	2202      	movs	r2, #2
 80055ba:	0019      	movs	r1, r3
 80055bc:	4391      	bics	r1, r2
 80055be:	d005      	beq.n	80055cc <HAL_TIM_ConfigClockSource+0xd8>
 80055c0:	2b0a      	cmp	r3, #10
 80055c2:	d003      	beq.n	80055cc <HAL_TIM_ConfigClockSource+0xd8>
 80055c4:	497c      	ldr	r1, [pc, #496]	; (80057b8 <HAL_TIM_ConfigClockSource+0x2c4>)
 80055c6:	4876      	ldr	r0, [pc, #472]	; (80057a0 <HAL_TIM_ConfigClockSource+0x2ac>)
 80055c8:	f7fd f8f7 	bl	80027ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80055cc:	68e3      	ldr	r3, [r4, #12]
 80055ce:	2b0f      	cmp	r3, #15
 80055d0:	d903      	bls.n	80055da <HAL_TIM_ConfigClockSource+0xe6>
 80055d2:	497a      	ldr	r1, [pc, #488]	; (80057bc <HAL_TIM_ConfigClockSource+0x2c8>)
 80055d4:	4872      	ldr	r0, [pc, #456]	; (80057a0 <HAL_TIM_ConfigClockSource+0x2ac>)
 80055d6:	f7fd f8f0 	bl	80027ba <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055da:	6862      	ldr	r2, [r4, #4]
 80055dc:	68e1      	ldr	r1, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055de:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055e0:	682b      	ldr	r3, [r5, #0]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055e2:	4d77      	ldr	r5, [pc, #476]	; (80057c0 <HAL_TIM_ConfigClockSource+0x2cc>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e4:	6a18      	ldr	r0, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055e6:	0309      	lsls	r1, r1, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e8:	43a0      	bics	r0, r4
 80055ea:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ec:	699c      	ldr	r4, [r3, #24]
  tmpccer = TIMx->CCER;
 80055ee:	6a18      	ldr	r0, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055f0:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055f2:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055f4:	24a0      	movs	r4, #160	; 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 80055f6:	6199      	str	r1, [r3, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 80055f8:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055fa:	43a0      	bics	r0, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 80055fc:	0112      	lsls	r2, r2, #4
 80055fe:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 8005600:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8005602:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8005604:	438a      	bics	r2, r1
 8005606:	0011      	movs	r1, r2
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8005608:	2267      	movs	r2, #103	; 0x67
 800560a:	e0bf      	b.n	800578c <HAL_TIM_ConfigClockSource+0x298>
  switch (sClockSourceConfig->ClockSource)
 800560c:	2180      	movs	r1, #128	; 0x80
 800560e:	0149      	lsls	r1, r1, #5
 8005610:	428a      	cmp	r2, r1
 8005612:	d037      	beq.n	8005684 <HAL_TIM_ConfigClockSource+0x190>
 8005614:	2180      	movs	r1, #128	; 0x80
 8005616:	0189      	lsls	r1, r1, #6
 8005618:	428a      	cmp	r2, r1
 800561a:	d19a      	bne.n	8005552 <HAL_TIM_ConfigClockSource+0x5e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800561c:	4a62      	ldr	r2, [pc, #392]	; (80057a8 <HAL_TIM_ConfigClockSource+0x2b4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d006      	beq.n	8005630 <HAL_TIM_ConfigClockSource+0x13c>
 8005622:	4a62      	ldr	r2, [pc, #392]	; (80057ac <HAL_TIM_ConfigClockSource+0x2b8>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d003      	beq.n	8005630 <HAL_TIM_ConfigClockSource+0x13c>
 8005628:	4966      	ldr	r1, [pc, #408]	; (80057c4 <HAL_TIM_ConfigClockSource+0x2d0>)
 800562a:	485d      	ldr	r0, [pc, #372]	; (80057a0 <HAL_TIM_ConfigClockSource+0x2ac>)
 800562c:	f7fd f8c5 	bl	80027ba <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005630:	4b65      	ldr	r3, [pc, #404]	; (80057c8 <HAL_TIM_ConfigClockSource+0x2d4>)
 8005632:	68a2      	ldr	r2, [r4, #8]
 8005634:	421a      	tst	r2, r3
 8005636:	d003      	beq.n	8005640 <HAL_TIM_ConfigClockSource+0x14c>
 8005638:	4964      	ldr	r1, [pc, #400]	; (80057cc <HAL_TIM_ConfigClockSource+0x2d8>)
 800563a:	4859      	ldr	r0, [pc, #356]	; (80057a0 <HAL_TIM_ConfigClockSource+0x2ac>)
 800563c:	f7fd f8bd 	bl	80027ba <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005640:	2280      	movs	r2, #128	; 0x80
 8005642:	6863      	ldr	r3, [r4, #4]
 8005644:	0212      	lsls	r2, r2, #8
 8005646:	4293      	cmp	r3, r2
 8005648:	d00a      	beq.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 800564a:	2202      	movs	r2, #2
 800564c:	0019      	movs	r1, r3
 800564e:	4391      	bics	r1, r2
 8005650:	d006      	beq.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 8005652:	2b0a      	cmp	r3, #10
 8005654:	d004      	beq.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 8005656:	21ff      	movs	r1, #255	; 0xff
 8005658:	4851      	ldr	r0, [pc, #324]	; (80057a0 <HAL_TIM_ConfigClockSource+0x2ac>)
 800565a:	0109      	lsls	r1, r1, #4
 800565c:	f7fd f8ad 	bl	80027ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005660:	68e3      	ldr	r3, [r4, #12]
 8005662:	2b0f      	cmp	r3, #15
 8005664:	d903      	bls.n	800566e <HAL_TIM_ConfigClockSource+0x17a>
 8005666:	495a      	ldr	r1, [pc, #360]	; (80057d0 <HAL_TIM_ConfigClockSource+0x2dc>)
 8005668:	484d      	ldr	r0, [pc, #308]	; (80057a0 <HAL_TIM_ConfigClockSource+0x2ac>)
 800566a:	f7fd f8a6 	bl	80027ba <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800566e:	68e3      	ldr	r3, [r4, #12]
 8005670:	6862      	ldr	r2, [r4, #4]
 8005672:	68a1      	ldr	r1, [r4, #8]
 8005674:	6828      	ldr	r0, [r5, #0]
 8005676:	f7ff ff31 	bl	80054dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	682a      	ldr	r2, [r5, #0]
 800567e:	01db      	lsls	r3, r3, #7
 8005680:	6891      	ldr	r1, [r2, #8]
 8005682:	e049      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x224>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005684:	4a48      	ldr	r2, [pc, #288]	; (80057a8 <HAL_TIM_ConfigClockSource+0x2b4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00f      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0x1b6>
 800568a:	4a48      	ldr	r2, [pc, #288]	; (80057ac <HAL_TIM_ConfigClockSource+0x2b8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00c      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0x1b6>
 8005690:	4a50      	ldr	r2, [pc, #320]	; (80057d4 <HAL_TIM_ConfigClockSource+0x2e0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d009      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0x1b6>
 8005696:	4a50      	ldr	r2, [pc, #320]	; (80057d8 <HAL_TIM_ConfigClockSource+0x2e4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d006      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0x1b6>
 800569c:	4a4f      	ldr	r2, [pc, #316]	; (80057dc <HAL_TIM_ConfigClockSource+0x2e8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d003      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0x1b6>
 80056a2:	494f      	ldr	r1, [pc, #316]	; (80057e0 <HAL_TIM_ConfigClockSource+0x2ec>)
 80056a4:	483e      	ldr	r0, [pc, #248]	; (80057a0 <HAL_TIM_ConfigClockSource+0x2ac>)
 80056a6:	f7fd f888 	bl	80027ba <assert_failed>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80056aa:	2107      	movs	r1, #7
 80056ac:	682a      	ldr	r2, [r5, #0]
 80056ae:	6893      	ldr	r3, [r2, #8]
 80056b0:	438b      	bics	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80056b2:	6093      	str	r3, [r2, #8]
    break;
 80056b4:	e74d      	b.n	8005552 <HAL_TIM_ConfigClockSource+0x5e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80056b6:	4a3c      	ldr	r2, [pc, #240]	; (80057a8 <HAL_TIM_ConfigClockSource+0x2b4>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d006      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x1d6>
 80056bc:	4a3b      	ldr	r2, [pc, #236]	; (80057ac <HAL_TIM_ConfigClockSource+0x2b8>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d003      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x1d6>
 80056c2:	4948      	ldr	r1, [pc, #288]	; (80057e4 <HAL_TIM_ConfigClockSource+0x2f0>)
 80056c4:	4836      	ldr	r0, [pc, #216]	; (80057a0 <HAL_TIM_ConfigClockSource+0x2ac>)
 80056c6:	f7fd f878 	bl	80027ba <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80056ca:	4b3f      	ldr	r3, [pc, #252]	; (80057c8 <HAL_TIM_ConfigClockSource+0x2d4>)
 80056cc:	68a2      	ldr	r2, [r4, #8]
 80056ce:	421a      	tst	r2, r3
 80056d0:	d003      	beq.n	80056da <HAL_TIM_ConfigClockSource+0x1e6>
 80056d2:	4945      	ldr	r1, [pc, #276]	; (80057e8 <HAL_TIM_ConfigClockSource+0x2f4>)
 80056d4:	4832      	ldr	r0, [pc, #200]	; (80057a0 <HAL_TIM_ConfigClockSource+0x2ac>)
 80056d6:	f7fd f870 	bl	80027ba <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80056da:	2280      	movs	r2, #128	; 0x80
 80056dc:	6863      	ldr	r3, [r4, #4]
 80056de:	0212      	lsls	r2, r2, #8
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d009      	beq.n	80056f8 <HAL_TIM_ConfigClockSource+0x204>
 80056e4:	2202      	movs	r2, #2
 80056e6:	0019      	movs	r1, r3
 80056e8:	4391      	bics	r1, r2
 80056ea:	d005      	beq.n	80056f8 <HAL_TIM_ConfigClockSource+0x204>
 80056ec:	2b0a      	cmp	r3, #10
 80056ee:	d003      	beq.n	80056f8 <HAL_TIM_ConfigClockSource+0x204>
 80056f0:	493e      	ldr	r1, [pc, #248]	; (80057ec <HAL_TIM_ConfigClockSource+0x2f8>)
 80056f2:	482b      	ldr	r0, [pc, #172]	; (80057a0 <HAL_TIM_ConfigClockSource+0x2ac>)
 80056f4:	f7fd f861 	bl	80027ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80056f8:	68e3      	ldr	r3, [r4, #12]
 80056fa:	2b0f      	cmp	r3, #15
 80056fc:	d903      	bls.n	8005706 <HAL_TIM_ConfigClockSource+0x212>
 80056fe:	493c      	ldr	r1, [pc, #240]	; (80057f0 <HAL_TIM_ConfigClockSource+0x2fc>)
 8005700:	4827      	ldr	r0, [pc, #156]	; (80057a0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8005702:	f7fd f85a 	bl	80027ba <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8005706:	68e3      	ldr	r3, [r4, #12]
 8005708:	6862      	ldr	r2, [r4, #4]
 800570a:	68a1      	ldr	r1, [r4, #8]
 800570c:	6828      	ldr	r0, [r5, #0]
 800570e:	f7ff fee5 	bl	80054dc <TIM_ETR_SetConfig>
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005712:	2177      	movs	r1, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8005714:	682a      	ldr	r2, [r5, #0]
 8005716:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005718:	430b      	orrs	r3, r1
 800571a:	e7ca      	b.n	80056b2 <HAL_TIM_ConfigClockSource+0x1be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800571c:	4a22      	ldr	r2, [pc, #136]	; (80057a8 <HAL_TIM_ConfigClockSource+0x2b4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d007      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x23e>
 8005722:	4a22      	ldr	r2, [pc, #136]	; (80057ac <HAL_TIM_ConfigClockSource+0x2b8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d004      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x23e>
 8005728:	2180      	movs	r1, #128	; 0x80
 800572a:	481d      	ldr	r0, [pc, #116]	; (80057a0 <HAL_TIM_ConfigClockSource+0x2ac>)
 800572c:	0149      	lsls	r1, r1, #5
 800572e:	f7fd f844 	bl	80027ba <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005732:	2280      	movs	r2, #128	; 0x80
 8005734:	6863      	ldr	r3, [r4, #4]
 8005736:	0212      	lsls	r2, r2, #8
 8005738:	4293      	cmp	r3, r2
 800573a:	d009      	beq.n	8005750 <HAL_TIM_ConfigClockSource+0x25c>
 800573c:	2202      	movs	r2, #2
 800573e:	0019      	movs	r1, r3
 8005740:	4391      	bics	r1, r2
 8005742:	d005      	beq.n	8005750 <HAL_TIM_ConfigClockSource+0x25c>
 8005744:	2b0a      	cmp	r3, #10
 8005746:	d003      	beq.n	8005750 <HAL_TIM_ConfigClockSource+0x25c>
 8005748:	492a      	ldr	r1, [pc, #168]	; (80057f4 <HAL_TIM_ConfigClockSource+0x300>)
 800574a:	4815      	ldr	r0, [pc, #84]	; (80057a0 <HAL_TIM_ConfigClockSource+0x2ac>)
 800574c:	f7fd f835 	bl	80027ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005750:	68e3      	ldr	r3, [r4, #12]
 8005752:	2b0f      	cmp	r3, #15
 8005754:	d903      	bls.n	800575e <HAL_TIM_ConfigClockSource+0x26a>
 8005756:	4928      	ldr	r1, [pc, #160]	; (80057f8 <HAL_TIM_ConfigClockSource+0x304>)
 8005758:	4811      	ldr	r0, [pc, #68]	; (80057a0 <HAL_TIM_ConfigClockSource+0x2ac>)
 800575a:	f7fd f82e 	bl	80027ba <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800575e:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005760:	2501      	movs	r5, #1
  tmpccer = TIMx->CCER;
 8005762:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005764:	6861      	ldr	r1, [r4, #4]
 8005766:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005768:	6a1c      	ldr	r4, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800576a:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800576c:	43ac      	bics	r4, r5
 800576e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005770:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005772:	35ef      	adds	r5, #239	; 0xef
 8005774:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005776:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005778:	240a      	movs	r4, #10
 800577a:	43a0      	bics	r0, r4
  tmpccer |= TIM_ICPolarity;
 800577c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800577e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005780:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8005782:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8005784:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8005786:	438a      	bics	r2, r1
 8005788:	0011      	movs	r1, r2
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800578a:	2257      	movs	r2, #87	; 0x57
 800578c:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 800578e:	609a      	str	r2, [r3, #8]
 8005790:	e6df      	b.n	8005552 <HAL_TIM_ConfigClockSource+0x5e>
 8005792:	46c0      	nop			; (mov r8, r8)
 8005794:	fffff000 	.word	0xfffff000
 8005798:	ffffefff 	.word	0xffffefff
 800579c:	00000fbd 	.word	0x00000fbd
 80057a0:	0800706c 	.word	0x0800706c
 80057a4:	ffff0088 	.word	0xffff0088
 80057a8:	40012c00 	.word	0x40012c00
 80057ac:	40000400 	.word	0x40000400
 80057b0:	00001045 	.word	0x00001045
 80057b4:	0000100f 	.word	0x0000100f
 80057b8:	00001012 	.word	0x00001012
 80057bc:	00001013 	.word	0x00001013
 80057c0:	ffff0fff 	.word	0xffff0fff
 80057c4:	00000fec 	.word	0x00000fec
 80057c8:	ffffcfff 	.word	0xffffcfff
 80057cc:	00000fef 	.word	0x00000fef
 80057d0:	00000ff1 	.word	0x00000ff1
 80057d4:	40002000 	.word	0x40002000
 80057d8:	40014400 	.word	0x40014400
 80057dc:	40014800 	.word	0x40014800
 80057e0:	00000fc9 	.word	0x00000fc9
 80057e4:	00000fd2 	.word	0x00000fd2
 80057e8:	00000fd5 	.word	0x00000fd5
 80057ec:	00000fd6 	.word	0x00000fd6
 80057f0:	00000fd7 	.word	0x00000fd7
 80057f4:	00001003 	.word	0x00001003
 80057f8:	00001004 	.word	0x00001004
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80057fc:	4a36      	ldr	r2, [pc, #216]	; (80058d8 <HAL_TIM_ConfigClockSource+0x3e4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d006      	beq.n	8005810 <HAL_TIM_ConfigClockSource+0x31c>
 8005802:	4a36      	ldr	r2, [pc, #216]	; (80058dc <HAL_TIM_ConfigClockSource+0x3e8>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d003      	beq.n	8005810 <HAL_TIM_ConfigClockSource+0x31c>
 8005808:	4935      	ldr	r1, [pc, #212]	; (80058e0 <HAL_TIM_ConfigClockSource+0x3ec>)
 800580a:	4836      	ldr	r0, [pc, #216]	; (80058e4 <HAL_TIM_ConfigClockSource+0x3f0>)
 800580c:	f7fc ffd5 	bl	80027ba <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005810:	2280      	movs	r2, #128	; 0x80
 8005812:	6863      	ldr	r3, [r4, #4]
 8005814:	0212      	lsls	r2, r2, #8
 8005816:	4293      	cmp	r3, r2
 8005818:	d009      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x33a>
 800581a:	2202      	movs	r2, #2
 800581c:	0019      	movs	r1, r3
 800581e:	4391      	bics	r1, r2
 8005820:	d005      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x33a>
 8005822:	2b0a      	cmp	r3, #10
 8005824:	d003      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x33a>
 8005826:	4930      	ldr	r1, [pc, #192]	; (80058e8 <HAL_TIM_ConfigClockSource+0x3f4>)
 8005828:	482e      	ldr	r0, [pc, #184]	; (80058e4 <HAL_TIM_ConfigClockSource+0x3f0>)
 800582a:	f7fc ffc6 	bl	80027ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800582e:	68e3      	ldr	r3, [r4, #12]
 8005830:	2b0f      	cmp	r3, #15
 8005832:	d903      	bls.n	800583c <HAL_TIM_ConfigClockSource+0x348>
 8005834:	492d      	ldr	r1, [pc, #180]	; (80058ec <HAL_TIM_ConfigClockSource+0x3f8>)
 8005836:	482b      	ldr	r0, [pc, #172]	; (80058e4 <HAL_TIM_ConfigClockSource+0x3f0>)
 8005838:	f7fc ffbf 	bl	80027ba <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800583c:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800583e:	2501      	movs	r5, #1
  tmpccer = TIMx->CCER;
 8005840:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005842:	6861      	ldr	r1, [r4, #4]
 8005844:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005846:	6a1c      	ldr	r4, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005848:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800584a:	43ac      	bics	r4, r5
 800584c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800584e:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005850:	35ef      	adds	r5, #239	; 0xef
 8005852:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005854:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005856:	240a      	movs	r4, #10
 8005858:	43a0      	bics	r0, r4
  tmpccer |= TIM_ICPolarity;
 800585a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800585c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800585e:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8005860:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8005862:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8005864:	438a      	bics	r2, r1
 8005866:	0011      	movs	r1, r2
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8005868:	2247      	movs	r2, #71	; 0x47
 800586a:	e78f      	b.n	800578c <HAL_TIM_ConfigClockSource+0x298>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800586c:	4a1a      	ldr	r2, [pc, #104]	; (80058d8 <HAL_TIM_ConfigClockSource+0x3e4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d006      	beq.n	8005880 <HAL_TIM_ConfigClockSource+0x38c>
 8005872:	4a1a      	ldr	r2, [pc, #104]	; (80058dc <HAL_TIM_ConfigClockSource+0x3e8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <HAL_TIM_ConfigClockSource+0x38c>
 8005878:	491d      	ldr	r1, [pc, #116]	; (80058f0 <HAL_TIM_ConfigClockSource+0x3fc>)
 800587a:	481a      	ldr	r0, [pc, #104]	; (80058e4 <HAL_TIM_ConfigClockSource+0x3f0>)
 800587c:	f7fc ff9d 	bl	80027ba <assert_failed>
   tmpsmcr &= ~TIM_SMCR_TS;
 8005880:	2270      	movs	r2, #112	; 0x70
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8005882:	6829      	ldr	r1, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 8005884:	688b      	ldr	r3, [r1, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8005886:	4393      	bics	r3, r2
 8005888:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800588a:	2307      	movs	r3, #7
 800588c:	4313      	orrs	r3, r2
   TIMx->SMCR = tmpsmcr;
 800588e:	608b      	str	r3, [r1, #8]
 8005890:	e65f      	b.n	8005552 <HAL_TIM_ConfigClockSource+0x5e>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8005892:	4a11      	ldr	r2, [pc, #68]	; (80058d8 <HAL_TIM_ConfigClockSource+0x3e4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d006      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x3b2>
 8005898:	4a10      	ldr	r2, [pc, #64]	; (80058dc <HAL_TIM_ConfigClockSource+0x3e8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d003      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x3b2>
 800589e:	4915      	ldr	r1, [pc, #84]	; (80058f4 <HAL_TIM_ConfigClockSource+0x400>)
 80058a0:	4810      	ldr	r0, [pc, #64]	; (80058e4 <HAL_TIM_ConfigClockSource+0x3f0>)
 80058a2:	f7fc ff8a 	bl	80027ba <assert_failed>
   tmpsmcr &= ~TIM_SMCR_TS;
 80058a6:	2270      	movs	r2, #112	; 0x70
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80058a8:	6829      	ldr	r1, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 80058aa:	688b      	ldr	r3, [r1, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80058ac:	4393      	bics	r3, r2
 80058ae:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80058b0:	2317      	movs	r3, #23
 80058b2:	e7eb      	b.n	800588c <HAL_TIM_ConfigClockSource+0x398>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80058b4:	4a08      	ldr	r2, [pc, #32]	; (80058d8 <HAL_TIM_ConfigClockSource+0x3e4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d006      	beq.n	80058c8 <HAL_TIM_ConfigClockSource+0x3d4>
 80058ba:	4a08      	ldr	r2, [pc, #32]	; (80058dc <HAL_TIM_ConfigClockSource+0x3e8>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d003      	beq.n	80058c8 <HAL_TIM_ConfigClockSource+0x3d4>
 80058c0:	490d      	ldr	r1, [pc, #52]	; (80058f8 <HAL_TIM_ConfigClockSource+0x404>)
 80058c2:	4808      	ldr	r0, [pc, #32]	; (80058e4 <HAL_TIM_ConfigClockSource+0x3f0>)
 80058c4:	f7fc ff79 	bl	80027ba <assert_failed>
   tmpsmcr &= ~TIM_SMCR_TS;
 80058c8:	2270      	movs	r2, #112	; 0x70
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80058ca:	6829      	ldr	r1, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 80058cc:	688b      	ldr	r3, [r1, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80058ce:	4393      	bics	r3, r2
 80058d0:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80058d2:	2327      	movs	r3, #39	; 0x27
 80058d4:	e7da      	b.n	800588c <HAL_TIM_ConfigClockSource+0x398>
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	40012c00 	.word	0x40012c00
 80058dc:	40000400 	.word	0x40000400
 80058e0:	0000101e 	.word	0x0000101e
 80058e4:	0800706c 	.word	0x0800706c
 80058e8:	00001021 	.word	0x00001021
 80058ec:	00001022 	.word	0x00001022
 80058f0:	0000102d 	.word	0x0000102d
 80058f4:	00001035 	.word	0x00001035
 80058f8:	0000103d 	.word	0x0000103d

080058fc <HAL_TIMEx_MasterConfigSynchronization>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80058fc:	6803      	ldr	r3, [r0, #0]
 80058fe:	4a1f      	ldr	r2, [pc, #124]	; (800597c <HAL_TIMEx_MasterConfigSynchronization+0x80>)
{
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	0005      	movs	r5, r0
 8005904:	000c      	movs	r4, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8005906:	4293      	cmp	r3, r2
 8005908:	d006      	beq.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0x1c>
 800590a:	4a1d      	ldr	r2, [pc, #116]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d003      	beq.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0x1c>
 8005910:	491c      	ldr	r1, [pc, #112]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8005912:	481d      	ldr	r0, [pc, #116]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8005914:	f7fc ff51 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8005918:	2330      	movs	r3, #48	; 0x30
 800591a:	6822      	ldr	r2, [r4, #0]
 800591c:	439a      	bics	r2, r3
 800591e:	d005      	beq.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0x30>
 8005920:	2a40      	cmp	r2, #64	; 0x40
 8005922:	d003      	beq.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0x30>
 8005924:	4919      	ldr	r1, [pc, #100]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8005926:	4818      	ldr	r0, [pc, #96]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8005928:	f7fc ff47 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800592c:	2380      	movs	r3, #128	; 0x80
 800592e:	6862      	ldr	r2, [r4, #4]
 8005930:	439a      	bics	r2, r3
 8005932:	d003      	beq.n	800593c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8005934:	4916      	ldr	r1, [pc, #88]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8005936:	4814      	ldr	r0, [pc, #80]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8005938:	f7fc ff3f 	bl	80027ba <assert_failed>

  __HAL_LOCK(htim);
 800593c:	0029      	movs	r1, r5
 800593e:	313c      	adds	r1, #60	; 0x3c
 8005940:	780b      	ldrb	r3, [r1, #0]
 8005942:	2002      	movs	r0, #2
 8005944:	2b01      	cmp	r3, #1
 8005946:	d017      	beq.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0x7c>

  htim->State = HAL_TIM_STATE_BUSY;
 8005948:	002e      	movs	r6, r5

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800594a:	682b      	ldr	r3, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800594c:	363d      	adds	r6, #61	; 0x3d
 800594e:	7030      	strb	r0, [r6, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	306e      	adds	r0, #110	; 0x6e
 8005954:	4382      	bics	r2, r0
 8005956:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	6820      	ldr	r0, [r4, #0]
 800595c:	4302      	orrs	r2, r0

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800595e:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8005960:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	4382      	bics	r2, r0
 8005966:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	6860      	ldr	r0, [r4, #4]
 800596c:	4302      	orrs	r2, r0
 800596e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005970:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005972:	2301      	movs	r3, #1
 8005974:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8005976:	7008      	strb	r0, [r1, #0]

  return HAL_OK;
}
 8005978:	bd70      	pop	{r4, r5, r6, pc}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	40012c00 	.word	0x40012c00
 8005980:	40000400 	.word	0x40000400
 8005984:	00000649 	.word	0x00000649
 8005988:	080070a4 	.word	0x080070a4
 800598c:	0000064a 	.word	0x0000064a
 8005990:	0000064b 	.word	0x0000064b

08005994 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpbdtr = 0;
   
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8005996:	4a39      	ldr	r2, [pc, #228]	; (8005a7c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>)
 8005998:	6803      	ldr	r3, [r0, #0]
{
 800599a:	0005      	movs	r5, r0
 800599c:	000c      	movs	r4, r1
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00a      	beq.n	80059b8 <HAL_TIMEx_ConfigBreakDeadTime+0x24>
 80059a2:	4a37      	ldr	r2, [pc, #220]	; (8005a80 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d007      	beq.n	80059b8 <HAL_TIMEx_ConfigBreakDeadTime+0x24>
 80059a8:	4a36      	ldr	r2, [pc, #216]	; (8005a84 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d004      	beq.n	80059b8 <HAL_TIMEx_ConfigBreakDeadTime+0x24>
 80059ae:	21ce      	movs	r1, #206	; 0xce
 80059b0:	4835      	ldr	r0, [pc, #212]	; (8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80059b2:	00c9      	lsls	r1, r1, #3
 80059b4:	f7fc ff01 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	4a34      	ldr	r2, [pc, #208]	; (8005a8c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80059bc:	4213      	tst	r3, r2
 80059be:	d003      	beq.n	80059c8 <HAL_TIMEx_ConfigBreakDeadTime+0x34>
 80059c0:	4933      	ldr	r1, [pc, #204]	; (8005a90 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 80059c2:	4831      	ldr	r0, [pc, #196]	; (8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80059c4:	f7fc fef9 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80059c8:	6863      	ldr	r3, [r4, #4]
 80059ca:	4a32      	ldr	r2, [pc, #200]	; (8005a94 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80059cc:	4213      	tst	r3, r2
 80059ce:	d003      	beq.n	80059d8 <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 80059d0:	4931      	ldr	r1, [pc, #196]	; (8005a98 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80059d2:	482d      	ldr	r0, [pc, #180]	; (8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80059d4:	f7fc fef1 	bl	80027ba <assert_failed>
 80059d8:	4f30      	ldr	r7, [pc, #192]	; (8005a9c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80059da:	68a3      	ldr	r3, [r4, #8]
 80059dc:	423b      	tst	r3, r7
 80059de:	d003      	beq.n	80059e8 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 80059e0:	492f      	ldr	r1, [pc, #188]	; (8005aa0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80059e2:	4829      	ldr	r0, [pc, #164]	; (8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80059e4:	f7fc fee9 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 80059e8:	68e3      	ldr	r3, [r4, #12]
 80059ea:	2bff      	cmp	r3, #255	; 0xff
 80059ec:	d903      	bls.n	80059f6 <HAL_TIMEx_ConfigBreakDeadTime+0x62>
 80059ee:	492d      	ldr	r1, [pc, #180]	; (8005aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80059f0:	4825      	ldr	r0, [pc, #148]	; (8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80059f2:	f7fc fee2 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80059f6:	6923      	ldr	r3, [r4, #16]
 80059f8:	4a2b      	ldr	r2, [pc, #172]	; (8005aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80059fa:	4213      	tst	r3, r2
 80059fc:	d003      	beq.n	8005a06 <HAL_TIMEx_ConfigBreakDeadTime+0x72>
 80059fe:	492b      	ldr	r1, [pc, #172]	; (8005aac <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005a00:	4821      	ldr	r0, [pc, #132]	; (8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005a02:	f7fc feda 	bl	80027ba <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8005a06:	6963      	ldr	r3, [r4, #20]
 8005a08:	4a29      	ldr	r2, [pc, #164]	; (8005ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005a0a:	4213      	tst	r3, r2
 8005a0c:	d003      	beq.n	8005a16 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8005a0e:	4929      	ldr	r1, [pc, #164]	; (8005ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005a10:	481d      	ldr	r0, [pc, #116]	; (8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005a12:	f7fc fed2 	bl	80027ba <assert_failed>
 8005a16:	4e28      	ldr	r6, [pc, #160]	; (8005ab8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8005a18:	69a3      	ldr	r3, [r4, #24]
 8005a1a:	4233      	tst	r3, r6
 8005a1c:	d003      	beq.n	8005a26 <HAL_TIMEx_ConfigBreakDeadTime+0x92>
 8005a1e:	4927      	ldr	r1, [pc, #156]	; (8005abc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005a20:	4819      	ldr	r0, [pc, #100]	; (8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005a22:	f7fc feca 	bl	80027ba <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a26:	002b      	movs	r3, r5
 8005a28:	333c      	adds	r3, #60	; 0x3c
 8005a2a:	781a      	ldrb	r2, [r3, #0]
 8005a2c:	2002      	movs	r0, #2
 8005a2e:	2a01      	cmp	r2, #1
 8005a30:	d022      	beq.n	8005a78 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>

  htim->State = HAL_TIM_STATE_BUSY;
 8005a32:	002a      	movs	r2, r5
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a34:	68e1      	ldr	r1, [r4, #12]
  htim->State = HAL_TIM_STATE_BUSY;
 8005a36:	323d      	adds	r2, #61	; 0x3d
 8005a38:	7010      	strb	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a3a:	68a0      	ldr	r0, [r4, #8]
 8005a3c:	4039      	ands	r1, r7
 8005a3e:	4301      	orrs	r1, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a40:	4814      	ldr	r0, [pc, #80]	; (8005a94 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8005a42:	4001      	ands	r1, r0
 8005a44:	6860      	ldr	r0, [r4, #4]
 8005a46:	4301      	orrs	r1, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a48:	4810      	ldr	r0, [pc, #64]	; (8005a8c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005a4a:	4001      	ands	r1, r0
 8005a4c:	6820      	ldr	r0, [r4, #0]
 8005a4e:	4301      	orrs	r1, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a50:	4815      	ldr	r0, [pc, #84]	; (8005aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005a52:	4001      	ands	r1, r0
 8005a54:	6920      	ldr	r0, [r4, #16]
 8005a56:	4301      	orrs	r1, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a58:	4815      	ldr	r0, [pc, #84]	; (8005ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005a5a:	4001      	ands	r1, r0
 8005a5c:	6960      	ldr	r0, [r4, #20]
 8005a5e:	4301      	orrs	r1, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a60:	400e      	ands	r6, r1
 8005a62:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a64:	4816      	ldr	r0, [pc, #88]	; (8005ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a66:	430e      	orrs	r6, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a68:	4006      	ands	r6, r0
 8005a6a:	430e      	orrs	r6, r1
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a6c:	6829      	ldr	r1, [r5, #0]
  
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005a6e:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 8005a70:	644e      	str	r6, [r1, #68]	; 0x44
  htim->State = HAL_TIM_STATE_READY;
 8005a72:	2101      	movs	r1, #1
 8005a74:	7011      	strb	r1, [r2, #0]
  __HAL_UNLOCK(htim);
 8005a76:	7018      	strb	r0, [r3, #0]

  return HAL_OK;
}
 8005a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	40012c00 	.word	0x40012c00
 8005a80:	40014400 	.word	0x40014400
 8005a84:	40014800 	.word	0x40014800
 8005a88:	080070a4 	.word	0x080070a4
 8005a8c:	fffff7ff 	.word	0xfffff7ff
 8005a90:	00000671 	.word	0x00000671
 8005a94:	fffffbff 	.word	0xfffffbff
 8005a98:	00000672 	.word	0x00000672
 8005a9c:	fffffcff 	.word	0xfffffcff
 8005aa0:	00000673 	.word	0x00000673
 8005aa4:	00000674 	.word	0x00000674
 8005aa8:	ffffefff 	.word	0xffffefff
 8005aac:	00000675 	.word	0x00000675
 8005ab0:	ffffdfff 	.word	0xffffdfff
 8005ab4:	00000676 	.word	0x00000676
 8005ab8:	ffffbfff 	.word	0xffffbfff
 8005abc:	00000677 	.word	0x00000677
 8005ac0:	ffff7fff 	.word	0xffff7fff

08005ac4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ac4:	6803      	ldr	r3, [r0, #0]
 8005ac6:	4906      	ldr	r1, [pc, #24]	; (8005ae0 <UART_EndRxTransfer+0x1c>)
 8005ac8:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aca:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005acc:	400a      	ands	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	3123      	adds	r1, #35	; 0x23
 8005ad4:	31ff      	adds	r1, #255	; 0xff
 8005ad6:	438a      	bics	r2, r1
 8005ad8:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8005ada:	2320      	movs	r3, #32
 8005adc:	7003      	strb	r3, [r0, #0]
}
 8005ade:	4770      	bx	lr
 8005ae0:	fffffedf 	.word	0xfffffedf

08005ae4 <HAL_UART_Transmit_DMA>:
{
 8005ae4:	0013      	movs	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8005ae6:	0002      	movs	r2, r0
{
 8005ae8:	b570      	push	{r4, r5, r6, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8005aea:	3269      	adds	r2, #105	; 0x69
 8005aec:	7814      	ldrb	r4, [r2, #0]
{
 8005aee:	0005      	movs	r5, r0
    return HAL_BUSY;
 8005af0:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8005af2:	2c20      	cmp	r4, #32
 8005af4:	d134      	bne.n	8005b60 <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 8005af6:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8005af8:	2900      	cmp	r1, #0
 8005afa:	d031      	beq.n	8005b60 <HAL_UART_Transmit_DMA+0x7c>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d02f      	beq.n	8005b60 <HAL_UART_Transmit_DMA+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b00:	2480      	movs	r4, #128	; 0x80
 8005b02:	68ae      	ldr	r6, [r5, #8]
 8005b04:	0164      	lsls	r4, r4, #5
 8005b06:	42a6      	cmp	r6, r4
 8005b08:	d104      	bne.n	8005b14 <HAL_UART_Transmit_DMA+0x30>
 8005b0a:	692c      	ldr	r4, [r5, #16]
 8005b0c:	2c00      	cmp	r4, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_UART_Transmit_DMA+0x30>
      if((((uint32_t)pData)&1U) != 0U)
 8005b10:	4201      	tst	r1, r0
 8005b12:	d125      	bne.n	8005b60 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8005b14:	002e      	movs	r6, r5
 8005b16:	3668      	adds	r6, #104	; 0x68
 8005b18:	7834      	ldrb	r4, [r6, #0]
    return HAL_BUSY;
 8005b1a:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8005b1c:	2c01      	cmp	r4, #1
 8005b1e:	d01f      	beq.n	8005b60 <HAL_UART_Transmit_DMA+0x7c>
 8005b20:	3801      	subs	r0, #1
 8005b22:	7030      	strb	r0, [r6, #0]
    huart->TxXferSize = Size;
 8005b24:	0028      	movs	r0, r5
 8005b26:	3050      	adds	r0, #80	; 0x50
    huart->pTxBuffPtr = pData;
 8005b28:	64e9      	str	r1, [r5, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2a:	2400      	movs	r4, #0
    huart->TxXferSize = Size;
 8005b2c:	8003      	strh	r3, [r0, #0]
    huart->TxXferCount = Size;
 8005b2e:	8043      	strh	r3, [r0, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b30:	2021      	movs	r0, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b32:	66ec      	str	r4, [r5, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b34:	7010      	strb	r0, [r2, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b36:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8005b38:	4a0a      	ldr	r2, [pc, #40]	; (8005b64 <HAL_UART_Transmit_DMA+0x80>)
    huart->hdmatx->XferAbortCallback = NULL;
 8005b3a:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b3c:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b3e:	4a0a      	ldr	r2, [pc, #40]	; (8005b68 <HAL_UART_Transmit_DMA+0x84>)
 8005b40:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b42:	4a0a      	ldr	r2, [pc, #40]	; (8005b6c <HAL_UART_Transmit_DMA+0x88>)
 8005b44:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8005b46:	682a      	ldr	r2, [r5, #0]
 8005b48:	3228      	adds	r2, #40	; 0x28
 8005b4a:	f7fd ff33 	bl	80039b4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005b4e:	2240      	movs	r2, #64	; 0x40
    return HAL_OK;
 8005b50:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005b52:	682b      	ldr	r3, [r5, #0]
 8005b54:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b56:	6899      	ldr	r1, [r3, #8]
 8005b58:	1892      	adds	r2, r2, r2
 8005b5a:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 8005b5c:	7034      	strb	r4, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b5e:	609a      	str	r2, [r3, #8]
}
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
 8005b62:	46c0      	nop			; (mov r8, r8)
 8005b64:	08005b71 	.word	0x08005b71
 8005b68:	08005ba3 	.word	0x08005ba3
 8005b6c:	08005bb1 	.word	0x08005bb1

08005b70 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8005b70:	2120      	movs	r1, #32
 8005b72:	6803      	ldr	r3, [r0, #0]
{
 8005b74:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8005b76:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8005b78:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8005b7a:	400b      	ands	r3, r1
 8005b7c:	d10c      	bne.n	8005b98 <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0;
 8005b7e:	0011      	movs	r1, r2
 8005b80:	3152      	adds	r1, #82	; 0x52
 8005b82:	800b      	strh	r3, [r1, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b84:	2180      	movs	r1, #128	; 0x80
 8005b86:	6813      	ldr	r3, [r2, #0]
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	438a      	bics	r2, r1
 8005b8c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b8e:	2240      	movs	r2, #64	; 0x40
 8005b90:	6819      	ldr	r1, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8005b96:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8005b98:	0010      	movs	r0, r2
 8005b9a:	f7fb ff07 	bl	80019ac <HAL_UART_TxCpltCallback>
}
 8005b9e:	e7fa      	b.n	8005b96 <UART_DMATransmitCplt+0x26>

08005ba0 <HAL_UART_TxHalfCpltCallback>:
 8005ba0:	4770      	bx	lr

08005ba2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ba2:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 8005ba4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005ba6:	f7ff fffb 	bl	8005ba0 <HAL_UART_TxHalfCpltCallback>
}
 8005baa:	bd10      	pop	{r4, pc}

08005bac <HAL_UART_RxCpltCallback>:
 8005bac:	4770      	bx	lr

08005bae <HAL_UART_ErrorCallback>:
 8005bae:	4770      	bx	lr

08005bb0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bb0:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8005bb2:	6a44      	ldr	r4, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bb4:	0021      	movs	r1, r4
 8005bb6:	3169      	adds	r1, #105	; 0x69
 8005bb8:	780b      	ldrb	r3, [r1, #0]
 8005bba:	2b21      	cmp	r3, #33	; 0x21
 8005bbc:	d10d      	bne.n	8005bda <UART_DMAError+0x2a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	0612      	lsls	r2, r2, #24
 8005bc4:	d509      	bpl.n	8005bda <UART_DMAError+0x2a>
  {
    huart->TxXferCount = 0U;
 8005bc6:	0022      	movs	r2, r4
 8005bc8:	2000      	movs	r0, #0
 8005bca:	3252      	adds	r2, #82	; 0x52
 8005bcc:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	30c0      	adds	r0, #192	; 0xc0
 8005bd2:	4382      	bics	r2, r0
 8005bd4:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005bd6:	2320      	movs	r3, #32
 8005bd8:	700b      	strb	r3, [r1, #0]
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bda:	0023      	movs	r3, r4
 8005bdc:	336a      	adds	r3, #106	; 0x6a
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b22      	cmp	r3, #34	; 0x22
 8005be2:	d10a      	bne.n	8005bfa <UART_DMAError+0x4a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	065b      	lsls	r3, r3, #25
 8005bea:	d506      	bpl.n	8005bfa <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
 8005bec:	0023      	movs	r3, r4
 8005bee:	2200      	movs	r2, #0
 8005bf0:	335a      	adds	r3, #90	; 0x5a
 8005bf2:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8005bf4:	0020      	movs	r0, r4
 8005bf6:	f7ff ff65 	bl	8005ac4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005bfa:	2310      	movs	r3, #16
 8005bfc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8005bfe:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c00:	4313      	orrs	r3, r2
 8005c02:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8005c04:	f7ff ffd3 	bl	8005bae <HAL_UART_ErrorCallback>
}
 8005c08:	bd10      	pop	{r4, pc}

08005c0a <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8005c0a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	0002      	movs	r2, r0
{
 8005c10:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8005c12:	325a      	adds	r2, #90	; 0x5a
 8005c14:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8005c16:	3a08      	subs	r2, #8
 8005c18:	8013      	strh	r3, [r2, #0]

  HAL_UART_ErrorCallback(huart);
 8005c1a:	f7ff ffc8 	bl	8005bae <HAL_UART_ErrorCallback>
}
 8005c1e:	bd10      	pop	{r4, pc}

08005c20 <UART_SetConfig>:
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005c20:	4b5e      	ldr	r3, [pc, #376]	; (8005d9c <UART_SetConfig+0x17c>)
 8005c22:	6842      	ldr	r2, [r0, #4]
{
 8005c24:	b570      	push	{r4, r5, r6, lr}
 8005c26:	0004      	movs	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d903      	bls.n	8005c34 <UART_SetConfig+0x14>
 8005c2c:	495c      	ldr	r1, [pc, #368]	; (8005da0 <UART_SetConfig+0x180>)
 8005c2e:	485d      	ldr	r0, [pc, #372]	; (8005da4 <UART_SetConfig+0x184>)
 8005c30:	f7fc fdc3 	bl	80027ba <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005c34:	4b5c      	ldr	r3, [pc, #368]	; (8005da8 <UART_SetConfig+0x188>)
 8005c36:	68a2      	ldr	r2, [r4, #8]
 8005c38:	421a      	tst	r2, r3
 8005c3a:	d003      	beq.n	8005c44 <UART_SetConfig+0x24>
 8005c3c:	495b      	ldr	r1, [pc, #364]	; (8005dac <UART_SetConfig+0x18c>)
 8005c3e:	4859      	ldr	r0, [pc, #356]	; (8005da4 <UART_SetConfig+0x184>)
 8005c40:	f7fc fdbb 	bl	80027ba <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005c44:	4b5a      	ldr	r3, [pc, #360]	; (8005db0 <UART_SetConfig+0x190>)
 8005c46:	68e2      	ldr	r2, [r4, #12]
 8005c48:	421a      	tst	r2, r3
 8005c4a:	d003      	beq.n	8005c54 <UART_SetConfig+0x34>
 8005c4c:	4959      	ldr	r1, [pc, #356]	; (8005db4 <UART_SetConfig+0x194>)
 8005c4e:	4855      	ldr	r0, [pc, #340]	; (8005da4 <UART_SetConfig+0x184>)
 8005c50:	f7fc fdb3 	bl	80027ba <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005c54:	6923      	ldr	r3, [r4, #16]
 8005c56:	4a58      	ldr	r2, [pc, #352]	; (8005db8 <UART_SetConfig+0x198>)
 8005c58:	4213      	tst	r3, r2
 8005c5a:	d007      	beq.n	8005c6c <UART_SetConfig+0x4c>
 8005c5c:	22c0      	movs	r2, #192	; 0xc0
 8005c5e:	00d2      	lsls	r2, r2, #3
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d003      	beq.n	8005c6c <UART_SetConfig+0x4c>
 8005c64:	4955      	ldr	r1, [pc, #340]	; (8005dbc <UART_SetConfig+0x19c>)
 8005c66:	484f      	ldr	r0, [pc, #316]	; (8005da4 <UART_SetConfig+0x184>)
 8005c68:	f7fc fda7 	bl	80027ba <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005c6c:	6963      	ldr	r3, [r4, #20]
 8005c6e:	220c      	movs	r2, #12
 8005c70:	0019      	movs	r1, r3
 8005c72:	4391      	bics	r1, r2
 8005c74:	d101      	bne.n	8005c7a <UART_SetConfig+0x5a>
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d103      	bne.n	8005c82 <UART_SetConfig+0x62>
 8005c7a:	4951      	ldr	r1, [pc, #324]	; (8005dc0 <UART_SetConfig+0x1a0>)
 8005c7c:	4849      	ldr	r0, [pc, #292]	; (8005da4 <UART_SetConfig+0x184>)
 8005c7e:	f7fc fd9c 	bl	80027ba <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005c82:	4b50      	ldr	r3, [pc, #320]	; (8005dc4 <UART_SetConfig+0x1a4>)
 8005c84:	69a2      	ldr	r2, [r4, #24]
 8005c86:	421a      	tst	r2, r3
 8005c88:	d003      	beq.n	8005c92 <UART_SetConfig+0x72>
 8005c8a:	494f      	ldr	r1, [pc, #316]	; (8005dc8 <UART_SetConfig+0x1a8>)
 8005c8c:	4845      	ldr	r0, [pc, #276]	; (8005da4 <UART_SetConfig+0x184>)
 8005c8e:	f7fc fd94 	bl	80027ba <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8005c92:	4b4e      	ldr	r3, [pc, #312]	; (8005dcc <UART_SetConfig+0x1ac>)
 8005c94:	6a22      	ldr	r2, [r4, #32]
 8005c96:	421a      	tst	r2, r3
 8005c98:	d003      	beq.n	8005ca2 <UART_SetConfig+0x82>
 8005c9a:	494d      	ldr	r1, [pc, #308]	; (8005dd0 <UART_SetConfig+0x1b0>)
 8005c9c:	4841      	ldr	r0, [pc, #260]	; (8005da4 <UART_SetConfig+0x184>)
 8005c9e:	f7fc fd8c 	bl	80027ba <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005ca2:	4b4c      	ldr	r3, [pc, #304]	; (8005dd4 <UART_SetConfig+0x1b4>)
 8005ca4:	69e2      	ldr	r2, [r4, #28]
 8005ca6:	421a      	tst	r2, r3
 8005ca8:	d003      	beq.n	8005cb2 <UART_SetConfig+0x92>
 8005caa:	494b      	ldr	r1, [pc, #300]	; (8005dd8 <UART_SetConfig+0x1b8>)
 8005cac:	483d      	ldr	r0, [pc, #244]	; (8005da4 <UART_SetConfig+0x184>)
 8005cae:	f7fc fd84 	bl	80027ba <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cb2:	6920      	ldr	r0, [r4, #16]
 8005cb4:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005cb6:	6825      	ldr	r5, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cb8:	4303      	orrs	r3, r0
 8005cba:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005cbc:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cbe:	69e2      	ldr	r2, [r4, #28]
 8005cc0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005cc2:	4846      	ldr	r0, [pc, #280]	; (8005ddc <UART_SetConfig+0x1bc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cc4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005cc6:	4001      	ands	r1, r0
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ccc:	686b      	ldr	r3, [r5, #4]
 8005cce:	4944      	ldr	r1, [pc, #272]	; (8005de0 <UART_SetConfig+0x1c0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005cd0:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cd2:	400b      	ands	r3, r1
 8005cd4:	68e1      	ldr	r1, [r4, #12]
 8005cd6:	430b      	orrs	r3, r1
 8005cd8:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005cda:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005cdc:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005cde:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005ce0:	4840      	ldr	r0, [pc, #256]	; (8005de4 <UART_SetConfig+0x1c4>)
 8005ce2:	4001      	ands	r1, r0
 8005ce4:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ce6:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005ce8:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cea:	4b3f      	ldr	r3, [pc, #252]	; (8005de8 <UART_SetConfig+0x1c8>)
 8005cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cee:	400b      	ands	r3, r1
 8005cf0:	493e      	ldr	r1, [pc, #248]	; (8005dec <UART_SetConfig+0x1cc>)
 8005cf2:	5cc8      	ldrb	r0, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cf4:	2380      	movs	r3, #128	; 0x80
 8005cf6:	021b      	lsls	r3, r3, #8
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d12c      	bne.n	8005d56 <UART_SetConfig+0x136>
    switch (clocksource)
 8005cfc:	2808      	cmp	r0, #8
 8005cfe:	d827      	bhi.n	8005d50 <UART_SetConfig+0x130>
 8005d00:	f7fa fa02 	bl	8000108 <__gnu_thumb1_case_uqi>
 8005d04:	260b2605 	.word	0x260b2605
 8005d08:	2626261e 	.word	0x2626261e
 8005d0c:	21          	.byte	0x21
 8005d0d:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005d0e:	f7fe fe5b 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005d12:	6863      	ldr	r3, [r4, #4]
 8005d14:	0040      	lsls	r0, r0, #1
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	e002      	b.n	8005d20 <UART_SetConfig+0x100>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005d1a:	6863      	ldr	r3, [r4, #4]
 8005d1c:	0858      	lsrs	r0, r3, #1
 8005d1e:	4b34      	ldr	r3, [pc, #208]	; (8005df0 <UART_SetConfig+0x1d0>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005d20:	18c0      	adds	r0, r0, r3
 8005d22:	6861      	ldr	r1, [r4, #4]
 8005d24:	f7fa f9fa 	bl	800011c <__udivsi3>
 8005d28:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d2a:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8005d2c:	220f      	movs	r2, #15
 8005d2e:	0019      	movs	r1, r3
 8005d30:	4391      	bics	r1, r2
 8005d32:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d34:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8005d36:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d38:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60cb      	str	r3, [r1, #12]
}
 8005d3e:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005d40:	f7fe fd18 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 8005d44:	e7e5      	b.n	8005d12 <UART_SetConfig+0xf2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005d46:	6863      	ldr	r3, [r4, #4]
 8005d48:	0858      	lsrs	r0, r3, #1
 8005d4a:	2380      	movs	r3, #128	; 0x80
 8005d4c:	025b      	lsls	r3, r3, #9
 8005d4e:	e7e7      	b.n	8005d20 <UART_SetConfig+0x100>
        ret = HAL_ERROR;
 8005d50:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	e7ea      	b.n	8005d2c <UART_SetConfig+0x10c>
    switch (clocksource)
 8005d56:	2808      	cmp	r0, #8
 8005d58:	d81d      	bhi.n	8005d96 <UART_SetConfig+0x176>
 8005d5a:	f7fa f9d5 	bl	8000108 <__gnu_thumb1_case_uqi>
 8005d5e:	1c05      	.short	0x1c05
 8005d60:	1c141c0a 	.word	0x1c141c0a
 8005d64:	1c1c      	.short	0x1c1c
 8005d66:	17          	.byte	0x17
 8005d67:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005d68:	f7fe fe2e 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005d6c:	6861      	ldr	r1, [r4, #4]
 8005d6e:	084b      	lsrs	r3, r1, #1
 8005d70:	e002      	b.n	8005d78 <UART_SetConfig+0x158>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005d72:	6861      	ldr	r1, [r4, #4]
 8005d74:	4b1f      	ldr	r3, [pc, #124]	; (8005df4 <UART_SetConfig+0x1d4>)
 8005d76:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005d78:	18c0      	adds	r0, r0, r3
 8005d7a:	f7fa f9cf 	bl	800011c <__udivsi3>
 8005d7e:	b280      	uxth	r0, r0
 8005d80:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d82:	2000      	movs	r0, #0
        break;
 8005d84:	e7db      	b.n	8005d3e <UART_SetConfig+0x11e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005d86:	f7fe fcf5 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 8005d8a:	e7ef      	b.n	8005d6c <UART_SetConfig+0x14c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005d8c:	2380      	movs	r3, #128	; 0x80
 8005d8e:	6861      	ldr	r1, [r4, #4]
 8005d90:	021b      	lsls	r3, r3, #8
 8005d92:	0848      	lsrs	r0, r1, #1
 8005d94:	e7f0      	b.n	8005d78 <UART_SetConfig+0x158>
        ret = HAL_ERROR;
 8005d96:	2001      	movs	r0, #1
 8005d98:	e7d1      	b.n	8005d3e <UART_SetConfig+0x11e>
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	005b8d80 	.word	0x005b8d80
 8005da0:	00000846 	.word	0x00000846
 8005da4:	080070e3 	.word	0x080070e3
 8005da8:	ffffefff 	.word	0xffffefff
 8005dac:	00000847 	.word	0x00000847
 8005db0:	ffffdfff 	.word	0xffffdfff
 8005db4:	00000848 	.word	0x00000848
 8005db8:	fffffbff 	.word	0xfffffbff
 8005dbc:	00000849 	.word	0x00000849
 8005dc0:	0000084a 	.word	0x0000084a
 8005dc4:	fffffcff 	.word	0xfffffcff
 8005dc8:	0000084b 	.word	0x0000084b
 8005dcc:	fffff7ff 	.word	0xfffff7ff
 8005dd0:	0000084c 	.word	0x0000084c
 8005dd4:	ffff7fff 	.word	0xffff7fff
 8005dd8:	0000084d 	.word	0x0000084d
 8005ddc:	ffff69f3 	.word	0xffff69f3
 8005de0:	ffffcfff 	.word	0xffffcfff
 8005de4:	fffff4ff 	.word	0xfffff4ff
 8005de8:	40021000 	.word	0x40021000
 8005dec:	080070df 	.word	0x080070df
 8005df0:	00f42400 	.word	0x00f42400
 8005df4:	007a1200 	.word	0x007a1200

08005df8 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8005df8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8005dfa:	b570      	push	{r4, r5, r6, lr}
 8005dfc:	0004      	movs	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8005dfe:	2bff      	cmp	r3, #255	; 0xff
 8005e00:	d903      	bls.n	8005e0a <UART_AdvFeatureConfig+0x12>
 8005e02:	4954      	ldr	r1, [pc, #336]	; (8005f54 <UART_AdvFeatureConfig+0x15c>)
 8005e04:	4854      	ldr	r0, [pc, #336]	; (8005f58 <UART_AdvFeatureConfig+0x160>)
 8005e06:	f7fc fcd8 	bl	80027ba <assert_failed>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e0c:	07db      	lsls	r3, r3, #31
 8005e0e:	d50d      	bpl.n	8005e2c <UART_AdvFeatureConfig+0x34>
 8005e10:	4d52      	ldr	r5, [pc, #328]	; (8005f5c <UART_AdvFeatureConfig+0x164>)
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8005e12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005e14:	422b      	tst	r3, r5
 8005e16:	d003      	beq.n	8005e20 <UART_AdvFeatureConfig+0x28>
 8005e18:	4951      	ldr	r1, [pc, #324]	; (8005f60 <UART_AdvFeatureConfig+0x168>)
 8005e1a:	484f      	ldr	r0, [pc, #316]	; (8005f58 <UART_AdvFeatureConfig+0x160>)
 8005e1c:	f7fc fccd 	bl	80027ba <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e20:	6822      	ldr	r2, [r4, #0]
 8005e22:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005e24:	6853      	ldr	r3, [r2, #4]
 8005e26:	402b      	ands	r3, r5
 8005e28:	430b      	orrs	r3, r1
 8005e2a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e2e:	079b      	lsls	r3, r3, #30
 8005e30:	d50d      	bpl.n	8005e4e <UART_AdvFeatureConfig+0x56>
 8005e32:	4d4c      	ldr	r5, [pc, #304]	; (8005f64 <UART_AdvFeatureConfig+0x16c>)
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8005e34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005e36:	422b      	tst	r3, r5
 8005e38:	d003      	beq.n	8005e42 <UART_AdvFeatureConfig+0x4a>
 8005e3a:	494b      	ldr	r1, [pc, #300]	; (8005f68 <UART_AdvFeatureConfig+0x170>)
 8005e3c:	4846      	ldr	r0, [pc, #280]	; (8005f58 <UART_AdvFeatureConfig+0x160>)
 8005e3e:	f7fc fcbc 	bl	80027ba <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e42:	6822      	ldr	r2, [r4, #0]
 8005e44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005e46:	6853      	ldr	r3, [r2, #4]
 8005e48:	402b      	ands	r3, r5
 8005e4a:	430b      	orrs	r3, r1
 8005e4c:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e50:	075b      	lsls	r3, r3, #29
 8005e52:	d50d      	bpl.n	8005e70 <UART_AdvFeatureConfig+0x78>
 8005e54:	4d45      	ldr	r5, [pc, #276]	; (8005f6c <UART_AdvFeatureConfig+0x174>)
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8005e56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005e58:	422b      	tst	r3, r5
 8005e5a:	d003      	beq.n	8005e64 <UART_AdvFeatureConfig+0x6c>
 8005e5c:	4944      	ldr	r1, [pc, #272]	; (8005f70 <UART_AdvFeatureConfig+0x178>)
 8005e5e:	483e      	ldr	r0, [pc, #248]	; (8005f58 <UART_AdvFeatureConfig+0x160>)
 8005e60:	f7fc fcab 	bl	80027ba <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e64:	6822      	ldr	r2, [r4, #0]
 8005e66:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005e68:	6853      	ldr	r3, [r2, #4]
 8005e6a:	402b      	ands	r3, r5
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e72:	071b      	lsls	r3, r3, #28
 8005e74:	d50d      	bpl.n	8005e92 <UART_AdvFeatureConfig+0x9a>
 8005e76:	4d3f      	ldr	r5, [pc, #252]	; (8005f74 <UART_AdvFeatureConfig+0x17c>)
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8005e78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e7a:	422b      	tst	r3, r5
 8005e7c:	d003      	beq.n	8005e86 <UART_AdvFeatureConfig+0x8e>
 8005e7e:	493e      	ldr	r1, [pc, #248]	; (8005f78 <UART_AdvFeatureConfig+0x180>)
 8005e80:	4835      	ldr	r0, [pc, #212]	; (8005f58 <UART_AdvFeatureConfig+0x160>)
 8005e82:	f7fc fc9a 	bl	80027ba <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e86:	6822      	ldr	r2, [r4, #0]
 8005e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e8a:	6853      	ldr	r3, [r2, #4]
 8005e8c:	402b      	ands	r3, r5
 8005e8e:	430b      	orrs	r3, r1
 8005e90:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e94:	06db      	lsls	r3, r3, #27
 8005e96:	d50d      	bpl.n	8005eb4 <UART_AdvFeatureConfig+0xbc>
 8005e98:	4d38      	ldr	r5, [pc, #224]	; (8005f7c <UART_AdvFeatureConfig+0x184>)
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8005e9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e9c:	422b      	tst	r3, r5
 8005e9e:	d003      	beq.n	8005ea8 <UART_AdvFeatureConfig+0xb0>
 8005ea0:	4937      	ldr	r1, [pc, #220]	; (8005f80 <UART_AdvFeatureConfig+0x188>)
 8005ea2:	482d      	ldr	r0, [pc, #180]	; (8005f58 <UART_AdvFeatureConfig+0x160>)
 8005ea4:	f7fc fc89 	bl	80027ba <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ea8:	6822      	ldr	r2, [r4, #0]
 8005eaa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005eac:	6893      	ldr	r3, [r2, #8]
 8005eae:	402b      	ands	r3, r5
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eb6:	069b      	lsls	r3, r3, #26
 8005eb8:	d50d      	bpl.n	8005ed6 <UART_AdvFeatureConfig+0xde>
 8005eba:	4d32      	ldr	r5, [pc, #200]	; (8005f84 <UART_AdvFeatureConfig+0x18c>)
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8005ebc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005ebe:	422b      	tst	r3, r5
 8005ec0:	d003      	beq.n	8005eca <UART_AdvFeatureConfig+0xd2>
 8005ec2:	4931      	ldr	r1, [pc, #196]	; (8005f88 <UART_AdvFeatureConfig+0x190>)
 8005ec4:	4824      	ldr	r0, [pc, #144]	; (8005f58 <UART_AdvFeatureConfig+0x160>)
 8005ec6:	f7fc fc78 	bl	80027ba <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eca:	6822      	ldr	r2, [r4, #0]
 8005ecc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005ece:	6893      	ldr	r3, [r2, #8]
 8005ed0:	402b      	ands	r3, r5
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ed8:	065b      	lsls	r3, r3, #25
 8005eda:	d528      	bpl.n	8005f2e <UART_AdvFeatureConfig+0x136>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8005edc:	4b2b      	ldr	r3, [pc, #172]	; (8005f8c <UART_AdvFeatureConfig+0x194>)
 8005ede:	6822      	ldr	r2, [r4, #0]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d003      	beq.n	8005eec <UART_AdvFeatureConfig+0xf4>
 8005ee4:	492a      	ldr	r1, [pc, #168]	; (8005f90 <UART_AdvFeatureConfig+0x198>)
 8005ee6:	481c      	ldr	r0, [pc, #112]	; (8005f58 <UART_AdvFeatureConfig+0x160>)
 8005ee8:	f7fc fc67 	bl	80027ba <assert_failed>
 8005eec:	4d29      	ldr	r5, [pc, #164]	; (8005f94 <UART_AdvFeatureConfig+0x19c>)
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8005eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ef0:	422b      	tst	r3, r5
 8005ef2:	d003      	beq.n	8005efc <UART_AdvFeatureConfig+0x104>
 8005ef4:	4928      	ldr	r1, [pc, #160]	; (8005f98 <UART_AdvFeatureConfig+0x1a0>)
 8005ef6:	4818      	ldr	r0, [pc, #96]	; (8005f58 <UART_AdvFeatureConfig+0x160>)
 8005ef8:	f7fc fc5f 	bl	80027ba <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005efc:	6821      	ldr	r1, [r4, #0]
 8005efe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005f00:	684b      	ldr	r3, [r1, #4]
 8005f02:	402b      	ands	r3, r5
 8005f04:	4313      	orrs	r3, r2
 8005f06:	604b      	str	r3, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f08:	2380      	movs	r3, #128	; 0x80
 8005f0a:	035b      	lsls	r3, r3, #13
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d10e      	bne.n	8005f2e <UART_AdvFeatureConfig+0x136>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8005f10:	4b22      	ldr	r3, [pc, #136]	; (8005f9c <UART_AdvFeatureConfig+0x1a4>)
 8005f12:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005f14:	421a      	tst	r2, r3
 8005f16:	d003      	beq.n	8005f20 <UART_AdvFeatureConfig+0x128>
 8005f18:	4921      	ldr	r1, [pc, #132]	; (8005fa0 <UART_AdvFeatureConfig+0x1a8>)
 8005f1a:	480f      	ldr	r0, [pc, #60]	; (8005f58 <UART_AdvFeatureConfig+0x160>)
 8005f1c:	f7fc fc4d 	bl	80027ba <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f20:	6822      	ldr	r2, [r4, #0]
 8005f22:	4920      	ldr	r1, [pc, #128]	; (8005fa4 <UART_AdvFeatureConfig+0x1ac>)
 8005f24:	6853      	ldr	r3, [r2, #4]
 8005f26:	400b      	ands	r3, r1
 8005f28:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005f2a:	430b      	orrs	r3, r1
 8005f2c:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f30:	061b      	lsls	r3, r3, #24
 8005f32:	d50d      	bpl.n	8005f50 <UART_AdvFeatureConfig+0x158>
 8005f34:	4d1c      	ldr	r5, [pc, #112]	; (8005fa8 <UART_AdvFeatureConfig+0x1b0>)
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8005f36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005f38:	422b      	tst	r3, r5
 8005f3a:	d003      	beq.n	8005f44 <UART_AdvFeatureConfig+0x14c>
 8005f3c:	491b      	ldr	r1, [pc, #108]	; (8005fac <UART_AdvFeatureConfig+0x1b4>)
 8005f3e:	4806      	ldr	r0, [pc, #24]	; (8005f58 <UART_AdvFeatureConfig+0x160>)
 8005f40:	f7fc fc3b 	bl	80027ba <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f44:	6822      	ldr	r2, [r4, #0]
 8005f46:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005f48:	6853      	ldr	r3, [r2, #4]
 8005f4a:	402b      	ands	r3, r5
 8005f4c:	430b      	orrs	r3, r1
 8005f4e:	6053      	str	r3, [r2, #4]
}
 8005f50:	bd70      	pop	{r4, r5, r6, pc}
 8005f52:	46c0      	nop			; (mov r8, r8)
 8005f54:	000008a9 	.word	0x000008a9
 8005f58:	080070e3 	.word	0x080070e3
 8005f5c:	fffdffff 	.word	0xfffdffff
 8005f60:	000008ae 	.word	0x000008ae
 8005f64:	fffeffff 	.word	0xfffeffff
 8005f68:	000008b5 	.word	0x000008b5
 8005f6c:	fffbffff 	.word	0xfffbffff
 8005f70:	000008bc 	.word	0x000008bc
 8005f74:	ffff7fff 	.word	0xffff7fff
 8005f78:	000008c3 	.word	0x000008c3
 8005f7c:	ffffefff 	.word	0xffffefff
 8005f80:	000008ca 	.word	0x000008ca
 8005f84:	ffffdfff 	.word	0xffffdfff
 8005f88:	000008d1 	.word	0x000008d1
 8005f8c:	40013800 	.word	0x40013800
 8005f90:	000008d8 	.word	0x000008d8
 8005f94:	ffefffff 	.word	0xffefffff
 8005f98:	000008d9 	.word	0x000008d9
 8005f9c:	ffdfffff 	.word	0xffdfffff
 8005fa0:	000008de 	.word	0x000008de
 8005fa4:	ff9fffff 	.word	0xff9fffff
 8005fa8:	fff7ffff 	.word	0xfff7ffff
 8005fac:	000008e6 	.word	0x000008e6

08005fb0 <HAL_UART_Init>:
{
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8005fb4:	d101      	bne.n	8005fba <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8005fb6:	2001      	movs	r0, #1
}
 8005fb8:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005fba:	6981      	ldr	r1, [r0, #24]
 8005fbc:	4b22      	ldr	r3, [pc, #136]	; (8006048 <HAL_UART_Init+0x98>)
 8005fbe:	6802      	ldr	r2, [r0, #0]
 8005fc0:	2900      	cmp	r1, #0
 8005fc2:	d03b      	beq.n	800603c <HAL_UART_Init+0x8c>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d004      	beq.n	8005fd2 <HAL_UART_Init+0x22>
 8005fc8:	2197      	movs	r1, #151	; 0x97
 8005fca:	0049      	lsls	r1, r1, #1
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005fcc:	481f      	ldr	r0, [pc, #124]	; (800604c <HAL_UART_Init+0x9c>)
 8005fce:	f7fc fbf4 	bl	80027ba <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 8005fd2:	0025      	movs	r5, r4
 8005fd4:	3569      	adds	r5, #105	; 0x69
 8005fd6:	782b      	ldrb	r3, [r5, #0]
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d105      	bne.n	8005fea <HAL_UART_Init+0x3a>
    huart->Lock = HAL_UNLOCKED;
 8005fde:	0022      	movs	r2, r4
 8005fe0:	3268      	adds	r2, #104	; 0x68
 8005fe2:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8005fe4:	0020      	movs	r0, r4
 8005fe6:	f7fc ff65 	bl	8002eb4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005fea:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005fec:	2101      	movs	r1, #1
 8005fee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005ff0:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8005ff2:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ff4:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8005ff6:	438b      	bics	r3, r1
 8005ff8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ffa:	f7ff fe11 	bl	8005c20 <UART_SetConfig>
 8005ffe:	2801      	cmp	r0, #1
 8006000:	d0d9      	beq.n	8005fb6 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <HAL_UART_Init+0x5e>
    UART_AdvFeatureConfig(huart);
 8006008:	0020      	movs	r0, r4
 800600a:	f7ff fef5 	bl	8005df8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	490f      	ldr	r1, [pc, #60]	; (8006050 <HAL_UART_Init+0xa0>)
 8006012:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006014:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8006016:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006018:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800601a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	438a      	bics	r2, r1
 8006020:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006022:	2201      	movs	r2, #1
 8006024:	6819      	ldr	r1, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800602a:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 800602c:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602e:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8006030:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 8006032:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8006034:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8006036:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8006038:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 800603a:	e7bd      	b.n	8005fb8 <HAL_UART_Init+0x8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800603c:	429a      	cmp	r2, r3
 800603e:	d0c8      	beq.n	8005fd2 <HAL_UART_Init+0x22>
 8006040:	2134      	movs	r1, #52	; 0x34
 8006042:	31ff      	adds	r1, #255	; 0xff
 8006044:	e7c2      	b.n	8005fcc <HAL_UART_Init+0x1c>
 8006046:	46c0      	nop			; (mov r8, r8)
 8006048:	40013800 	.word	0x40013800
 800604c:	080070e3 	.word	0x080070e3
 8006050:	fffff7ff 	.word	0xfffff7ff

08006054 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006054:	0003      	movs	r3, r0
{
 8006056:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006058:	3369      	adds	r3, #105	; 0x69
 800605a:	781b      	ldrb	r3, [r3, #0]
{
 800605c:	0002      	movs	r2, r0
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 800605e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006060:	2b21      	cmp	r3, #33	; 0x21
 8006062:	d10f      	bne.n	8006084 <UART_Transmit_IT+0x30>
    if(huart->TxXferCount == 0U)
 8006064:	0014      	movs	r4, r2
 8006066:	3452      	adds	r4, #82	; 0x52
 8006068:	8823      	ldrh	r3, [r4, #0]
 800606a:	6811      	ldr	r1, [r2, #0]
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d109      	bne.n	8006086 <UART_Transmit_IT+0x32>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006072:	680a      	ldr	r2, [r1, #0]
 8006074:	307e      	adds	r0, #126	; 0x7e
 8006076:	4382      	bics	r2, r0
 8006078:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800607a:	2240      	movs	r2, #64	; 0x40
 800607c:	6808      	ldr	r0, [r1, #0]
 800607e:	4302      	orrs	r2, r0
 8006080:	600a      	str	r2, [r1, #0]
      return HAL_OK;
 8006082:	2000      	movs	r0, #0
  }
}
 8006084:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006086:	2080      	movs	r0, #128	; 0x80
 8006088:	6895      	ldr	r5, [r2, #8]
 800608a:	0140      	lsls	r0, r0, #5
 800608c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800608e:	4285      	cmp	r5, r0
 8006090:	d10d      	bne.n	80060ae <UART_Transmit_IT+0x5a>
 8006092:	6910      	ldr	r0, [r2, #16]
 8006094:	2800      	cmp	r0, #0
 8006096:	d10a      	bne.n	80060ae <UART_Transmit_IT+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8006098:	8818      	ldrh	r0, [r3, #0]
        huart->pTxBuffPtr += 2U;
 800609a:	3302      	adds	r3, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800609c:	05c0      	lsls	r0, r0, #23
 800609e:	0dc0      	lsrs	r0, r0, #23
 80060a0:	8508      	strh	r0, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80060a2:	64d3      	str	r3, [r2, #76]	; 0x4c
      huart->TxXferCount--;
 80060a4:	8823      	ldrh	r3, [r4, #0]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	8023      	strh	r3, [r4, #0]
 80060ac:	e7e9      	b.n	8006082 <UART_Transmit_IT+0x2e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80060ae:	1c58      	adds	r0, r3, #1
 80060b0:	64d0      	str	r0, [r2, #76]	; 0x4c
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	850b      	strh	r3, [r1, #40]	; 0x28
 80060b6:	e7f5      	b.n	80060a4 <UART_Transmit_IT+0x50>

080060b8 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060b8:	2140      	movs	r1, #64	; 0x40
 80060ba:	6802      	ldr	r2, [r0, #0]
{
 80060bc:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060be:	6813      	ldr	r3, [r2, #0]
 80060c0:	438b      	bics	r3, r1
 80060c2:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060c4:	0003      	movs	r3, r0
 80060c6:	2220      	movs	r2, #32
 80060c8:	3369      	adds	r3, #105	; 0x69
 80060ca:	701a      	strb	r2, [r3, #0]

  HAL_UART_TxCpltCallback(huart);
 80060cc:	f7fb fc6e 	bl	80019ac <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80060d0:	2000      	movs	r0, #0
 80060d2:	bd10      	pop	{r4, pc}

080060d4 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060d4:	0002      	movs	r2, r0
{
 80060d6:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060d8:	326a      	adds	r2, #106	; 0x6a
 80060da:	7811      	ldrb	r1, [r2, #0]
 80060dc:	6803      	ldr	r3, [r0, #0]
 80060de:	2922      	cmp	r1, #34	; 0x22
 80060e0:	d12d      	bne.n	800613e <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 80060e2:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e4:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 80060e6:	315c      	adds	r1, #92	; 0x5c
 80060e8:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060ea:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ec:	0164      	lsls	r4, r4, #5
 80060ee:	4029      	ands	r1, r5
 80060f0:	6885      	ldr	r5, [r0, #8]
 80060f2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80060f4:	42a5      	cmp	r5, r4
 80060f6:	d11e      	bne.n	8006136 <UART_Receive_IT+0x62>
 80060f8:	6904      	ldr	r4, [r0, #16]
 80060fa:	2c00      	cmp	r4, #0
 80060fc:	d11b      	bne.n	8006136 <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80060fe:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8006100:	3302      	adds	r3, #2
 8006102:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8006104:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 8006106:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 8006108:	315a      	adds	r1, #90	; 0x5a
 800610a:	880b      	ldrh	r3, [r1, #0]
 800610c:	3b01      	subs	r3, #1
 800610e:	b29b      	uxth	r3, r3
 8006110:	800b      	strh	r3, [r1, #0]
 8006112:	42a3      	cmp	r3, r4
 8006114:	d10d      	bne.n	8006132 <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006116:	6803      	ldr	r3, [r0, #0]
 8006118:	4d0c      	ldr	r5, [pc, #48]	; (800614c <UART_Receive_IT+0x78>)
 800611a:	6819      	ldr	r1, [r3, #0]
 800611c:	4029      	ands	r1, r5
 800611e:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006120:	6899      	ldr	r1, [r3, #8]
 8006122:	3523      	adds	r5, #35	; 0x23
 8006124:	35ff      	adds	r5, #255	; 0xff
 8006126:	43a9      	bics	r1, r5
 8006128:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800612a:	2320      	movs	r3, #32
 800612c:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 800612e:	f7ff fd3d 	bl	8005bac <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8006132:	0020      	movs	r0, r4
 8006134:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006136:	1c5c      	adds	r4, r3, #1
 8006138:	6544      	str	r4, [r0, #84]	; 0x54
 800613a:	7019      	strb	r1, [r3, #0]
 800613c:	e7e2      	b.n	8006104 <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800613e:	2208      	movs	r2, #8
 8006140:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 8006142:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006144:	430a      	orrs	r2, r1
 8006146:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8006148:	e7f3      	b.n	8006132 <UART_Receive_IT+0x5e>
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	fffffedf 	.word	0xfffffedf

08006150 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006150:	220f      	movs	r2, #15
{
 8006152:	b570      	push	{r4, r5, r6, lr}
 8006154:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006156:	6800      	ldr	r0, [r0, #0]
 8006158:	69c3      	ldr	r3, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800615a:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800615c:	401a      	ands	r2, r3
  if (errorflags == RESET)
 800615e:	d108      	bne.n	8006172 <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006160:	2520      	movs	r5, #32
 8006162:	422b      	tst	r3, r5
 8006164:	d005      	beq.n	8006172 <HAL_UART_IRQHandler+0x22>
 8006166:	4229      	tst	r1, r5
 8006168:	d003      	beq.n	8006172 <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 800616a:	0020      	movs	r0, r4
 800616c:	f7ff ffb2 	bl	80060d4 <UART_Receive_IT>
}
 8006170:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8006172:	6885      	ldr	r5, [r0, #8]
  if(   (errorflags != RESET)
 8006174:	2a00      	cmp	r2, #0
 8006176:	d060      	beq.n	800623a <HAL_UART_IRQHandler+0xea>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8006178:	2201      	movs	r2, #1
 800617a:	4015      	ands	r5, r2
 800617c:	d103      	bne.n	8006186 <HAL_UART_IRQHandler+0x36>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800617e:	2690      	movs	r6, #144	; 0x90
 8006180:	0076      	lsls	r6, r6, #1
 8006182:	4231      	tst	r1, r6
 8006184:	d059      	beq.n	800623a <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006186:	4213      	tst	r3, r2
 8006188:	d005      	beq.n	8006196 <HAL_UART_IRQHandler+0x46>
 800618a:	05ce      	lsls	r6, r1, #23
 800618c:	d503      	bpl.n	8006196 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800618e:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006190:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8006192:	4332      	orrs	r2, r6
 8006194:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006196:	2202      	movs	r2, #2
 8006198:	4213      	tst	r3, r2
 800619a:	d006      	beq.n	80061aa <HAL_UART_IRQHandler+0x5a>
 800619c:	2d00      	cmp	r5, #0
 800619e:	d004      	beq.n	80061aa <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80061a0:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061a2:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80061a4:	1892      	adds	r2, r2, r2
 80061a6:	4332      	orrs	r2, r6
 80061a8:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061aa:	2204      	movs	r2, #4
 80061ac:	4213      	tst	r3, r2
 80061ae:	d006      	beq.n	80061be <HAL_UART_IRQHandler+0x6e>
 80061b0:	2d00      	cmp	r5, #0
 80061b2:	d004      	beq.n	80061be <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80061b4:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061b6:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80061b8:	3a02      	subs	r2, #2
 80061ba:	4332      	orrs	r2, r6
 80061bc:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80061be:	071a      	lsls	r2, r3, #28
 80061c0:	d508      	bpl.n	80061d4 <HAL_UART_IRQHandler+0x84>
 80061c2:	068a      	lsls	r2, r1, #26
 80061c4:	d401      	bmi.n	80061ca <HAL_UART_IRQHandler+0x7a>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80061c6:	2d00      	cmp	r5, #0
 80061c8:	d004      	beq.n	80061d4 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80061ca:	2208      	movs	r2, #8
 80061cc:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061ce:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80061d0:	4302      	orrs	r2, r0
 80061d2:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061d4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80061d6:	2a00      	cmp	r2, #0
 80061d8:	d0ca      	beq.n	8006170 <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061da:	2220      	movs	r2, #32
 80061dc:	4213      	tst	r3, r2
 80061de:	d004      	beq.n	80061ea <HAL_UART_IRQHandler+0x9a>
 80061e0:	4211      	tst	r1, r2
 80061e2:	d002      	beq.n	80061ea <HAL_UART_IRQHandler+0x9a>
        UART_Receive_IT(huart);
 80061e4:	0020      	movs	r0, r4
 80061e6:	f7ff ff75 	bl	80060d4 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80061ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 80061ec:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80061ee:	071b      	lsls	r3, r3, #28
 80061f0:	d404      	bmi.n	80061fc <HAL_UART_IRQHandler+0xac>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	689d      	ldr	r5, [r3, #8]
 80061f6:	2340      	movs	r3, #64	; 0x40
 80061f8:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80061fa:	d01a      	beq.n	8006232 <HAL_UART_IRQHandler+0xe2>
        UART_EndRxTransfer(huart);
 80061fc:	f7ff fc62 	bl	8005ac4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006200:	2140      	movs	r1, #64	; 0x40
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	420a      	tst	r2, r1
 8006208:	d00f      	beq.n	800622a <HAL_UART_IRQHandler+0xda>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800620a:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800620c:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800620e:	438a      	bics	r2, r1
 8006210:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8006212:	2800      	cmp	r0, #0
 8006214:	d009      	beq.n	800622a <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006216:	4b13      	ldr	r3, [pc, #76]	; (8006264 <HAL_UART_IRQHandler+0x114>)
 8006218:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800621a:	f7fd fc17 	bl	8003a4c <HAL_DMA_Abort_IT>
 800621e:	2800      	cmp	r0, #0
 8006220:	d0a6      	beq.n	8006170 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006222:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8006224:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006226:	4798      	blx	r3
 8006228:	e7a2      	b.n	8006170 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 800622a:	0020      	movs	r0, r4
 800622c:	f7ff fcbf 	bl	8005bae <HAL_UART_ErrorCallback>
 8006230:	e79e      	b.n	8006170 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 8006232:	f7ff fcbc 	bl	8005bae <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006236:	66e5      	str	r5, [r4, #108]	; 0x6c
 8006238:	e79a      	b.n	8006170 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800623a:	2280      	movs	r2, #128	; 0x80
 800623c:	4213      	tst	r3, r2
 800623e:	d005      	beq.n	800624c <HAL_UART_IRQHandler+0xfc>
 8006240:	4211      	tst	r1, r2
 8006242:	d003      	beq.n	800624c <HAL_UART_IRQHandler+0xfc>
    UART_Transmit_IT(huart);
 8006244:	0020      	movs	r0, r4
 8006246:	f7ff ff05 	bl	8006054 <UART_Transmit_IT>
    return;
 800624a:	e791      	b.n	8006170 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800624c:	2240      	movs	r2, #64	; 0x40
 800624e:	4213      	tst	r3, r2
 8006250:	d100      	bne.n	8006254 <HAL_UART_IRQHandler+0x104>
 8006252:	e78d      	b.n	8006170 <HAL_UART_IRQHandler+0x20>
 8006254:	4211      	tst	r1, r2
 8006256:	d100      	bne.n	800625a <HAL_UART_IRQHandler+0x10a>
 8006258:	e78a      	b.n	8006170 <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 800625a:	0020      	movs	r0, r4
 800625c:	f7ff ff2c 	bl	80060b8 <UART_EndTransmit_IT>
    return;
 8006260:	e786      	b.n	8006170 <HAL_UART_IRQHandler+0x20>
 8006262:	46c0      	nop			; (mov r8, r8)
 8006264:	08005c0b 	.word	0x08005c0b

08006268 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006268:	480d      	ldr	r0, [pc, #52]	; (80062a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800626a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800626c:	480d      	ldr	r0, [pc, #52]	; (80062a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800626e:	490e      	ldr	r1, [pc, #56]	; (80062a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006270:	4a0e      	ldr	r2, [pc, #56]	; (80062ac <LoopForever+0xe>)
  movs r3, #0
 8006272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006274:	e002      	b.n	800627c <LoopCopyDataInit>

08006276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800627a:	3304      	adds	r3, #4

0800627c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800627c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800627e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006280:	d3f9      	bcc.n	8006276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006282:	4a0b      	ldr	r2, [pc, #44]	; (80062b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006284:	4c0b      	ldr	r4, [pc, #44]	; (80062b4 <LoopForever+0x16>)
  movs r3, #0
 8006286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006288:	e001      	b.n	800628e <LoopFillZerobss>

0800628a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800628a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800628c:	3204      	adds	r2, #4

0800628e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800628e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006290:	d3fb      	bcc.n	800628a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006292:	f7fc fbf5 	bl	8002a80 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006296:	f000 f811 	bl	80062bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800629a:	f7fc f881 	bl	80023a0 <main>

0800629e <LoopForever>:

LoopForever:
    b LoopForever
 800629e:	e7fe      	b.n	800629e <LoopForever>
  ldr   r0, =_estack
 80062a0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80062a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062a8:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 80062ac:	08007160 	.word	0x08007160
  ldr r2, =_sbss
 80062b0:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 80062b4:	20000764 	.word	0x20000764

080062b8 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80062b8:	e7fe      	b.n	80062b8 <DMA1_Channel1_IRQHandler>
	...

080062bc <__libc_init_array>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	2600      	movs	r6, #0
 80062c0:	4d0c      	ldr	r5, [pc, #48]	; (80062f4 <__libc_init_array+0x38>)
 80062c2:	4c0d      	ldr	r4, [pc, #52]	; (80062f8 <__libc_init_array+0x3c>)
 80062c4:	1b64      	subs	r4, r4, r5
 80062c6:	10a4      	asrs	r4, r4, #2
 80062c8:	42a6      	cmp	r6, r4
 80062ca:	d109      	bne.n	80062e0 <__libc_init_array+0x24>
 80062cc:	2600      	movs	r6, #0
 80062ce:	f000 fc69 	bl	8006ba4 <_init>
 80062d2:	4d0a      	ldr	r5, [pc, #40]	; (80062fc <__libc_init_array+0x40>)
 80062d4:	4c0a      	ldr	r4, [pc, #40]	; (8006300 <__libc_init_array+0x44>)
 80062d6:	1b64      	subs	r4, r4, r5
 80062d8:	10a4      	asrs	r4, r4, #2
 80062da:	42a6      	cmp	r6, r4
 80062dc:	d105      	bne.n	80062ea <__libc_init_array+0x2e>
 80062de:	bd70      	pop	{r4, r5, r6, pc}
 80062e0:	00b3      	lsls	r3, r6, #2
 80062e2:	58eb      	ldr	r3, [r5, r3]
 80062e4:	4798      	blx	r3
 80062e6:	3601      	adds	r6, #1
 80062e8:	e7ee      	b.n	80062c8 <__libc_init_array+0xc>
 80062ea:	00b3      	lsls	r3, r6, #2
 80062ec:	58eb      	ldr	r3, [r5, r3]
 80062ee:	4798      	blx	r3
 80062f0:	3601      	adds	r6, #1
 80062f2:	e7f2      	b.n	80062da <__libc_init_array+0x1e>
 80062f4:	08007158 	.word	0x08007158
 80062f8:	08007158 	.word	0x08007158
 80062fc:	08007158 	.word	0x08007158
 8006300:	0800715c 	.word	0x0800715c

08006304 <memcpy>:
 8006304:	2300      	movs	r3, #0
 8006306:	b510      	push	{r4, lr}
 8006308:	429a      	cmp	r2, r3
 800630a:	d100      	bne.n	800630e <memcpy+0xa>
 800630c:	bd10      	pop	{r4, pc}
 800630e:	5ccc      	ldrb	r4, [r1, r3]
 8006310:	54c4      	strb	r4, [r0, r3]
 8006312:	3301      	adds	r3, #1
 8006314:	e7f8      	b.n	8006308 <memcpy+0x4>

08006316 <memset>:
 8006316:	0003      	movs	r3, r0
 8006318:	1882      	adds	r2, r0, r2
 800631a:	4293      	cmp	r3, r2
 800631c:	d100      	bne.n	8006320 <memset+0xa>
 800631e:	4770      	bx	lr
 8006320:	7019      	strb	r1, [r3, #0]
 8006322:	3301      	adds	r3, #1
 8006324:	e7f9      	b.n	800631a <memset+0x4>
	...

08006328 <siprintf>:
 8006328:	b40e      	push	{r1, r2, r3}
 800632a:	b510      	push	{r4, lr}
 800632c:	b09d      	sub	sp, #116	; 0x74
 800632e:	a902      	add	r1, sp, #8
 8006330:	9002      	str	r0, [sp, #8]
 8006332:	6108      	str	r0, [r1, #16]
 8006334:	480b      	ldr	r0, [pc, #44]	; (8006364 <siprintf+0x3c>)
 8006336:	2482      	movs	r4, #130	; 0x82
 8006338:	6088      	str	r0, [r1, #8]
 800633a:	6148      	str	r0, [r1, #20]
 800633c:	2001      	movs	r0, #1
 800633e:	4240      	negs	r0, r0
 8006340:	ab1f      	add	r3, sp, #124	; 0x7c
 8006342:	81c8      	strh	r0, [r1, #14]
 8006344:	4808      	ldr	r0, [pc, #32]	; (8006368 <siprintf+0x40>)
 8006346:	cb04      	ldmia	r3!, {r2}
 8006348:	00a4      	lsls	r4, r4, #2
 800634a:	6800      	ldr	r0, [r0, #0]
 800634c:	9301      	str	r3, [sp, #4]
 800634e:	818c      	strh	r4, [r1, #12]
 8006350:	f000 f884 	bl	800645c <_svfiprintf_r>
 8006354:	2300      	movs	r3, #0
 8006356:	9a02      	ldr	r2, [sp, #8]
 8006358:	7013      	strb	r3, [r2, #0]
 800635a:	b01d      	add	sp, #116	; 0x74
 800635c:	bc10      	pop	{r4}
 800635e:	bc08      	pop	{r3}
 8006360:	b003      	add	sp, #12
 8006362:	4718      	bx	r3
 8006364:	7fffffff 	.word	0x7fffffff
 8006368:	2000024c 	.word	0x2000024c

0800636c <strcat>:
 800636c:	0002      	movs	r2, r0
 800636e:	b510      	push	{r4, lr}
 8006370:	7813      	ldrb	r3, [r2, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d105      	bne.n	8006382 <strcat+0x16>
 8006376:	5ccc      	ldrb	r4, [r1, r3]
 8006378:	54d4      	strb	r4, [r2, r3]
 800637a:	3301      	adds	r3, #1
 800637c:	2c00      	cmp	r4, #0
 800637e:	d1fa      	bne.n	8006376 <strcat+0xa>
 8006380:	bd10      	pop	{r4, pc}
 8006382:	3201      	adds	r2, #1
 8006384:	e7f4      	b.n	8006370 <strcat+0x4>

08006386 <strcpy>:
 8006386:	1c03      	adds	r3, r0, #0
 8006388:	780a      	ldrb	r2, [r1, #0]
 800638a:	3101      	adds	r1, #1
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	3301      	adds	r3, #1
 8006390:	2a00      	cmp	r2, #0
 8006392:	d1f9      	bne.n	8006388 <strcpy+0x2>
 8006394:	4770      	bx	lr
	...

08006398 <__ssputs_r>:
 8006398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800639a:	688e      	ldr	r6, [r1, #8]
 800639c:	b085      	sub	sp, #20
 800639e:	0007      	movs	r7, r0
 80063a0:	000c      	movs	r4, r1
 80063a2:	9203      	str	r2, [sp, #12]
 80063a4:	9301      	str	r3, [sp, #4]
 80063a6:	429e      	cmp	r6, r3
 80063a8:	d839      	bhi.n	800641e <__ssputs_r+0x86>
 80063aa:	2390      	movs	r3, #144	; 0x90
 80063ac:	898a      	ldrh	r2, [r1, #12]
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	421a      	tst	r2, r3
 80063b2:	d034      	beq.n	800641e <__ssputs_r+0x86>
 80063b4:	2503      	movs	r5, #3
 80063b6:	6909      	ldr	r1, [r1, #16]
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	1a5b      	subs	r3, r3, r1
 80063bc:	9302      	str	r3, [sp, #8]
 80063be:	6963      	ldr	r3, [r4, #20]
 80063c0:	9802      	ldr	r0, [sp, #8]
 80063c2:	435d      	muls	r5, r3
 80063c4:	0feb      	lsrs	r3, r5, #31
 80063c6:	195d      	adds	r5, r3, r5
 80063c8:	9b01      	ldr	r3, [sp, #4]
 80063ca:	106d      	asrs	r5, r5, #1
 80063cc:	3301      	adds	r3, #1
 80063ce:	181b      	adds	r3, r3, r0
 80063d0:	42ab      	cmp	r3, r5
 80063d2:	d900      	bls.n	80063d6 <__ssputs_r+0x3e>
 80063d4:	001d      	movs	r5, r3
 80063d6:	0553      	lsls	r3, r2, #21
 80063d8:	d532      	bpl.n	8006440 <__ssputs_r+0xa8>
 80063da:	0029      	movs	r1, r5
 80063dc:	0038      	movs	r0, r7
 80063de:	f000 fb31 	bl	8006a44 <_malloc_r>
 80063e2:	1e06      	subs	r6, r0, #0
 80063e4:	d109      	bne.n	80063fa <__ssputs_r+0x62>
 80063e6:	230c      	movs	r3, #12
 80063e8:	603b      	str	r3, [r7, #0]
 80063ea:	2340      	movs	r3, #64	; 0x40
 80063ec:	2001      	movs	r0, #1
 80063ee:	89a2      	ldrh	r2, [r4, #12]
 80063f0:	4240      	negs	r0, r0
 80063f2:	4313      	orrs	r3, r2
 80063f4:	81a3      	strh	r3, [r4, #12]
 80063f6:	b005      	add	sp, #20
 80063f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063fa:	9a02      	ldr	r2, [sp, #8]
 80063fc:	6921      	ldr	r1, [r4, #16]
 80063fe:	f7ff ff81 	bl	8006304 <memcpy>
 8006402:	89a3      	ldrh	r3, [r4, #12]
 8006404:	4a14      	ldr	r2, [pc, #80]	; (8006458 <__ssputs_r+0xc0>)
 8006406:	401a      	ands	r2, r3
 8006408:	2380      	movs	r3, #128	; 0x80
 800640a:	4313      	orrs	r3, r2
 800640c:	81a3      	strh	r3, [r4, #12]
 800640e:	9b02      	ldr	r3, [sp, #8]
 8006410:	6126      	str	r6, [r4, #16]
 8006412:	18f6      	adds	r6, r6, r3
 8006414:	6026      	str	r6, [r4, #0]
 8006416:	6165      	str	r5, [r4, #20]
 8006418:	9e01      	ldr	r6, [sp, #4]
 800641a:	1aed      	subs	r5, r5, r3
 800641c:	60a5      	str	r5, [r4, #8]
 800641e:	9b01      	ldr	r3, [sp, #4]
 8006420:	42b3      	cmp	r3, r6
 8006422:	d200      	bcs.n	8006426 <__ssputs_r+0x8e>
 8006424:	001e      	movs	r6, r3
 8006426:	0032      	movs	r2, r6
 8006428:	9903      	ldr	r1, [sp, #12]
 800642a:	6820      	ldr	r0, [r4, #0]
 800642c:	f000 faad 	bl	800698a <memmove>
 8006430:	68a3      	ldr	r3, [r4, #8]
 8006432:	2000      	movs	r0, #0
 8006434:	1b9b      	subs	r3, r3, r6
 8006436:	60a3      	str	r3, [r4, #8]
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	199e      	adds	r6, r3, r6
 800643c:	6026      	str	r6, [r4, #0]
 800643e:	e7da      	b.n	80063f6 <__ssputs_r+0x5e>
 8006440:	002a      	movs	r2, r5
 8006442:	0038      	movs	r0, r7
 8006444:	f000 fb5c 	bl	8006b00 <_realloc_r>
 8006448:	1e06      	subs	r6, r0, #0
 800644a:	d1e0      	bne.n	800640e <__ssputs_r+0x76>
 800644c:	6921      	ldr	r1, [r4, #16]
 800644e:	0038      	movs	r0, r7
 8006450:	f000 faae 	bl	80069b0 <_free_r>
 8006454:	e7c7      	b.n	80063e6 <__ssputs_r+0x4e>
 8006456:	46c0      	nop			; (mov r8, r8)
 8006458:	fffffb7f 	.word	0xfffffb7f

0800645c <_svfiprintf_r>:
 800645c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800645e:	b09f      	sub	sp, #124	; 0x7c
 8006460:	9002      	str	r0, [sp, #8]
 8006462:	9305      	str	r3, [sp, #20]
 8006464:	898b      	ldrh	r3, [r1, #12]
 8006466:	000f      	movs	r7, r1
 8006468:	0016      	movs	r6, r2
 800646a:	061b      	lsls	r3, r3, #24
 800646c:	d511      	bpl.n	8006492 <_svfiprintf_r+0x36>
 800646e:	690b      	ldr	r3, [r1, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10e      	bne.n	8006492 <_svfiprintf_r+0x36>
 8006474:	2140      	movs	r1, #64	; 0x40
 8006476:	f000 fae5 	bl	8006a44 <_malloc_r>
 800647a:	6038      	str	r0, [r7, #0]
 800647c:	6138      	str	r0, [r7, #16]
 800647e:	2800      	cmp	r0, #0
 8006480:	d105      	bne.n	800648e <_svfiprintf_r+0x32>
 8006482:	230c      	movs	r3, #12
 8006484:	9a02      	ldr	r2, [sp, #8]
 8006486:	3801      	subs	r0, #1
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	b01f      	add	sp, #124	; 0x7c
 800648c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800648e:	2340      	movs	r3, #64	; 0x40
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	2300      	movs	r3, #0
 8006494:	ad06      	add	r5, sp, #24
 8006496:	616b      	str	r3, [r5, #20]
 8006498:	3320      	adds	r3, #32
 800649a:	766b      	strb	r3, [r5, #25]
 800649c:	3310      	adds	r3, #16
 800649e:	76ab      	strb	r3, [r5, #26]
 80064a0:	0034      	movs	r4, r6
 80064a2:	7823      	ldrb	r3, [r4, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d147      	bne.n	8006538 <_svfiprintf_r+0xdc>
 80064a8:	1ba3      	subs	r3, r4, r6
 80064aa:	9304      	str	r3, [sp, #16]
 80064ac:	d00d      	beq.n	80064ca <_svfiprintf_r+0x6e>
 80064ae:	1ba3      	subs	r3, r4, r6
 80064b0:	0032      	movs	r2, r6
 80064b2:	0039      	movs	r1, r7
 80064b4:	9802      	ldr	r0, [sp, #8]
 80064b6:	f7ff ff6f 	bl	8006398 <__ssputs_r>
 80064ba:	1c43      	adds	r3, r0, #1
 80064bc:	d100      	bne.n	80064c0 <_svfiprintf_r+0x64>
 80064be:	e0b5      	b.n	800662c <_svfiprintf_r+0x1d0>
 80064c0:	696a      	ldr	r2, [r5, #20]
 80064c2:	9b04      	ldr	r3, [sp, #16]
 80064c4:	4694      	mov	ip, r2
 80064c6:	4463      	add	r3, ip
 80064c8:	616b      	str	r3, [r5, #20]
 80064ca:	7823      	ldrb	r3, [r4, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d100      	bne.n	80064d2 <_svfiprintf_r+0x76>
 80064d0:	e0ac      	b.n	800662c <_svfiprintf_r+0x1d0>
 80064d2:	2201      	movs	r2, #1
 80064d4:	2300      	movs	r3, #0
 80064d6:	4252      	negs	r2, r2
 80064d8:	606a      	str	r2, [r5, #4]
 80064da:	a902      	add	r1, sp, #8
 80064dc:	3254      	adds	r2, #84	; 0x54
 80064de:	1852      	adds	r2, r2, r1
 80064e0:	3401      	adds	r4, #1
 80064e2:	602b      	str	r3, [r5, #0]
 80064e4:	60eb      	str	r3, [r5, #12]
 80064e6:	60ab      	str	r3, [r5, #8]
 80064e8:	7013      	strb	r3, [r2, #0]
 80064ea:	65ab      	str	r3, [r5, #88]	; 0x58
 80064ec:	4e58      	ldr	r6, [pc, #352]	; (8006650 <_svfiprintf_r+0x1f4>)
 80064ee:	2205      	movs	r2, #5
 80064f0:	7821      	ldrb	r1, [r4, #0]
 80064f2:	0030      	movs	r0, r6
 80064f4:	f000 fa3e 	bl	8006974 <memchr>
 80064f8:	1c62      	adds	r2, r4, #1
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d120      	bne.n	8006540 <_svfiprintf_r+0xe4>
 80064fe:	6829      	ldr	r1, [r5, #0]
 8006500:	06cb      	lsls	r3, r1, #27
 8006502:	d504      	bpl.n	800650e <_svfiprintf_r+0xb2>
 8006504:	2353      	movs	r3, #83	; 0x53
 8006506:	ae02      	add	r6, sp, #8
 8006508:	3020      	adds	r0, #32
 800650a:	199b      	adds	r3, r3, r6
 800650c:	7018      	strb	r0, [r3, #0]
 800650e:	070b      	lsls	r3, r1, #28
 8006510:	d504      	bpl.n	800651c <_svfiprintf_r+0xc0>
 8006512:	2353      	movs	r3, #83	; 0x53
 8006514:	202b      	movs	r0, #43	; 0x2b
 8006516:	ae02      	add	r6, sp, #8
 8006518:	199b      	adds	r3, r3, r6
 800651a:	7018      	strb	r0, [r3, #0]
 800651c:	7823      	ldrb	r3, [r4, #0]
 800651e:	2b2a      	cmp	r3, #42	; 0x2a
 8006520:	d016      	beq.n	8006550 <_svfiprintf_r+0xf4>
 8006522:	2000      	movs	r0, #0
 8006524:	210a      	movs	r1, #10
 8006526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006528:	7822      	ldrb	r2, [r4, #0]
 800652a:	3a30      	subs	r2, #48	; 0x30
 800652c:	2a09      	cmp	r2, #9
 800652e:	d955      	bls.n	80065dc <_svfiprintf_r+0x180>
 8006530:	2800      	cmp	r0, #0
 8006532:	d015      	beq.n	8006560 <_svfiprintf_r+0x104>
 8006534:	9309      	str	r3, [sp, #36]	; 0x24
 8006536:	e013      	b.n	8006560 <_svfiprintf_r+0x104>
 8006538:	2b25      	cmp	r3, #37	; 0x25
 800653a:	d0b5      	beq.n	80064a8 <_svfiprintf_r+0x4c>
 800653c:	3401      	adds	r4, #1
 800653e:	e7b0      	b.n	80064a2 <_svfiprintf_r+0x46>
 8006540:	2301      	movs	r3, #1
 8006542:	1b80      	subs	r0, r0, r6
 8006544:	4083      	lsls	r3, r0
 8006546:	6829      	ldr	r1, [r5, #0]
 8006548:	0014      	movs	r4, r2
 800654a:	430b      	orrs	r3, r1
 800654c:	602b      	str	r3, [r5, #0]
 800654e:	e7cd      	b.n	80064ec <_svfiprintf_r+0x90>
 8006550:	9b05      	ldr	r3, [sp, #20]
 8006552:	1d18      	adds	r0, r3, #4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	9005      	str	r0, [sp, #20]
 8006558:	2b00      	cmp	r3, #0
 800655a:	db39      	blt.n	80065d0 <_svfiprintf_r+0x174>
 800655c:	9309      	str	r3, [sp, #36]	; 0x24
 800655e:	0014      	movs	r4, r2
 8006560:	7823      	ldrb	r3, [r4, #0]
 8006562:	2b2e      	cmp	r3, #46	; 0x2e
 8006564:	d10b      	bne.n	800657e <_svfiprintf_r+0x122>
 8006566:	7863      	ldrb	r3, [r4, #1]
 8006568:	1c62      	adds	r2, r4, #1
 800656a:	2b2a      	cmp	r3, #42	; 0x2a
 800656c:	d13e      	bne.n	80065ec <_svfiprintf_r+0x190>
 800656e:	9b05      	ldr	r3, [sp, #20]
 8006570:	3402      	adds	r4, #2
 8006572:	1d1a      	adds	r2, r3, #4
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	9205      	str	r2, [sp, #20]
 8006578:	2b00      	cmp	r3, #0
 800657a:	db34      	blt.n	80065e6 <_svfiprintf_r+0x18a>
 800657c:	9307      	str	r3, [sp, #28]
 800657e:	4e35      	ldr	r6, [pc, #212]	; (8006654 <_svfiprintf_r+0x1f8>)
 8006580:	7821      	ldrb	r1, [r4, #0]
 8006582:	2203      	movs	r2, #3
 8006584:	0030      	movs	r0, r6
 8006586:	f000 f9f5 	bl	8006974 <memchr>
 800658a:	2800      	cmp	r0, #0
 800658c:	d006      	beq.n	800659c <_svfiprintf_r+0x140>
 800658e:	2340      	movs	r3, #64	; 0x40
 8006590:	1b80      	subs	r0, r0, r6
 8006592:	4083      	lsls	r3, r0
 8006594:	682a      	ldr	r2, [r5, #0]
 8006596:	3401      	adds	r4, #1
 8006598:	4313      	orrs	r3, r2
 800659a:	602b      	str	r3, [r5, #0]
 800659c:	7821      	ldrb	r1, [r4, #0]
 800659e:	2206      	movs	r2, #6
 80065a0:	482d      	ldr	r0, [pc, #180]	; (8006658 <_svfiprintf_r+0x1fc>)
 80065a2:	1c66      	adds	r6, r4, #1
 80065a4:	7629      	strb	r1, [r5, #24]
 80065a6:	f000 f9e5 	bl	8006974 <memchr>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d046      	beq.n	800663c <_svfiprintf_r+0x1e0>
 80065ae:	4b2b      	ldr	r3, [pc, #172]	; (800665c <_svfiprintf_r+0x200>)
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d12f      	bne.n	8006614 <_svfiprintf_r+0x1b8>
 80065b4:	6829      	ldr	r1, [r5, #0]
 80065b6:	9b05      	ldr	r3, [sp, #20]
 80065b8:	2207      	movs	r2, #7
 80065ba:	05c9      	lsls	r1, r1, #23
 80065bc:	d528      	bpl.n	8006610 <_svfiprintf_r+0x1b4>
 80065be:	189b      	adds	r3, r3, r2
 80065c0:	4393      	bics	r3, r2
 80065c2:	3308      	adds	r3, #8
 80065c4:	9305      	str	r3, [sp, #20]
 80065c6:	696b      	ldr	r3, [r5, #20]
 80065c8:	9a03      	ldr	r2, [sp, #12]
 80065ca:	189b      	adds	r3, r3, r2
 80065cc:	616b      	str	r3, [r5, #20]
 80065ce:	e767      	b.n	80064a0 <_svfiprintf_r+0x44>
 80065d0:	425b      	negs	r3, r3
 80065d2:	60eb      	str	r3, [r5, #12]
 80065d4:	2302      	movs	r3, #2
 80065d6:	430b      	orrs	r3, r1
 80065d8:	602b      	str	r3, [r5, #0]
 80065da:	e7c0      	b.n	800655e <_svfiprintf_r+0x102>
 80065dc:	434b      	muls	r3, r1
 80065de:	3401      	adds	r4, #1
 80065e0:	189b      	adds	r3, r3, r2
 80065e2:	2001      	movs	r0, #1
 80065e4:	e7a0      	b.n	8006528 <_svfiprintf_r+0xcc>
 80065e6:	2301      	movs	r3, #1
 80065e8:	425b      	negs	r3, r3
 80065ea:	e7c7      	b.n	800657c <_svfiprintf_r+0x120>
 80065ec:	2300      	movs	r3, #0
 80065ee:	0014      	movs	r4, r2
 80065f0:	200a      	movs	r0, #10
 80065f2:	001a      	movs	r2, r3
 80065f4:	606b      	str	r3, [r5, #4]
 80065f6:	7821      	ldrb	r1, [r4, #0]
 80065f8:	3930      	subs	r1, #48	; 0x30
 80065fa:	2909      	cmp	r1, #9
 80065fc:	d903      	bls.n	8006606 <_svfiprintf_r+0x1aa>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0bd      	beq.n	800657e <_svfiprintf_r+0x122>
 8006602:	9207      	str	r2, [sp, #28]
 8006604:	e7bb      	b.n	800657e <_svfiprintf_r+0x122>
 8006606:	4342      	muls	r2, r0
 8006608:	3401      	adds	r4, #1
 800660a:	1852      	adds	r2, r2, r1
 800660c:	2301      	movs	r3, #1
 800660e:	e7f2      	b.n	80065f6 <_svfiprintf_r+0x19a>
 8006610:	3307      	adds	r3, #7
 8006612:	e7d5      	b.n	80065c0 <_svfiprintf_r+0x164>
 8006614:	ab05      	add	r3, sp, #20
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	003a      	movs	r2, r7
 800661a:	4b11      	ldr	r3, [pc, #68]	; (8006660 <_svfiprintf_r+0x204>)
 800661c:	0029      	movs	r1, r5
 800661e:	9802      	ldr	r0, [sp, #8]
 8006620:	e000      	b.n	8006624 <_svfiprintf_r+0x1c8>
 8006622:	bf00      	nop
 8006624:	9003      	str	r0, [sp, #12]
 8006626:	9b03      	ldr	r3, [sp, #12]
 8006628:	3301      	adds	r3, #1
 800662a:	d1cc      	bne.n	80065c6 <_svfiprintf_r+0x16a>
 800662c:	89bb      	ldrh	r3, [r7, #12]
 800662e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006630:	065b      	lsls	r3, r3, #25
 8006632:	d400      	bmi.n	8006636 <_svfiprintf_r+0x1da>
 8006634:	e729      	b.n	800648a <_svfiprintf_r+0x2e>
 8006636:	2001      	movs	r0, #1
 8006638:	4240      	negs	r0, r0
 800663a:	e726      	b.n	800648a <_svfiprintf_r+0x2e>
 800663c:	ab05      	add	r3, sp, #20
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	003a      	movs	r2, r7
 8006642:	4b07      	ldr	r3, [pc, #28]	; (8006660 <_svfiprintf_r+0x204>)
 8006644:	0029      	movs	r1, r5
 8006646:	9802      	ldr	r0, [sp, #8]
 8006648:	f000 f87a 	bl	8006740 <_printf_i>
 800664c:	e7ea      	b.n	8006624 <_svfiprintf_r+0x1c8>
 800664e:	46c0      	nop			; (mov r8, r8)
 8006650:	0800711c 	.word	0x0800711c
 8006654:	08007122 	.word	0x08007122
 8006658:	08007126 	.word	0x08007126
 800665c:	00000000 	.word	0x00000000
 8006660:	08006399 	.word	0x08006399

08006664 <_printf_common>:
 8006664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006666:	0015      	movs	r5, r2
 8006668:	9301      	str	r3, [sp, #4]
 800666a:	688a      	ldr	r2, [r1, #8]
 800666c:	690b      	ldr	r3, [r1, #16]
 800666e:	9000      	str	r0, [sp, #0]
 8006670:	000c      	movs	r4, r1
 8006672:	4293      	cmp	r3, r2
 8006674:	da00      	bge.n	8006678 <_printf_common+0x14>
 8006676:	0013      	movs	r3, r2
 8006678:	0022      	movs	r2, r4
 800667a:	602b      	str	r3, [r5, #0]
 800667c:	3243      	adds	r2, #67	; 0x43
 800667e:	7812      	ldrb	r2, [r2, #0]
 8006680:	2a00      	cmp	r2, #0
 8006682:	d001      	beq.n	8006688 <_printf_common+0x24>
 8006684:	3301      	adds	r3, #1
 8006686:	602b      	str	r3, [r5, #0]
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	069b      	lsls	r3, r3, #26
 800668c:	d502      	bpl.n	8006694 <_printf_common+0x30>
 800668e:	682b      	ldr	r3, [r5, #0]
 8006690:	3302      	adds	r3, #2
 8006692:	602b      	str	r3, [r5, #0]
 8006694:	2706      	movs	r7, #6
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	401f      	ands	r7, r3
 800669a:	d027      	beq.n	80066ec <_printf_common+0x88>
 800669c:	0023      	movs	r3, r4
 800669e:	3343      	adds	r3, #67	; 0x43
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	1e5a      	subs	r2, r3, #1
 80066a4:	4193      	sbcs	r3, r2
 80066a6:	6822      	ldr	r2, [r4, #0]
 80066a8:	0692      	lsls	r2, r2, #26
 80066aa:	d430      	bmi.n	800670e <_printf_common+0xaa>
 80066ac:	0022      	movs	r2, r4
 80066ae:	9901      	ldr	r1, [sp, #4]
 80066b0:	3243      	adds	r2, #67	; 0x43
 80066b2:	9800      	ldr	r0, [sp, #0]
 80066b4:	9e08      	ldr	r6, [sp, #32]
 80066b6:	47b0      	blx	r6
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d025      	beq.n	8006708 <_printf_common+0xa4>
 80066bc:	2306      	movs	r3, #6
 80066be:	6820      	ldr	r0, [r4, #0]
 80066c0:	682a      	ldr	r2, [r5, #0]
 80066c2:	68e1      	ldr	r1, [r4, #12]
 80066c4:	4003      	ands	r3, r0
 80066c6:	2500      	movs	r5, #0
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	d103      	bne.n	80066d4 <_printf_common+0x70>
 80066cc:	1a8d      	subs	r5, r1, r2
 80066ce:	43eb      	mvns	r3, r5
 80066d0:	17db      	asrs	r3, r3, #31
 80066d2:	401d      	ands	r5, r3
 80066d4:	68a3      	ldr	r3, [r4, #8]
 80066d6:	6922      	ldr	r2, [r4, #16]
 80066d8:	4293      	cmp	r3, r2
 80066da:	dd01      	ble.n	80066e0 <_printf_common+0x7c>
 80066dc:	1a9b      	subs	r3, r3, r2
 80066de:	18ed      	adds	r5, r5, r3
 80066e0:	2700      	movs	r7, #0
 80066e2:	42bd      	cmp	r5, r7
 80066e4:	d120      	bne.n	8006728 <_printf_common+0xc4>
 80066e6:	2000      	movs	r0, #0
 80066e8:	e010      	b.n	800670c <_printf_common+0xa8>
 80066ea:	3701      	adds	r7, #1
 80066ec:	68e3      	ldr	r3, [r4, #12]
 80066ee:	682a      	ldr	r2, [r5, #0]
 80066f0:	1a9b      	subs	r3, r3, r2
 80066f2:	429f      	cmp	r7, r3
 80066f4:	dad2      	bge.n	800669c <_printf_common+0x38>
 80066f6:	0022      	movs	r2, r4
 80066f8:	2301      	movs	r3, #1
 80066fa:	3219      	adds	r2, #25
 80066fc:	9901      	ldr	r1, [sp, #4]
 80066fe:	9800      	ldr	r0, [sp, #0]
 8006700:	9e08      	ldr	r6, [sp, #32]
 8006702:	47b0      	blx	r6
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	d1f0      	bne.n	80066ea <_printf_common+0x86>
 8006708:	2001      	movs	r0, #1
 800670a:	4240      	negs	r0, r0
 800670c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800670e:	2030      	movs	r0, #48	; 0x30
 8006710:	18e1      	adds	r1, r4, r3
 8006712:	3143      	adds	r1, #67	; 0x43
 8006714:	7008      	strb	r0, [r1, #0]
 8006716:	0021      	movs	r1, r4
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	3145      	adds	r1, #69	; 0x45
 800671c:	7809      	ldrb	r1, [r1, #0]
 800671e:	18a2      	adds	r2, r4, r2
 8006720:	3243      	adds	r2, #67	; 0x43
 8006722:	3302      	adds	r3, #2
 8006724:	7011      	strb	r1, [r2, #0]
 8006726:	e7c1      	b.n	80066ac <_printf_common+0x48>
 8006728:	0022      	movs	r2, r4
 800672a:	2301      	movs	r3, #1
 800672c:	321a      	adds	r2, #26
 800672e:	9901      	ldr	r1, [sp, #4]
 8006730:	9800      	ldr	r0, [sp, #0]
 8006732:	9e08      	ldr	r6, [sp, #32]
 8006734:	47b0      	blx	r6
 8006736:	1c43      	adds	r3, r0, #1
 8006738:	d0e6      	beq.n	8006708 <_printf_common+0xa4>
 800673a:	3701      	adds	r7, #1
 800673c:	e7d1      	b.n	80066e2 <_printf_common+0x7e>
	...

08006740 <_printf_i>:
 8006740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006742:	b08b      	sub	sp, #44	; 0x2c
 8006744:	9206      	str	r2, [sp, #24]
 8006746:	000a      	movs	r2, r1
 8006748:	3243      	adds	r2, #67	; 0x43
 800674a:	9307      	str	r3, [sp, #28]
 800674c:	9005      	str	r0, [sp, #20]
 800674e:	9204      	str	r2, [sp, #16]
 8006750:	7e0a      	ldrb	r2, [r1, #24]
 8006752:	000c      	movs	r4, r1
 8006754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006756:	2a6e      	cmp	r2, #110	; 0x6e
 8006758:	d100      	bne.n	800675c <_printf_i+0x1c>
 800675a:	e08f      	b.n	800687c <_printf_i+0x13c>
 800675c:	d817      	bhi.n	800678e <_printf_i+0x4e>
 800675e:	2a63      	cmp	r2, #99	; 0x63
 8006760:	d02c      	beq.n	80067bc <_printf_i+0x7c>
 8006762:	d808      	bhi.n	8006776 <_printf_i+0x36>
 8006764:	2a00      	cmp	r2, #0
 8006766:	d100      	bne.n	800676a <_printf_i+0x2a>
 8006768:	e099      	b.n	800689e <_printf_i+0x15e>
 800676a:	2a58      	cmp	r2, #88	; 0x58
 800676c:	d054      	beq.n	8006818 <_printf_i+0xd8>
 800676e:	0026      	movs	r6, r4
 8006770:	3642      	adds	r6, #66	; 0x42
 8006772:	7032      	strb	r2, [r6, #0]
 8006774:	e029      	b.n	80067ca <_printf_i+0x8a>
 8006776:	2a64      	cmp	r2, #100	; 0x64
 8006778:	d001      	beq.n	800677e <_printf_i+0x3e>
 800677a:	2a69      	cmp	r2, #105	; 0x69
 800677c:	d1f7      	bne.n	800676e <_printf_i+0x2e>
 800677e:	6821      	ldr	r1, [r4, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	0608      	lsls	r0, r1, #24
 8006784:	d523      	bpl.n	80067ce <_printf_i+0x8e>
 8006786:	1d11      	adds	r1, r2, #4
 8006788:	6019      	str	r1, [r3, #0]
 800678a:	6815      	ldr	r5, [r2, #0]
 800678c:	e025      	b.n	80067da <_printf_i+0x9a>
 800678e:	2a73      	cmp	r2, #115	; 0x73
 8006790:	d100      	bne.n	8006794 <_printf_i+0x54>
 8006792:	e088      	b.n	80068a6 <_printf_i+0x166>
 8006794:	d808      	bhi.n	80067a8 <_printf_i+0x68>
 8006796:	2a6f      	cmp	r2, #111	; 0x6f
 8006798:	d029      	beq.n	80067ee <_printf_i+0xae>
 800679a:	2a70      	cmp	r2, #112	; 0x70
 800679c:	d1e7      	bne.n	800676e <_printf_i+0x2e>
 800679e:	2220      	movs	r2, #32
 80067a0:	6809      	ldr	r1, [r1, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	6022      	str	r2, [r4, #0]
 80067a6:	e003      	b.n	80067b0 <_printf_i+0x70>
 80067a8:	2a75      	cmp	r2, #117	; 0x75
 80067aa:	d020      	beq.n	80067ee <_printf_i+0xae>
 80067ac:	2a78      	cmp	r2, #120	; 0x78
 80067ae:	d1de      	bne.n	800676e <_printf_i+0x2e>
 80067b0:	0022      	movs	r2, r4
 80067b2:	2178      	movs	r1, #120	; 0x78
 80067b4:	3245      	adds	r2, #69	; 0x45
 80067b6:	7011      	strb	r1, [r2, #0]
 80067b8:	4a6c      	ldr	r2, [pc, #432]	; (800696c <_printf_i+0x22c>)
 80067ba:	e030      	b.n	800681e <_printf_i+0xde>
 80067bc:	000e      	movs	r6, r1
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	3642      	adds	r6, #66	; 0x42
 80067c2:	1d11      	adds	r1, r2, #4
 80067c4:	6019      	str	r1, [r3, #0]
 80067c6:	6813      	ldr	r3, [r2, #0]
 80067c8:	7033      	strb	r3, [r6, #0]
 80067ca:	2301      	movs	r3, #1
 80067cc:	e079      	b.n	80068c2 <_printf_i+0x182>
 80067ce:	0649      	lsls	r1, r1, #25
 80067d0:	d5d9      	bpl.n	8006786 <_printf_i+0x46>
 80067d2:	1d11      	adds	r1, r2, #4
 80067d4:	6019      	str	r1, [r3, #0]
 80067d6:	2300      	movs	r3, #0
 80067d8:	5ed5      	ldrsh	r5, [r2, r3]
 80067da:	2d00      	cmp	r5, #0
 80067dc:	da03      	bge.n	80067e6 <_printf_i+0xa6>
 80067de:	232d      	movs	r3, #45	; 0x2d
 80067e0:	9a04      	ldr	r2, [sp, #16]
 80067e2:	426d      	negs	r5, r5
 80067e4:	7013      	strb	r3, [r2, #0]
 80067e6:	4b62      	ldr	r3, [pc, #392]	; (8006970 <_printf_i+0x230>)
 80067e8:	270a      	movs	r7, #10
 80067ea:	9303      	str	r3, [sp, #12]
 80067ec:	e02f      	b.n	800684e <_printf_i+0x10e>
 80067ee:	6820      	ldr	r0, [r4, #0]
 80067f0:	6819      	ldr	r1, [r3, #0]
 80067f2:	0605      	lsls	r5, r0, #24
 80067f4:	d503      	bpl.n	80067fe <_printf_i+0xbe>
 80067f6:	1d08      	adds	r0, r1, #4
 80067f8:	6018      	str	r0, [r3, #0]
 80067fa:	680d      	ldr	r5, [r1, #0]
 80067fc:	e005      	b.n	800680a <_printf_i+0xca>
 80067fe:	0640      	lsls	r0, r0, #25
 8006800:	d5f9      	bpl.n	80067f6 <_printf_i+0xb6>
 8006802:	680d      	ldr	r5, [r1, #0]
 8006804:	1d08      	adds	r0, r1, #4
 8006806:	6018      	str	r0, [r3, #0]
 8006808:	b2ad      	uxth	r5, r5
 800680a:	4b59      	ldr	r3, [pc, #356]	; (8006970 <_printf_i+0x230>)
 800680c:	2708      	movs	r7, #8
 800680e:	9303      	str	r3, [sp, #12]
 8006810:	2a6f      	cmp	r2, #111	; 0x6f
 8006812:	d018      	beq.n	8006846 <_printf_i+0x106>
 8006814:	270a      	movs	r7, #10
 8006816:	e016      	b.n	8006846 <_printf_i+0x106>
 8006818:	3145      	adds	r1, #69	; 0x45
 800681a:	700a      	strb	r2, [r1, #0]
 800681c:	4a54      	ldr	r2, [pc, #336]	; (8006970 <_printf_i+0x230>)
 800681e:	9203      	str	r2, [sp, #12]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	6821      	ldr	r1, [r4, #0]
 8006824:	1d10      	adds	r0, r2, #4
 8006826:	6018      	str	r0, [r3, #0]
 8006828:	6815      	ldr	r5, [r2, #0]
 800682a:	0608      	lsls	r0, r1, #24
 800682c:	d522      	bpl.n	8006874 <_printf_i+0x134>
 800682e:	07cb      	lsls	r3, r1, #31
 8006830:	d502      	bpl.n	8006838 <_printf_i+0xf8>
 8006832:	2320      	movs	r3, #32
 8006834:	4319      	orrs	r1, r3
 8006836:	6021      	str	r1, [r4, #0]
 8006838:	2710      	movs	r7, #16
 800683a:	2d00      	cmp	r5, #0
 800683c:	d103      	bne.n	8006846 <_printf_i+0x106>
 800683e:	2320      	movs	r3, #32
 8006840:	6822      	ldr	r2, [r4, #0]
 8006842:	439a      	bics	r2, r3
 8006844:	6022      	str	r2, [r4, #0]
 8006846:	0023      	movs	r3, r4
 8006848:	2200      	movs	r2, #0
 800684a:	3343      	adds	r3, #67	; 0x43
 800684c:	701a      	strb	r2, [r3, #0]
 800684e:	6863      	ldr	r3, [r4, #4]
 8006850:	60a3      	str	r3, [r4, #8]
 8006852:	2b00      	cmp	r3, #0
 8006854:	db5c      	blt.n	8006910 <_printf_i+0x1d0>
 8006856:	2204      	movs	r2, #4
 8006858:	6821      	ldr	r1, [r4, #0]
 800685a:	4391      	bics	r1, r2
 800685c:	6021      	str	r1, [r4, #0]
 800685e:	2d00      	cmp	r5, #0
 8006860:	d158      	bne.n	8006914 <_printf_i+0x1d4>
 8006862:	9e04      	ldr	r6, [sp, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d064      	beq.n	8006932 <_printf_i+0x1f2>
 8006868:	0026      	movs	r6, r4
 800686a:	9b03      	ldr	r3, [sp, #12]
 800686c:	3642      	adds	r6, #66	; 0x42
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	7033      	strb	r3, [r6, #0]
 8006872:	e05e      	b.n	8006932 <_printf_i+0x1f2>
 8006874:	0648      	lsls	r0, r1, #25
 8006876:	d5da      	bpl.n	800682e <_printf_i+0xee>
 8006878:	b2ad      	uxth	r5, r5
 800687a:	e7d8      	b.n	800682e <_printf_i+0xee>
 800687c:	6809      	ldr	r1, [r1, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	0608      	lsls	r0, r1, #24
 8006882:	d505      	bpl.n	8006890 <_printf_i+0x150>
 8006884:	1d11      	adds	r1, r2, #4
 8006886:	6019      	str	r1, [r3, #0]
 8006888:	6813      	ldr	r3, [r2, #0]
 800688a:	6962      	ldr	r2, [r4, #20]
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	e006      	b.n	800689e <_printf_i+0x15e>
 8006890:	0649      	lsls	r1, r1, #25
 8006892:	d5f7      	bpl.n	8006884 <_printf_i+0x144>
 8006894:	1d11      	adds	r1, r2, #4
 8006896:	6019      	str	r1, [r3, #0]
 8006898:	6813      	ldr	r3, [r2, #0]
 800689a:	8aa2      	ldrh	r2, [r4, #20]
 800689c:	801a      	strh	r2, [r3, #0]
 800689e:	2300      	movs	r3, #0
 80068a0:	9e04      	ldr	r6, [sp, #16]
 80068a2:	6123      	str	r3, [r4, #16]
 80068a4:	e054      	b.n	8006950 <_printf_i+0x210>
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	1d11      	adds	r1, r2, #4
 80068aa:	6019      	str	r1, [r3, #0]
 80068ac:	6816      	ldr	r6, [r2, #0]
 80068ae:	2100      	movs	r1, #0
 80068b0:	6862      	ldr	r2, [r4, #4]
 80068b2:	0030      	movs	r0, r6
 80068b4:	f000 f85e 	bl	8006974 <memchr>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d001      	beq.n	80068c0 <_printf_i+0x180>
 80068bc:	1b80      	subs	r0, r0, r6
 80068be:	6060      	str	r0, [r4, #4]
 80068c0:	6863      	ldr	r3, [r4, #4]
 80068c2:	6123      	str	r3, [r4, #16]
 80068c4:	2300      	movs	r3, #0
 80068c6:	9a04      	ldr	r2, [sp, #16]
 80068c8:	7013      	strb	r3, [r2, #0]
 80068ca:	e041      	b.n	8006950 <_printf_i+0x210>
 80068cc:	6923      	ldr	r3, [r4, #16]
 80068ce:	0032      	movs	r2, r6
 80068d0:	9906      	ldr	r1, [sp, #24]
 80068d2:	9805      	ldr	r0, [sp, #20]
 80068d4:	9d07      	ldr	r5, [sp, #28]
 80068d6:	47a8      	blx	r5
 80068d8:	1c43      	adds	r3, r0, #1
 80068da:	d043      	beq.n	8006964 <_printf_i+0x224>
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	2500      	movs	r5, #0
 80068e0:	079b      	lsls	r3, r3, #30
 80068e2:	d40f      	bmi.n	8006904 <_printf_i+0x1c4>
 80068e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e6:	68e0      	ldr	r0, [r4, #12]
 80068e8:	4298      	cmp	r0, r3
 80068ea:	da3d      	bge.n	8006968 <_printf_i+0x228>
 80068ec:	0018      	movs	r0, r3
 80068ee:	e03b      	b.n	8006968 <_printf_i+0x228>
 80068f0:	0022      	movs	r2, r4
 80068f2:	2301      	movs	r3, #1
 80068f4:	3219      	adds	r2, #25
 80068f6:	9906      	ldr	r1, [sp, #24]
 80068f8:	9805      	ldr	r0, [sp, #20]
 80068fa:	9e07      	ldr	r6, [sp, #28]
 80068fc:	47b0      	blx	r6
 80068fe:	1c43      	adds	r3, r0, #1
 8006900:	d030      	beq.n	8006964 <_printf_i+0x224>
 8006902:	3501      	adds	r5, #1
 8006904:	68e3      	ldr	r3, [r4, #12]
 8006906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006908:	1a9b      	subs	r3, r3, r2
 800690a:	429d      	cmp	r5, r3
 800690c:	dbf0      	blt.n	80068f0 <_printf_i+0x1b0>
 800690e:	e7e9      	b.n	80068e4 <_printf_i+0x1a4>
 8006910:	2d00      	cmp	r5, #0
 8006912:	d0a9      	beq.n	8006868 <_printf_i+0x128>
 8006914:	9e04      	ldr	r6, [sp, #16]
 8006916:	0028      	movs	r0, r5
 8006918:	0039      	movs	r1, r7
 800691a:	f7f9 fc85 	bl	8000228 <__aeabi_uidivmod>
 800691e:	9b03      	ldr	r3, [sp, #12]
 8006920:	3e01      	subs	r6, #1
 8006922:	5c5b      	ldrb	r3, [r3, r1]
 8006924:	0028      	movs	r0, r5
 8006926:	7033      	strb	r3, [r6, #0]
 8006928:	0039      	movs	r1, r7
 800692a:	f7f9 fbf7 	bl	800011c <__udivsi3>
 800692e:	1e05      	subs	r5, r0, #0
 8006930:	d1f1      	bne.n	8006916 <_printf_i+0x1d6>
 8006932:	2f08      	cmp	r7, #8
 8006934:	d109      	bne.n	800694a <_printf_i+0x20a>
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	07db      	lsls	r3, r3, #31
 800693a:	d506      	bpl.n	800694a <_printf_i+0x20a>
 800693c:	6863      	ldr	r3, [r4, #4]
 800693e:	6922      	ldr	r2, [r4, #16]
 8006940:	4293      	cmp	r3, r2
 8006942:	dc02      	bgt.n	800694a <_printf_i+0x20a>
 8006944:	2330      	movs	r3, #48	; 0x30
 8006946:	3e01      	subs	r6, #1
 8006948:	7033      	strb	r3, [r6, #0]
 800694a:	9b04      	ldr	r3, [sp, #16]
 800694c:	1b9b      	subs	r3, r3, r6
 800694e:	6123      	str	r3, [r4, #16]
 8006950:	9b07      	ldr	r3, [sp, #28]
 8006952:	aa09      	add	r2, sp, #36	; 0x24
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	0021      	movs	r1, r4
 8006958:	9b06      	ldr	r3, [sp, #24]
 800695a:	9805      	ldr	r0, [sp, #20]
 800695c:	f7ff fe82 	bl	8006664 <_printf_common>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d1b3      	bne.n	80068cc <_printf_i+0x18c>
 8006964:	2001      	movs	r0, #1
 8006966:	4240      	negs	r0, r0
 8006968:	b00b      	add	sp, #44	; 0x2c
 800696a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800696c:	0800713e 	.word	0x0800713e
 8006970:	0800712d 	.word	0x0800712d

08006974 <memchr>:
 8006974:	b2c9      	uxtb	r1, r1
 8006976:	1882      	adds	r2, r0, r2
 8006978:	4290      	cmp	r0, r2
 800697a:	d101      	bne.n	8006980 <memchr+0xc>
 800697c:	2000      	movs	r0, #0
 800697e:	4770      	bx	lr
 8006980:	7803      	ldrb	r3, [r0, #0]
 8006982:	428b      	cmp	r3, r1
 8006984:	d0fb      	beq.n	800697e <memchr+0xa>
 8006986:	3001      	adds	r0, #1
 8006988:	e7f6      	b.n	8006978 <memchr+0x4>

0800698a <memmove>:
 800698a:	b510      	push	{r4, lr}
 800698c:	4288      	cmp	r0, r1
 800698e:	d902      	bls.n	8006996 <memmove+0xc>
 8006990:	188b      	adds	r3, r1, r2
 8006992:	4298      	cmp	r0, r3
 8006994:	d308      	bcc.n	80069a8 <memmove+0x1e>
 8006996:	2300      	movs	r3, #0
 8006998:	429a      	cmp	r2, r3
 800699a:	d007      	beq.n	80069ac <memmove+0x22>
 800699c:	5ccc      	ldrb	r4, [r1, r3]
 800699e:	54c4      	strb	r4, [r0, r3]
 80069a0:	3301      	adds	r3, #1
 80069a2:	e7f9      	b.n	8006998 <memmove+0xe>
 80069a4:	5c8b      	ldrb	r3, [r1, r2]
 80069a6:	5483      	strb	r3, [r0, r2]
 80069a8:	3a01      	subs	r2, #1
 80069aa:	d2fb      	bcs.n	80069a4 <memmove+0x1a>
 80069ac:	bd10      	pop	{r4, pc}
	...

080069b0 <_free_r>:
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	0005      	movs	r5, r0
 80069b4:	2900      	cmp	r1, #0
 80069b6:	d010      	beq.n	80069da <_free_r+0x2a>
 80069b8:	1f0c      	subs	r4, r1, #4
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	da00      	bge.n	80069c2 <_free_r+0x12>
 80069c0:	18e4      	adds	r4, r4, r3
 80069c2:	0028      	movs	r0, r5
 80069c4:	f000 f8d4 	bl	8006b70 <__malloc_lock>
 80069c8:	4a1d      	ldr	r2, [pc, #116]	; (8006a40 <_free_r+0x90>)
 80069ca:	6813      	ldr	r3, [r2, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d105      	bne.n	80069dc <_free_r+0x2c>
 80069d0:	6063      	str	r3, [r4, #4]
 80069d2:	6014      	str	r4, [r2, #0]
 80069d4:	0028      	movs	r0, r5
 80069d6:	f000 f8cc 	bl	8006b72 <__malloc_unlock>
 80069da:	bd70      	pop	{r4, r5, r6, pc}
 80069dc:	42a3      	cmp	r3, r4
 80069de:	d909      	bls.n	80069f4 <_free_r+0x44>
 80069e0:	6821      	ldr	r1, [r4, #0]
 80069e2:	1860      	adds	r0, r4, r1
 80069e4:	4283      	cmp	r3, r0
 80069e6:	d1f3      	bne.n	80069d0 <_free_r+0x20>
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	1841      	adds	r1, r0, r1
 80069ee:	6021      	str	r1, [r4, #0]
 80069f0:	e7ee      	b.n	80069d0 <_free_r+0x20>
 80069f2:	0013      	movs	r3, r2
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	2a00      	cmp	r2, #0
 80069f8:	d001      	beq.n	80069fe <_free_r+0x4e>
 80069fa:	42a2      	cmp	r2, r4
 80069fc:	d9f9      	bls.n	80069f2 <_free_r+0x42>
 80069fe:	6819      	ldr	r1, [r3, #0]
 8006a00:	1858      	adds	r0, r3, r1
 8006a02:	42a0      	cmp	r0, r4
 8006a04:	d10b      	bne.n	8006a1e <_free_r+0x6e>
 8006a06:	6820      	ldr	r0, [r4, #0]
 8006a08:	1809      	adds	r1, r1, r0
 8006a0a:	1858      	adds	r0, r3, r1
 8006a0c:	6019      	str	r1, [r3, #0]
 8006a0e:	4282      	cmp	r2, r0
 8006a10:	d1e0      	bne.n	80069d4 <_free_r+0x24>
 8006a12:	6810      	ldr	r0, [r2, #0]
 8006a14:	6852      	ldr	r2, [r2, #4]
 8006a16:	1841      	adds	r1, r0, r1
 8006a18:	6019      	str	r1, [r3, #0]
 8006a1a:	605a      	str	r2, [r3, #4]
 8006a1c:	e7da      	b.n	80069d4 <_free_r+0x24>
 8006a1e:	42a0      	cmp	r0, r4
 8006a20:	d902      	bls.n	8006a28 <_free_r+0x78>
 8006a22:	230c      	movs	r3, #12
 8006a24:	602b      	str	r3, [r5, #0]
 8006a26:	e7d5      	b.n	80069d4 <_free_r+0x24>
 8006a28:	6821      	ldr	r1, [r4, #0]
 8006a2a:	1860      	adds	r0, r4, r1
 8006a2c:	4282      	cmp	r2, r0
 8006a2e:	d103      	bne.n	8006a38 <_free_r+0x88>
 8006a30:	6810      	ldr	r0, [r2, #0]
 8006a32:	6852      	ldr	r2, [r2, #4]
 8006a34:	1841      	adds	r1, r0, r1
 8006a36:	6021      	str	r1, [r4, #0]
 8006a38:	6062      	str	r2, [r4, #4]
 8006a3a:	605c      	str	r4, [r3, #4]
 8006a3c:	e7ca      	b.n	80069d4 <_free_r+0x24>
 8006a3e:	46c0      	nop			; (mov r8, r8)
 8006a40:	20000318 	.word	0x20000318

08006a44 <_malloc_r>:
 8006a44:	2303      	movs	r3, #3
 8006a46:	b570      	push	{r4, r5, r6, lr}
 8006a48:	1ccd      	adds	r5, r1, #3
 8006a4a:	439d      	bics	r5, r3
 8006a4c:	3508      	adds	r5, #8
 8006a4e:	0006      	movs	r6, r0
 8006a50:	2d0c      	cmp	r5, #12
 8006a52:	d21e      	bcs.n	8006a92 <_malloc_r+0x4e>
 8006a54:	250c      	movs	r5, #12
 8006a56:	42a9      	cmp	r1, r5
 8006a58:	d81d      	bhi.n	8006a96 <_malloc_r+0x52>
 8006a5a:	0030      	movs	r0, r6
 8006a5c:	f000 f888 	bl	8006b70 <__malloc_lock>
 8006a60:	4a25      	ldr	r2, [pc, #148]	; (8006af8 <_malloc_r+0xb4>)
 8006a62:	6814      	ldr	r4, [r2, #0]
 8006a64:	0021      	movs	r1, r4
 8006a66:	2900      	cmp	r1, #0
 8006a68:	d119      	bne.n	8006a9e <_malloc_r+0x5a>
 8006a6a:	4c24      	ldr	r4, [pc, #144]	; (8006afc <_malloc_r+0xb8>)
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d103      	bne.n	8006a7a <_malloc_r+0x36>
 8006a72:	0030      	movs	r0, r6
 8006a74:	f000 f86a 	bl	8006b4c <_sbrk_r>
 8006a78:	6020      	str	r0, [r4, #0]
 8006a7a:	0029      	movs	r1, r5
 8006a7c:	0030      	movs	r0, r6
 8006a7e:	f000 f865 	bl	8006b4c <_sbrk_r>
 8006a82:	1c43      	adds	r3, r0, #1
 8006a84:	d12c      	bne.n	8006ae0 <_malloc_r+0x9c>
 8006a86:	230c      	movs	r3, #12
 8006a88:	0030      	movs	r0, r6
 8006a8a:	6033      	str	r3, [r6, #0]
 8006a8c:	f000 f871 	bl	8006b72 <__malloc_unlock>
 8006a90:	e003      	b.n	8006a9a <_malloc_r+0x56>
 8006a92:	2d00      	cmp	r5, #0
 8006a94:	dadf      	bge.n	8006a56 <_malloc_r+0x12>
 8006a96:	230c      	movs	r3, #12
 8006a98:	6033      	str	r3, [r6, #0]
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	bd70      	pop	{r4, r5, r6, pc}
 8006a9e:	680b      	ldr	r3, [r1, #0]
 8006aa0:	1b5b      	subs	r3, r3, r5
 8006aa2:	d41a      	bmi.n	8006ada <_malloc_r+0x96>
 8006aa4:	2b0b      	cmp	r3, #11
 8006aa6:	d903      	bls.n	8006ab0 <_malloc_r+0x6c>
 8006aa8:	600b      	str	r3, [r1, #0]
 8006aaa:	18cc      	adds	r4, r1, r3
 8006aac:	6025      	str	r5, [r4, #0]
 8006aae:	e003      	b.n	8006ab8 <_malloc_r+0x74>
 8006ab0:	428c      	cmp	r4, r1
 8006ab2:	d10e      	bne.n	8006ad2 <_malloc_r+0x8e>
 8006ab4:	6863      	ldr	r3, [r4, #4]
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	0030      	movs	r0, r6
 8006aba:	f000 f85a 	bl	8006b72 <__malloc_unlock>
 8006abe:	0020      	movs	r0, r4
 8006ac0:	2207      	movs	r2, #7
 8006ac2:	300b      	adds	r0, #11
 8006ac4:	1d23      	adds	r3, r4, #4
 8006ac6:	4390      	bics	r0, r2
 8006ac8:	1ac3      	subs	r3, r0, r3
 8006aca:	d0e7      	beq.n	8006a9c <_malloc_r+0x58>
 8006acc:	425a      	negs	r2, r3
 8006ace:	50e2      	str	r2, [r4, r3]
 8006ad0:	e7e4      	b.n	8006a9c <_malloc_r+0x58>
 8006ad2:	684b      	ldr	r3, [r1, #4]
 8006ad4:	6063      	str	r3, [r4, #4]
 8006ad6:	000c      	movs	r4, r1
 8006ad8:	e7ee      	b.n	8006ab8 <_malloc_r+0x74>
 8006ada:	000c      	movs	r4, r1
 8006adc:	6849      	ldr	r1, [r1, #4]
 8006ade:	e7c2      	b.n	8006a66 <_malloc_r+0x22>
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	1cc4      	adds	r4, r0, #3
 8006ae4:	439c      	bics	r4, r3
 8006ae6:	42a0      	cmp	r0, r4
 8006ae8:	d0e0      	beq.n	8006aac <_malloc_r+0x68>
 8006aea:	1a21      	subs	r1, r4, r0
 8006aec:	0030      	movs	r0, r6
 8006aee:	f000 f82d 	bl	8006b4c <_sbrk_r>
 8006af2:	1c43      	adds	r3, r0, #1
 8006af4:	d1da      	bne.n	8006aac <_malloc_r+0x68>
 8006af6:	e7c6      	b.n	8006a86 <_malloc_r+0x42>
 8006af8:	20000318 	.word	0x20000318
 8006afc:	2000031c 	.word	0x2000031c

08006b00 <_realloc_r>:
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b02:	0007      	movs	r7, r0
 8006b04:	000d      	movs	r5, r1
 8006b06:	0016      	movs	r6, r2
 8006b08:	2900      	cmp	r1, #0
 8006b0a:	d105      	bne.n	8006b18 <_realloc_r+0x18>
 8006b0c:	0011      	movs	r1, r2
 8006b0e:	f7ff ff99 	bl	8006a44 <_malloc_r>
 8006b12:	0004      	movs	r4, r0
 8006b14:	0020      	movs	r0, r4
 8006b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b18:	2a00      	cmp	r2, #0
 8006b1a:	d103      	bne.n	8006b24 <_realloc_r+0x24>
 8006b1c:	f7ff ff48 	bl	80069b0 <_free_r>
 8006b20:	0034      	movs	r4, r6
 8006b22:	e7f7      	b.n	8006b14 <_realloc_r+0x14>
 8006b24:	f000 f826 	bl	8006b74 <_malloc_usable_size_r>
 8006b28:	002c      	movs	r4, r5
 8006b2a:	4286      	cmp	r6, r0
 8006b2c:	d9f2      	bls.n	8006b14 <_realloc_r+0x14>
 8006b2e:	0031      	movs	r1, r6
 8006b30:	0038      	movs	r0, r7
 8006b32:	f7ff ff87 	bl	8006a44 <_malloc_r>
 8006b36:	1e04      	subs	r4, r0, #0
 8006b38:	d0ec      	beq.n	8006b14 <_realloc_r+0x14>
 8006b3a:	0029      	movs	r1, r5
 8006b3c:	0032      	movs	r2, r6
 8006b3e:	f7ff fbe1 	bl	8006304 <memcpy>
 8006b42:	0029      	movs	r1, r5
 8006b44:	0038      	movs	r0, r7
 8006b46:	f7ff ff33 	bl	80069b0 <_free_r>
 8006b4a:	e7e3      	b.n	8006b14 <_realloc_r+0x14>

08006b4c <_sbrk_r>:
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	b570      	push	{r4, r5, r6, lr}
 8006b50:	4c06      	ldr	r4, [pc, #24]	; (8006b6c <_sbrk_r+0x20>)
 8006b52:	0005      	movs	r5, r0
 8006b54:	0008      	movs	r0, r1
 8006b56:	6023      	str	r3, [r4, #0]
 8006b58:	f000 f814 	bl	8006b84 <_sbrk>
 8006b5c:	1c43      	adds	r3, r0, #1
 8006b5e:	d103      	bne.n	8006b68 <_sbrk_r+0x1c>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d000      	beq.n	8006b68 <_sbrk_r+0x1c>
 8006b66:	602b      	str	r3, [r5, #0]
 8006b68:	bd70      	pop	{r4, r5, r6, pc}
 8006b6a:	46c0      	nop			; (mov r8, r8)
 8006b6c:	20000760 	.word	0x20000760

08006b70 <__malloc_lock>:
 8006b70:	4770      	bx	lr

08006b72 <__malloc_unlock>:
 8006b72:	4770      	bx	lr

08006b74 <_malloc_usable_size_r>:
 8006b74:	1f0b      	subs	r3, r1, #4
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	1f18      	subs	r0, r3, #4
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	da01      	bge.n	8006b82 <_malloc_usable_size_r+0xe>
 8006b7e:	580b      	ldr	r3, [r1, r0]
 8006b80:	18c0      	adds	r0, r0, r3
 8006b82:	4770      	bx	lr

08006b84 <_sbrk>:
 8006b84:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <_sbrk+0x18>)
 8006b86:	0002      	movs	r2, r0
 8006b88:	6819      	ldr	r1, [r3, #0]
 8006b8a:	2900      	cmp	r1, #0
 8006b8c:	d101      	bne.n	8006b92 <_sbrk+0xe>
 8006b8e:	4904      	ldr	r1, [pc, #16]	; (8006ba0 <_sbrk+0x1c>)
 8006b90:	6019      	str	r1, [r3, #0]
 8006b92:	6818      	ldr	r0, [r3, #0]
 8006b94:	1882      	adds	r2, r0, r2
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	4770      	bx	lr
 8006b9a:	46c0      	nop			; (mov r8, r8)
 8006b9c:	20000320 	.word	0x20000320
 8006ba0:	20000764 	.word	0x20000764

08006ba4 <_init>:
 8006ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006baa:	bc08      	pop	{r3}
 8006bac:	469e      	mov	lr, r3
 8006bae:	4770      	bx	lr

08006bb0 <_fini>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb6:	bc08      	pop	{r3}
 8006bb8:	469e      	mov	lr, r3
 8006bba:	4770      	bx	lr
