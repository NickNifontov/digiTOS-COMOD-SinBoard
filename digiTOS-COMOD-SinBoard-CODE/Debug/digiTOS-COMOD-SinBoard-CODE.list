
digiTOS-COMOD-SinBoard-CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006060  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800616c  0800616c  0001616c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080065f8  080065f8  000165f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080065fc  080065fc  000165fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c8  20000000  08006600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000047c  200000c8  080066c8  000200c8  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000544  080066c8  00020544  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002e062  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005bd4  00000000  00000000  0004e153  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008e6b  00000000  00000000  00053d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001088  00000000  00000000  0005cb98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001468  00000000  00000000  0005dc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c3c8  00000000  00000000  0005f088  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000547f  00000000  00000000  0006b450  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000708cf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003334  00000000  00000000  0007094c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c8 	.word	0x200000c8
 8000128:	00000000 	.word	0x00000000
 800012c:	08006154 	.word	0x08006154

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000cc 	.word	0x200000cc
 8000148:	08006154 	.word	0x08006154

0800014c <__aeabi_llsr>:
 800014c:	40d0      	lsrs	r0, r2
 800014e:	1c0b      	adds	r3, r1, #0
 8000150:	40d1      	lsrs	r1, r2
 8000152:	469c      	mov	ip, r3
 8000154:	3a20      	subs	r2, #32
 8000156:	40d3      	lsrs	r3, r2
 8000158:	4318      	orrs	r0, r3
 800015a:	4252      	negs	r2, r2
 800015c:	4663      	mov	r3, ip
 800015e:	4093      	lsls	r3, r2
 8000160:	4318      	orrs	r0, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_frsub>:
 8000164:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__addsf3>
 800016a:	bf00      	nop

0800016c <__aeabi_fsub>:
 800016c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000170 <__addsf3>:
 8000170:	0042      	lsls	r2, r0, #1
 8000172:	bf1f      	itttt	ne
 8000174:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000178:	ea92 0f03 	teqne	r2, r3
 800017c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000180:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000184:	d06a      	beq.n	800025c <__addsf3+0xec>
 8000186:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800018a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018e:	bfc1      	itttt	gt
 8000190:	18d2      	addgt	r2, r2, r3
 8000192:	4041      	eorgt	r1, r0
 8000194:	4048      	eorgt	r0, r1
 8000196:	4041      	eorgt	r1, r0
 8000198:	bfb8      	it	lt
 800019a:	425b      	neglt	r3, r3
 800019c:	2b19      	cmp	r3, #25
 800019e:	bf88      	it	hi
 80001a0:	4770      	bxhi	lr
 80001a2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ae:	bf18      	it	ne
 80001b0:	4240      	negne	r0, r0
 80001b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001ba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001be:	bf18      	it	ne
 80001c0:	4249      	negne	r1, r1
 80001c2:	ea92 0f03 	teq	r2, r3
 80001c6:	d03f      	beq.n	8000248 <__addsf3+0xd8>
 80001c8:	f1a2 0201 	sub.w	r2, r2, #1
 80001cc:	fa41 fc03 	asr.w	ip, r1, r3
 80001d0:	eb10 000c 	adds.w	r0, r0, ip
 80001d4:	f1c3 0320 	rsb	r3, r3, #32
 80001d8:	fa01 f103 	lsl.w	r1, r1, r3
 80001dc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001e0:	d502      	bpl.n	80001e8 <__addsf3+0x78>
 80001e2:	4249      	negs	r1, r1
 80001e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001ec:	d313      	bcc.n	8000216 <__addsf3+0xa6>
 80001ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001f2:	d306      	bcc.n	8000202 <__addsf3+0x92>
 80001f4:	0840      	lsrs	r0, r0, #1
 80001f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80001fa:	f102 0201 	add.w	r2, r2, #1
 80001fe:	2afe      	cmp	r2, #254	; 0xfe
 8000200:	d251      	bcs.n	80002a6 <__addsf3+0x136>
 8000202:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000206:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800020a:	bf08      	it	eq
 800020c:	f020 0001 	biceq.w	r0, r0, #1
 8000210:	ea40 0003 	orr.w	r0, r0, r3
 8000214:	4770      	bx	lr
 8000216:	0049      	lsls	r1, r1, #1
 8000218:	eb40 0000 	adc.w	r0, r0, r0
 800021c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000220:	f1a2 0201 	sub.w	r2, r2, #1
 8000224:	d1ed      	bne.n	8000202 <__addsf3+0x92>
 8000226:	fab0 fc80 	clz	ip, r0
 800022a:	f1ac 0c08 	sub.w	ip, ip, #8
 800022e:	ebb2 020c 	subs.w	r2, r2, ip
 8000232:	fa00 f00c 	lsl.w	r0, r0, ip
 8000236:	bfaa      	itet	ge
 8000238:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800023c:	4252      	neglt	r2, r2
 800023e:	4318      	orrge	r0, r3
 8000240:	bfbc      	itt	lt
 8000242:	40d0      	lsrlt	r0, r2
 8000244:	4318      	orrlt	r0, r3
 8000246:	4770      	bx	lr
 8000248:	f092 0f00 	teq	r2, #0
 800024c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000250:	bf06      	itte	eq
 8000252:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000256:	3201      	addeq	r2, #1
 8000258:	3b01      	subne	r3, #1
 800025a:	e7b5      	b.n	80001c8 <__addsf3+0x58>
 800025c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000260:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000264:	bf18      	it	ne
 8000266:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800026a:	d021      	beq.n	80002b0 <__addsf3+0x140>
 800026c:	ea92 0f03 	teq	r2, r3
 8000270:	d004      	beq.n	800027c <__addsf3+0x10c>
 8000272:	f092 0f00 	teq	r2, #0
 8000276:	bf08      	it	eq
 8000278:	4608      	moveq	r0, r1
 800027a:	4770      	bx	lr
 800027c:	ea90 0f01 	teq	r0, r1
 8000280:	bf1c      	itt	ne
 8000282:	2000      	movne	r0, #0
 8000284:	4770      	bxne	lr
 8000286:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800028a:	d104      	bne.n	8000296 <__addsf3+0x126>
 800028c:	0040      	lsls	r0, r0, #1
 800028e:	bf28      	it	cs
 8000290:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000294:	4770      	bx	lr
 8000296:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800029a:	bf3c      	itt	cc
 800029c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002a0:	4770      	bxcc	lr
 80002a2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ae:	4770      	bx	lr
 80002b0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b4:	bf16      	itet	ne
 80002b6:	4608      	movne	r0, r1
 80002b8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002bc:	4601      	movne	r1, r0
 80002be:	0242      	lsls	r2, r0, #9
 80002c0:	bf06      	itte	eq
 80002c2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c6:	ea90 0f01 	teqeq	r0, r1
 80002ca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_ui2f>:
 80002d0:	f04f 0300 	mov.w	r3, #0
 80002d4:	e004      	b.n	80002e0 <__aeabi_i2f+0x8>
 80002d6:	bf00      	nop

080002d8 <__aeabi_i2f>:
 80002d8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002dc:	bf48      	it	mi
 80002de:	4240      	negmi	r0, r0
 80002e0:	ea5f 0c00 	movs.w	ip, r0
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002ec:	4601      	mov	r1, r0
 80002ee:	f04f 0000 	mov.w	r0, #0
 80002f2:	e01c      	b.n	800032e <__aeabi_l2f+0x2a>

080002f4 <__aeabi_ul2f>:
 80002f4:	ea50 0201 	orrs.w	r2, r0, r1
 80002f8:	bf08      	it	eq
 80002fa:	4770      	bxeq	lr
 80002fc:	f04f 0300 	mov.w	r3, #0
 8000300:	e00a      	b.n	8000318 <__aeabi_l2f+0x14>
 8000302:	bf00      	nop

08000304 <__aeabi_l2f>:
 8000304:	ea50 0201 	orrs.w	r2, r0, r1
 8000308:	bf08      	it	eq
 800030a:	4770      	bxeq	lr
 800030c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000310:	d502      	bpl.n	8000318 <__aeabi_l2f+0x14>
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	ea5f 0c01 	movs.w	ip, r1
 800031c:	bf02      	ittt	eq
 800031e:	4684      	moveq	ip, r0
 8000320:	4601      	moveq	r1, r0
 8000322:	2000      	moveq	r0, #0
 8000324:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000328:	bf08      	it	eq
 800032a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000332:	fabc f28c 	clz	r2, ip
 8000336:	3a08      	subs	r2, #8
 8000338:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800033c:	db10      	blt.n	8000360 <__aeabi_l2f+0x5c>
 800033e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000342:	4463      	add	r3, ip
 8000344:	fa00 fc02 	lsl.w	ip, r0, r2
 8000348:	f1c2 0220 	rsb	r2, r2, #32
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000350:	fa20 f202 	lsr.w	r2, r0, r2
 8000354:	eb43 0002 	adc.w	r0, r3, r2
 8000358:	bf08      	it	eq
 800035a:	f020 0001 	biceq.w	r0, r0, #1
 800035e:	4770      	bx	lr
 8000360:	f102 0220 	add.w	r2, r2, #32
 8000364:	fa01 fc02 	lsl.w	ip, r1, r2
 8000368:	f1c2 0220 	rsb	r2, r2, #32
 800036c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000370:	fa21 f202 	lsr.w	r2, r1, r2
 8000374:	eb43 0002 	adc.w	r0, r3, r2
 8000378:	bf08      	it	eq
 800037a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037e:	4770      	bx	lr

08000380 <__aeabi_fmul>:
 8000380:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000384:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000388:	bf1e      	ittt	ne
 800038a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038e:	ea92 0f0c 	teqne	r2, ip
 8000392:	ea93 0f0c 	teqne	r3, ip
 8000396:	d06f      	beq.n	8000478 <__aeabi_fmul+0xf8>
 8000398:	441a      	add	r2, r3
 800039a:	ea80 0c01 	eor.w	ip, r0, r1
 800039e:	0240      	lsls	r0, r0, #9
 80003a0:	bf18      	it	ne
 80003a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a6:	d01e      	beq.n	80003e6 <__aeabi_fmul+0x66>
 80003a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b4:	fba0 3101 	umull	r3, r1, r0, r1
 80003b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003bc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003c0:	bf3e      	ittt	cc
 80003c2:	0049      	lslcc	r1, r1, #1
 80003c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c8:	005b      	lslcc	r3, r3, #1
 80003ca:	ea40 0001 	orr.w	r0, r0, r1
 80003ce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003d2:	2afd      	cmp	r2, #253	; 0xfd
 80003d4:	d81d      	bhi.n	8000412 <__aeabi_fmul+0x92>
 80003d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003de:	bf08      	it	eq
 80003e0:	f020 0001 	biceq.w	r0, r0, #1
 80003e4:	4770      	bx	lr
 80003e6:	f090 0f00 	teq	r0, #0
 80003ea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003ee:	bf08      	it	eq
 80003f0:	0249      	lsleq	r1, r1, #9
 80003f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003fa:	3a7f      	subs	r2, #127	; 0x7f
 80003fc:	bfc2      	ittt	gt
 80003fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000402:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000406:	4770      	bxgt	lr
 8000408:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800040c:	f04f 0300 	mov.w	r3, #0
 8000410:	3a01      	subs	r2, #1
 8000412:	dc5d      	bgt.n	80004d0 <__aeabi_fmul+0x150>
 8000414:	f112 0f19 	cmn.w	r2, #25
 8000418:	bfdc      	itt	le
 800041a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800041e:	4770      	bxle	lr
 8000420:	f1c2 0200 	rsb	r2, r2, #0
 8000424:	0041      	lsls	r1, r0, #1
 8000426:	fa21 f102 	lsr.w	r1, r1, r2
 800042a:	f1c2 0220 	rsb	r2, r2, #32
 800042e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000432:	ea5f 0031 	movs.w	r0, r1, rrx
 8000436:	f140 0000 	adc.w	r0, r0, #0
 800043a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043e:	bf08      	it	eq
 8000440:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000444:	4770      	bx	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0040      	lsleq	r0, r0, #1
 8000452:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000456:	3a01      	subeq	r2, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xce>
 800045a:	ea40 000c 	orr.w	r0, r0, ip
 800045e:	f093 0f00 	teq	r3, #0
 8000462:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0049      	lsleq	r1, r1, #1
 800046a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800046e:	3b01      	subeq	r3, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xe6>
 8000472:	ea41 010c 	orr.w	r1, r1, ip
 8000476:	e78f      	b.n	8000398 <__aeabi_fmul+0x18>
 8000478:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800047c:	ea92 0f0c 	teq	r2, ip
 8000480:	bf18      	it	ne
 8000482:	ea93 0f0c 	teqne	r3, ip
 8000486:	d00a      	beq.n	800049e <__aeabi_fmul+0x11e>
 8000488:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800048c:	bf18      	it	ne
 800048e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000492:	d1d8      	bne.n	8000446 <__aeabi_fmul+0xc6>
 8000494:	ea80 0001 	eor.w	r0, r0, r1
 8000498:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800049c:	4770      	bx	lr
 800049e:	f090 0f00 	teq	r0, #0
 80004a2:	bf17      	itett	ne
 80004a4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a8:	4608      	moveq	r0, r1
 80004aa:	f091 0f00 	teqne	r1, #0
 80004ae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004b2:	d014      	beq.n	80004de <__aeabi_fmul+0x15e>
 80004b4:	ea92 0f0c 	teq	r2, ip
 80004b8:	d101      	bne.n	80004be <__aeabi_fmul+0x13e>
 80004ba:	0242      	lsls	r2, r0, #9
 80004bc:	d10f      	bne.n	80004de <__aeabi_fmul+0x15e>
 80004be:	ea93 0f0c 	teq	r3, ip
 80004c2:	d103      	bne.n	80004cc <__aeabi_fmul+0x14c>
 80004c4:	024b      	lsls	r3, r1, #9
 80004c6:	bf18      	it	ne
 80004c8:	4608      	movne	r0, r1
 80004ca:	d108      	bne.n	80004de <__aeabi_fmul+0x15e>
 80004cc:	ea80 0001 	eor.w	r0, r0, r1
 80004d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004dc:	4770      	bx	lr
 80004de:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004e6:	4770      	bx	lr

080004e8 <__aeabi_fdiv>:
 80004e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004f0:	bf1e      	ittt	ne
 80004f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f6:	ea92 0f0c 	teqne	r2, ip
 80004fa:	ea93 0f0c 	teqne	r3, ip
 80004fe:	d069      	beq.n	80005d4 <__aeabi_fdiv+0xec>
 8000500:	eba2 0203 	sub.w	r2, r2, r3
 8000504:	ea80 0c01 	eor.w	ip, r0, r1
 8000508:	0249      	lsls	r1, r1, #9
 800050a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050e:	d037      	beq.n	8000580 <__aeabi_fdiv+0x98>
 8000510:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000514:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000518:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800051c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000520:	428b      	cmp	r3, r1
 8000522:	bf38      	it	cc
 8000524:	005b      	lslcc	r3, r3, #1
 8000526:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800052a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800052e:	428b      	cmp	r3, r1
 8000530:	bf24      	itt	cs
 8000532:	1a5b      	subcs	r3, r3, r1
 8000534:	ea40 000c 	orrcs.w	r0, r0, ip
 8000538:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800053c:	bf24      	itt	cs
 800053e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000542:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000546:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800054a:	bf24      	itt	cs
 800054c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000550:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000554:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000558:	bf24      	itt	cs
 800055a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000562:	011b      	lsls	r3, r3, #4
 8000564:	bf18      	it	ne
 8000566:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800056a:	d1e0      	bne.n	800052e <__aeabi_fdiv+0x46>
 800056c:	2afd      	cmp	r2, #253	; 0xfd
 800056e:	f63f af50 	bhi.w	8000412 <__aeabi_fmul+0x92>
 8000572:	428b      	cmp	r3, r1
 8000574:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000584:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000588:	327f      	adds	r2, #127	; 0x7f
 800058a:	bfc2      	ittt	gt
 800058c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000590:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000594:	4770      	bxgt	lr
 8000596:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059a:	f04f 0300 	mov.w	r3, #0
 800059e:	3a01      	subs	r2, #1
 80005a0:	e737      	b.n	8000412 <__aeabi_fmul+0x92>
 80005a2:	f092 0f00 	teq	r2, #0
 80005a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0040      	lsleq	r0, r0, #1
 80005ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005b2:	3a01      	subeq	r2, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xc2>
 80005b6:	ea40 000c 	orr.w	r0, r0, ip
 80005ba:	f093 0f00 	teq	r3, #0
 80005be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0049      	lsleq	r1, r1, #1
 80005c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005ca:	3b01      	subeq	r3, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xda>
 80005ce:	ea41 010c 	orr.w	r1, r1, ip
 80005d2:	e795      	b.n	8000500 <__aeabi_fdiv+0x18>
 80005d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d8:	ea92 0f0c 	teq	r2, ip
 80005dc:	d108      	bne.n	80005f0 <__aeabi_fdiv+0x108>
 80005de:	0242      	lsls	r2, r0, #9
 80005e0:	f47f af7d 	bne.w	80004de <__aeabi_fmul+0x15e>
 80005e4:	ea93 0f0c 	teq	r3, ip
 80005e8:	f47f af70 	bne.w	80004cc <__aeabi_fmul+0x14c>
 80005ec:	4608      	mov	r0, r1
 80005ee:	e776      	b.n	80004de <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	d104      	bne.n	8000600 <__aeabi_fdiv+0x118>
 80005f6:	024b      	lsls	r3, r1, #9
 80005f8:	f43f af4c 	beq.w	8000494 <__aeabi_fmul+0x114>
 80005fc:	4608      	mov	r0, r1
 80005fe:	e76e      	b.n	80004de <__aeabi_fmul+0x15e>
 8000600:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000604:	bf18      	it	ne
 8000606:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800060a:	d1ca      	bne.n	80005a2 <__aeabi_fdiv+0xba>
 800060c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000610:	f47f af5c 	bne.w	80004cc <__aeabi_fmul+0x14c>
 8000614:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000618:	f47f af3c 	bne.w	8000494 <__aeabi_fmul+0x114>
 800061c:	e75f      	b.n	80004de <__aeabi_fmul+0x15e>
 800061e:	bf00      	nop

08000620 <__gesf2>:
 8000620:	f04f 3cff 	mov.w	ip, #4294967295
 8000624:	e006      	b.n	8000634 <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__lesf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	e002      	b.n	8000634 <__cmpsf2+0x4>
 800062e:	bf00      	nop

08000630 <__cmpsf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000638:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800063c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000640:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000644:	bf18      	it	ne
 8000646:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800064a:	d011      	beq.n	8000670 <__cmpsf2+0x40>
 800064c:	b001      	add	sp, #4
 800064e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000652:	bf18      	it	ne
 8000654:	ea90 0f01 	teqne	r0, r1
 8000658:	bf58      	it	pl
 800065a:	ebb2 0003 	subspl.w	r0, r2, r3
 800065e:	bf88      	it	hi
 8000660:	17c8      	asrhi	r0, r1, #31
 8000662:	bf38      	it	cc
 8000664:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000668:	bf18      	it	ne
 800066a:	f040 0001 	orrne.w	r0, r0, #1
 800066e:	4770      	bx	lr
 8000670:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000674:	d102      	bne.n	800067c <__cmpsf2+0x4c>
 8000676:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800067a:	d105      	bne.n	8000688 <__cmpsf2+0x58>
 800067c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000680:	d1e4      	bne.n	800064c <__cmpsf2+0x1c>
 8000682:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000686:	d0e1      	beq.n	800064c <__cmpsf2+0x1c>
 8000688:	f85d 0b04 	ldr.w	r0, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <__aeabi_cfrcmple>:
 8000690:	4684      	mov	ip, r0
 8000692:	4608      	mov	r0, r1
 8000694:	4661      	mov	r1, ip
 8000696:	e7ff      	b.n	8000698 <__aeabi_cfcmpeq>

08000698 <__aeabi_cfcmpeq>:
 8000698:	b50f      	push	{r0, r1, r2, r3, lr}
 800069a:	f7ff ffc9 	bl	8000630 <__cmpsf2>
 800069e:	2800      	cmp	r0, #0
 80006a0:	bf48      	it	mi
 80006a2:	f110 0f00 	cmnmi.w	r0, #0
 80006a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a8 <__aeabi_fcmpeq>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff fff4 	bl	8000698 <__aeabi_cfcmpeq>
 80006b0:	bf0c      	ite	eq
 80006b2:	2001      	moveq	r0, #1
 80006b4:	2000      	movne	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmplt>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffea 	bl	8000698 <__aeabi_cfcmpeq>
 80006c4:	bf34      	ite	cc
 80006c6:	2001      	movcc	r0, #1
 80006c8:	2000      	movcs	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmple>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffe0 	bl	8000698 <__aeabi_cfcmpeq>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpge>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffd2 	bl	8000690 <__aeabi_cfrcmple>
 80006ec:	bf94      	ite	ls
 80006ee:	2001      	movls	r0, #1
 80006f0:	2000      	movhi	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_fcmpgt>:
 80006f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006fc:	f7ff ffc8 	bl	8000690 <__aeabi_cfrcmple>
 8000700:	bf34      	ite	cc
 8000702:	2001      	movcc	r0, #1
 8000704:	2000      	movcs	r0, #0
 8000706:	f85d fb08 	ldr.w	pc, [sp], #8
 800070a:	bf00      	nop

0800070c <__aeabi_f2uiz>:
 800070c:	0042      	lsls	r2, r0, #1
 800070e:	d20e      	bcs.n	800072e <__aeabi_f2uiz+0x22>
 8000710:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000714:	d30b      	bcc.n	800072e <__aeabi_f2uiz+0x22>
 8000716:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800071a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800071e:	d409      	bmi.n	8000734 <__aeabi_f2uiz+0x28>
 8000720:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000724:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000728:	fa23 f002 	lsr.w	r0, r3, r2
 800072c:	4770      	bx	lr
 800072e:	f04f 0000 	mov.w	r0, #0
 8000732:	4770      	bx	lr
 8000734:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000738:	d101      	bne.n	800073e <__aeabi_f2uiz+0x32>
 800073a:	0242      	lsls	r2, r0, #9
 800073c:	d102      	bne.n	8000744 <__aeabi_f2uiz+0x38>
 800073e:	f04f 30ff 	mov.w	r0, #4294967295
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop

0800074c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800074c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	2300      	movs	r3, #0

  /**Common config 
  */
  hadc1.Instance = ADC1;
 8000750:	481d      	ldr	r0, [pc, #116]	; (80007c8 <MX_ADC1_Init+0x7c>)
 8000752:	4a1e      	ldr	r2, [pc, #120]	; (80007cc <MX_ADC1_Init+0x80>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	9302      	str	r3, [sp, #8]
 8000758:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 800075a:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800075c:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800075e:	2401      	movs	r4, #1
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000760:	6143      	str	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000762:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000766:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000768:	2303      	movs	r3, #3
  hadc1.Init.ContinuousConvMode = ENABLE;
 800076a:	60c4      	str	r4, [r0, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076c:	61c2      	str	r2, [r0, #28]
  hadc1.Init.NbrOfConversion = 3;
 800076e:	6103      	str	r3, [r0, #16]

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000770:	f002 fa66 	bl	8002c40 <HAL_ADC_Init>
 8000774:	b108      	cbz	r0, 800077a <MX_ADC1_Init+0x2e>
  {
    Error_Handler();
 8000776:	f001 fab5 	bl	8001ce4 <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800077a:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	a901      	add	r1, sp, #4
 800077e:	4812      	ldr	r0, [pc, #72]	; (80007c8 <MX_ADC1_Init+0x7c>)
  sConfig.Channel = ADC_CHANNEL_1;
 8000780:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000782:	9402      	str	r4, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000784:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000786:	f002 f8c3 	bl	8002910 <HAL_ADC_ConfigChannel>
 800078a:	b108      	cbz	r0, 8000790 <MX_ADC1_Init+0x44>
  {
    Error_Handler();
 800078c:	f001 faaa 	bl	8001ce4 <Error_Handler>
  }

  	/**Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_2;
 8000790:	2302      	movs	r3, #2
 8000792:	9301      	str	r3, [sp, #4]
    sConfig.Rank = ADC_REGULAR_RANK_2;
 8000794:	9302      	str	r3, [sp, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000796:	2307      	movs	r3, #7
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000798:	a901      	add	r1, sp, #4
 800079a:	480b      	ldr	r0, [pc, #44]	; (80007c8 <MX_ADC1_Init+0x7c>)
    sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800079c:	9303      	str	r3, [sp, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079e:	f002 f8b7 	bl	8002910 <HAL_ADC_ConfigChannel>
 80007a2:	b108      	cbz	r0, 80007a8 <MX_ADC1_Init+0x5c>
    {
      Error_Handler();
 80007a4:	f001 fa9e 	bl	8001ce4 <Error_Handler>

	#endif

    /**Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_5;
 80007a8:	2305      	movs	r3, #5
 80007aa:	9301      	str	r3, [sp, #4]
    sConfig.Rank = ADC_REGULAR_RANK_3;
 80007ac:	2303      	movs	r3, #3
 80007ae:	9302      	str	r3, [sp, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80007b0:	2307      	movs	r3, #7
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b2:	a901      	add	r1, sp, #4
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_ADC1_Init+0x7c>)
    sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80007b6:	9303      	str	r3, [sp, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	f002 f8aa 	bl	8002910 <HAL_ADC_ConfigChannel>
 80007bc:	b108      	cbz	r0, 80007c2 <MX_ADC1_Init+0x76>
    {
      Error_Handler();
 80007be:	f001 fa91 	bl	8001ce4 <Error_Handler>
		  {
			Error_Handler();
		  }
	#endif

}
 80007c2:	b004      	add	sp, #16
 80007c4:	bd10      	pop	{r4, pc}
 80007c6:	bf00      	nop
 80007c8:	200001b0 	.word	0x200001b0
 80007cc:	40012400 	.word	0x40012400

080007d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007d0:	b530      	push	{r4, r5, lr}
 80007d2:	4605      	mov	r5, r0
 80007d4:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	2210      	movs	r2, #16
 80007d8:	2100      	movs	r1, #0
 80007da:	a802      	add	r0, sp, #8
 80007dc:	f005 f862 	bl	80058a4 <memset>
  if(adcHandle->Instance==ADC1)
 80007e0:	682a      	ldr	r2, [r5, #0]
 80007e2:	4b22      	ldr	r3, [pc, #136]	; (800086c <HAL_ADC_MspInit+0x9c>)
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d13e      	bne.n	8000866 <HAL_ADC_MspInit+0x96>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007e8:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80007ec:	699a      	ldr	r2, [r3, #24]
    */
    GPIO_InitStruct.Pin = V_OUT_Pin|C_OUT_Pin|V_IN_Pin|V_IN_WAVE_DETECTOR_Pin 
                          |DC_FEEDBACK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	4820      	ldr	r0, [pc, #128]	; (8000870 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007f4:	619a      	str	r2, [r3, #24]
 80007f6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007fa:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80007fe:	9200      	str	r2, [sp, #0]
 8000800:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000804:	4c1b      	ldr	r4, [pc, #108]	; (8000874 <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	f042 0204 	orr.w	r2, r2, #4
 800080a:	619a      	str	r2, [r3, #24]
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = V_OUT_Pin|C_OUT_Pin|V_IN_Pin|V_IN_WAVE_DETECTOR_Pin 
 8000816:	233e      	movs	r3, #62	; 0x3e
 8000818:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800081a:	2303      	movs	r3, #3
 800081c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f002 ff7d 	bl	800371c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <HAL_ADC_MspInit+0xa8>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000824:	4620      	mov	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 8000826:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000828:	2300      	movs	r3, #0
 800082a:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800082c:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000836:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083c:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800083e:	2320      	movs	r3, #32
 8000840:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000846:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000848:	f002 fb82 	bl	8002f50 <HAL_DMA_Init>
 800084c:	b108      	cbz	r0, 8000852 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 800084e:	f001 fa49 	bl	8001ce4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000852:	622c      	str	r4, [r5, #32]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 1);
 8000854:	2012      	movs	r0, #18
 8000856:	2201      	movs	r2, #1
 8000858:	2103      	movs	r1, #3
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800085a:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 1);
 800085c:	f002 faec 	bl	8002e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000860:	2012      	movs	r0, #18
 8000862:	f002 fb2b 	bl	8002ebc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000866:	b007      	add	sp, #28
 8000868:	bd30      	pop	{r4, r5, pc}
 800086a:	bf00      	nop
 800086c:	40012400 	.word	0x40012400
 8000870:	40010800 	.word	0x40010800
 8000874:	200001e0 	.word	0x200001e0
 8000878:	40020008 	.word	0x40020008

0800087c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800087c:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_CRC_Init+0x18>)
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <MX_CRC_Init+0x1c>)
 8000882:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000884:	f002 fb46 	bl	8002f14 <HAL_CRC_Init>
 8000888:	b118      	cbz	r0, 8000892 <MX_CRC_Init+0x16>
  {
    Error_Handler();
  }

}
 800088a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800088e:	f001 ba29 	b.w	8001ce4 <Error_Handler>
 8000892:	bd08      	pop	{r3, pc}
 8000894:	20000224 	.word	0x20000224
 8000898:	40023000 	.word	0x40023000

0800089c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 800089c:	6802      	ldr	r2, [r0, #0]
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_CRC_MspInit+0x24>)
{
 80008a0:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d10a      	bne.n	80008bc <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008a6:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80008aa:	695a      	ldr	r2, [r3, #20]
 80008ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008b0:	615a      	str	r2, [r3, #20]
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80008bc:	b002      	add	sp, #8
 80008be:	4770      	bx	lr
 80008c0:	40023000 	.word	0x40023000

080008c4 <StartADC>:
//uint32_t adc_cnt1=0;

void StartADC(){
	//HAL_ADC_Start_IT(&hadc);
	//ADC->CCR |= ADC_CCR_TSEN | ADC_CCR_VREFEN;
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*) &ADC_Data,ADC_ChannelCnt);
 80008c4:	2203      	movs	r2, #3
 80008c6:	4902      	ldr	r1, [pc, #8]	; (80008d0 <StartADC+0xc>)
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <StartADC+0x10>)
 80008ca:	f002 b907 	b.w	8002adc <HAL_ADC_Start_DMA>
 80008ce:	bf00      	nop
 80008d0:	20000238 	.word	0x20000238
 80008d4:	200001b0 	.word	0x200001b0

080008d8 <ResetV_data>:

//******* ADC **********//

//******* AMPLITUDE **********//
void ResetV_data() {
	 V_1=0;
 80008d8:	2300      	movs	r3, #0
 80008da:	4a1f      	ldr	r2, [pc, #124]	; (8000958 <ResetV_data+0x80>)
void ResetV_data() {
 80008dc:	b510      	push	{r4, lr}
	 V_1=0;
 80008de:	6013      	str	r3, [r2, #0]
	 V_2=0;
 80008e0:	4a1e      	ldr	r2, [pc, #120]	; (800095c <ResetV_data+0x84>)
	 V_3=0;
	 V_4=0;

	 V_Cnt[0]=1;
 80008e2:	491f      	ldr	r1, [pc, #124]	; (8000960 <ResetV_data+0x88>)
	 V_2=0;
 80008e4:	6013      	str	r3, [r2, #0]
	 V_3=0;
 80008e6:	4a1f      	ldr	r2, [pc, #124]	; (8000964 <ResetV_data+0x8c>)
	 V_Cnt[1]=1;
	 V_Cnt[2]=1;
	 V_Cnt[3]=1;

	 V_Out_Cnt=1;
	 V_Out_RawData=0;
 80008e8:	2000      	movs	r0, #0
	 V_3=0;
 80008ea:	6013      	str	r3, [r2, #0]
	 V_4=0;
 80008ec:	4a1e      	ldr	r2, [pc, #120]	; (8000968 <ResetV_data+0x90>)
	 V_Out_RawData=0;
 80008ee:	4c1f      	ldr	r4, [pc, #124]	; (800096c <ResetV_data+0x94>)
	 V_4=0;
 80008f0:	6013      	str	r3, [r2, #0]
	 V_Cnt[0]=1;
 80008f2:	2201      	movs	r2, #1
 80008f4:	600a      	str	r2, [r1, #0]
	 V_Cnt[1]=1;
 80008f6:	604a      	str	r2, [r1, #4]
	 V_Cnt[2]=1;
 80008f8:	608a      	str	r2, [r1, #8]
	 V_Cnt[3]=1;
 80008fa:	60ca      	str	r2, [r1, #12]
	 V_Out_Cnt=1;
 80008fc:	491c      	ldr	r1, [pc, #112]	; (8000970 <ResetV_data+0x98>)
 80008fe:	600a      	str	r2, [r1, #0]
	 V_Out_RawData=0;
 8000900:	2100      	movs	r1, #0
 8000902:	e9c4 0100 	strd	r0, r1, [r4]

	 I_Out_Cnt=1;
 8000906:	4c1b      	ldr	r4, [pc, #108]	; (8000974 <ResetV_data+0x9c>)
 8000908:	6022      	str	r2, [r4, #0]
	 I_Out_RawData=0;
 800090a:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <ResetV_data+0xa0>)
 800090c:	e9c2 0100 	strd	r0, r1, [r2]
	 V_Cnt[4]=1;
	 V_5=1500;
	#endif

	#ifdef DC_PROTECTION
	 	 DC_Data=0;
 8000910:	4a1a      	ldr	r2, [pc, #104]	; (800097c <ResetV_data+0xa4>)
 8000912:	6013      	str	r3, [r2, #0]
	 	 DC_DataCnt=0;
 8000914:	4a1a      	ldr	r2, [pc, #104]	; (8000980 <ResetV_data+0xa8>)
 8000916:	6013      	str	r3, [r2, #0]
	#endif

	 	//reset temp buffer
	 	V_1_temp=0;
 8000918:	4a1a      	ldr	r2, [pc, #104]	; (8000984 <ResetV_data+0xac>)
 800091a:	6013      	str	r3, [r2, #0]
	 	V_2_temp=0;
 800091c:	4a1a      	ldr	r2, [pc, #104]	; (8000988 <ResetV_data+0xb0>)
 800091e:	6013      	str	r3, [r2, #0]
	 	V_3_temp=0;
 8000920:	4a1a      	ldr	r2, [pc, #104]	; (800098c <ResetV_data+0xb4>)
 8000922:	6013      	str	r3, [r2, #0]
	 	V_4_temp=0;
 8000924:	4a1a      	ldr	r2, [pc, #104]	; (8000990 <ResetV_data+0xb8>)
 8000926:	6013      	str	r3, [r2, #0]

	 	Vcnt_1_temp=0;
 8000928:	4a1a      	ldr	r2, [pc, #104]	; (8000994 <ResetV_data+0xbc>)
 800092a:	6013      	str	r3, [r2, #0]
	 	Vcnt_2_temp=0;
 800092c:	4a1a      	ldr	r2, [pc, #104]	; (8000998 <ResetV_data+0xc0>)
 800092e:	6013      	str	r3, [r2, #0]
	 	Vcnt_3_temp=0;
 8000930:	4a1a      	ldr	r2, [pc, #104]	; (800099c <ResetV_data+0xc4>)
 8000932:	6013      	str	r3, [r2, #0]
	 	Vcnt_4_temp=0;
 8000934:	4a1a      	ldr	r2, [pc, #104]	; (80009a0 <ResetV_data+0xc8>)
 8000936:	6013      	str	r3, [r2, #0]

	 	I_Out_RawData_temp=0;
 8000938:	4a1a      	ldr	r2, [pc, #104]	; (80009a4 <ResetV_data+0xcc>)
 800093a:	6013      	str	r3, [r2, #0]
	 	V_Out_RawData_temp=0;
 800093c:	4a1a      	ldr	r2, [pc, #104]	; (80009a8 <ResetV_data+0xd0>)
 800093e:	6013      	str	r3, [r2, #0]
	 	I_Out_Cnt_temp=0;
 8000940:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <ResetV_data+0xd4>)
 8000942:	6013      	str	r3, [r2, #0]
	 	V_Out_Cnt_temp=0;
 8000944:	4a1a      	ldr	r2, [pc, #104]	; (80009b0 <ResetV_data+0xd8>)
 8000946:	6013      	str	r3, [r2, #0]

	 	#ifdef DC_PROTECTION
	 		DC_Data_temp=0;
 8000948:	4a1a      	ldr	r2, [pc, #104]	; (80009b4 <ResetV_data+0xdc>)
 800094a:	6013      	str	r3, [r2, #0]
	 		DC_DataCnt_temp=0;
 800094c:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <ResetV_data+0xe0>)
 800094e:	6013      	str	r3, [r2, #0]
	 	#ifdef USE_VREF
	 		V_5_temp=0;
	 		Vcnt_5_temp=0;
	     #endif

	 	TempBuffer_Flag=0;
 8000950:	4a1a      	ldr	r2, [pc, #104]	; (80009bc <ResetV_data+0xe4>)
 8000952:	8013      	strh	r3, [r2, #0]
 8000954:	bd10      	pop	{r4, pc}
 8000956:	bf00      	nop
 8000958:	20000018 	.word	0x20000018
 800095c:	2000001c 	.word	0x2000001c
 8000960:	20000028 	.word	0x20000028
 8000964:	20000020 	.word	0x20000020
 8000968:	20000024 	.word	0x20000024
 800096c:	20000138 	.word	0x20000138
 8000970:	20000038 	.word	0x20000038
 8000974:	20000000 	.word	0x20000000
 8000978:	20000120 	.word	0x20000120
 800097c:	200000f8 	.word	0x200000f8
 8000980:	20000100 	.word	0x20000100
 8000984:	2000017c 	.word	0x2000017c
 8000988:	20000180 	.word	0x20000180
 800098c:	20000184 	.word	0x20000184
 8000990:	20000188 	.word	0x20000188
 8000994:	20000194 	.word	0x20000194
 8000998:	20000198 	.word	0x20000198
 800099c:	2000019c 	.word	0x2000019c
 80009a0:	200001a0 	.word	0x200001a0
 80009a4:	20000170 	.word	0x20000170
 80009a8:	20000190 	.word	0x20000190
 80009ac:	2000016c 	.word	0x2000016c
 80009b0:	2000018c 	.word	0x2000018c
 80009b4:	20000150 	.word	0x20000150
 80009b8:	2000014c 	.word	0x2000014c
 80009bc:	200000e4 	.word	0x200000e4

080009c0 <CalcNewAmp>:
	//
}

float CalcNewAmp(uint32_t V_curr, uint32_t V_etalon) {
	float fRes=1;
	if (V_curr>V_etalon) {
 80009c0:	4288      	cmp	r0, r1
float CalcNewAmp(uint32_t V_curr, uint32_t V_etalon) {
 80009c2:	b510      	push	{r4, lr}
	if (V_curr>V_etalon) {
 80009c4:	d922      	bls.n	8000a0c <CalcNewAmp+0x4c>
		fRes=fRes+(float)((V_curr-V_etalon)*Amp_CoefPlus);
 80009c6:	1a40      	subs	r0, r0, r1
 80009c8:	f7ff fc82 	bl	80002d0 <__aeabi_ui2f>
 80009cc:	4912      	ldr	r1, [pc, #72]	; (8000a18 <CalcNewAmp+0x58>)
 80009ce:	f7ff fcd7 	bl	8000380 <__aeabi_fmul>
 80009d2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80009d6:	f7ff fbcb 	bl	8000170 <__addsf3>
	}
	if (V_curr<V_etalon) {
		fRes=fRes-(float)((V_etalon-V_curr)*Amp_CoefMinus);
	}

	if (fRes>Amp_max) {
 80009da:	4910      	ldr	r1, [pc, #64]	; (8000a1c <CalcNewAmp+0x5c>)
		fRes=fRes-(float)((V_etalon-V_curr)*Amp_CoefMinus);
 80009dc:	4604      	mov	r4, r0
	if (fRes>Amp_max) {
 80009de:	f7ff fe8b 	bl	80006f8 <__aeabi_fcmpgt>
 80009e2:	b9b8      	cbnz	r0, 8000a14 <CalcNewAmp+0x54>
		fRes=Amp_max;
	}
	if (fRes<Amp_min) {
 80009e4:	490e      	ldr	r1, [pc, #56]	; (8000a20 <CalcNewAmp+0x60>)
 80009e6:	4620      	mov	r0, r4
 80009e8:	f7ff fe68 	bl	80006bc <__aeabi_fcmplt>
 80009ec:	b100      	cbz	r0, 80009f0 <CalcNewAmp+0x30>
		fRes=Amp_min;
 80009ee:	4c0c      	ldr	r4, [pc, #48]	; (8000a20 <CalcNewAmp+0x60>)
	}

	return fRes;
}
 80009f0:	4620      	mov	r0, r4
 80009f2:	bd10      	pop	{r4, pc}
		fRes=fRes-(float)((V_etalon-V_curr)*Amp_CoefMinus);
 80009f4:	1a08      	subs	r0, r1, r0
 80009f6:	f7ff fc6b 	bl	80002d0 <__aeabi_ui2f>
 80009fa:	4907      	ldr	r1, [pc, #28]	; (8000a18 <CalcNewAmp+0x58>)
 80009fc:	f7ff fcc0 	bl	8000380 <__aeabi_fmul>
 8000a00:	4601      	mov	r1, r0
 8000a02:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000a06:	f7ff fbb1 	bl	800016c <__aeabi_fsub>
 8000a0a:	e7e6      	b.n	80009da <CalcNewAmp+0x1a>
	if (V_curr<V_etalon) {
 8000a0c:	d3f2      	bcc.n	80009f4 <CalcNewAmp+0x34>
	float fRes=1;
 8000a0e:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 8000a12:	e7ed      	b.n	80009f0 <CalcNewAmp+0x30>
		fRes=Amp_max;
 8000a14:	4c01      	ldr	r4, [pc, #4]	; (8000a1c <CalcNewAmp+0x5c>)
 8000a16:	e7eb      	b.n	80009f0 <CalcNewAmp+0x30>
 8000a18:	3999999a 	.word	0x3999999a
 8000a1c:	3fcccccd 	.word	0x3fcccccd
 8000a20:	3ecccccd 	.word	0x3ecccccd

08000a24 <CalcNewAmpByStep>:

#ifdef AMP_CORRECTION_TYPE_STEP
float CalcNewAmpByStep(float CurrAmp, float TargetAmp) {
 8000a24:	b538      	push	{r3, r4, r5, lr}
 8000a26:	4605      	mov	r5, r0
 8000a28:	460c      	mov	r4, r1
	float fRes=CurrAmp;
	if (TargetAmp>CurrAmp) {
 8000a2a:	f7ff fe47 	bl	80006bc <__aeabi_fcmplt>
 8000a2e:	b160      	cbz	r0, 8000a4a <CalcNewAmpByStep+0x26>
		fRes=fRes+amp_correction_step;
 8000a30:	490e      	ldr	r1, [pc, #56]	; (8000a6c <CalcNewAmpByStep+0x48>)
 8000a32:	4628      	mov	r0, r5
 8000a34:	f7ff fb9c 	bl	8000170 <__addsf3>
 8000a38:	4605      	mov	r5, r0
		if (fRes>=TargetAmp) {
 8000a3a:	4601      	mov	r1, r0
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	f7ff fe47 	bl	80006d0 <__aeabi_fcmple>
		}
		return fRes;
	}
	if (TargetAmp<CurrAmp) {
		fRes=fRes-amp_correction_step;
		if (fRes<=TargetAmp) {
 8000a42:	b900      	cbnz	r0, 8000a46 <CalcNewAmpByStep+0x22>
			fRes=TargetAmp;
		}
		return fRes;
	}
	return fRes;
 8000a44:	462c      	mov	r4, r5
}
 8000a46:	4620      	mov	r0, r4
 8000a48:	bd38      	pop	{r3, r4, r5, pc}
	if (TargetAmp<CurrAmp) {
 8000a4a:	4621      	mov	r1, r4
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	f7ff fe53 	bl	80006f8 <__aeabi_fcmpgt>
 8000a52:	2800      	cmp	r0, #0
 8000a54:	d0f6      	beq.n	8000a44 <CalcNewAmpByStep+0x20>
		fRes=fRes-amp_correction_step;
 8000a56:	4905      	ldr	r1, [pc, #20]	; (8000a6c <CalcNewAmpByStep+0x48>)
 8000a58:	4628      	mov	r0, r5
 8000a5a:	f7ff fb87 	bl	800016c <__aeabi_fsub>
 8000a5e:	4605      	mov	r5, r0
		if (fRes<=TargetAmp) {
 8000a60:	4601      	mov	r1, r0
 8000a62:	4620      	mov	r0, r4
 8000a64:	f7ff fe3e 	bl	80006e4 <__aeabi_fcmpge>
 8000a68:	e7eb      	b.n	8000a42 <CalcNewAmpByStep+0x1e>
 8000a6a:	bf00      	nop
 8000a6c:	3bc49ba6 	.word	0x3bc49ba6

08000a70 <asqrt>:
  op = x;
  res = 0;

  /* "one" starts at the highest power of four <= than the argument. */

  one = 1 << 30;	/* second-to-top bit set */
 8000a70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
uint16_t asqrt(uint32_t x) {
 8000a74:	b530      	push	{r4, r5, lr}
  while (one > op) one >>= 2;
 8000a76:	4283      	cmp	r3, r0
 8000a78:	dc05      	bgt.n	8000a86 <asqrt+0x16>
 8000a7a:	2200      	movs	r2, #0
  while (one != 0) {
    if (op >= res + one) {
      op = op - (res + one);
      res = res +  2 * one;
    }
    res /= 2;
 8000a7c:	2402      	movs	r4, #2
    one /= 4;
 8000a7e:	2504      	movs	r5, #4
  while (one != 0) {
 8000a80:	b91b      	cbnz	r3, 8000a8a <asqrt+0x1a>
  }
  return (uint16_t) (res);
}
 8000a82:	b290      	uxth	r0, r2
 8000a84:	bd30      	pop	{r4, r5, pc}
  while (one > op) one >>= 2;
 8000a86:	109b      	asrs	r3, r3, #2
 8000a88:	e7f5      	b.n	8000a76 <asqrt+0x6>
    if (op >= res + one) {
 8000a8a:	18d1      	adds	r1, r2, r3
 8000a8c:	4288      	cmp	r0, r1
      res = res +  2 * one;
 8000a8e:	bfa4      	itt	ge
 8000a90:	185a      	addge	r2, r3, r1
      op = op - (res + one);
 8000a92:	1a40      	subge	r0, r0, r1
    res /= 2;
 8000a94:	fb92 f2f4 	sdiv	r2, r2, r4
    one /= 4;
 8000a98:	fb93 f3f5 	sdiv	r3, r3, r5
 8000a9c:	e7f0      	b.n	8000a80 <asqrt+0x10>
	...

08000aa0 <CalcAc_I_ByWave>:


void CalcAc_I_ByWave() {
 8000aa0:	b538      	push	{r3, r4, r5, lr}
	// calc AC data for one wave form'
	#ifdef Detect_ZeroI_Point
		ZeroI_point=ADC_Data[1]; // Store last value of V_out via zero point
	#endif
	I_Out = (uint32_t) (I_Out_RawData_temp / I_Out_Cnt_temp);
 8000aa2:	4a0c      	ldr	r2, [pc, #48]	; (8000ad4 <CalcAc_I_ByWave+0x34>)
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <CalcAc_I_ByWave+0x38>)
 8000aa6:	4c0d      	ldr	r4, [pc, #52]	; (8000adc <CalcAc_I_ByWave+0x3c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	6812      	ldr	r2, [r2, #0]
 8000aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ab0:	6023      	str	r3, [r4, #0]
	I_Out = asqrt(I_Out);
 8000ab2:	6820      	ldr	r0, [r4, #0]
 8000ab4:	f7ff ffdc 	bl	8000a70 <asqrt>
	I_Out = (uint32_t) (I_RATIO * I_Out);
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <CalcAc_I_ByWave+0x40>)
	I_Out = asqrt(I_Out);
 8000aba:	6020      	str	r0, [r4, #0]
	I_Out = (uint32_t) (I_RATIO * I_Out);
 8000abc:	6820      	ldr	r0, [r4, #0]
 8000abe:	681d      	ldr	r5, [r3, #0]
 8000ac0:	f7ff fc06 	bl	80002d0 <__aeabi_ui2f>
 8000ac4:	4629      	mov	r1, r5
 8000ac6:	f7ff fc5b 	bl	8000380 <__aeabi_fmul>
 8000aca:	f7ff fe1f 	bl	800070c <__aeabi_f2uiz>
 8000ace:	6020      	str	r0, [r4, #0]
 8000ad0:	bd38      	pop	{r3, r4, r5, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000016c 	.word	0x2000016c
 8000ad8:	20000170 	.word	0x20000170
 8000adc:	20000118 	.word	0x20000118
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <CalcAc_V_ByWave>:
}


void CalcAc_V_ByWave() {
 8000ae4:	b538      	push	{r3, r4, r5, lr}
	// calc AC data for one wave form'
	#ifdef Detect_ZeroV_Point
		ZeroV_point=ADC_Data[0]; // Store last value of V_out via zero point
	#endif
	V_Out = (uint32_t) (V_Out_RawData_temp / V_Out_Cnt_temp);
 8000ae6:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <CalcAc_V_ByWave+0x34>)
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <CalcAc_V_ByWave+0x38>)
 8000aea:	4c0d      	ldr	r4, [pc, #52]	; (8000b20 <CalcAc_V_ByWave+0x3c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	6812      	ldr	r2, [r2, #0]
 8000af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000af4:	6023      	str	r3, [r4, #0]
	V_Out = asqrt(V_Out);
 8000af6:	6820      	ldr	r0, [r4, #0]
 8000af8:	f7ff ffba 	bl	8000a70 <asqrt>
	V_Out = (uint32_t) (V_RATIO * V_Out);
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <CalcAc_V_ByWave+0x40>)
	V_Out = asqrt(V_Out);
 8000afe:	6020      	str	r0, [r4, #0]
	V_Out = (uint32_t) (V_RATIO * V_Out);
 8000b00:	6820      	ldr	r0, [r4, #0]
 8000b02:	681d      	ldr	r5, [r3, #0]
 8000b04:	f7ff fbe4 	bl	80002d0 <__aeabi_ui2f>
 8000b08:	4629      	mov	r1, r5
 8000b0a:	f7ff fc39 	bl	8000380 <__aeabi_fmul>
 8000b0e:	f7ff fdfd 	bl	800070c <__aeabi_f2uiz>
 8000b12:	6020      	str	r0, [r4, #0]
 8000b14:	bd38      	pop	{r3, r4, r5, pc}
 8000b16:	bf00      	nop
 8000b18:	2000018c 	.word	0x2000018c
 8000b1c:	20000190 	.word	0x20000190
 8000b20:	20000134 	.word	0x20000134
 8000b24:	2000003c 	.word	0x2000003c

08000b28 <CalcDC_Average>:
}

void CalcDC_Average() {
	#ifdef DC_PROTECTION
		 DC_DataAverage=(DC_Data_temp/DC_DataCnt_temp);
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <CalcDC_Average+0x14>)
 8000b2a:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <CalcDC_Average+0x18>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	6812      	ldr	r2, [r2, #0]
 8000b30:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b34:	4a03      	ldr	r2, [pc, #12]	; (8000b44 <CalcDC_Average+0x1c>)
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000150 	.word	0x20000150
 8000b40:	2000014c 	.word	0x2000014c
 8000b44:	200000fc 	.word	0x200000fc

08000b48 <UpdateAmplitudeByV>:
			V_5_temp=V_5;
			Vcnt_5_temp=V_Cnt[4];
	    #endif
}

void UpdateAmplitudeByV() {
 8000b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//store value in temp
	if (TempBuffer_Flag==0) {
 8000b4a:	4b68      	ldr	r3, [pc, #416]	; (8000cec <UpdateAmplitudeByV+0x1a4>)
	CalcAc_I_ByWave();
	CalcDC_Average();

	#ifndef USE_VREF_FOR_ADC_CORRECTION
		V_1_temp=(uint32_t) (V_1_temp/Vcnt_1_temp);
		V_2_temp=(uint32_t) (V_2_temp/Vcnt_2_temp);
 8000b4c:	4c68      	ldr	r4, [pc, #416]	; (8000cf0 <UpdateAmplitudeByV+0x1a8>)
	if (TempBuffer_Flag==0) {
 8000b4e:	881b      	ldrh	r3, [r3, #0]
	CalcAc_V_ByWave();
 8000b50:	f7ff ffc8 	bl	8000ae4 <CalcAc_V_ByWave>
	CalcAc_I_ByWave();
 8000b54:	f7ff ffa4 	bl	8000aa0 <CalcAc_I_ByWave>
	CalcDC_Average();
 8000b58:	f7ff ffe6 	bl	8000b28 <CalcDC_Average>
		V_1_temp=(uint32_t) (V_1_temp/Vcnt_1_temp);
 8000b5c:	4b65      	ldr	r3, [pc, #404]	; (8000cf4 <UpdateAmplitudeByV+0x1ac>)
 8000b5e:	4966      	ldr	r1, [pc, #408]	; (8000cf8 <UpdateAmplitudeByV+0x1b0>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	6809      	ldr	r1, [r1, #0]
		V_3_temp=(uint32_t) (V_3_temp/Vcnt_3_temp);
 8000b64:	4d65      	ldr	r5, [pc, #404]	; (8000cfc <UpdateAmplitudeByV+0x1b4>)
		V_1_temp=(uint32_t) (V_1_temp/Vcnt_1_temp);
 8000b66:	fbb2 f2f1 	udiv	r2, r2, r1
		V_2_temp=(uint32_t) (V_2_temp/Vcnt_2_temp);
 8000b6a:	4965      	ldr	r1, [pc, #404]	; (8000d00 <UpdateAmplitudeByV+0x1b8>)
		V_1_temp=(uint32_t) (V_1_temp/Vcnt_1_temp);
 8000b6c:	601a      	str	r2, [r3, #0]
		V_2_temp=(uint32_t) (V_2_temp/Vcnt_2_temp);
 8000b6e:	6822      	ldr	r2, [r4, #0]
 8000b70:	6809      	ldr	r1, [r1, #0]
		V_4_temp=(uint32_t) (V_4_temp/Vcnt_4_temp);
 8000b72:	4e64      	ldr	r6, [pc, #400]	; (8000d04 <UpdateAmplitudeByV+0x1bc>)
		V_2_temp=(uint32_t) (V_2_temp/Vcnt_2_temp);
 8000b74:	fbb2 f2f1 	udiv	r2, r2, r1
		V_3_temp=(uint32_t) (V_3_temp/Vcnt_3_temp);
 8000b78:	4963      	ldr	r1, [pc, #396]	; (8000d08 <UpdateAmplitudeByV+0x1c0>)
		V_2_temp=(uint32_t) (V_2_temp/Vcnt_2_temp);
 8000b7a:	6022      	str	r2, [r4, #0]
		V_3_temp=(uint32_t) (V_3_temp/Vcnt_3_temp);
 8000b7c:	682a      	ldr	r2, [r5, #0]
 8000b7e:	6809      	ldr	r1, [r1, #0]
		Sine_Amplitude_4=CalcNewAmp(V_4_temp,V4_etalon);
	#endif

	#ifdef AMP_CORRECTION_TYPE_STEP
		amp1_target=CalcNewAmp(V_1_temp,V1_etalon);
		Sine_Amplitude_1=CalcNewAmpByStep(Sine_Amplitude_1,amp1_target);
 8000b80:	4f62      	ldr	r7, [pc, #392]	; (8000d0c <UpdateAmplitudeByV+0x1c4>)
		V_3_temp=(uint32_t) (V_3_temp/Vcnt_3_temp);
 8000b82:	fbb2 f2f1 	udiv	r2, r2, r1
		V_4_temp=(uint32_t) (V_4_temp/Vcnt_4_temp);
 8000b86:	4962      	ldr	r1, [pc, #392]	; (8000d10 <UpdateAmplitudeByV+0x1c8>)
		V_3_temp=(uint32_t) (V_3_temp/Vcnt_3_temp);
 8000b88:	602a      	str	r2, [r5, #0]
		V_4_temp=(uint32_t) (V_4_temp/Vcnt_4_temp);
 8000b8a:	6832      	ldr	r2, [r6, #0]
 8000b8c:	6809      	ldr	r1, [r1, #0]
 8000b8e:	fbb2 f2f1 	udiv	r2, r2, r1
 8000b92:	6032      	str	r2, [r6, #0]
		amp1_target=CalcNewAmp(V_1_temp,V1_etalon);
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b9a:	f7ff ff11 	bl	80009c0 <CalcNewAmp>
 8000b9e:	4b5d      	ldr	r3, [pc, #372]	; (8000d14 <UpdateAmplitudeByV+0x1cc>)
 8000ba0:	4601      	mov	r1, r0
 8000ba2:	6018      	str	r0, [r3, #0]
		Sine_Amplitude_1=CalcNewAmpByStep(Sine_Amplitude_1,amp1_target);
 8000ba4:	6838      	ldr	r0, [r7, #0]
 8000ba6:	f7ff ff3d 	bl	8000a24 <CalcNewAmpByStep>
 8000baa:	6038      	str	r0, [r7, #0]

		amp2_target=CalcNewAmp(V_2_temp,V2_etalon);
 8000bac:	6820      	ldr	r0, [r4, #0]
 8000bae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb2:	f7ff ff05 	bl	80009c0 <CalcNewAmp>
		Sine_Amplitude_2=CalcNewAmpByStep(Sine_Amplitude_2,amp2_target);
 8000bb6:	4c58      	ldr	r4, [pc, #352]	; (8000d18 <UpdateAmplitudeByV+0x1d0>)
		amp2_target=CalcNewAmp(V_2_temp,V2_etalon);
 8000bb8:	4b58      	ldr	r3, [pc, #352]	; (8000d1c <UpdateAmplitudeByV+0x1d4>)
 8000bba:	4601      	mov	r1, r0
 8000bbc:	6018      	str	r0, [r3, #0]
		Sine_Amplitude_2=CalcNewAmpByStep(Sine_Amplitude_2,amp2_target);
 8000bbe:	6820      	ldr	r0, [r4, #0]
 8000bc0:	f7ff ff30 	bl	8000a24 <CalcNewAmpByStep>
 8000bc4:	6020      	str	r0, [r4, #0]

		amp3_target=CalcNewAmp(V_3_temp,V3_etalon);
 8000bc6:	6828      	ldr	r0, [r5, #0]
 8000bc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bcc:	f7ff fef8 	bl	80009c0 <CalcNewAmp>
		Sine_Amplitude_3=CalcNewAmpByStep(Sine_Amplitude_3,amp3_target);
 8000bd0:	4d53      	ldr	r5, [pc, #332]	; (8000d20 <UpdateAmplitudeByV+0x1d8>)
		amp3_target=CalcNewAmp(V_3_temp,V3_etalon);
 8000bd2:	4b54      	ldr	r3, [pc, #336]	; (8000d24 <UpdateAmplitudeByV+0x1dc>)
 8000bd4:	4601      	mov	r1, r0
 8000bd6:	6018      	str	r0, [r3, #0]
		Sine_Amplitude_3=CalcNewAmpByStep(Sine_Amplitude_3,amp3_target);
 8000bd8:	6828      	ldr	r0, [r5, #0]
 8000bda:	f7ff ff23 	bl	8000a24 <CalcNewAmpByStep>
 8000bde:	6028      	str	r0, [r5, #0]

		amp4_target=CalcNewAmp(V_4_temp,V4_etalon);
 8000be0:	6830      	ldr	r0, [r6, #0]
 8000be2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000be6:	f7ff feeb 	bl	80009c0 <CalcNewAmp>
		Sine_Amplitude_4=CalcNewAmpByStep(Sine_Amplitude_4,amp4_target);
 8000bea:	4e4f      	ldr	r6, [pc, #316]	; (8000d28 <UpdateAmplitudeByV+0x1e0>)
		amp4_target=CalcNewAmp(V_4_temp,V4_etalon);
 8000bec:	4b4f      	ldr	r3, [pc, #316]	; (8000d2c <UpdateAmplitudeByV+0x1e4>)
 8000bee:	4601      	mov	r1, r0
 8000bf0:	6018      	str	r0, [r3, #0]
		Sine_Amplitude_4=CalcNewAmpByStep(Sine_Amplitude_4,amp4_target);
 8000bf2:	6830      	ldr	r0, [r6, #0]
 8000bf4:	f7ff ff16 	bl	8000a24 <CalcNewAmpByStep>
 8000bf8:	6030      	str	r0, [r6, #0]
	#endif

	#ifdef AMP_PROTECTION
		uint16_t AverageAmplitude=(uint16_t) (100*(float)(Sine_Amplitude_4+Sine_Amplitude_3+Sine_Amplitude_2+Sine_Amplitude_1));
 8000bfa:	6830      	ldr	r0, [r6, #0]
 8000bfc:	6829      	ldr	r1, [r5, #0]
 8000bfe:	6826      	ldr	r6, [r4, #0]
		if ((AMP_BLOCKED==0) && ((AverageAmplitude>=AMP_PROTECTION_MAX) || (AverageAmplitude<=AMP_PROTECTION_MIN))) {
 8000c00:	4c4b      	ldr	r4, [pc, #300]	; (8000d30 <UpdateAmplitudeByV+0x1e8>)
		uint16_t AverageAmplitude=(uint16_t) (100*(float)(Sine_Amplitude_4+Sine_Amplitude_3+Sine_Amplitude_2+Sine_Amplitude_1));
 8000c02:	683d      	ldr	r5, [r7, #0]
		if ((AMP_BLOCKED==0) && ((AverageAmplitude>=AMP_PROTECTION_MAX) || (AverageAmplitude<=AMP_PROTECTION_MIN))) {
 8000c04:	6823      	ldr	r3, [r4, #0]
 8000c06:	b9d3      	cbnz	r3, 8000c3e <UpdateAmplitudeByV+0xf6>
		uint16_t AverageAmplitude=(uint16_t) (100*(float)(Sine_Amplitude_4+Sine_Amplitude_3+Sine_Amplitude_2+Sine_Amplitude_1));
 8000c08:	f7ff fab2 	bl	8000170 <__addsf3>
 8000c0c:	4631      	mov	r1, r6
 8000c0e:	f7ff faaf 	bl	8000170 <__addsf3>
 8000c12:	4629      	mov	r1, r5
 8000c14:	f7ff faac 	bl	8000170 <__addsf3>
 8000c18:	4946      	ldr	r1, [pc, #280]	; (8000d34 <UpdateAmplitudeByV+0x1ec>)
 8000c1a:	f7ff fbb1 	bl	8000380 <__aeabi_fmul>
 8000c1e:	f7ff fd75 	bl	800070c <__aeabi_f2uiz>
		if ((AMP_BLOCKED==0) && ((AverageAmplitude>=AMP_PROTECTION_MAX) || (AverageAmplitude<=AMP_PROTECTION_MIN))) {
 8000c22:	38c9      	subs	r0, #201	; 0xc9
 8000c24:	b280      	uxth	r0, r0
 8000c26:	f5b0 7fc7 	cmp.w	r0, #398	; 0x18e
 8000c2a:	d908      	bls.n	8000c3e <UpdateAmplitudeByV+0xf6>
			AMP_PROTECTION_CNT++;
 8000c2c:	4a42      	ldr	r2, [pc, #264]	; (8000d38 <UpdateAmplitudeByV+0x1f0>)
 8000c2e:	6813      	ldr	r3, [r2, #0]
 8000c30:	3301      	adds	r3, #1
			if (AMP_PROTECTION_CNT>AMP_PROTECTION_MINMAX_CNT) {
 8000c32:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
			AMP_PROTECTION_CNT++;
 8000c36:	6013      	str	r3, [r2, #0]
				AMP_BLOCKED=1;
 8000c38:	bfc4      	itt	gt
 8000c3a:	2301      	movgt	r3, #1
 8000c3c:	6023      	strgt	r3, [r4, #0]

		}
	#endif

	#ifdef DC_PROTECTION
			 if ((DC_BLOCKED==0) && (DC_DataAverage>=DC_PROTECTION_MAX) ) {
 8000c3e:	4a3f      	ldr	r2, [pc, #252]	; (8000d3c <UpdateAmplitudeByV+0x1f4>)
 8000c40:	6813      	ldr	r3, [r2, #0]
 8000c42:	b973      	cbnz	r3, 8000c62 <UpdateAmplitudeByV+0x11a>
 8000c44:	4b3e      	ldr	r3, [pc, #248]	; (8000d40 <UpdateAmplitudeByV+0x1f8>)
 8000c46:	6819      	ldr	r1, [r3, #0]
 8000c48:	f640 53ab 	movw	r3, #3499	; 0xdab
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d908      	bls.n	8000c62 <UpdateAmplitudeByV+0x11a>
				 DC_PROTECTION_CNT++;
 8000c50:	493c      	ldr	r1, [pc, #240]	; (8000d44 <UpdateAmplitudeByV+0x1fc>)
 8000c52:	680b      	ldr	r3, [r1, #0]
 8000c54:	3301      	adds	r3, #1
				 if (DC_PROTECTION_CNT>DC_PROTECTION_WAVE_CNT) {
 8000c56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
				 DC_PROTECTION_CNT++;
 8000c5a:	600b      	str	r3, [r1, #0]
				 	DC_BLOCKED=1;
 8000c5c:	bfc4      	itt	gt
 8000c5e:	2301      	movgt	r3, #1
 8000c60:	6013      	strgt	r3, [r2, #0]
				 }
			 }
	#endif

	#ifdef VOUT_PROTECTION
		if ((VOUT_BLOCKED==0) && ((V_Out>=VOUT_PROTECTION_MAX) || (V_Out<=VOUT_PROTECTION_MIN))) {
 8000c62:	4b39      	ldr	r3, [pc, #228]	; (8000d48 <UpdateAmplitudeByV+0x200>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	b9da      	cbnz	r2, 8000ca0 <UpdateAmplitudeByV+0x158>
 8000c68:	4a38      	ldr	r2, [pc, #224]	; (8000d4c <UpdateAmplitudeByV+0x204>)
 8000c6a:	6811      	ldr	r1, [r2, #0]
 8000c6c:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 8000c70:	d202      	bcs.n	8000c78 <UpdateAmplitudeByV+0x130>
 8000c72:	6811      	ldr	r1, [r2, #0]
 8000c74:	2964      	cmp	r1, #100	; 0x64
 8000c76:	d809      	bhi.n	8000c8c <UpdateAmplitudeByV+0x144>
				VOUT_PROTECTION_CNT++;
 8000c78:	4835      	ldr	r0, [pc, #212]	; (8000d50 <UpdateAmplitudeByV+0x208>)
 8000c7a:	6801      	ldr	r1, [r0, #0]
 8000c7c:	3101      	adds	r1, #1
				if (VOUT_PROTECTION_CNT>VOUT_PROTECTION_MINMAX_CNT) {
 8000c7e:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
				VOUT_PROTECTION_CNT++;
 8000c82:	6001      	str	r1, [r0, #0]
				if (VOUT_PROTECTION_CNT>VOUT_PROTECTION_MINMAX_CNT) {
 8000c84:	dd02      	ble.n	8000c8c <UpdateAmplitudeByV+0x144>
				}
		}
		if ((VOUT_BLOCKED==0) && (V_Out>=VOUT_PROTECTION_ULTRA) ) {
						VOUT_PROTECTION_CNT++;
						if (VOUT_PROTECTION_CNT>VOUT_PROTECTION_MOMENTARY_CNT) {
							VOUT_BLOCKED=1;
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	e009      	b.n	8000ca0 <UpdateAmplitudeByV+0x158>
		if ((VOUT_BLOCKED==0) && (V_Out>=VOUT_PROTECTION_ULTRA) ) {
 8000c8c:	6812      	ldr	r2, [r2, #0]
 8000c8e:	f5b2 7fbe 	cmp.w	r2, #380	; 0x17c
 8000c92:	d305      	bcc.n	8000ca0 <UpdateAmplitudeByV+0x158>
						VOUT_PROTECTION_CNT++;
 8000c94:	492e      	ldr	r1, [pc, #184]	; (8000d50 <UpdateAmplitudeByV+0x208>)
 8000c96:	680a      	ldr	r2, [r1, #0]
 8000c98:	3201      	adds	r2, #1
						if (VOUT_PROTECTION_CNT>VOUT_PROTECTION_MOMENTARY_CNT) {
 8000c9a:	2a02      	cmp	r2, #2
						VOUT_PROTECTION_CNT++;
 8000c9c:	600a      	str	r2, [r1, #0]
						if (VOUT_PROTECTION_CNT>VOUT_PROTECTION_MOMENTARY_CNT) {
 8000c9e:	dcf2      	bgt.n	8000c86 <UpdateAmplitudeByV+0x13e>
						}
				}
	#endif

	#ifdef IOUT_PROTECTION
		if ((IOUT_BLOCKED==0) && (I_Out>=IOUT_PROTECTION_MAX)) {
 8000ca0:	492c      	ldr	r1, [pc, #176]	; (8000d54 <UpdateAmplitudeByV+0x20c>)
 8000ca2:	680b      	ldr	r3, [r1, #0]
 8000ca4:	460c      	mov	r4, r1
 8000ca6:	b973      	cbnz	r3, 8000cc6 <UpdateAmplitudeByV+0x17e>
 8000ca8:	f241 3287 	movw	r2, #4999	; 0x1387
 8000cac:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <UpdateAmplitudeByV+0x210>)
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	d90c      	bls.n	8000cce <UpdateAmplitudeByV+0x186>
				IOUT_PROTECTION_CNT++;
 8000cb4:	4829      	ldr	r0, [pc, #164]	; (8000d5c <UpdateAmplitudeByV+0x214>)
 8000cb6:	6802      	ldr	r2, [r0, #0]
 8000cb8:	3201      	adds	r2, #1
				if (IOUT_PROTECTION_CNT>IOUT_PROTECTION_MINMAX_CNT) {
 8000cba:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
				IOUT_PROTECTION_CNT++;
 8000cbe:	6002      	str	r2, [r0, #0]
				if (IOUT_PROTECTION_CNT>IOUT_PROTECTION_MINMAX_CNT) {
 8000cc0:	dd05      	ble.n	8000cce <UpdateAmplitudeByV+0x186>
					IOUT_BLOCKED=1;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	600b      	str	r3, [r1, #0]
						}
				}
	#endif

	ResetV_data();
}
 8000cc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ResetV_data();
 8000cca:	f7ff be05 	b.w	80008d8 <ResetV_data>
		if ((IOUT_BLOCKED==0) && (I_Out>=IOUT_PROTECTION_ULTRA) ) {
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	f242 3327 	movw	r3, #8999	; 0x2327
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d9f6      	bls.n	8000cc6 <UpdateAmplitudeByV+0x17e>
			IOUT_PROTECTION_CNT++;
 8000cd8:	4a20      	ldr	r2, [pc, #128]	; (8000d5c <UpdateAmplitudeByV+0x214>)
 8000cda:	6813      	ldr	r3, [r2, #0]
 8000cdc:	3301      	adds	r3, #1
						if (IOUT_PROTECTION_CNT>IOUT_PROTECTION_MOMENTARY_CNT) {
 8000cde:	2b02      	cmp	r3, #2
			IOUT_PROTECTION_CNT++;
 8000ce0:	6013      	str	r3, [r2, #0]
							IOUT_BLOCKED=1;
 8000ce2:	bfc4      	itt	gt
 8000ce4:	2301      	movgt	r3, #1
 8000ce6:	6023      	strgt	r3, [r4, #0]
 8000ce8:	e7ed      	b.n	8000cc6 <UpdateAmplitudeByV+0x17e>
 8000cea:	bf00      	nop
 8000cec:	200000e4 	.word	0x200000e4
 8000cf0:	20000180 	.word	0x20000180
 8000cf4:	2000017c 	.word	0x2000017c
 8000cf8:	20000194 	.word	0x20000194
 8000cfc:	20000184 	.word	0x20000184
 8000d00:	20000198 	.word	0x20000198
 8000d04:	20000188 	.word	0x20000188
 8000d08:	2000019c 	.word	0x2000019c
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	200001a0 	.word	0x200001a0
 8000d14:	20000040 	.word	0x20000040
 8000d18:	2000000c 	.word	0x2000000c
 8000d1c:	20000044 	.word	0x20000044
 8000d20:	20000010 	.word	0x20000010
 8000d24:	20000048 	.word	0x20000048
 8000d28:	20000014 	.word	0x20000014
 8000d2c:	2000004c 	.word	0x2000004c
 8000d30:	200000e8 	.word	0x200000e8
 8000d34:	42c80000 	.word	0x42c80000
 8000d38:	200000ec 	.word	0x200000ec
 8000d3c:	200000f4 	.word	0x200000f4
 8000d40:	200000fc 	.word	0x200000fc
 8000d44:	20000104 	.word	0x20000104
 8000d48:	20000128 	.word	0x20000128
 8000d4c:	20000134 	.word	0x20000134
 8000d50:	2000012c 	.word	0x2000012c
 8000d54:	2000010c 	.word	0x2000010c
 8000d58:	20000118 	.word	0x20000118
 8000d5c:	20000110 	.word	0x20000110

08000d60 <TM_CRC_Calculate8>:
		volatile uint32_t DC_Data_temp=0;
		volatile uint32_t DC_DataCnt_temp=0;
	#endif


uint32_t TM_CRC_Calculate8(uint8_t* arr, uint32_t count, uint8_t reset) {
 8000d60:	b510      	push	{r4, lr}
	uint32_t cnt;

	/* Reset CRC data register if necessary */
	if (reset) {
 8000d62:	b112      	cbz	r2, 8000d6a <TM_CRC_Calculate8+0xa>
		/* Reset generator */
		CRC->CR = CRC_CR_RESET;
 8000d64:	2201      	movs	r2, #1
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <TM_CRC_Calculate8+0x38>)
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	f021 0303 	bic.w	r3, r1, #3
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <TM_CRC_Calculate8+0x38>)
 8000d70:	4403      	add	r3, r0

	/* Calculate number of 32-bit blocks */
	cnt = count >> 2;

	/* Calculate */
	while (cnt--) {
 8000d72:	4298      	cmp	r0, r3
 8000d74:	d107      	bne.n	8000d86 <TM_CRC_Calculate8+0x26>
		/* Increase by 4 */
		arr += 4;
	}

	/* Calculate remaining data as 8-bit */
	cnt = count % 4;
 8000d76:	f001 0103 	and.w	r1, r1, #3

	/* Calculate */
	while (cnt--) {
		/* Set new value */
		*((uint8_t *)&CRC->DR) = *arr++;
 8000d7a:	4807      	ldr	r0, [pc, #28]	; (8000d98 <TM_CRC_Calculate8+0x38>)
 8000d7c:	4419      	add	r1, r3
	while (cnt--) {
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d105      	bne.n	8000d8e <TM_CRC_Calculate8+0x2e>
	}

	/* Return data */
	return CRC->DR;
 8000d82:	6810      	ldr	r0, [r2, #0]
}
 8000d84:	bd10      	pop	{r4, pc}
		CRC->DR = *(uint32_t *)arr;
 8000d86:	f850 4b04 	ldr.w	r4, [r0], #4
 8000d8a:	6014      	str	r4, [r2, #0]
 8000d8c:	e7f1      	b.n	8000d72 <TM_CRC_Calculate8+0x12>
		*((uint8_t *)&CRC->DR) = *arr++;
 8000d8e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8000d92:	7004      	strb	r4, [r0, #0]
 8000d94:	e7f3      	b.n	8000d7e <TM_CRC_Calculate8+0x1e>
 8000d96:	bf00      	nop
 8000d98:	40023000 	.word	0x40023000

08000d9c <TM_CRC_Calculate32>:

	/* Return data */
	return CRC->DR;
}

uint32_t TM_CRC_Calculate32(uint32_t* arr, uint32_t count, uint8_t reset) {
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <TM_CRC_Calculate32+0x20>)
	/* Reset CRC data register if necessary */
	if (reset) {
 8000da0:	b10a      	cbz	r2, 8000da6 <TM_CRC_Calculate32+0xa>
		/* Reset generator */
		CRC->CR = CRC_CR_RESET;
 8000da2:	2201      	movs	r2, #1
 8000da4:	609a      	str	r2, [r3, #8]
	}

	/* Calculate CRC */
	while (count--) {
		/* Set new value */
		CRC->DR = *arr++;
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <TM_CRC_Calculate32+0x20>)
	while (count--) {
 8000da8:	f111 31ff 	adds.w	r1, r1, #4294967295
 8000dac:	d201      	bcs.n	8000db2 <TM_CRC_Calculate32+0x16>
	}

	/* Return data */
	return CRC->DR;
 8000dae:	6818      	ldr	r0, [r3, #0]
}
 8000db0:	bd10      	pop	{r4, pc}
		CRC->DR = *arr++;
 8000db2:	f850 4b04 	ldr.w	r4, [r0], #4
 8000db6:	6014      	str	r4, [r2, #0]
 8000db8:	e7f6      	b.n	8000da8 <TM_CRC_Calculate32+0xc>
 8000dba:	bf00      	nop
 8000dbc:	40023000 	.word	0x40023000

08000dc0 <AddUART_CRC>:
void AddUART_Header() {
	ClearUART_Buff();
	strcat(uart_buff,"@data@");
}

void AddUART_CRC() {
 8000dc0:	b538      	push	{r3, r4, r5, lr}
	memset(crc_buff, '\0', sizeof(crc_buff));
 8000dc2:	4c0b      	ldr	r4, [pc, #44]	; (8000df0 <AddUART_CRC+0x30>)
	//uint32_t crc=Get_CRC((uint8_t *) &uart_buff, sizeof(uart_buff));
	uint32_t crc=TM_CRC_Calculate8((uint8_t *) &uart_buff, sizeof(uart_buff), 1);
 8000dc4:	4d0b      	ldr	r5, [pc, #44]	; (8000df4 <AddUART_CRC+0x34>)
	memset(crc_buff, '\0', sizeof(crc_buff));
 8000dc6:	2214      	movs	r2, #20
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4620      	mov	r0, r4
 8000dcc:	f004 fd6a 	bl	80058a4 <memset>
	uint32_t crc=TM_CRC_Calculate8((uint8_t *) &uart_buff, sizeof(uart_buff), 1);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2164      	movs	r1, #100	; 0x64
 8000dd4:	4628      	mov	r0, r5
 8000dd6:	f7ff ffc3 	bl	8000d60 <TM_CRC_Calculate8>
	sprintf(crc_buff, "@crc@%08X@\r\n",  (unsigned int) crc);
 8000dda:	4907      	ldr	r1, [pc, #28]	; (8000df8 <AddUART_CRC+0x38>)
 8000ddc:	4602      	mov	r2, r0
 8000dde:	4620      	mov	r0, r4
 8000de0:	f004 fd68 	bl	80058b4 <siprintf>
	strcat(uart_buff,crc_buff);
 8000de4:	4621      	mov	r1, r4
 8000de6:	4628      	mov	r0, r5

}
 8000de8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	strcat(uart_buff,crc_buff);
 8000dec:	f004 bd86 	b.w	80058fc <strcat>
 8000df0:	200002f8 	.word	0x200002f8
 8000df4:	20000278 	.word	0x20000278
 8000df8:	0800617c 	.word	0x0800617c

08000dfc <ClearUART_Buff>:
		WaitForUART_TX();
	}
}

void ClearUART_Buff() {
	memset(uart_buff, '\0', sizeof(uart_buff));
 8000dfc:	2264      	movs	r2, #100	; 0x64
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4801      	ldr	r0, [pc, #4]	; (8000e08 <ClearUART_Buff+0xc>)
 8000e02:	f004 bd4f 	b.w	80058a4 <memset>
 8000e06:	bf00      	nop
 8000e08:	20000278 	.word	0x20000278

08000e0c <Get_ChipID>:
void Get_ChipID(void) {
 8000e0c:	b507      	push	{r0, r1, r2, lr}
	ClearUART_Buff();
 8000e0e:	f7ff fff5 	bl	8000dfc <ClearUART_Buff>
	sprintf(uart_buff, "@id@%08X-%08X-%08X",   (unsigned int) TM_ID_GetUnique32(0),
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <Get_ChipID+0x28>)
 8000e14:	4908      	ldr	r1, [pc, #32]	; (8000e38 <Get_ChipID+0x2c>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6809      	ldr	r1, [r1, #0]
 8000e1e:	4807      	ldr	r0, [pc, #28]	; (8000e3c <Get_ChipID+0x30>)
 8000e20:	9100      	str	r1, [sp, #0]
 8000e22:	4907      	ldr	r1, [pc, #28]	; (8000e40 <Get_ChipID+0x34>)
 8000e24:	f004 fd46 	bl	80058b4 <siprintf>
}
 8000e28:	b003      	add	sp, #12
 8000e2a:	f85d eb04 	ldr.w	lr, [sp], #4
	AddUART_CRC();
 8000e2e:	f7ff bfc7 	b.w	8000dc0 <AddUART_CRC>
 8000e32:	bf00      	nop
 8000e34:	1ffff7ac 	.word	0x1ffff7ac
 8000e38:	1ffff7b4 	.word	0x1ffff7b4
 8000e3c:	20000278 	.word	0x20000278
 8000e40:	08006197 	.word	0x08006197

08000e44 <Get_FlashSize>:
void Get_FlashSize(void) {
 8000e44:	b508      	push	{r3, lr}
	ClearUART_Buff();
 8000e46:	f7ff ffd9 	bl	8000dfc <ClearUART_Buff>
    sprintf(uart_buff, "@flash_size@%02d", TM_ID_GetFlashSize());
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <Get_FlashSize+0x1c>)
 8000e4c:	4905      	ldr	r1, [pc, #20]	; (8000e64 <Get_FlashSize+0x20>)
 8000e4e:	881a      	ldrh	r2, [r3, #0]
 8000e50:	4805      	ldr	r0, [pc, #20]	; (8000e68 <Get_FlashSize+0x24>)
 8000e52:	b292      	uxth	r2, r2
 8000e54:	f004 fd2e 	bl	80058b4 <siprintf>
}
 8000e58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    AddUART_CRC();
 8000e5c:	f7ff bfb0 	b.w	8000dc0 <AddUART_CRC>
 8000e60:	1ffff7cc 	.word	0x1ffff7cc
 8000e64:	080061aa 	.word	0x080061aa
 8000e68:	20000278 	.word	0x20000278

08000e6c <Get_Version>:
void Get_Version(void) {
 8000e6c:	b510      	push	{r4, lr}
	strcat(uart_buff,"@version@");
 8000e6e:	4c07      	ldr	r4, [pc, #28]	; (8000e8c <Get_Version+0x20>)
	ClearUART_Buff();
 8000e70:	f7ff ffc4 	bl	8000dfc <ClearUART_Buff>
	strcat(uart_buff,"@version@");
 8000e74:	4906      	ldr	r1, [pc, #24]	; (8000e90 <Get_Version+0x24>)
 8000e76:	4620      	mov	r0, r4
 8000e78:	f004 fd40 	bl	80058fc <strcat>
    strcat(uart_buff,__DATE__);
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	4905      	ldr	r1, [pc, #20]	; (8000e94 <Get_Version+0x28>)
 8000e80:	f004 fd3c 	bl	80058fc <strcat>
}
 8000e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    AddUART_CRC();
 8000e88:	f7ff bf9a 	b.w	8000dc0 <AddUART_CRC>
 8000e8c:	20000278 	.word	0x20000278
 8000e90:	080061bb 	.word	0x080061bb
 8000e94:	080061c5 	.word	0x080061c5

08000e98 <WaitForUART_TX>:
}

void WaitForUART_TX() {
	while (!huart1_finished_tx);
 8000e98:	4a02      	ldr	r2, [pc, #8]	; (8000ea4 <WaitForUART_TX+0xc>)
 8000e9a:	6813      	ldr	r3, [r2, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0fc      	beq.n	8000e9a <WaitForUART_TX+0x2>
}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000054 	.word	0x20000054

08000ea8 <SerialPrintln>:
	huart1_finished_tx = 0;
 8000ea8:	2200      	movs	r2, #0
void SerialPrintln(int WaitForTX) {
 8000eaa:	b570      	push	{r4, r5, r6, lr}
 8000eac:	4604      	mov	r4, r0
	huart1_finished_tx = 0;
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <SerialPrintln+0x28>)
	while (HAL_UART_Transmit_DMA(&huart1, (uint8_t*) uart_buff, sizeof(uart_buff)-1) == HAL_BUSY);
 8000eb0:	4e08      	ldr	r6, [pc, #32]	; (8000ed4 <SerialPrintln+0x2c>)
 8000eb2:	4d09      	ldr	r5, [pc, #36]	; (8000ed8 <SerialPrintln+0x30>)
	huart1_finished_tx = 0;
 8000eb4:	601a      	str	r2, [r3, #0]
	while (HAL_UART_Transmit_DMA(&huart1, (uint8_t*) uart_buff, sizeof(uart_buff)-1) == HAL_BUSY);
 8000eb6:	2263      	movs	r2, #99	; 0x63
 8000eb8:	4631      	mov	r1, r6
 8000eba:	4628      	mov	r0, r5
 8000ebc:	f004 fb42 	bl	8005544 <HAL_UART_Transmit_DMA>
 8000ec0:	2802      	cmp	r0, #2
 8000ec2:	d0f8      	beq.n	8000eb6 <SerialPrintln+0xe>
	if (WaitForTX) {
 8000ec4:	b11c      	cbz	r4, 8000ece <SerialPrintln+0x26>
}
 8000ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		WaitForUART_TX();
 8000eca:	f7ff bfe5 	b.w	8000e98 <WaitForUART_TX>
 8000ece:	bd70      	pop	{r4, r5, r6, pc}
 8000ed0:	20000054 	.word	0x20000054
 8000ed4:	20000278 	.word	0x20000278
 8000ed8:	200004d8 	.word	0x200004d8

08000edc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == USART1)  // change USART instance
 8000edc:	6802      	ldr	r2, [r0, #0]
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <HAL_UART_TxCpltCallback+0x14>)
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d104      	bne.n	8000eee <HAL_UART_TxCpltCallback+0x12>
    {
    	huart1_finished_tx = 1;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_UART_TxCpltCallback+0x18>)
 8000ee8:	601a      	str	r2, [r3, #0]
    	ClearUART_Buff();
 8000eea:	f7ff bf87 	b.w	8000dfc <ClearUART_Buff>
 8000eee:	4770      	bx	lr
 8000ef0:	40013800 	.word	0x40013800
 8000ef4:	20000054 	.word	0x20000054

08000ef8 <ResetWDG>:
    }
}

void ResetWDG() {
	 HAL_IWDG_Refresh(&hiwdg);
 8000ef8:	4801      	ldr	r0, [pc, #4]	; (8000f00 <ResetWDG+0x8>)
 8000efa:	f002 bdf5 	b.w	8003ae8 <HAL_IWDG_Refresh>
 8000efe:	bf00      	nop
 8000f00:	20000388 	.word	0x20000388

08000f04 <PrintCurrentState>:
	 //IWDG->KR = 0x0000AAAAU;
}


void PrintCurrentState() {
 8000f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (DevMode1!=1) {
 8000f08:	4b3b      	ldr	r3, [pc, #236]	; (8000ff8 <PrintCurrentState+0xf4>)
void PrintCurrentState() {
 8000f0a:	b08d      	sub	sp, #52	; 0x34
	if (DevMode1!=1) {
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d16e      	bne.n	8000ff0 <PrintCurrentState+0xec>
	  			HAL_UART_Receive_DMA(&huart1, (uint8_t*) cmd_buff, sizeof(cmd_buff));
	  			hdma_usart1_rx.State=HAL_DMA_STATE_BUSY;
	  			SerialPrintln(0);
	  			return;
	  		}*/
		if ((DC_BLOCKED==1) || (VOUT_BLOCKED==1) || (AMP_BLOCKED==1) || (IOUT_BLOCKED==1)) {
 8000f12:	4c3a      	ldr	r4, [pc, #232]	; (8000ffc <PrintCurrentState+0xf8>)
	ClearUART_Buff();
 8000f14:	f7ff ff72 	bl	8000dfc <ClearUART_Buff>
		if ((DC_BLOCKED==1) || (VOUT_BLOCKED==1) || (AMP_BLOCKED==1) || (IOUT_BLOCKED==1)) {
 8000f18:	6823      	ldr	r3, [r4, #0]
 8000f1a:	4939      	ldr	r1, [pc, #228]	; (8001000 <PrintCurrentState+0xfc>)
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	f8df b114 	ldr.w	fp, [pc, #276]	; 8001034 <PrintCurrentState+0x130>
 8000f22:	4a38      	ldr	r2, [pc, #224]	; (8001004 <PrintCurrentState+0x100>)
 8000f24:	d009      	beq.n	8000f3a <PrintCurrentState+0x36>
 8000f26:	680b      	ldr	r3, [r1, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d006      	beq.n	8000f3a <PrintCurrentState+0x36>
 8000f2c:	f8db 3000 	ldr.w	r3, [fp]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d002      	beq.n	8000f3a <PrintCurrentState+0x36>
 8000f34:	6813      	ldr	r3, [r2, #0]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d10b      	bne.n	8000f52 <PrintCurrentState+0x4e>
 8000f3a:	920b      	str	r2, [sp, #44]	; 0x2c
 8000f3c:	910a      	str	r1, [sp, #40]	; 0x28
			//V_Out_RawData=ADC_Data[0]*ADC_Data[0];
			//V_Out_Cnt=1;
			CalcAc_V_ByWave();
 8000f3e:	f7ff fdd1 	bl	8000ae4 <CalcAc_V_ByWave>
			CalcAc_I_ByWave();
 8000f42:	f7ff fdad 	bl	8000aa0 <CalcAc_I_ByWave>
			CalcDC_Average();
 8000f46:	f7ff fdef 	bl	8000b28 <CalcDC_Average>
			ResetV_data();
 8000f4a:	f7ff fcc5 	bl	80008d8 <ResetV_data>
 8000f4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000f50:	990a      	ldr	r1, [sp, #40]	; 0x28
		#endif

		#ifndef USE_VREF
				"V=%4u v, I=%4u W, DC=%4u, A1=%03d,  A2=%03d,  A3=%03d,  A4=%03d, A_F=%01d, F=%01d, DC_F=%01d, V_F=%01d, I_F=%01d \r\n",
		#endif
								(uint16_t) V_Out,
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <PrintCurrentState+0x104>)
		sprintf(uart_buff,
 8000f54:	6812      	ldr	r2, [r2, #0]
								(uint16_t) V_Out,
 8000f56:	681d      	ldr	r5, [r3, #0]
								(uint16_t) I_Out,
 8000f58:	4b2c      	ldr	r3, [pc, #176]	; (800100c <PrintCurrentState+0x108>)
		sprintf(uart_buff,
 8000f5a:	b2ad      	uxth	r5, r5
								(uint16_t) I_Out,
 8000f5c:	681e      	ldr	r6, [r3, #0]
								(uint16_t) ADC_Data[2],
 8000f5e:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <PrintCurrentState+0x10c>)
		sprintf(uart_buff,
 8000f60:	b2b6      	uxth	r6, r6
								(uint16_t) ADC_Data[2],
 8000f62:	889f      	ldrh	r7, [r3, #4]
								#ifdef USE_VREF
								(uint16_t) (VDDA_Actual),
								#endif
	      		  				(uint16_t) (100*Sine_Amplitude_1),
 8000f64:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <PrintCurrentState+0x110>)
								(uint16_t) ADC_Data[2],
 8000f66:	b2bf      	uxth	r7, r7
	      		  				(uint16_t) (100*Sine_Amplitude_1),
 8000f68:	f8d3 8000 	ldr.w	r8, [r3]
	      		  				(uint16_t) (100*Sine_Amplitude_2),
 8000f6c:	4b2a      	ldr	r3, [pc, #168]	; (8001018 <PrintCurrentState+0x114>)
 8000f6e:	f8d3 9000 	ldr.w	r9, [r3]
								(uint16_t) (100*Sine_Amplitude_3),
 8000f72:	4b2a      	ldr	r3, [pc, #168]	; (800101c <PrintCurrentState+0x118>)
 8000f74:	f8d3 a000 	ldr.w	sl, [r3]
								(uint16_t) (100*Sine_Amplitude_4),
 8000f78:	4b29      	ldr	r3, [pc, #164]	; (8001020 <PrintCurrentState+0x11c>)
 8000f7a:	6818      	ldr	r0, [r3, #0]
		sprintf(uart_buff,
 8000f7c:	4b29      	ldr	r3, [pc, #164]	; (8001024 <PrintCurrentState+0x120>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	9209      	str	r2, [sp, #36]	; 0x24
 8000f82:	680a      	ldr	r2, [r1, #0]
								(uint16_t) (100*Sine_Amplitude_4),
 8000f84:	4928      	ldr	r1, [pc, #160]	; (8001028 <PrintCurrentState+0x124>)
		sprintf(uart_buff,
 8000f86:	9208      	str	r2, [sp, #32]
 8000f88:	6822      	ldr	r2, [r4, #0]
 8000f8a:	9207      	str	r2, [sp, #28]
 8000f8c:	1eda      	subs	r2, r3, #3
 8000f8e:	4253      	negs	r3, r2
 8000f90:	4153      	adcs	r3, r2
 8000f92:	9306      	str	r3, [sp, #24]
 8000f94:	f8db 3000 	ldr.w	r3, [fp]
 8000f98:	9305      	str	r3, [sp, #20]
								(uint16_t) (100*Sine_Amplitude_4),
 8000f9a:	f7ff f9f1 	bl	8000380 <__aeabi_fmul>
 8000f9e:	f7ff fbb5 	bl	800070c <__aeabi_f2uiz>
		sprintf(uart_buff,
 8000fa2:	b280      	uxth	r0, r0
 8000fa4:	9004      	str	r0, [sp, #16]
								(uint16_t) (100*Sine_Amplitude_3),
 8000fa6:	4920      	ldr	r1, [pc, #128]	; (8001028 <PrintCurrentState+0x124>)
 8000fa8:	4650      	mov	r0, sl
 8000faa:	f7ff f9e9 	bl	8000380 <__aeabi_fmul>
 8000fae:	f7ff fbad 	bl	800070c <__aeabi_f2uiz>
		sprintf(uart_buff,
 8000fb2:	b280      	uxth	r0, r0
 8000fb4:	9003      	str	r0, [sp, #12]
	      		  				(uint16_t) (100*Sine_Amplitude_2),
 8000fb6:	491c      	ldr	r1, [pc, #112]	; (8001028 <PrintCurrentState+0x124>)
 8000fb8:	4648      	mov	r0, r9
 8000fba:	f7ff f9e1 	bl	8000380 <__aeabi_fmul>
 8000fbe:	f7ff fba5 	bl	800070c <__aeabi_f2uiz>
		sprintf(uart_buff,
 8000fc2:	b280      	uxth	r0, r0
 8000fc4:	9002      	str	r0, [sp, #8]
	      		  				(uint16_t) (100*Sine_Amplitude_1),
 8000fc6:	4918      	ldr	r1, [pc, #96]	; (8001028 <PrintCurrentState+0x124>)
 8000fc8:	4640      	mov	r0, r8
 8000fca:	f7ff f9d9 	bl	8000380 <__aeabi_fmul>
 8000fce:	f7ff fb9d 	bl	800070c <__aeabi_f2uiz>
		sprintf(uart_buff,
 8000fd2:	b280      	uxth	r0, r0
 8000fd4:	9001      	str	r0, [sp, #4]
 8000fd6:	9700      	str	r7, [sp, #0]
 8000fd8:	4633      	mov	r3, r6
 8000fda:	462a      	mov	r2, r5
 8000fdc:	4913      	ldr	r1, [pc, #76]	; (800102c <PrintCurrentState+0x128>)
 8000fde:	4814      	ldr	r0, [pc, #80]	; (8001030 <PrintCurrentState+0x12c>)
 8000fe0:	f004 fc68 	bl	80058b4 <siprintf>
								AMP_BLOCKED,
								(uint16_t) (BoardStatus==sFaultFlag),
								DC_BLOCKED,
								VOUT_BLOCKED,
								IOUT_BLOCKED);
		SerialPrintln(0);
 8000fe4:	2000      	movs	r0, #0

	#endif
}
 8000fe6:	b00d      	add	sp, #52	; 0x34
 8000fe8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		SerialPrintln(0);
 8000fec:	f7ff bf5c 	b.w	8000ea8 <SerialPrintln>
}
 8000ff0:	b00d      	add	sp, #52	; 0x34
 8000ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000154 	.word	0x20000154
 8000ffc:	200000f4 	.word	0x200000f4
 8001000:	20000128 	.word	0x20000128
 8001004:	2000010c 	.word	0x2000010c
 8001008:	20000134 	.word	0x20000134
 800100c:	20000118 	.word	0x20000118
 8001010:	20000238 	.word	0x20000238
 8001014:	20000008 	.word	0x20000008
 8001018:	2000000c 	.word	0x2000000c
 800101c:	20000010 	.word	0x20000010
 8001020:	20000014 	.word	0x20000014
 8001024:	20000142 	.word	0x20000142
 8001028:	42c80000 	.word	0x42c80000
 800102c:	080061d1 	.word	0x080061d1
 8001030:	20000278 	.word	0x20000278
 8001034:	200000e8 	.word	0x200000e8

08001038 <ResetEEPROM>:

// EEPROM
void ResetEEPROM() {
	EEPROM_DATA[0]=0;
 8001038:	2300      	movs	r3, #0
 800103a:	4a03      	ldr	r2, [pc, #12]	; (8001048 <ResetEEPROM+0x10>)
 800103c:	6013      	str	r3, [r2, #0]
	EEPROM_DATA[1]=0;
 800103e:	6053      	str	r3, [r2, #4]
	EEPROM_CRC=0;
 8001040:	4a02      	ldr	r2, [pc, #8]	; (800104c <ResetEEPROM+0x14>)
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	2000015c 	.word	0x2000015c
 800104c:	20000158 	.word	0x20000158

08001050 <CALC_RATIO>:
}

void CALC_RATIO() {
 8001050:	b510      	push	{r4, lr}
	memcpy(&fVal, &EEPROM_DATA[1],sizeof(fVal));
	I_RATIO=(fVal*(3.3/4096));
	memcpy(&fVal, &EEPROM_DATA[0],sizeof(fVal));
	V_RATIO=(fVal*(3.3/4096));*/

	I_RATIO=(EEPROM_DATA[1]*IV_RATIO);
 8001052:	4c09      	ldr	r4, [pc, #36]	; (8001078 <CALC_RATIO+0x28>)
 8001054:	6860      	ldr	r0, [r4, #4]
 8001056:	f7ff f93b 	bl	80002d0 <__aeabi_ui2f>
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <CALC_RATIO+0x2c>)
 800105c:	f7ff f990 	bl	8000380 <__aeabi_fmul>
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <CALC_RATIO+0x30>)
 8001062:	6018      	str	r0, [r3, #0]
	V_RATIO=(EEPROM_DATA[0]*IV_RATIO);
 8001064:	6820      	ldr	r0, [r4, #0]
 8001066:	f7ff f933 	bl	80002d0 <__aeabi_ui2f>
 800106a:	4904      	ldr	r1, [pc, #16]	; (800107c <CALC_RATIO+0x2c>)
 800106c:	f7ff f988 	bl	8000380 <__aeabi_fmul>
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <CALC_RATIO+0x34>)
 8001072:	6018      	str	r0, [r3, #0]
 8001074:	bd10      	pop	{r4, pc}
 8001076:	bf00      	nop
 8001078:	2000015c 	.word	0x2000015c
 800107c:	3a533333 	.word	0x3a533333
 8001080:	20000004 	.word	0x20000004
 8001084:	2000003c 	.word	0x2000003c

08001088 <USE_DEF_CALIB>:
	//memcpy(&EEPROM_DATA[0], &fVal,sizeof(uint32_t));

	//fVal=3636;
	//memcpy(&EEPROM_DATA[1], &fVal,sizeof(uint32_t));
	EEPROM_DATA[0]=132;
	EEPROM_DATA[1]=3636;
 8001088:	2184      	movs	r1, #132	; 0x84
 800108a:	f640 6234 	movw	r2, #3636	; 0xe34
	EEPROM_DATA[0]=132;
 800108e:	4b02      	ldr	r3, [pc, #8]	; (8001098 <USE_DEF_CALIB+0x10>)
	EEPROM_DATA[1]=3636;
 8001090:	e883 0006 	stmia.w	r3, {r1, r2}
	CALC_RATIO();
 8001094:	f7ff bfdc 	b.w	8001050 <CALC_RATIO>
 8001098:	2000015c 	.word	0x2000015c

0800109c <USE_NEW_CALIB>:
}

void USE_NEW_CALIB() {
	if (EEPROM_CRC==0) {
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <USE_NEW_CALIB+0x10>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	b90b      	cbnz	r3, 80010a6 <USE_NEW_CALIB+0xa>
		USE_DEF_CALIB();
 80010a2:	f7ff bff1 	b.w	8001088 <USE_DEF_CALIB>
		return;
	}
	CALC_RATIO();
 80010a6:	f7ff bfd3 	b.w	8001050 <CALC_RATIO>
 80010aa:	bf00      	nop
 80010ac:	20000158 	.word	0x20000158

080010b0 <StoreEEPROM>:
}

//void StoreEEPROM(float V_CAL, float I_CAL) {
void StoreEEPROM(uint32_t V_CAL, uint32_t I_CAL) {
 80010b0:	b570      	push	{r4, r5, r6, lr}
	EEPROM_FLAG=1;
 80010b2:	2501      	movs	r5, #1
	//
	//memcpy(&EEPROM_DATA[0], &V_CAL,sizeof(uint32_t));
	//memcpy(&EEPROM_DATA[1], &I_CAL,sizeof(uint32_t));
	EEPROM_DATA[0]=V_CAL;
 80010b4:	4c0d      	ldr	r4, [pc, #52]	; (80010ec <StoreEEPROM+0x3c>)
	EEPROM_FLAG=1;
 80010b6:	4e0e      	ldr	r6, [pc, #56]	; (80010f0 <StoreEEPROM+0x40>)
	EEPROM_DATA[1]=I_CAL;
	EEPROM_CRC=TM_CRC_Calculate32((uint32_t *) &EEPROM_DATA, sizeof(EEPROM_DATA), 1);
 80010b8:	462a      	mov	r2, r5
	EEPROM_DATA[1]=I_CAL;
 80010ba:	e884 0003 	stmia.w	r4, {r0, r1}
	EEPROM_CRC=TM_CRC_Calculate32((uint32_t *) &EEPROM_DATA, sizeof(EEPROM_DATA), 1);
 80010be:	2108      	movs	r1, #8
 80010c0:	4620      	mov	r0, r4
	EEPROM_FLAG=1;
 80010c2:	6035      	str	r5, [r6, #0]
	EEPROM_CRC=TM_CRC_Calculate32((uint32_t *) &EEPROM_DATA, sizeof(EEPROM_DATA), 1);
 80010c4:	f7ff fe6a 	bl	8000d9c <TM_CRC_Calculate32>
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <StoreEEPROM+0x44>)
 80010ca:	4601      	mov	r1, r0
 80010cc:	6018      	str	r0, [r3, #0]
	EE_Write(0,EEPROM_CRC);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 fac2 	bl	8001658 <EE_Write>
	EE_Write(1,EEPROM_DATA[0]);
 80010d4:	6821      	ldr	r1, [r4, #0]
 80010d6:	4628      	mov	r0, r5
 80010d8:	f000 fabe 	bl	8001658 <EE_Write>
	EE_Write(2,EEPROM_DATA[1]);
 80010dc:	6861      	ldr	r1, [r4, #4]
 80010de:	2002      	movs	r0, #2
 80010e0:	f000 faba 	bl	8001658 <EE_Write>
	//
	EEPROM_FLAG=0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	6033      	str	r3, [r6, #0]
 80010e8:	bd70      	pop	{r4, r5, r6, pc}
 80010ea:	bf00      	nop
 80010ec:	2000015c 	.word	0x2000015c
 80010f0:	20000164 	.word	0x20000164
 80010f4:	20000158 	.word	0x20000158

080010f8 <InitEEPROM>:
}

int InitEEPROM() {
 80010f8:	b570      	push	{r4, r5, r6, lr}
	EEPROM_FLAG=1;
 80010fa:	2401      	movs	r4, #1
 80010fc:	4e10      	ldr	r6, [pc, #64]	; (8001140 <InitEEPROM+0x48>)
	//

	ResetEEPROM();
	EE_Read(0,&EEPROM_CRC);
 80010fe:	4d11      	ldr	r5, [pc, #68]	; (8001144 <InitEEPROM+0x4c>)
	EEPROM_FLAG=1;
 8001100:	6034      	str	r4, [r6, #0]
	ResetEEPROM();
 8001102:	f7ff ff99 	bl	8001038 <ResetEEPROM>
	EE_Read(0,&EEPROM_CRC);
 8001106:	4629      	mov	r1, r5
 8001108:	2000      	movs	r0, #0
 800110a:	f000 fa85 	bl	8001618 <EE_Read>
	EE_Read(1,&EEPROM_DATA[0]);
 800110e:	490e      	ldr	r1, [pc, #56]	; (8001148 <InitEEPROM+0x50>)
 8001110:	4620      	mov	r0, r4
 8001112:	f000 fa81 	bl	8001618 <EE_Read>
	EE_Read(2,&EEPROM_DATA[1]);
 8001116:	490d      	ldr	r1, [pc, #52]	; (800114c <InitEEPROM+0x54>)
 8001118:	2002      	movs	r0, #2
 800111a:	f000 fa7d 	bl	8001618 <EE_Read>

	uint32_t EEPROM_CRC_tmp=TM_CRC_Calculate32((uint32_t *) &EEPROM_DATA, sizeof(EEPROM_DATA), 1);
 800111e:	2108      	movs	r1, #8
 8001120:	4622      	mov	r2, r4
 8001122:	4809      	ldr	r0, [pc, #36]	; (8001148 <InitEEPROM+0x50>)
 8001124:	f7ff fe3a 	bl	8000d9c <TM_CRC_Calculate32>
	EEPROM_FLAG=0;
 8001128:	2100      	movs	r1, #0

	if (EEPROM_CRC_tmp==EEPROM_CRC) {
 800112a:	682b      	ldr	r3, [r5, #0]
	EEPROM_FLAG=0;
 800112c:	6031      	str	r1, [r6, #0]
	if (EEPROM_CRC_tmp==EEPROM_CRC) {
 800112e:	4298      	cmp	r0, r3
 8001130:	d003      	beq.n	800113a <InitEEPROM+0x42>
		return 1;
	} else {
		ResetEEPROM();
 8001132:	f7ff ff81 	bl	8001038 <ResetEEPROM>
		return 0;
 8001136:	4608      	mov	r0, r1
 8001138:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 800113a:	4620      	mov	r0, r4
	}
}
 800113c:	bd70      	pop	{r4, r5, r6, pc}
 800113e:	bf00      	nop
 8001140:	20000164 	.word	0x20000164
 8001144:	20000158 	.word	0x20000158
 8001148:	2000015c 	.word	0x2000015c
 800114c:	20000160 	.word	0x20000160

08001150 <CalibSave>:

//Calibration code
void CalibSave() {
 8001150:	b510      	push	{r4, lr}
						EEPROMStoredCnt=0;
 8001152:	2400      	movs	r4, #0
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <CalibSave+0x28>)
 8001156:	801c      	strh	r4, [r3, #0]
		      			USE_NEW_CALIB();
 8001158:	f7ff ffa0 	bl	800109c <USE_NEW_CALIB>
		      			StoreEEPROM(EEPROM_DATA[0],EEPROM_DATA[1]);
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <CalibSave+0x2c>)
 800115e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001162:	f7ff ffa5 	bl	80010b0 <StoreEEPROM>
		      			strcpy(uart_buff,"CALIB DONE!\r\n");
 8001166:	4906      	ldr	r1, [pc, #24]	; (8001180 <CalibSave+0x30>)
 8001168:	4806      	ldr	r0, [pc, #24]	; (8001184 <CalibSave+0x34>)
 800116a:	f004 fbd6 	bl	800591a <strcpy>
		      			SerialPrintln(0);
 800116e:	4620      	mov	r0, r4
		      		//}
}
 8001170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		      			SerialPrintln(0);
 8001174:	f7ff be98 	b.w	8000ea8 <SerialPrintln>
 8001178:	20000050 	.word	0x20000050
 800117c:	2000015c 	.word	0x2000015c
 8001180:	08006189 	.word	0x08006189
 8001184:	20000278 	.word	0x20000278

08001188 <CalibCmdCheck>:

int CalibCmdCheck() {
 8001188:	b510      	push	{r4, lr}
				button_state_t ICAL_FLAG=buttonUpdate(&CALIB_I);
 800118a:	4820      	ldr	r0, [pc, #128]	; (800120c <CalibCmdCheck+0x84>)
 800118c:	f000 facb 	bl	8001726 <buttonUpdate>
 8001190:	4604      	mov	r4, r0
				button_state_t VCAL_FLAG=buttonUpdate(&CALIB_V);
 8001192:	481f      	ldr	r0, [pc, #124]	; (8001210 <CalibCmdCheck+0x88>)
 8001194:	f000 fac7 	bl	8001726 <buttonUpdate>

				if (EEPROMStoredCnt<EEPROMDelayBeforeNewStore) {
 8001198:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <CalibCmdCheck+0x8c>)
 800119a:	8813      	ldrh	r3, [r2, #0]
 800119c:	2b09      	cmp	r3, #9
 800119e:	d803      	bhi.n	80011a8 <CalibCmdCheck+0x20>
					EEPROMStoredCnt++;
 80011a0:	3301      	adds	r3, #1
 80011a2:	8013      	strh	r3, [r2, #0]
	      					StoreEEPROM(EEPROM_DATA[0],EEPROM_DATA[1]);
	      					//EEPROMStoredCnt=0;
	      					CalibSave();
	      					return 1;
	      		}
	      		return 0;
 80011a4:	2000      	movs	r0, #0
}
 80011a6:	bd10      	pop	{r4, pc}
				if ( (VCAL_FLAG == isPressed)
 80011a8:	2802      	cmp	r0, #2
 80011aa:	d115      	bne.n	80011d8 <CalibCmdCheck+0x50>
	      				  && (ICAL_FLAG != isPressed)){
 80011ac:	2c02      	cmp	r4, #2
 80011ae:	4c1a      	ldr	r4, [pc, #104]	; (8001218 <CalibCmdCheck+0x90>)
 80011b0:	d025      	beq.n	80011fe <CalibCmdCheck+0x76>
						EEPROM_DATA[0]=(VOLTAGE_ETALONE/(IV_RATIO*ADC_Data[0]));
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <CalibCmdCheck+0x94>)
 80011b4:	8818      	ldrh	r0, [r3, #0]
 80011b6:	b280      	uxth	r0, r0
 80011b8:	f7ff f88e 	bl	80002d8 <__aeabi_i2f>
 80011bc:	4918      	ldr	r1, [pc, #96]	; (8001220 <CalibCmdCheck+0x98>)
 80011be:	f7ff f8df 	bl	8000380 <__aeabi_fmul>
 80011c2:	4601      	mov	r1, r0
 80011c4:	4817      	ldr	r0, [pc, #92]	; (8001224 <CalibCmdCheck+0x9c>)
 80011c6:	f7ff f98f 	bl	80004e8 <__aeabi_fdiv>
 80011ca:	f7ff fa9f 	bl	800070c <__aeabi_f2uiz>
 80011ce:	6020      	str	r0, [r4, #0]
	      					CalibSave();
 80011d0:	f7ff ffbe 	bl	8001150 <CalibSave>
	      					return 1;
 80011d4:	2001      	movs	r0, #1
 80011d6:	bd10      	pop	{r4, pc}
	      		  if ( (ICAL_FLAG == isPressed)
 80011d8:	2c02      	cmp	r4, #2
 80011da:	d1e3      	bne.n	80011a4 <CalibCmdCheck+0x1c>
	      			  	EEPROM_DATA[1]=(POWER_ETALONE/(IV_RATIO*ADC_Data[1]));
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <CalibCmdCheck+0x94>)
 80011de:	8858      	ldrh	r0, [r3, #2]
 80011e0:	b280      	uxth	r0, r0
 80011e2:	f7ff f879 	bl	80002d8 <__aeabi_i2f>
 80011e6:	490e      	ldr	r1, [pc, #56]	; (8001220 <CalibCmdCheck+0x98>)
 80011e8:	f7ff f8ca 	bl	8000380 <__aeabi_fmul>
 80011ec:	4601      	mov	r1, r0
 80011ee:	480e      	ldr	r0, [pc, #56]	; (8001228 <CalibCmdCheck+0xa0>)
 80011f0:	f7ff f97a 	bl	80004e8 <__aeabi_fdiv>
 80011f4:	f7ff fa8a 	bl	800070c <__aeabi_f2uiz>
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <CalibCmdCheck+0x90>)
 80011fa:	6058      	str	r0, [r3, #4]
 80011fc:	e7e8      	b.n	80011d0 <CalibCmdCheck+0x48>
	      					USE_DEF_CALIB();
 80011fe:	f7ff ff43 	bl	8001088 <USE_DEF_CALIB>
	      					StoreEEPROM(EEPROM_DATA[0],EEPROM_DATA[1]);
 8001202:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001206:	f7ff ff53 	bl	80010b0 <StoreEEPROM>
 800120a:	e7e1      	b.n	80011d0 <CalibCmdCheck+0x48>
 800120c:	2000025c 	.word	0x2000025c
 8001210:	20000240 	.word	0x20000240
 8001214:	20000050 	.word	0x20000050
 8001218:	2000015c 	.word	0x2000015c
 800121c:	20000238 	.word	0x20000238
 8001220:	3a533333 	.word	0x3a533333
 8001224:	43660000 	.word	0x43660000
 8001228:	447a0000 	.word	0x447a0000

0800122c <Set50HzDeadTimeNS>:
//#define DeadTime64X 				1 //883,2ns
//#define DeadTime128X 				1 //1766,4ns
void Set50HzDeadTimeNS(void) {

		// Tdts = Tck_int //
	    TIM1->CR1 &= ~TIM_CR1_CKD;
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <Set50HzDeadTimeNS+0x3c>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001234:	601a      	str	r2, [r3, #0]
	    TIM1->BDTR &= ~TIM_BDTR_DTG;
 8001236:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001238:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800123c:	645a      	str	r2, [r3, #68]	; 0x44

	    TIM1->BDTR  |= TIM_BDTR_DTG_7;//128x //1766,4ns
 800123e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001240:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001244:	645a      	str	r2, [r3, #68]	; 0x44
	    //TIM1->BDTR  |= TIM_BDTR_DTG_6;//64x //883,2ns
	    //TIM1->BDTR  |= TIM_BDTR_DTG_5;//32x //441,6ns
	    //TIM1->BDTR  |= TIM_BDTR_DTG_4;//16x //220,8ns
	    TIM1->BDTR  |= TIM_BDTR_DTG_3;//8x //110,4ns
 8001246:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001248:	f042 0208 	orr.w	r2, r2, #8
 800124c:	645a      	str	r2, [r3, #68]	; 0x44
	    TIM1->BDTR  |= TIM_BDTR_DTG_2;//4x //55,2ns
 800124e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001250:	f042 0204 	orr.w	r2, r2, #4
 8001254:	645a      	str	r2, [r3, #68]	; 0x44
	    TIM1->BDTR  |= TIM_BDTR_DTG_1;//2x  //27,6ns
 8001256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001258:	f042 0202 	orr.w	r2, r2, #2
 800125c:	645a      	str	r2, [r3, #68]	; 0x44
	    TIM1->BDTR  |= TIM_BDTR_DTG_0;//1x // Dead time base value 1/Fosc=1/72000=13.8ns
 800125e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001260:	f042 0201 	orr.w	r2, r2, #1
 8001264:	645a      	str	r2, [r3, #68]	; 0x44
 8001266:	4770      	bx	lr
 8001268:	40012c00 	.word	0x40012c00

0800126c <SetNormalSignal>:
////////////////////// DEAD TIME - END //////////////////////


////////////////////// SIGNAL INVERSE - BEGIN //////////////////////
void SetNormalSignal(void) {
		TIM1->CCER |= TIM_CCER_CC3NP; // active high level: 0 - high, 1 - low
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <SetNormalSignal+0x14>)
 800126e:	6a1a      	ldr	r2, [r3, #32]
 8001270:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001274:	621a      	str	r2, [r3, #32]
		TIM1->CCER |= TIM_CCER_CC3P; // active high level: 0 - high, 1 - low
 8001276:	6a1a      	ldr	r2, [r3, #32]
 8001278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800127c:	621a      	str	r2, [r3, #32]
 800127e:	4770      	bx	lr
 8001280:	40012c00 	.word	0x40012c00

08001284 <Idle_SET>:
////////////////////// SIGNAL INVERSE - END //////////////////////

////////////////////// IDLE STATE - BEGIN //////////////////////
void Idle_SET(void) {
	    /* output idle state HIGHT */
		TIM1->CR2 |= TIM_CR2_OIS3;
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <Idle_SET+0x14>)
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800128c:	605a      	str	r2, [r3, #4]
		TIM1->CR2 |= TIM_CR2_OIS3N;
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	4770      	bx	lr
 8001298:	40012c00 	.word	0x40012c00

0800129c <PWM_50Hz_Init>:
	//GPIOB->CRH	&= ~GPIO_CRH_MODE15;
	//GPIOB->CRH	|= GPIO_CRH_MODE15; // gpio speed 50 MHz

	/************************** Config PWM channel ************************************/

	TIM1->PSC = 960-1; // div for clock: F = SYSCLK / [PSC + 1]
 800129c:	f240 32bf 	movw	r2, #959	; 0x3bf
void PWM_50Hz_Init (void) {
 80012a0:	b508      	push	{r3, lr}
	TIM1->PSC = 960-1; // div for clock: F = SYSCLK / [PSC + 1]
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <PWM_50Hz_Init+0x50>)
 80012a4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 999; // count to 1000
 80012a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012aa:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR3 = 500; // duty cycle 50%
 80012ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012b0:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CR1 &= ~TIM_CR1_DIR; // count up: 0 - up, 1 - down
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	f022 0210 	bic.w	r2, r2, #16
 80012b8:	601a      	str	r2, [r3, #0]
    TIM1->CR1 &= ~TIM_CR1_CMS; // aligned on the front signal
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80012c0:	601a      	str	r2, [r3, #0]

    TIM1->CCMR2 &= ~TIM_CCMR2_OC3M;
 80012c2:	69da      	ldr	r2, [r3, #28]
 80012c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012c8:	61da      	str	r2, [r3, #28]
    TIM1->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1; // positiv PWM
 80012ca:	69da      	ldr	r2, [r3, #28]
 80012cc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80012d0:	61da      	str	r2, [r3, #28]

	/* Enable channel outputs */
	TIM1->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE; // enable PWM complementary out
 80012d2:	6a1a      	ldr	r2, [r3, #32]
 80012d4:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 80012d8:	621a      	str	r2, [r3, #32]

	SetNormalSignal(); // NORMAL or INVERSE
 80012da:	f7ff ffc7 	bl	800126c <SetNormalSignal>
	Idle_SET(); // se idle state /* output idle state HIGHT */
 80012de:	f7ff ffd1 	bl	8001284 <Idle_SET>
	Set50HzDeadTimeNS(); // 1976 ns

	//ch50HZ_OUTEN(); // OUTPUT ENABLE
	//ch50HZ_START(); // start CNT

}
 80012e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Set50HzDeadTimeNS(); // 1976 ns
 80012e6:	f7ff bfa1 	b.w	800122c <Set50HzDeadTimeNS>
 80012ea:	bf00      	nop
 80012ec:	40012c00 	.word	0x40012c00

080012f0 <PWM_50Hz_START>:
////////////////////// INIT GENERATOR 50Hz - END //////////////////////


////////////////////// CONTROL 50Hz - BEGIN //////////////////////
void PWM_50Hz_START(void)
{
 80012f0:	b508      	push	{r3, lr}
	//TIM1->CNT = 0;
	TIM1->CCR3=500;
 80012f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012f6:	490d      	ldr	r1, [pc, #52]	; (800132c <PWM_50Hz_START+0x3c>)
 80012f8:	63cb      	str	r3, [r1, #60]	; 0x3c
	/* Enable channel outputs */
		TIM1->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE; // enable PWM complementary out
 80012fa:	6a0b      	ldr	r3, [r1, #32]
 80012fc:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8001300:	620b      	str	r3, [r1, #32]

		SetNormalSignal(); // NORMAL or INVERSE
 8001302:	f7ff ffb3 	bl	800126c <SetNormalSignal>
		Idle_SET(); // se idle state /* output idle state HIGHT */
 8001306:	f7ff ffbd 	bl	8001284 <Idle_SET>

		Set50HzDeadTimeNS(); // 1976 ns
 800130a:	f7ff ff8f 	bl	800122c <Set50HzDeadTimeNS>

	TIM1->DIER |= TIM_DIER_UIE;
 800130e:	68cb      	ldr	r3, [r1, #12]
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	60cb      	str	r3, [r1, #12]
	TIM1->CR1 |= TIM_CR1_CEN;
 8001316:	680b      	ldr	r3, [r1, #0]
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	600b      	str	r3, [r1, #0]

	ResetV_data();
 800131e:	f7ff fadb 	bl	80008d8 <ResetV_data>
	UpdateAmplitudeByV();
}
 8001322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	UpdateAmplitudeByV();
 8001326:	f7ff bc0f 	b.w	8000b48 <UpdateAmplitudeByV>
 800132a:	bf00      	nop
 800132c:	40012c00 	.word	0x40012c00

08001330 <PWM_50Hz_STOP>:

void PWM_50Hz_STOP(void)
{
	//TIM1->CNT = 0;
	TIM1->SR&=~TIM_SR_UIF; // clear update flag
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <PWM_50Hz_STOP+0x44>)
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	f022 0201 	bic.w	r2, r2, #1
 8001338:	611a      	str	r2, [r3, #16]

	TIM1->DIER &= ~TIM_DIER_UIE; // stop interrupt
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	f022 0201 	bic.w	r2, r2, #1
 8001340:	60da      	str	r2, [r3, #12]
	TIM1->CR1 &= (uint16_t)~TIM_CR1_CEN; // stop cnt
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	f022 0201 	bic.w	r2, r2, #1
 8001348:	0412      	lsls	r2, r2, #16
 800134a:	0c12      	lsrs	r2, r2, #16
 800134c:	601a      	str	r2, [r3, #0]

	//TIM1->CR1 &= ~TIM_CR1_CKD; // off dead time
	//TIM1->BDTR &= ~TIM_BDTR_DTG;

	TIM1->CR2 |= TIM_CR2_OIS3N; // revert level
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001354:	605a      	str	r2, [r3, #4]
	TIM1->CR2 &= ~TIM_CR2_OIS3;
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800135c:	605a      	str	r2, [r3, #4]

	TIM1->CCER |= TIM_CCER_CC3P; // active high level: 0 - high, 1 - low
 800135e:	6a1a      	ldr	r2, [r3, #32]
 8001360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001364:	621a      	str	r2, [r3, #32]
	TIM1->CCER &= ~TIM_CCER_CC3NP; // active high level: 0 - high, 1 - low
 8001366:	6a1a      	ldr	r2, [r3, #32]
 8001368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800136c:	621a      	str	r2, [r3, #32]

	TIM1->CCR3=0;
 800136e:	2200      	movs	r2, #0
 8001370:	63da      	str	r2, [r3, #60]	; 0x3c
 8001372:	4770      	bx	lr
 8001374:	40012c00 	.word	0x40012c00

08001378 <PWM_50Hz_OUTEN>:

}

void PWM_50Hz_OUTEN(void)
{
	TIM1->BDTR |= TIM_BDTR_MOE | TIM_BDTR_AOE; // enable generation output
 8001378:	4a02      	ldr	r2, [pc, #8]	; (8001384 <PWM_50Hz_OUTEN+0xc>)
 800137a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800137c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4770      	bx	lr
 8001384:	40012c00 	.word	0x40012c00

08001388 <PWM_50Hz_OUTDIS>:
	//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
}

void PWM_50Hz_OUTDIS(void)
{
    TIM1->BDTR &= ~TIM_BDTR_MOE;
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <PWM_50Hz_OUTDIS+0x14>)
 800138a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800138c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001390:	645a      	str	r2, [r3, #68]	; 0x44
    TIM1->BDTR &= ~TIM_BDTR_AOE;
 8001392:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001394:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001398:	645a      	str	r2, [r3, #68]	; 0x44
 800139a:	4770      	bx	lr
 800139c:	40012c00 	.word	0x40012c00

080013a0 <PWM_50Hz_ON>:
    //HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_3);
}

void PWM_50Hz_ON(void){
 80013a0:	b508      	push	{r3, lr}
	PWM_50Hz_OUTEN(); // OUTPUT ENABLE
 80013a2:	f7ff ffe9 	bl	8001378 <PWM_50Hz_OUTEN>
	PWM_50Hz_START(); // start CNT
}
 80013a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	PWM_50Hz_START(); // start CNT
 80013aa:	f7ff bfa1 	b.w	80012f0 <PWM_50Hz_START>

080013ae <PWM_50Hz_OFF>:

void PWM_50Hz_OFF(void){
 80013ae:	b508      	push	{r3, lr}
	PWM_50Hz_OUTDIS(); // OUTPUT ENABLE
 80013b0:	f7ff ffea 	bl	8001388 <PWM_50Hz_OUTDIS>
	PWM_50Hz_STOP(); // start CNT
}
 80013b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	PWM_50Hz_STOP(); // start CNT
 80013b8:	f7ff bfba 	b.w	8001330 <PWM_50Hz_STOP>

080013bc <PWM_Sinus_START>:


////////////////////// INIT GENERATOR PWM LOW - BEGIN //////////////////////
void PWM_Sinus_START(void)
{
	sin_step=0;
 80013bc:	2200      	movs	r2, #0
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <PWM_Sinus_START+0x20>)
 80013c0:	801a      	strh	r2, [r3, #0]
	//TIM1->CNT = 0;
	TIM3->CCR1=0;
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <PWM_Sinus_START+0x24>)
 80013c4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=0;
 80013c6:	639a      	str	r2, [r3, #56]	; 0x38
	//TIM3->CCER |= TIM_CCER_CC1P;

	//TIM3->CCER |= TIM_CCER_CC2E; // enable PWM complementary out to PA9
	//TIM3->CCER |= TIM_CCER_CC2P;

	TIM3->DIER |= TIM_DIER_UIE;
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	f042 0201 	orr.w	r2, r2, #1
 80013ce:	60da      	str	r2, [r3, #12]
	TIM3->CR1 |= TIM_CR1_CEN;
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	f042 0201 	orr.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

	ResetAmplitude();
 80013d8:	f000 b8e2 	b.w	80015a0 <ResetAmplitude>
 80013dc:	20000140 	.word	0x20000140
 80013e0:	40000400 	.word	0x40000400

080013e4 <PWM_Sinus_STOP>:
}

void PWM_Sinus_STOP(void)
{
	//TIM1->CNT = 0;
	TIM3->SR&=~TIM_SR_UIF; // clear update flag
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <PWM_Sinus_STOP+0x28>)
 80013e6:	691a      	ldr	r2, [r3, #16]
 80013e8:	f022 0201 	bic.w	r2, r2, #1
 80013ec:	611a      	str	r2, [r3, #16]

	TIM3->DIER &= ~TIM_DIER_UIE; // stop interrupt
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	f022 0201 	bic.w	r2, r2, #1
 80013f4:	60da      	str	r2, [r3, #12]
	TIM3->CR1 &= (uint16_t)~TIM_CR1_CEN; // stop cnt
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	f022 0201 	bic.w	r2, r2, #1
 80013fc:	0412      	lsls	r2, r2, #16
 80013fe:	0c12      	lsrs	r2, r2, #16
 8001400:	601a      	str	r2, [r3, #0]

	TIM3->CCR1=0;
 8001402:	2200      	movs	r2, #0
 8001404:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=0;
 8001406:	639a      	str	r2, [r3, #56]	; 0x38
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40000400 	.word	0x40000400

08001410 <PWM_Sinus_OUTEN>:
}

void PWM_Sinus_OUTEN(void)
{
	TIM3->BDTR |= TIM_BDTR_MOE | TIM_BDTR_AOE; // enable generation output
 8001410:	4a02      	ldr	r2, [pc, #8]	; (800141c <PWM_Sinus_OUTEN+0xc>)
 8001412:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001414:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
 800141a:	4770      	bx	lr
 800141c:	40000400 	.word	0x40000400

08001420 <PWM_Sinus_OUTDIS>:
	//HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
}

void PWM_Sinus_OUTDIS(void)
{
    TIM3->BDTR &= ~TIM_BDTR_MOE;
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <PWM_Sinus_OUTDIS+0x14>)
 8001422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001428:	645a      	str	r2, [r3, #68]	; 0x44
    TIM3->BDTR &= ~TIM_BDTR_AOE;
 800142a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800142c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001430:	645a      	str	r2, [r3, #68]	; 0x44
 8001432:	4770      	bx	lr
 8001434:	40000400 	.word	0x40000400

08001438 <PWM_Sinus_ON>:

    //HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
    //HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
}

void PWM_Sinus_ON(void) {
 8001438:	b508      	push	{r3, lr}
	PWM_Sinus_OUTEN(); // OUTPUT ENABLE
 800143a:	f7ff ffe9 	bl	8001410 <PWM_Sinus_OUTEN>
	PWM_Sinus_START(); // start CNT
}
 800143e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	PWM_Sinus_START(); // start CNT
 8001442:	f7ff bfbb 	b.w	80013bc <PWM_Sinus_START>

08001446 <PWM_Sinus_OFF>:

void PWM_Sinus_OFF(void){
 8001446:	b508      	push	{r3, lr}
	PWM_Sinus_OUTDIS(); // OUTPUT ENABLE
 8001448:	f7ff ffea 	bl	8001420 <PWM_Sinus_OUTDIS>
	PWM_Sinus_STOP(); // start CNT
}
 800144c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	PWM_Sinus_STOP(); // start CNT
 8001450:	f7ff bfc8 	b.w	80013e4 <PWM_Sinus_STOP>

08001454 <PWM_Sinus_Init>:

	//GPIOA->CRL	&= ~GPIO_CRL_MODE1;
	//GPIOA->CRL	|= GPIO_CRL_MODE1; // gpio speed 50 MHz

	/*************************** Config PWM channel ***********************************/
		TIM3->PSC = SinResPSC; // div for clock: F = SYSCLK / [PSC + 1]
 8001454:	2200      	movs	r2, #0
		TIM3->ARR = 1000-1; // count to 1000
 8001456:	f240 31e7 	movw	r1, #999	; 0x3e7
		TIM3->PSC = SinResPSC; // div for clock: F = SYSCLK / [PSC + 1]
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <PWM_Sinus_Init+0x6c>)
 800145c:	629a      	str	r2, [r3, #40]	; 0x28
		TIM3->ARR = 1000-1; // count to 1000
 800145e:	62d9      	str	r1, [r3, #44]	; 0x2c
		TIM3->CCR1 = 0; // duty cycle 0%
 8001460:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0; // duty cycle 0%
 8001462:	639a      	str	r2, [r3, #56]	; 0x38

			TIM3->CCER |= TIM_CCER_CC1E; // enable PWM out to PA8
 8001464:	6a1a      	ldr	r2, [r3, #32]
 8001466:	f042 0201 	orr.w	r2, r2, #1
 800146a:	621a      	str	r2, [r3, #32]
			//TIM3->CCER &= ~TIM_CCER_CC1P; // active high level: 0 - high, 1 - low
			TIM3->CCER |= TIM_CCER_CC1P;
 800146c:	6a1a      	ldr	r2, [r3, #32]
 800146e:	f042 0202 	orr.w	r2, r2, #2
 8001472:	621a      	str	r2, [r3, #32]

			TIM3->CCER |= TIM_CCER_CC2E; // enable PWM complementary out to PA9
 8001474:	6a1a      	ldr	r2, [r3, #32]
 8001476:	f042 0210 	orr.w	r2, r2, #16
 800147a:	621a      	str	r2, [r3, #32]
			//TIM3->CCER &= ~TIM_CCER_CC2P; // active high level: 0 - high, 1 - low
			TIM3->CCER |= TIM_CCER_CC2P;
 800147c:	6a1a      	ldr	r2, [r3, #32]
 800147e:	f042 0220 	orr.w	r2, r2, #32
 8001482:	621a      	str	r2, [r3, #32]

		// se idle state
		TIM3->CR2 |= TIM_CR2_OIS1;
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800148a:	605a      	str	r2, [r3, #4]
		TIM3->CR2 |= TIM_CR2_OIS2;
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001492:	605a      	str	r2, [r3, #4]

		TIM3->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 8001494:	699a      	ldr	r2, [r3, #24]
 8001496:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800149a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800149e:	619a      	str	r2, [r3, #24]
		TIM3->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 |
 80014a0:	699a      	ldr	r2, [r3, #24]
 80014a2:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80014a6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80014aa:	619a      	str	r2, [r3, #24]
		 TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1; // positiv PWM1_CH1 and PWM1_CH2

		/*******************************************************************************/

		TIM3->CR1 &= ~TIM_CR1_DIR; // count up: 0 - up, 1 - down
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	f022 0210 	bic.w	r2, r2, #16
 80014b2:	601a      	str	r2, [r3, #0]
		TIM3->CR1 &= ~TIM_CR1_CMS; // aligned on the front signal: 00 - front; 01, 10, 11 - center
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40000400 	.word	0x40000400

080014c4 <DigiTOS_IWDG_Init>:
	
	/* Check if the system has resumed from IWDG reset */
#if defined(STM32F4xx)
	if (RCC->CSR & RCC_CSR_WDGRSTF) {
#else
	if (RCC->CSR & RCC_CSR_IWDGRSTF) {	
 80014c4:	4a2a      	ldr	r2, [pc, #168]	; (8001570 <DigiTOS_IWDG_Init+0xac>)
uint8_t DigiTOS_IWDG_Init(DigiTOS_IWDG_Timeout_t timeout) {
 80014c6:	4603      	mov	r3, r0
	if (RCC->CSR & RCC_CSR_IWDGRSTF) {	
 80014c8:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80014ca:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
#endif
		/* Reset by IWDG */
		result = 1;
		
		/* Clear reset flags */
		RCC->CSR |= RCC_CSR_RMVF;
 80014ce:	bf1f      	itttt	ne
 80014d0:	6a51      	ldrne	r1, [r2, #36]	; 0x24
		result = 1;
 80014d2:	2001      	movne	r0, #1
		RCC->CSR |= RCC_CSR_RMVF;
 80014d4:	f041 7180 	orrne.w	r1, r1, #16777216	; 0x1000000
 80014d8:	6251      	strne	r1, [r2, #36]	; 0x24
	}

	/* Enable write access to IWDG_PR and IWDG_RLR registers */
	IWDG->KR = 0x5555;
 80014da:	f245 5155 	movw	r1, #21845	; 0x5555
 80014de:	4a25      	ldr	r2, [pc, #148]	; (8001574 <DigiTOS_IWDG_Init+0xb0>)

	/* Set proper clock depending on timeout user select */
	if (timeout >= DigiTOS_IWDG_Timeout_8s) {
 80014e0:	2b0a      	cmp	r3, #10
	IWDG->KR = 0x5555;
 80014e2:	6011      	str	r1, [r2, #0]
	if (timeout >= DigiTOS_IWDG_Timeout_8s) {
 80014e4:	d925      	bls.n	8001532 <DigiTOS_IWDG_Init+0x6e>
		/* IWDG counter clock: LSI/256 = 128Hz */
		IWDG->PR = 0x07;
 80014e6:	2107      	movs	r1, #7
 80014e8:	6051      	str	r1, [r2, #4]
	/* Set counter reload value */
	if (timeout == DigiTOS_IWDG_Timeout_5ms) {
		reload = 5; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_10ms) {
		reload = 10; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_15ms) {
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d02a      	beq.n	8001544 <DigiTOS_IWDG_Init+0x80>
		reload = 15; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_30ms) {
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d02a      	beq.n	8001548 <DigiTOS_IWDG_Init+0x84>
		reload = 31; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_60ms) {
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d02a      	beq.n	800154c <DigiTOS_IWDG_Init+0x88>
		reload = 61; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_120ms) {
 80014f6:	2b05      	cmp	r3, #5
 80014f8:	d02a      	beq.n	8001550 <DigiTOS_IWDG_Init+0x8c>
		reload = 123; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_250ms) {
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d02a      	beq.n	8001554 <DigiTOS_IWDG_Init+0x90>
		reload = 255; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_500ms) {
 80014fe:	2b07      	cmp	r3, #7
 8001500:	d02a      	beq.n	8001558 <DigiTOS_IWDG_Init+0x94>
		reload = 511; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_1s) {
 8001502:	2b08      	cmp	r3, #8
 8001504:	d02e      	beq.n	8001564 <DigiTOS_IWDG_Init+0xa0>
		reload = 1023; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_2s) {
 8001506:	2b09      	cmp	r3, #9
 8001508:	d02f      	beq.n	800156a <DigiTOS_IWDG_Init+0xa6>
		reload = 2047; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_4s) {
 800150a:	2b0a      	cmp	r3, #10
 800150c:	d027      	beq.n	800155e <DigiTOS_IWDG_Init+0x9a>
		reload = 4095; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_8s) {
 800150e:	2b0b      	cmp	r3, #11
 8001510:	d028      	beq.n	8001564 <DigiTOS_IWDG_Init+0xa0>
		reload = 1023; /* 128 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_16s) {
 8001512:	2b0c      	cmp	r3, #12
 8001514:	d029      	beq.n	800156a <DigiTOS_IWDG_Init+0xa6>
		reload = 2047; /* 128 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_32s) {
 8001516:	2b0d      	cmp	r3, #13
		reload = 4095; /* 128 Hz IWDG ticking */
 8001518:	f640 73ff 	movw	r3, #4095	; 0xfff
 800151c:	bf18      	it	ne
 800151e:	2300      	movne	r3, #0
	}
	
	/* Set reload */
	IWDG->RLR = reload;
 8001520:	4a14      	ldr	r2, [pc, #80]	; (8001574 <DigiTOS_IWDG_Init+0xb0>)
 8001522:	6093      	str	r3, [r2, #8]

	/* Reload IWDG counter */
	IWDG->KR = 0xAAAA;
 8001524:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8001528:	6013      	str	r3, [r2, #0]

	/* Enable IWDG (the LSI oscillator will be enabled by hardware) */
	IWDG->KR = 0xCCCC;
 800152a:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 800152e:	6013      	str	r3, [r2, #0]
	
	/* Return status */
	return result;
}
 8001530:	4770      	bx	lr
		IWDG->PR = 0x03;
 8001532:	2103      	movs	r1, #3
 8001534:	6051      	str	r1, [r2, #4]
	if (timeout == DigiTOS_IWDG_Timeout_5ms) {
 8001536:	b11b      	cbz	r3, 8001540 <DigiTOS_IWDG_Init+0x7c>
	} else if (timeout == DigiTOS_IWDG_Timeout_10ms) {
 8001538:	2b01      	cmp	r3, #1
 800153a:	d1d6      	bne.n	80014ea <DigiTOS_IWDG_Init+0x26>
		reload = 10; /* 1024 Hz IWDG ticking */
 800153c:	230a      	movs	r3, #10
 800153e:	e7ef      	b.n	8001520 <DigiTOS_IWDG_Init+0x5c>
		reload = 5; /* 1024 Hz IWDG ticking */
 8001540:	2305      	movs	r3, #5
 8001542:	e7ed      	b.n	8001520 <DigiTOS_IWDG_Init+0x5c>
		reload = 15; /* 1024 Hz IWDG ticking */
 8001544:	230f      	movs	r3, #15
 8001546:	e7eb      	b.n	8001520 <DigiTOS_IWDG_Init+0x5c>
		reload = 31; /* 1024 Hz IWDG ticking */
 8001548:	231f      	movs	r3, #31
 800154a:	e7e9      	b.n	8001520 <DigiTOS_IWDG_Init+0x5c>
		reload = 61; /* 1024 Hz IWDG ticking */
 800154c:	233d      	movs	r3, #61	; 0x3d
 800154e:	e7e7      	b.n	8001520 <DigiTOS_IWDG_Init+0x5c>
		reload = 123; /* 1024 Hz IWDG ticking */
 8001550:	237b      	movs	r3, #123	; 0x7b
 8001552:	e7e5      	b.n	8001520 <DigiTOS_IWDG_Init+0x5c>
		reload = 255; /* 1024 Hz IWDG ticking */
 8001554:	23ff      	movs	r3, #255	; 0xff
 8001556:	e7e3      	b.n	8001520 <DigiTOS_IWDG_Init+0x5c>
		reload = 511; /* 1024 Hz IWDG ticking */
 8001558:	f240 13ff 	movw	r3, #511	; 0x1ff
 800155c:	e7e0      	b.n	8001520 <DigiTOS_IWDG_Init+0x5c>
		reload = 4095; /* 1024 Hz IWDG ticking */
 800155e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001562:	e7dd      	b.n	8001520 <DigiTOS_IWDG_Init+0x5c>
		reload = 1023; /* 1024 Hz IWDG ticking */
 8001564:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001568:	e7da      	b.n	8001520 <DigiTOS_IWDG_Init+0x5c>
		reload = 2047; /* 1024 Hz IWDG ticking */
 800156a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800156e:	e7d7      	b.n	8001520 <DigiTOS_IWDG_Init+0x5c>
 8001570:	40021000 	.word	0x40021000
 8001574:	40003000 	.word	0x40003000

08001578 <SetSoftstart>:
#include "digiTOS-Sinus.h"

#ifdef AMP_CORRECTION_TYPE_STEP
void SetSoftstart() {
		#ifdef USE_SOFT_START
			Sine_Amplitude_4=SOFT_START_FROM;
 8001578:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <SetSoftstart+0x18>)
 800157e:	6013      	str	r3, [r2, #0]
			Sine_Amplitude_3=SOFT_START_FROM;
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <SetSoftstart+0x1c>)
 8001582:	6013      	str	r3, [r2, #0]
			Sine_Amplitude_2=SOFT_START_FROM;
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <SetSoftstart+0x20>)
 8001586:	6013      	str	r3, [r2, #0]
			Sine_Amplitude_1=SOFT_START_FROM;
 8001588:	4a04      	ldr	r2, [pc, #16]	; (800159c <SetSoftstart+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000014 	.word	0x20000014
 8001594:	20000010 	.word	0x20000010
 8001598:	2000000c 	.word	0x2000000c
 800159c:	20000008 	.word	0x20000008

080015a0 <ResetAmplitude>:
			Sine_Amplitude_1=1;
		#endif
}
#endif

void ResetAmplitude() {
 80015a0:	b508      	push	{r3, lr}
		Sine_Amplitude_2=1;
		Sine_Amplitude_1=1;
	#endif

	#ifdef AMP_CORRECTION_TYPE_STEP
		SetSoftstart();
 80015a2:	f7ff ffe9 	bl	8001578 <SetSoftstart>
	#endif

	#ifdef AMP_PROTECTION
			AMP_BLOCKED=0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <ResetAmplitude+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
			AMP_PROTECTION_CNT_BEFORESTART=0;
 80015ac:	4a06      	ldr	r2, [pc, #24]	; (80015c8 <ResetAmplitude+0x28>)
 80015ae:	6013      	str	r3, [r2, #0]
			AMP_PROTECTION_CNT=0;
 80015b0:	4a06      	ldr	r2, [pc, #24]	; (80015cc <ResetAmplitude+0x2c>)
 80015b2:	6013      	str	r3, [r2, #0]
	#endif

	#ifdef VOUT_PROTECTION
		VOUT_PROTECTION_CNT=0;
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <ResetAmplitude+0x30>)
 80015b6:	6013      	str	r3, [r2, #0]
		VOUT_PROTECTION_CNT_BEFORESTART=0;
 80015b8:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <ResetAmplitude+0x34>)
 80015ba:	6013      	str	r3, [r2, #0]
		VOUT_BLOCKED=0;
 80015bc:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <ResetAmplitude+0x38>)
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	bd08      	pop	{r3, pc}
 80015c2:	bf00      	nop
 80015c4:	200000e8 	.word	0x200000e8
 80015c8:	200000f0 	.word	0x200000f0
 80015cc:	200000ec 	.word	0x200000ec
 80015d0:	2000012c 	.word	0x2000012c
 80015d4:	20000130 	.word	0x20000130
 80015d8:	20000128 	.word	0x20000128

080015dc <EE_Format>:

//##########################################################################################################
//##########################################################################################################
//##########################################################################################################
bool	EE_Format(void)
{
 80015dc:	b510      	push	{r4, lr}
 80015de:	b086      	sub	sp, #24
	uint32_t	error;
	HAL_FLASH_Unlock();
 80015e0:	f001 ff2a 	bl	8003438 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	flashErase;
	flashErase.NbPages=1;
 80015e4:	2301      	movs	r3, #1
	//flashErase.Banks = FLASH_BANK_1;
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80015e6:	2400      	movs	r4, #0
	flashErase.NbPages=1;
 80015e8:	9305      	str	r3, [sp, #20]
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <EE_Format+0x38>)
	if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 80015ec:	a901      	add	r1, sp, #4
 80015ee:	a802      	add	r0, sp, #8
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 80015f0:	9304      	str	r3, [sp, #16]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80015f2:	9402      	str	r4, [sp, #8]
	if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 80015f4:	f001 ffea 	bl	80035cc <HAL_FLASHEx_Erase>
 80015f8:	b938      	cbnz	r0, 800160a <EE_Format+0x2e>
	{
		HAL_FLASH_Lock();
 80015fa:	f001 ff2f 	bl	800345c <HAL_FLASH_Lock>
		if(error != 0xFFFFFFFF)
 80015fe:	9801      	ldr	r0, [sp, #4]
 8001600:	1c43      	adds	r3, r0, #1
 8001602:	4258      	negs	r0, r3
 8001604:	4158      	adcs	r0, r3
		else
			return true;	
	}
	HAL_FLASH_Lock();
	return false;	
}
 8001606:	b006      	add	sp, #24
 8001608:	bd10      	pop	{r4, pc}
	HAL_FLASH_Lock();
 800160a:	f001 ff27 	bl	800345c <HAL_FLASH_Lock>
	return false;	
 800160e:	4620      	mov	r0, r4
 8001610:	e7f9      	b.n	8001606 <EE_Format+0x2a>
 8001612:	bf00      	nop
 8001614:	0800fc00 	.word	0x0800fc00

08001618 <EE_Read>:
//##########################################################################################################
bool EE_Read(uint16_t VirtualAddress, uint32_t* Data)
{
	if(VirtualAddress >=	(_EEPROM_SIZE))
 8001618:	2809      	cmp	r0, #9
		return false;
	*Data =  (*(__IO uint32_t*)((VirtualAddress*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 800161a:	bf9f      	itttt	ls
 800161c:	0080      	lslls	r0, r0, #2
 800161e:	f100 6000 	addls.w	r0, r0, #134217728	; 0x8000000
 8001622:	f500 407c 	addls.w	r0, r0, #64512	; 0xfc00
 8001626:	6803      	ldrls	r3, [r0, #0]
	return true;
 8001628:	bf9a      	itte	ls
 800162a:	2001      	movls	r0, #1
	*Data =  (*(__IO uint32_t*)((VirtualAddress*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 800162c:	600b      	strls	r3, [r1, #0]
		return false;
 800162e:	2000      	movhi	r0, #0
}
 8001630:	4770      	bx	lr

08001632 <EE_Reads>:

}
//##########################################################################################################
bool EE_Reads(uint16_t StartVirtualAddress,uint16_t HowMuchToRead,uint32_t* Data)
{
	if((StartVirtualAddress+HowMuchToRead) >	(_EEPROM_SIZE))
 8001632:	4401      	add	r1, r0
 8001634:	290a      	cmp	r1, #10
 8001636:	dd0b      	ble.n	8001650 <EE_Reads+0x1e>
		return false;
 8001638:	2000      	movs	r0, #0
	{
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
		Data++;
	}
	return true;
}
 800163a:	4770      	bx	lr
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 800163c:	0083      	lsls	r3, r0, #2
 800163e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001642:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8001646:	681b      	ldr	r3, [r3, #0]
	for(uint16_t	i=StartVirtualAddress ; i<HowMuchToRead+StartVirtualAddress ; i++)
 8001648:	3001      	adds	r0, #1
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 800164a:	f842 3b04 	str.w	r3, [r2], #4
	for(uint16_t	i=StartVirtualAddress ; i<HowMuchToRead+StartVirtualAddress ; i++)
 800164e:	b280      	uxth	r0, r0
 8001650:	4281      	cmp	r1, r0
 8001652:	dcf3      	bgt.n	800163c <EE_Reads+0xa>
	return true;
 8001654:	2001      	movs	r0, #1
 8001656:	4770      	bx	lr

08001658 <EE_Write>:
	if(VirtualAddress >=	(_EEPROM_SIZE))
 8001658:	2809      	cmp	r0, #9
{
 800165a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800165e:	4605      	mov	r5, r0
 8001660:	460f      	mov	r7, r1
	if(VirtualAddress >=	(_EEPROM_SIZE))
 8001662:	d819      	bhi.n	8001698 <EE_Write+0x40>
	if((*(__IO uint32_t*)((VirtualAddress*4)+_EEPROM_FLASH_PAGE_ADDRESS)) != 0xFFFFFFFF)
 8001664:	0084      	lsls	r4, r0, #2
 8001666:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
 800166a:	f504 447c 	add.w	r4, r4, #64512	; 0xfc00
 800166e:	6823      	ldr	r3, [r4, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	d108      	bne.n	8001686 <EE_Write+0x2e>
	HAL_FLASH_Unlock();
 8001674:	f001 fee0 	bl	8003438 <HAL_FLASH_Unlock>
	if(Data!=0xFFFFFFFF)
 8001678:	1c7b      	adds	r3, r7, #1
 800167a:	d129      	bne.n	80016d0 <EE_Write+0x78>
			HAL_FLASH_Lock();
 800167c:	f001 feee 	bl	800345c <HAL_FLASH_Lock>
			return true;
 8001680:	2001      	movs	r0, #1
 8001682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if( EE_Reads(0,(_EEPROM_SIZE),EEPROMPageBackup)==false)
 8001686:	4e17      	ldr	r6, [pc, #92]	; (80016e4 <EE_Write+0x8c>)
 8001688:	210a      	movs	r1, #10
 800168a:	4632      	mov	r2, r6
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff ffd0 	bl	8001632 <EE_Reads>
 8001692:	b920      	cbnz	r0, 800169e <EE_Write+0x46>
			HAL_FLASH_Lock();
 8001694:	f001 fee2 	bl	800345c <HAL_FLASH_Lock>
		return false;
 8001698:	2000      	movs	r0, #0
}
 800169a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		EEPROMPageBackup[VirtualAddress]=Data;
 800169e:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
		EE_Format();
 80016a2:	f7ff ff9b 	bl	80015dc <EE_Format>
		HAL_FLASH_Unlock();
 80016a6:	f001 fec7 	bl	8003438 <HAL_FLASH_Unlock>
 80016aa:	4d0f      	ldr	r5, [pc, #60]	; (80016e8 <EE_Write+0x90>)
		for(uint16_t	i=0 ; i<_EEPROM_SIZE ; i++)
 80016ac:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80016ec <EE_Write+0x94>
      if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(i*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)EEPROMPageBackup[i])!=HAL_OK)
 80016b0:	f105 4378 	add.w	r3, r5, #4160749568	; 0xf8000000
 80016b4:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 80016b8:	58f2      	ldr	r2, [r6, r3]
 80016ba:	4629      	mov	r1, r5
 80016bc:	2300      	movs	r3, #0
 80016be:	2002      	movs	r0, #2
 80016c0:	f001 ff00 	bl	80034c4 <HAL_FLASH_Program>
 80016c4:	2800      	cmp	r0, #0
 80016c6:	d1e5      	bne.n	8001694 <EE_Write+0x3c>
 80016c8:	3504      	adds	r5, #4
		for(uint16_t	i=0 ; i<_EEPROM_SIZE ; i++)
 80016ca:	4545      	cmp	r5, r8
 80016cc:	d1f0      	bne.n	80016b0 <EE_Write+0x58>
 80016ce:	e7d1      	b.n	8001674 <EE_Write+0x1c>
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(VirtualAddress*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)Data)==HAL_OK)
 80016d0:	463a      	mov	r2, r7
 80016d2:	2300      	movs	r3, #0
 80016d4:	4621      	mov	r1, r4
 80016d6:	2002      	movs	r0, #2
 80016d8:	f001 fef4 	bl	80034c4 <HAL_FLASH_Program>
 80016dc:	2800      	cmp	r0, #0
 80016de:	d1d9      	bne.n	8001694 <EE_Write+0x3c>
 80016e0:	e7cc      	b.n	800167c <EE_Write+0x24>
 80016e2:	bf00      	nop
 80016e4:	20000360 	.word	0x20000360
 80016e8:	0800fc00 	.word	0x0800fc00
 80016ec:	0800fc28 	.word	0x0800fc28

080016f0 <buttonInit>:
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		}	
		HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
	#endif
	
	button_struct->GPIO_Pin = GPIO_Pin;
 80016f0:	6002      	str	r2, [r0, #0]
	button_struct->GPIO_Port = GPIO_Port;
	button_struct->debounce_time = debounce_time;
 80016f2:	9a00      	ldr	r2, [sp, #0]
	button_struct->long_press_time = long_press_time;
	button_struct->active_state = active_state;
 80016f4:	7203      	strb	r3, [r0, #8]
	button_struct->debounce_time = debounce_time;
 80016f6:	60c2      	str	r2, [r0, #12]
	button_struct->long_press_time = long_press_time;
 80016f8:	9a01      	ldr	r2, [sp, #4]
	
	button_struct->short_press_handled = 0;
 80016fa:	2300      	movs	r3, #0
	button_struct->long_press_time = long_press_time;
 80016fc:	6102      	str	r2, [r0, #16]
	button_struct->long_press_handled = 0;
	button_struct->_on_press_time = 0;
	button_struct->_previous_state = button_off;
 80016fe:	2201      	movs	r2, #1
	button_struct->GPIO_Port = GPIO_Port;
 8001700:	6041      	str	r1, [r0, #4]
	button_struct->short_press_handled = 0;
 8001702:	7503      	strb	r3, [r0, #20]
	button_struct->long_press_handled = 0;
 8001704:	7543      	strb	r3, [r0, #21]
	button_struct->_on_press_time = 0;
 8001706:	6183      	str	r3, [r0, #24]
	button_struct->_previous_state = button_off;
 8001708:	75c2      	strb	r2, [r0, #23]
	button_struct->_state_changed = 0;
 800170a:	7583      	strb	r3, [r0, #22]
	button_struct->_state = noEvent;
 800170c:	7243      	strb	r3, [r0, #9]
 800170e:	4770      	bx	lr

08001710 <_button_state>:
/*	PRIVATE FUNCTIONS */
/**********************************************************/
/* Low level GPIO read routine.
button_on - button is currently read as pressed
*/
_phy_state_t _button_state(button_struct_t *button_struct){
 8001710:	b510      	push	{r4, lr}
 8001712:	4604      	mov	r4, r0
	if(HAL_GPIO_ReadPin(button_struct->GPIO_Port, button_struct->GPIO_Pin) == button_struct->active_state){
 8001714:	8801      	ldrh	r1, [r0, #0]
 8001716:	6840      	ldr	r0, [r0, #4]
 8001718:	f002 f96c 	bl	80039f4 <HAL_GPIO_ReadPin>
 800171c:	7a23      	ldrb	r3, [r4, #8]
		return button_on;
	}
	else{
		return button_off;
	}
}
 800171e:	1a18      	subs	r0, r3, r0
 8001720:	bf18      	it	ne
 8001722:	2001      	movne	r0, #1
 8001724:	bd10      	pop	{r4, pc}

08001726 <buttonUpdate>:
button_state_t buttonUpdate(button_struct_t *button_struct){
 8001726:	b570      	push	{r4, r5, r6, lr}
 8001728:	4604      	mov	r4, r0
	_phy_state_t state = _button_state(button_struct);	// get button state
 800172a:	f7ff fff1 	bl	8001710 <_button_state>
	if(state != button_struct->_previous_state){	// state is	different
 800172e:	7de6      	ldrb	r6, [r4, #23]
	_phy_state_t state = _button_state(button_struct);	// get button state
 8001730:	4605      	mov	r5, r0
	if(state != button_struct->_previous_state){	// state is	different
 8001732:	4286      	cmp	r6, r0
 8001734:	d01a      	beq.n	800176c <buttonUpdate+0x46>
		if(state == button_on){	
 8001736:	b938      	cbnz	r0, 8001748 <buttonUpdate+0x22>
			button_struct->_on_press_time = HAL_GetTick(); // get current time
 8001738:	f000 fffc 	bl	8002734 <HAL_GetTick>
			button_struct->_state_changed = 1;	// state is changed
 800173c:	2301      	movs	r3, #1
			button_struct->_on_press_time = HAL_GetTick(); // get current time
 800173e:	61a0      	str	r0, [r4, #24]
			button_struct->_state_changed = 1;	// state is changed
 8001740:	75a3      	strb	r3, [r4, #22]
			button_struct->_previous_state = button_on;
 8001742:	75e5      	strb	r5, [r4, #23]
			return_status = noEvent;
 8001744:	2000      	movs	r0, #0
 8001746:	bd70      	pop	{r4, r5, r6, pc}
			if(HAL_GetTick() >= (button_struct->_on_press_time + button_struct->debounce_time)){	
 8001748:	f000 fff4 	bl	8002734 <HAL_GetTick>
 800174c:	69a3      	ldr	r3, [r4, #24]
 800174e:	68e2      	ldr	r2, [r4, #12]
 8001750:	4413      	add	r3, r2
 8001752:	4298      	cmp	r0, r3
				button_struct->_state = isReleased;
 8001754:	bf28      	it	cs
 8001756:	2304      	movcs	r3, #4
 8001758:	f04f 0001 	mov.w	r0, #1
 800175c:	bf22      	ittt	cs
 800175e:	7263      	strbcs	r3, [r4, #9]
				button_struct->_previous_state = button_off;
 8001760:	75e0      	strbcs	r0, [r4, #23]
				return_status = button_struct->_state;
 8001762:	4618      	movcs	r0, r3
			button_struct->long_press_handled = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	7563      	strb	r3, [r4, #21]
			button_struct->short_press_handled = 0;
 8001768:	7523      	strb	r3, [r4, #20]
 800176a:	bd70      	pop	{r4, r5, r6, pc}
		if(state == button_on){	// state = button_on, prevous state = button_on
 800176c:	2e00      	cmp	r6, #0
 800176e:	d1e9      	bne.n	8001744 <buttonUpdate+0x1e>
			if(HAL_GetTick() >= (button_struct->_on_press_time + button_struct->long_press_time)){	
 8001770:	f000 ffe0 	bl	8002734 <HAL_GetTick>
 8001774:	69a3      	ldr	r3, [r4, #24]
 8001776:	6922      	ldr	r2, [r4, #16]
 8001778:	4413      	add	r3, r2
 800177a:	4298      	cmp	r0, r3
 800177c:	d308      	bcc.n	8001790 <buttonUpdate+0x6a>
				if(button_struct->long_press_handled == 1){	//was button handled yet?
 800177e:	7d63      	ldrb	r3, [r4, #21]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d102      	bne.n	800178a <buttonUpdate+0x64>
						button_struct->_state = noEvent;
 8001784:	7266      	strb	r6, [r4, #9]
					return_status = button_struct->_state;
 8001786:	7a60      	ldrb	r0, [r4, #9]
}
 8001788:	bd70      	pop	{r4, r5, r6, pc}
					button_struct->_state = isPressedLong;
 800178a:	2303      	movs	r3, #3
						button_struct->_state = isPressed;
 800178c:	7263      	strb	r3, [r4, #9]
 800178e:	e7fa      	b.n	8001786 <buttonUpdate+0x60>
				if(HAL_GetTick() >= (button_struct->_on_press_time + button_struct->debounce_time)){	
 8001790:	f000 ffd0 	bl	8002734 <HAL_GetTick>
 8001794:	69a3      	ldr	r3, [r4, #24]
 8001796:	68e2      	ldr	r2, [r4, #12]
 8001798:	4413      	add	r3, r2
 800179a:	4298      	cmp	r0, r3
 800179c:	d3d2      	bcc.n	8001744 <buttonUpdate+0x1e>
					if(button_struct->short_press_handled == 1){	//was button handled yet?
 800179e:	7d23      	ldrb	r3, [r4, #20]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d0ef      	beq.n	8001784 <buttonUpdate+0x5e>
						button_struct->_state = isPressed;
 80017a4:	2302      	movs	r3, #2
 80017a6:	e7f1      	b.n	800178c <buttonUpdate+0x66>

080017a8 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017a8:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <MX_DMA_Init+0x3c>)
{
 80017aa:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ac:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80017ae:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017b0:	f042 0201 	orr.w	r2, r2, #1
 80017b4:	615a      	str	r2, [r3, #20]
 80017b6:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80017b8:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80017c0:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017c2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80017c4:	f001 fb38 	bl	8002e38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017c8:	200b      	movs	r0, #11
 80017ca:	f001 fb77 	bl	8002ebc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2103      	movs	r1, #3
 80017d2:	200e      	movs	r0, #14
 80017d4:	f001 fb30 	bl	8002e38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80017d8:	200e      	movs	r0, #14
 80017da:	f001 fb6f 	bl	8002ebc <HAL_NVIC_EnableIRQ>

}
 80017de:	b003      	add	sp, #12
 80017e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80017e4:	40021000 	.word	0x40021000

080017e8 <MX_GPIO_Init>:
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	2210      	movs	r2, #16
{
 80017ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ec:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	eb0d 0002 	add.w	r0, sp, r2
 80017f2:	2100      	movs	r1, #0
 80017f4:	f004 f856 	bl	80058a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f8:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <MX_GPIO_Init+0xdc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
 80017fa:	4d33      	ldr	r5, [pc, #204]	; (80018c8 <MX_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
 80017fe:	4628      	mov	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001800:	f042 0210 	orr.w	r2, r2, #16
 8001804:	619a      	str	r2, [r3, #24]
 8001806:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
 8001808:	f247 0121 	movw	r1, #28705	; 0x7021
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180c:	f002 0210 	and.w	r2, r2, #16
 8001810:	9200      	str	r2, [sp, #0]
 8001812:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001814:	699a      	ldr	r2, [r3, #24]
                          |RST_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001816:	2603      	movs	r6, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001818:	f042 0220 	orr.w	r2, r2, #32
 800181c:	619a      	str	r2, [r3, #24]
 800181e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA0 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	4f2a      	ldr	r7, [pc, #168]	; (80018cc <MX_GPIO_Init+0xe4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001822:	f002 0220 	and.w	r2, r2, #32
 8001826:	9201      	str	r2, [sp, #4]
 8001828:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
                          |RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	f042 0204 	orr.w	r2, r2, #4
 8001832:	619a      	str	r2, [r3, #24]
 8001834:	699a      	ldr	r2, [r3, #24]
 8001836:	f002 0204 	and.w	r2, r2, #4
 800183a:	9202      	str	r2, [sp, #8]
 800183c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	699a      	ldr	r2, [r3, #24]
 8001840:	f042 0208 	orr.w	r2, r2, #8
 8001844:	619a      	str	r2, [r3, #24]
 8001846:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
 8001848:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	9303      	str	r3, [sp, #12]
 8001850:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
 8001852:	f002 f8e1 	bl	8003a18 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185a:	a904      	add	r1, sp, #16
 800185c:	481c      	ldr	r0, [pc, #112]	; (80018d0 <MX_GPIO_Init+0xe8>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800185e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001860:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001862:	f001 ff5b 	bl	800371c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_9;
 8001866:	f240 2301 	movw	r3, #513	; 0x201
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186a:	a904      	add	r1, sp, #16
 800186c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_9;
 800186e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001870:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f001 ff53 	bl	800371c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
 8001876:	f247 0321 	movw	r3, #28705	; 0x7021
 800187a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	a904      	add	r1, sp, #16
 8001880:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001886:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001888:	f001 ff48 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEV_MODE2_Pin|FAULT_FEEDBACK_Pin|CALIB_MODE_Pin;
 800188c:	f44f 4306 	mov.w	r3, #34304	; 0x8600
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001890:	a904      	add	r1, sp, #16
 8001892:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = DEV_MODE2_Pin|FAULT_FEEDBACK_Pin|CALIB_MODE_Pin;
 8001894:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001896:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189a:	f001 ff3f 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB4 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9;
 800189e:	f44f 6331 	mov.w	r3, #2832	; 0xb10
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a2:	a904      	add	r1, sp, #16
 80018a4:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9;
 80018a6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a8:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018aa:	f001 ff37 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DEV_MODE1_Pin|CALIB_V_Pin|CALIB_I_Pin;
 80018ae:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	a904      	add	r1, sp, #16
 80018b4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = DEV_MODE1_Pin|CALIB_V_Pin|CALIB_I_Pin;
 80018b6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	f001 ff2e 	bl	800371c <HAL_GPIO_Init>

}
 80018c0:	b009      	add	sp, #36	; 0x24
 80018c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010c00 	.word	0x40010c00
 80018cc:	40010800 	.word	0x40010800
 80018d0:	40011000 	.word	0x40011000

080018d4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80018d4:	b508      	push	{r3, lr}

  hiwdg.Instance = IWDG;
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
  hiwdg.Init.Reload = 4095;
 80018d6:	2206      	movs	r2, #6
 80018d8:	f640 73ff 	movw	r3, #4095	; 0xfff
  hiwdg.Instance = IWDG;
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_IWDG_Init+0x20>)
  hiwdg.Init.Reload = 4095;
 80018de:	4906      	ldr	r1, [pc, #24]	; (80018f8 <MX_IWDG_Init+0x24>)
 80018e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80018e4:	f002 f8c2 	bl	8003a6c <HAL_IWDG_Init>
 80018e8:	b118      	cbz	r0, 80018f2 <MX_IWDG_Init+0x1e>
  {
    Error_Handler();
  }

}
 80018ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80018ee:	f000 b9f9 	b.w	8001ce4 <Error_Handler>
 80018f2:	bd08      	pop	{r3, pc}
 80018f4:	20000388 	.word	0x20000388
 80018f8:	40003000 	.word	0x40003000

080018fc <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fc:	2228      	movs	r2, #40	; 0x28
{
 80018fe:	b510      	push	{r4, lr}
 8001900:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001902:	eb0d 0002 	add.w	r0, sp, r2
 8001906:	2100      	movs	r1, #0
 8001908:	f003 ffcc 	bl	80058a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800190c:	2214      	movs	r2, #20
 800190e:	2100      	movs	r1, #0
 8001910:	eb0d 0002 	add.w	r0, sp, r2
 8001914:	f003 ffc6 	bl	80058a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001918:	2100      	movs	r1, #0
 800191a:	2210      	movs	r2, #16
 800191c:	a801      	add	r0, sp, #4
 800191e:	f003 ffc1 	bl	80058a4 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001922:	2309      	movs	r3, #9
 8001924:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800192a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800192c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800192e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001930:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001932:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001936:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001938:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800193a:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800193c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193e:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001940:	f002 f8e8 	bl	8003b14 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001944:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001946:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800194a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800194c:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800194e:	4621      	mov	r1, r4
 8001950:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001952:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001954:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001956:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001958:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800195a:	f002 fb19 	bl	8003f90 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800195e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001962:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001964:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001966:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001968:	f002 fc42 	bl	80041f0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800196c:	b014      	add	sp, #80	; 0x50
 800196e:	bd10      	pop	{r4, pc}

08001970 <main>:
				DBGMCU->CR |=DBGMCU_CR_DBG_STOP;
 8001970:	4bc1      	ldr	r3, [pc, #772]	; (8001c78 <main+0x308>)
{
 8001972:	b583      	push	{r0, r1, r7, lr}
				DBGMCU->CR |=DBGMCU_CR_DBG_STOP;
 8001974:	685a      	ldr	r2, [r3, #4]
    BoardStatus=sBoot;
 8001976:	2400      	movs	r4, #0
				DBGMCU->CR |=DBGMCU_CR_DBG_STOP;
 8001978:	f042 0202 	orr.w	r2, r2, #2
 800197c:	605a      	str	r2, [r3, #4]
		__HAL_DBGMCU_FREEZE_IWDG();
 800197e:	685a      	ldr	r2, [r3, #4]
      buttonInit(&CALIB_V, CALIB_V_GPIO_Port, CALIB_V_Pin, GPIO_PIN_RESET, 4000, 10000);
 8001980:	f44f 667a 	mov.w	r6, #4000	; 0xfa0
		__HAL_DBGMCU_FREEZE_IWDG();
 8001984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001988:	605a      	str	r2, [r3, #4]
  HAL_Init();
 800198a:	f000 feb5 	bl	80026f8 <HAL_Init>
  SystemClock_Config();
 800198e:	f7ff ffb5 	bl	80018fc <SystemClock_Config>
  MX_GPIO_Init();
 8001992:	f7ff ff29 	bl	80017e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001996:	f7ff ff07 	bl	80017a8 <MX_DMA_Init>
  MX_CRC_Init();
 800199a:	f7fe ff6f 	bl	800087c <MX_CRC_Init>
  MX_IWDG_Init();
 800199e:	f7ff ff99 	bl	80018d4 <MX_IWDG_Init>
  MX_TIM1_Init();
 80019a2:	f000 fd3b 	bl	800241c <MX_TIM1_Init>
  MX_TIM3_Init();
 80019a6:	f000 fda9 	bl	80024fc <MX_TIM3_Init>
  MX_TIM4_Init();
 80019aa:	f000 fc39 	bl	8002220 <MX_TIM4_Init>
  MX_TIM2_Init();
 80019ae:	f000 fc01 	bl	80021b4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80019b2:	f000 fdfb 	bl	80025ac <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80019b6:	f7fe fec9 	bl	800074c <MX_ADC1_Init>
    DigiTOS_IWDG_Init(DigiTOS_IWDG_Timeout_8s);
 80019ba:	200b      	movs	r0, #11
 80019bc:	f7ff fd82 	bl	80014c4 <DigiTOS_IWDG_Init>
    ResetWDG();
 80019c0:	f7ff fa9a 	bl	8000ef8 <ResetWDG>
    StartADC();
 80019c4:	f7fe ff7e 	bl	80008c4 <StartADC>
    SinWave=swNOP;
 80019c8:	2203      	movs	r2, #3
 80019ca:	4bac      	ldr	r3, [pc, #688]	; (8001c7c <main+0x30c>)
      buttonInit(&CALIB_V, CALIB_V_GPIO_Port, CALIB_V_Pin, GPIO_PIN_RESET, 4000, 10000);
 80019cc:	f242 7710 	movw	r7, #10000	; 0x2710
    SinWave=swNOP;
 80019d0:	701a      	strb	r2, [r3, #0]
    PWM_50Hz_Init();
 80019d2:	f7ff fc63 	bl	800129c <PWM_50Hz_Init>
    PWM_Sinus_Init();
 80019d6:	f7ff fd3d 	bl	8001454 <PWM_Sinus_Init>
    PWM_50Hz_ON();
 80019da:	f7ff fce1 	bl	80013a0 <PWM_50Hz_ON>
    PWM_Sinus_ON();
 80019de:	f7ff fd2b 	bl	8001438 <PWM_Sinus_ON>
    PWM_50Hz_OFF();
 80019e2:	f7ff fce4 	bl	80013ae <PWM_50Hz_OFF>
    PWM_Sinus_OFF();
 80019e6:	f7ff fd2e 	bl	8001446 <PWM_Sinus_OFF>
    ResetWDG();
 80019ea:	f7ff fa85 	bl	8000ef8 <ResetWDG>
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_SET);
 80019ee:	2201      	movs	r2, #1
 80019f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019f4:	48a2      	ldr	r0, [pc, #648]	; (8001c80 <main+0x310>)
 80019f6:	f002 f80f 	bl	8003a18 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,GPIO_PIN_SET);
 80019fa:	2201      	movs	r2, #1
 80019fc:	48a0      	ldr	r0, [pc, #640]	; (8001c80 <main+0x310>)
 80019fe:	4611      	mov	r1, r2
 8001a00:	f002 f80a 	bl	8003a18 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,GPIO_PIN_SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a0a:	489d      	ldr	r0, [pc, #628]	; (8001c80 <main+0x310>)
 8001a0c:	f002 f804 	bl	8003a18 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,GPIO_PIN_SET);
 8001a10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a14:	2201      	movs	r2, #1
 8001a16:	489a      	ldr	r0, [pc, #616]	; (8001c80 <main+0x310>)
 8001a18:	f001 fffe 	bl	8003a18 <HAL_GPIO_WritePin>
    HAL_TIM_Base_Start(&htim2);
 8001a1c:	4899      	ldr	r0, [pc, #612]	; (8001c84 <main+0x314>)
 8001a1e:	f002 fd51 	bl	80044c4 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start_IT(&htim2);
 8001a22:	4898      	ldr	r0, [pc, #608]	; (8001c84 <main+0x314>)
 8001a24:	f002 fd76 	bl	8004514 <HAL_TIM_Base_Start_IT>
    TIM2->ARR=sBoot_Delay;
 8001a28:	2264      	movs	r2, #100	; 0x64
 8001a2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    BoardStatus=sBoot;
 8001a2e:	4d96      	ldr	r5, [pc, #600]	; (8001c88 <main+0x318>)
 8001a30:	702c      	strb	r4, [r5, #0]
    TIM2->ARR=sBoot_Delay;
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
      ResetWDG();
 8001a34:	f7ff fa60 	bl	8000ef8 <ResetWDG>
      buttonInit(&CALIB_V, CALIB_V_GPIO_Port, CALIB_V_Pin, GPIO_PIN_RESET, 4000, 10000);
 8001a38:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8001a3c:	4623      	mov	r3, r4
 8001a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a42:	4992      	ldr	r1, [pc, #584]	; (8001c8c <main+0x31c>)
 8001a44:	4892      	ldr	r0, [pc, #584]	; (8001c90 <main+0x320>)
 8001a46:	f7ff fe53 	bl	80016f0 <buttonInit>
      buttonInit(&CALIB_I, CALIB_I_GPIO_Port, CALIB_I_Pin, GPIO_PIN_RESET, 4000, 10000);
 8001a4a:	e88d 00c0 	stmia.w	sp, {r6, r7}
      buttonInit(&CALIB_MODE, CALIB_MODE_GPIO_Port, CALIB_MODE_Pin, GPIO_PIN_RESET, 30, 2000);
 8001a4e:	261e      	movs	r6, #30
 8001a50:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
      buttonInit(&CALIB_I, CALIB_I_GPIO_Port, CALIB_I_Pin, GPIO_PIN_RESET, 4000, 10000);
 8001a54:	4623      	mov	r3, r4
 8001a56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a5a:	498c      	ldr	r1, [pc, #560]	; (8001c8c <main+0x31c>)
 8001a5c:	488d      	ldr	r0, [pc, #564]	; (8001c94 <main+0x324>)
 8001a5e:	f7ff fe47 	bl	80016f0 <buttonInit>
      buttonInit(&CALIB_MODE, CALIB_MODE_GPIO_Port, CALIB_MODE_Pin, GPIO_PIN_RESET, 30, 2000);
 8001a62:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8001a66:	4623      	mov	r3, r4
 8001a68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a6c:	4984      	ldr	r1, [pc, #528]	; (8001c80 <main+0x310>)
 8001a6e:	488a      	ldr	r0, [pc, #552]	; (8001c98 <main+0x328>)
 8001a70:	f7ff fe3e 	bl	80016f0 <buttonInit>
      buttonInit(&DevModeKey, DEV_MODE1_GPIO_Port, DEV_MODE1_Pin, GPIO_PIN_RESET, 30, 2000);
 8001a74:	e88d 00c0 	stmia.w	sp, {r6, r7}
      buttonInit(&DevModeKey2, DEV_MODE2_GPIO_Port, DEV_MODE2_Pin, GPIO_PIN_RESET, 30, 1000);
 8001a78:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
      buttonInit(&DevModeKey, DEV_MODE1_GPIO_Port, DEV_MODE1_Pin, GPIO_PIN_RESET, 30, 2000);
 8001a7c:	4623      	mov	r3, r4
 8001a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a82:	4982      	ldr	r1, [pc, #520]	; (8001c8c <main+0x31c>)
 8001a84:	4885      	ldr	r0, [pc, #532]	; (8001c9c <main+0x32c>)
 8001a86:	f7ff fe33 	bl	80016f0 <buttonInit>
      buttonInit(&DevModeKey2, DEV_MODE2_GPIO_Port, DEV_MODE2_Pin, GPIO_PIN_RESET, 30, 1000);
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a90:	497b      	ldr	r1, [pc, #492]	; (8001c80 <main+0x310>)
 8001a92:	4883      	ldr	r0, [pc, #524]	; (8001ca0 <main+0x330>)
 8001a94:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8001a98:	f7ff fe2a 	bl	80016f0 <buttonInit>
      buttonInit(&FaultFlag, FAULT_FEEDBACK_GPIO_Port, FAULT_FEEDBACK_Pin, GPIO_PIN_RESET, 30, 1000);
 8001a9c:	4623      	mov	r3, r4
 8001a9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa2:	4977      	ldr	r1, [pc, #476]	; (8001c80 <main+0x310>)
 8001aa4:	487f      	ldr	r0, [pc, #508]	; (8001ca4 <main+0x334>)
 8001aa6:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8001aaa:	f7ff fe21 	bl	80016f0 <buttonInit>
      buttonUpdate(&DevModeKey);
 8001aae:	487b      	ldr	r0, [pc, #492]	; (8001c9c <main+0x32c>)
 8001ab0:	f7ff fe39 	bl	8001726 <buttonUpdate>
      buttonUpdate(&DevModeKey2);
 8001ab4:	487a      	ldr	r0, [pc, #488]	; (8001ca0 <main+0x330>)
 8001ab6:	f7ff fe36 	bl	8001726 <buttonUpdate>
      buttonUpdate(&FaultFlag);
 8001aba:	487a      	ldr	r0, [pc, #488]	; (8001ca4 <main+0x334>)
 8001abc:	f7ff fe33 	bl	8001726 <buttonUpdate>
      buttonUpdate(&CALIB_V);
 8001ac0:	4873      	ldr	r0, [pc, #460]	; (8001c90 <main+0x320>)
 8001ac2:	f7ff fe30 	bl	8001726 <buttonUpdate>
      buttonUpdate(&CALIB_I);
 8001ac6:	4873      	ldr	r0, [pc, #460]	; (8001c94 <main+0x324>)
 8001ac8:	f7ff fe2d 	bl	8001726 <buttonUpdate>
      buttonUpdate(&CALIB_MODE);
 8001acc:	4872      	ldr	r0, [pc, #456]	; (8001c98 <main+0x328>)
 8001ace:	f7ff fe2a 	bl	8001726 <buttonUpdate>
      HAL_Delay(500);
 8001ad2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ad6:	f000 fe33 	bl	8002740 <HAL_Delay>
                 if (InitEEPROM()==0) {
 8001ada:	f7ff fb0d 	bl	80010f8 <InitEEPROM>
 8001ade:	2800      	cmp	r0, #0
 8001ae0:	f040 80c1 	bne.w	8001c66 <main+0x2f6>
               	  strcpy(uart_buff,"NO EEPROM\r\n");
 8001ae4:	4970      	ldr	r1, [pc, #448]	; (8001ca8 <main+0x338>)
 8001ae6:	4871      	ldr	r0, [pc, #452]	; (8001cac <main+0x33c>)
 8001ae8:	f003 ff17 	bl	800591a <strcpy>
               	  USE_DEF_CALIB();
 8001aec:	f7ff facc 	bl	8001088 <USE_DEF_CALIB>
               	  SerialPrintln(1);
 8001af0:	2001      	movs	r0, #1
 8001af2:	f7ff f9d9 	bl	8000ea8 <SerialPrintln>
      Get_Version();
 8001af6:	f7ff f9b9 	bl	8000e6c <Get_Version>
      SerialPrintln(1);
 8001afa:	2001      	movs	r0, #1
 8001afc:	f7ff f9d4 	bl	8000ea8 <SerialPrintln>
      Get_ChipID();
 8001b00:	f7ff f984 	bl	8000e0c <Get_ChipID>
      SerialPrintln(1);
 8001b04:	2001      	movs	r0, #1
 8001b06:	f7ff f9cf 	bl	8000ea8 <SerialPrintln>
      Get_FlashSize();
 8001b0a:	f7ff f99b 	bl	8000e44 <Get_FlashSize>
      SerialPrintln(1);
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f7ff f9ca 	bl	8000ea8 <SerialPrintln>
      ClearUART_Buff();
 8001b14:	f7ff f972 	bl	8000dfc <ClearUART_Buff>
      if(buttonUpdate(&CALIB_MODE) == isPressed){
 8001b18:	485f      	ldr	r0, [pc, #380]	; (8001c98 <main+0x328>)
 8001b1a:	f7ff fe04 	bl	8001726 <buttonUpdate>
 8001b1e:	2802      	cmp	r0, #2
 8001b20:	4c63      	ldr	r4, [pc, #396]	; (8001cb0 <main+0x340>)
 8001b22:	f040 80a7 	bne.w	8001c74 <main+0x304>
    	  strcpy(uart_buff,"CALIB MODE ENABLED\r\n");
 8001b26:	4963      	ldr	r1, [pc, #396]	; (8001cb4 <main+0x344>)
 8001b28:	4860      	ldr	r0, [pc, #384]	; (8001cac <main+0x33c>)
 8001b2a:	f003 fef6 	bl	800591a <strcpy>
    	  SerialPrintln(1);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f7ff f9ba 	bl	8000ea8 <SerialPrintln>
    	  CalibMode=1;
 8001b34:	2301      	movs	r3, #1
      buttonUpdate(&FaultFlag);
 8001b36:	485b      	ldr	r0, [pc, #364]	; (8001ca4 <main+0x334>)
    	  CalibMode=0;
 8001b38:	6023      	str	r3, [r4, #0]
      buttonUpdate(&FaultFlag);
 8001b3a:	f7ff fdf4 	bl	8001726 <buttonUpdate>
      if(buttonUpdate(&DevModeKey) == isPressed){
 8001b3e:	4857      	ldr	r0, [pc, #348]	; (8001c9c <main+0x32c>)
 8001b40:	f7ff fdf1 	bl	8001726 <buttonUpdate>
 8001b44:	2802      	cmp	r0, #2
 8001b46:	d11b      	bne.n	8001b80 <main+0x210>
    	strcpy(uart_buff,"DEV MODE - wait\r\n");
 8001b48:	495b      	ldr	r1, [pc, #364]	; (8001cb8 <main+0x348>)
 8001b4a:	4858      	ldr	r0, [pc, #352]	; (8001cac <main+0x33c>)
 8001b4c:	f003 fee5 	bl	800591a <strcpy>
    	SerialPrintln(1);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f7ff f9a9 	bl	8000ea8 <SerialPrintln>
    	ResetWDG();
 8001b56:	f7ff f9cf 	bl	8000ef8 <ResetWDG>
        HAL_Delay(500);
 8001b5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b5e:	f000 fdef 	bl	8002740 <HAL_Delay>
    	if(buttonUpdate(&DevModeKey) == isPressed){
 8001b62:	484e      	ldr	r0, [pc, #312]	; (8001c9c <main+0x32c>)
 8001b64:	f7ff fddf 	bl	8001726 <buttonUpdate>
 8001b68:	2802      	cmp	r0, #2
 8001b6a:	d109      	bne.n	8001b80 <main+0x210>
    		strcpy(uart_buff,"DEV MODE - confirmed\r\n");
 8001b6c:	4953      	ldr	r1, [pc, #332]	; (8001cbc <main+0x34c>)
 8001b6e:	484f      	ldr	r0, [pc, #316]	; (8001cac <main+0x33c>)
 8001b70:	f003 fed3 	bl	800591a <strcpy>
    	    SerialPrintln(1);
 8001b74:	2001      	movs	r0, #1
 8001b76:	f7ff f997 	bl	8000ea8 <SerialPrintln>
    		DevMode1=1;
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <main+0x350>)
 8001b7e:	601a      	str	r2, [r3, #0]
      	BoardStatus=sGEN;
 8001b80:	2401      	movs	r4, #1
        strcpy(uart_buff,"Start Loop\r\n");
 8001b82:	4950      	ldr	r1, [pc, #320]	; (8001cc4 <main+0x354>)
 8001b84:	4849      	ldr	r0, [pc, #292]	; (8001cac <main+0x33c>)
 8001b86:	f003 fec8 	bl	800591a <strcpy>
        SerialPrintln(1);
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f7ff f98c 	bl	8000ea8 <SerialPrintln>
        strcpy(uart_buff,"NOP\r\n");
 8001b90:	494d      	ldr	r1, [pc, #308]	; (8001cc8 <main+0x358>)
 8001b92:	4846      	ldr	r0, [pc, #280]	; (8001cac <main+0x33c>)
 8001b94:	f003 fec1 	bl	800591a <strcpy>
                   SerialPrintln(1);
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f7ff f985 	bl	8000ea8 <SerialPrintln>
      	strcpy(uart_buff,"NOP\r\n");
 8001b9e:	494a      	ldr	r1, [pc, #296]	; (8001cc8 <main+0x358>)
 8001ba0:	4842      	ldr	r0, [pc, #264]	; (8001cac <main+0x33c>)
      	BoardStatus=sGEN;
 8001ba2:	702c      	strb	r4, [r5, #0]
      	strcpy(uart_buff,"NOP\r\n");
 8001ba4:	f003 feb9 	bl	800591a <strcpy>
      	           SerialPrintln(1);
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f7ff f97d 	bl	8000ea8 <SerialPrintln>
      	TIM2->ARR=sDEF_Delay;
 8001bae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
      	strcpy(uart_buff,"NOP\r\n");
 8001bb6:	4944      	ldr	r1, [pc, #272]	; (8001cc8 <main+0x358>)
      	TIM2->ARR=sDEF_Delay;
 8001bb8:	62da      	str	r2, [r3, #44]	; 0x2c
      	strcpy(uart_buff,"NOP\r\n");
 8001bba:	483c      	ldr	r0, [pc, #240]	; (8001cac <main+0x33c>)
 8001bbc:	f003 fead 	bl	800591a <strcpy>
      	           SerialPrintln(1);
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	f7ff f971 	bl	8000ea8 <SerialPrintln>
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_RESET);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bcc:	482c      	ldr	r0, [pc, #176]	; (8001c80 <main+0x310>)
 8001bce:	f001 ff23 	bl	8003a18 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,GPIO_PIN_RESET);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	482a      	ldr	r0, [pc, #168]	; (8001c80 <main+0x310>)
 8001bd8:	f001 ff1e 	bl	8003a18 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001be2:	4827      	ldr	r0, [pc, #156]	; (8001c80 <main+0x310>)
 8001be4:	f001 ff18 	bl	8003a18 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bee:	4824      	ldr	r0, [pc, #144]	; (8001c80 <main+0x310>)
 8001bf0:	f001 ff12 	bl	8003a18 <HAL_GPIO_WritePin>
           buttonUpdate(&FaultFlag);
 8001bf4:	482b      	ldr	r0, [pc, #172]	; (8001ca4 <main+0x334>)
 8001bf6:	f7ff fd96 	bl	8001726 <buttonUpdate>
           buttonUpdate(&DevModeKey2);
 8001bfa:	4829      	ldr	r0, [pc, #164]	; (8001ca0 <main+0x330>)
 8001bfc:	f7ff fd93 	bl	8001726 <buttonUpdate>
           HAL_Delay(500);
 8001c00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c04:	f000 fd9c 	bl	8002740 <HAL_Delay>
           if(buttonUpdate(&DevModeKey2) == isPressedLong){
 8001c08:	4825      	ldr	r0, [pc, #148]	; (8001ca0 <main+0x330>)
 8001c0a:	f7ff fd8c 	bl	8001726 <buttonUpdate>
 8001c0e:	2803      	cmp	r0, #3
 8001c10:	d106      	bne.n	8001c20 <main+0x2b0>
        	   strcpy(uart_buff,"Start GENERATOR\r\n");
 8001c12:	492e      	ldr	r1, [pc, #184]	; (8001ccc <main+0x35c>)
 8001c14:	4825      	ldr	r0, [pc, #148]	; (8001cac <main+0x33c>)
 8001c16:	f003 fe80 	bl	800591a <strcpy>
        	   SerialPrintln(1);
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f7ff f944 	bl	8000ea8 <SerialPrintln>
           TIM4->PSC=SinResPSC;
 8001c20:	2400      	movs	r4, #0
           strcpy(uart_buff,"NOP\r\n");
 8001c22:	4929      	ldr	r1, [pc, #164]	; (8001cc8 <main+0x358>)
 8001c24:	4821      	ldr	r0, [pc, #132]	; (8001cac <main+0x33c>)
 8001c26:	f003 fe78 	bl	800591a <strcpy>
           SerialPrintln(1);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f7ff f93c 	bl	8000ea8 <SerialPrintln>
           buttonUpdate(&FaultFlag);
 8001c30:	481c      	ldr	r0, [pc, #112]	; (8001ca4 <main+0x334>)
 8001c32:	f7ff fd78 	bl	8001726 <buttonUpdate>
           TIM4->PSC=SinResPSC;
 8001c36:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <main+0x360>)
           HAL_TIM_Base_Start(&htim4);
 8001c38:	4826      	ldr	r0, [pc, #152]	; (8001cd4 <main+0x364>)
           TIM4->PSC=SinResPSC;
 8001c3a:	629c      	str	r4, [r3, #40]	; 0x28
           HAL_TIM_Base_Start(&htim4);
 8001c3c:	f002 fc42 	bl	80044c4 <HAL_TIM_Base_Start>
           HAL_TIM_Base_Start_IT(&htim4);
 8001c40:	4824      	ldr	r0, [pc, #144]	; (8001cd4 <main+0x364>)
 8001c42:	f002 fc67 	bl	8004514 <HAL_TIM_Base_Start_IT>
		  CheckV_FLAG=2;//busy Flag
 8001c46:	2002      	movs	r0, #2
	  if (CheckV_FLAG==1) {
 8001c48:	4a23      	ldr	r2, [pc, #140]	; (8001cd8 <main+0x368>)
	  if (UpdateAmp_FLAG==1) {
 8001c4a:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <main+0x36c>)
	  if (CheckV_FLAG==1) {
 8001c4c:	8811      	ldrh	r1, [r2, #0]
 8001c4e:	b289      	uxth	r1, r1
 8001c50:	2901      	cmp	r1, #1
		  CheckV_FLAG=2;//busy Flag
 8001c52:	bf04      	itt	eq
 8001c54:	8010      	strheq	r0, [r2, #0]
		  CheckV_FLAG=0; // clear Flag
 8001c56:	8014      	strheq	r4, [r2, #0]
	  if (UpdateAmp_FLAG==1) {
 8001c58:	8819      	ldrh	r1, [r3, #0]
 8001c5a:	b289      	uxth	r1, r1
 8001c5c:	2901      	cmp	r1, #1
 8001c5e:	d1f5      	bne.n	8001c4c <main+0x2dc>
	  			UpdateAmp_FLAG=2;//busy Flag
 8001c60:	8018      	strh	r0, [r3, #0]
	  			UpdateAmp_FLAG=0; // clear Flag
 8001c62:	801c      	strh	r4, [r3, #0]
 8001c64:	e7f2      	b.n	8001c4c <main+0x2dc>
              	  USE_NEW_CALIB();
 8001c66:	f7ff fa19 	bl	800109c <USE_NEW_CALIB>
               	  strcpy(uart_buff,"OK EEPROM\r\n");
 8001c6a:	491d      	ldr	r1, [pc, #116]	; (8001ce0 <main+0x370>)
 8001c6c:	480f      	ldr	r0, [pc, #60]	; (8001cac <main+0x33c>)
 8001c6e:	f003 fe54 	bl	800591a <strcpy>
 8001c72:	e73d      	b.n	8001af0 <main+0x180>
    	  CalibMode=0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e75e      	b.n	8001b36 <main+0x1c6>
 8001c78:	e0042000 	.word	0xe0042000
 8001c7c:	20000178 	.word	0x20000178
 8001c80:	40010c00 	.word	0x40010c00
 8001c84:	20000454 	.word	0x20000454
 8001c88:	20000142 	.word	0x20000142
 8001c8c:	40010800 	.word	0x40010800
 8001c90:	20000240 	.word	0x20000240
 8001c94:	2000025c 	.word	0x2000025c
 8001c98:	2000030c 	.word	0x2000030c
 8001c9c:	200002dc 	.word	0x200002dc
 8001ca0:	20000344 	.word	0x20000344
 8001ca4:	20000328 	.word	0x20000328
 8001ca8:	08006245 	.word	0x08006245
 8001cac:	20000278 	.word	0x20000278
 8001cb0:	20000144 	.word	0x20000144
 8001cb4:	0800625d 	.word	0x0800625d
 8001cb8:	08006272 	.word	0x08006272
 8001cbc:	08006284 	.word	0x08006284
 8001cc0:	20000154 	.word	0x20000154
 8001cc4:	0800629b 	.word	0x0800629b
 8001cc8:	080062a8 	.word	0x080062a8
 8001ccc:	080062ae 	.word	0x080062ae
 8001cd0:	40000800 	.word	0x40000800
 8001cd4:	20000394 	.word	0x20000394
 8001cd8:	20000148 	.word	0x20000148
 8001cdc:	2000017a 	.word	0x2000017a
 8001ce0:	08006251 	.word	0x08006251

08001ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce4:	4770      	bx	lr

08001ce6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <HAL_MspInit+0x74>)
{
 8001cea:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cec:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001cee:	2005      	movs	r0, #5
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf0:	f042 0201 	orr.w	r2, r2, #1
 8001cf4:	619a      	str	r2, [r3, #24]
 8001cf6:	699a      	ldr	r2, [r3, #24]
 8001cf8:	f002 0201 	and.w	r2, r2, #1
 8001cfc:	9200      	str	r2, [sp, #0]
 8001cfe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d00:	69da      	ldr	r2, [r3, #28]
 8001d02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d06:	61da      	str	r2, [r3, #28]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001d12:	f001 f873 	bl	8002dfc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2001      	movs	r0, #1
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	f001 f88c 	bl	8002e38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001d20:	2001      	movs	r0, #1
 8001d22:	f001 f8cb 	bl	8002ebc <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2004      	movs	r0, #4
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	f001 f884 	bl	8002e38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001d30:	2004      	movs	r0, #4
 8001d32:	f001 f8c3 	bl	8002ebc <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2005      	movs	r0, #5
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	f001 f87c 	bl	8002e38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001d40:	2005      	movs	r0, #5
 8001d42:	f001 f8bb 	bl	8002ebc <HAL_NVIC_EnableIRQ>

  /**NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST 
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8001d46:	4a06      	ldr	r2, [pc, #24]	; (8001d60 <HAL_MspInit+0x78>)
 8001d48:	6853      	ldr	r3, [r2, #4]
 8001d4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d52:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d54:	b003      	add	sp, #12
 8001d56:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40010000 	.word	0x40010000

08001d64 <NMI_Handler>:
 8001d64:	4770      	bx	lr

08001d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d66:	e7fe      	b.n	8001d66 <HardFault_Handler>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	e7fe      	b.n	8001d68 <MemManage_Handler>

08001d6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6a:	e7fe      	b.n	8001d6a <BusFault_Handler>

08001d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d6c:	e7fe      	b.n	8001d6c <UsageFault_Handler>

08001d6e <SVC_Handler>:
 8001d6e:	4770      	bx	lr

08001d70 <DebugMon_Handler>:
 8001d70:	4770      	bx	lr

08001d72 <PendSV_Handler>:
 8001d72:	4770      	bx	lr

08001d74 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d74:	f000 bcd2 	b.w	800271c <HAL_IncTick>

08001d78 <PVD_IRQHandler>:
void PVD_IRQHandler(void)
{
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001d78:	f001 bebe 	b.w	8003af8 <HAL_PWR_PVD_IRQHandler>

08001d7c <FLASH_IRQHandler>:
void FLASH_IRQHandler(void)
{
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001d7c:	f001 bad2 	b.w	8003324 <HAL_FLASH_IRQHandler>

08001d80 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001d80:	4770      	bx	lr
	...

08001d84 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d84:	4801      	ldr	r0, [pc, #4]	; (8001d8c <DMA1_Channel1_IRQHandler+0x8>)
 8001d86:	f001 ba0f 	b.w	80031a8 <HAL_DMA_IRQHandler>
 8001d8a:	bf00      	nop
 8001d8c:	200001e0 	.word	0x200001e0

08001d90 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d90:	4801      	ldr	r0, [pc, #4]	; (8001d98 <DMA1_Channel4_IRQHandler+0x8>)
 8001d92:	f001 ba09 	b.w	80031a8 <HAL_DMA_IRQHandler>
 8001d96:	bf00      	nop
 8001d98:	20000494 	.word	0x20000494

08001d9c <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d9c:	4801      	ldr	r0, [pc, #4]	; (8001da4 <ADC1_2_IRQHandler+0x8>)
 8001d9e:	f000 bd11 	b.w	80027c4 <HAL_ADC_IRQHandler>
 8001da2:	bf00      	nop
 8001da4:	200001b0 	.word	0x200001b0

08001da8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001da8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001daa:	4c04      	ldr	r4, [pc, #16]	; (8001dbc <TIM1_UP_IRQHandler+0x14>)
 8001dac:	4620      	mov	r0, r4
 8001dae:	f002 fdfe 	bl	80049ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 8001db2:	f06f 0201 	mvn.w	r2, #1
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	611a      	str	r2, [r3, #16]
 8001dba:	bd10      	pop	{r4, pc}
 8001dbc:	20000414 	.word	0x20000414

08001dc0 <TIM1_BRK_IRQHandler>:
 8001dc0:	f7ff bff2 	b.w	8001da8 <TIM1_UP_IRQHandler>

08001dc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dc6:	4c6b      	ldr	r4, [pc, #428]	; (8001f74 <TIM2_IRQHandler+0x1b0>)
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f002 fdf0 	bl	80049ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8001dce:	f06f 0201 	mvn.w	r2, #1
 8001dd2:	6823      	ldr	r3, [r4, #0]

      	// Reset IWDG
        ResetWDG();

          //
          switch(BoardStatus) {
 8001dd4:	4c68      	ldr	r4, [pc, #416]	; (8001f78 <TIM2_IRQHandler+0x1b4>)
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8001dd6:	611a      	str	r2, [r3, #16]
        ResetWDG();
 8001dd8:	f7ff f88e 	bl	8000ef8 <ResetWDG>
          switch(BoardStatus) {
 8001ddc:	7823      	ldrb	r3, [r4, #0]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	f200 80c6 	bhi.w	8001f70 <TIM2_IRQHandler+0x1ac>
 8001de4:	e8df f003 	tbb	[pc, r3]
 8001de8:	78021a02 	.word	0x78021a02
        	  case sBoot:
        	  case sUnknown:
        	  	  //TIM3->ARR=sBoot_Delay;
        	  	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001dec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001df0:	4862      	ldr	r0, [pc, #392]	; (8001f7c <TIM2_IRQHandler+0x1b8>)
 8001df2:	f001 fe2b 	bl	8003a4c <HAL_GPIO_TogglePin>
        	  	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001df6:	2101      	movs	r1, #1
 8001df8:	4860      	ldr	r0, [pc, #384]	; (8001f7c <TIM2_IRQHandler+0x1b8>)
 8001dfa:	f001 fe27 	bl	8003a4c <HAL_GPIO_TogglePin>
        	  	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001dfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e02:	485e      	ldr	r0, [pc, #376]	; (8001f7c <TIM2_IRQHandler+0x1b8>)
 8001e04:	f001 fe22 	bl	8003a4c <HAL_GPIO_TogglePin>
        	  	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001e08:	485c      	ldr	r0, [pc, #368]	; (8001f7c <TIM2_IRQHandler+0x1b8>)
 8001e0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e0e:	f001 fe1d 	bl	8003a4c <HAL_GPIO_TogglePin>
        		  	  break;
          }


  /* USER CODE END TIM2_IRQn 1 */
}
 8001e12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        	  	  buttonUpdate(&FaultFlag);
 8001e16:	485a      	ldr	r0, [pc, #360]	; (8001f80 <TIM2_IRQHandler+0x1bc>)
 8001e18:	f7ff bc85 	b.w	8001726 <buttonUpdate>
        		  if (CalibMode == 1) {
 8001e1c:	4b59      	ldr	r3, [pc, #356]	; (8001f84 <TIM2_IRQHandler+0x1c0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d031      	beq.n	8001e88 <TIM2_IRQHandler+0xc4>
        		  	PrintCurrentState();
 8001e24:	f7ff f86e 	bl	8000f04 <PrintCurrentState>
        		  	  if (AMP_BLOCKED==1) {
 8001e28:	4957      	ldr	r1, [pc, #348]	; (8001f88 <TIM2_IRQHandler+0x1c4>)
 8001e2a:	680b      	ldr	r3, [r1, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d105      	bne.n	8001e3c <TIM2_IRQHandler+0x78>
        		  		AMP_PROTECTION_CNT_BEFORESTART++;
 8001e30:	4a56      	ldr	r2, [pc, #344]	; (8001f8c <TIM2_IRQHandler+0x1c8>)
 8001e32:	6813      	ldr	r3, [r2, #0]
 8001e34:	3301      	adds	r3, #1
        		  		if (AMP_PROTECTION_CNT_BEFORESTART>=DelaySecBeforeStartAfterAmpProtection) {
 8001e36:	2b1d      	cmp	r3, #29
 8001e38:	dc2b      	bgt.n	8001e92 <TIM2_IRQHandler+0xce>
        		  		AMP_PROTECTION_CNT_BEFORESTART++;
 8001e3a:	6013      	str	r3, [r2, #0]
        		  	  if (VOUT_BLOCKED==1) {
 8001e3c:	4954      	ldr	r1, [pc, #336]	; (8001f90 <TIM2_IRQHandler+0x1cc>)
 8001e3e:	680b      	ldr	r3, [r1, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <TIM2_IRQHandler+0x8c>
        		  		VOUT_PROTECTION_CNT_BEFORESTART++;
 8001e44:	4a53      	ldr	r2, [pc, #332]	; (8001f94 <TIM2_IRQHandler+0x1d0>)
 8001e46:	6813      	ldr	r3, [r2, #0]
 8001e48:	3301      	adds	r3, #1
        		  		if (VOUT_PROTECTION_CNT_BEFORESTART>=DelaySecBeforeStartAfterVOUTProtection) {
 8001e4a:	2b1d      	cmp	r3, #29
 8001e4c:	dc29      	bgt.n	8001ea2 <TIM2_IRQHandler+0xde>
        		  		VOUT_PROTECTION_CNT_BEFORESTART++;
 8001e4e:	6013      	str	r3, [r2, #0]
        		  	  if (IOUT_BLOCKED==1) {
 8001e50:	4951      	ldr	r1, [pc, #324]	; (8001f98 <TIM2_IRQHandler+0x1d4>)
 8001e52:	680b      	ldr	r3, [r1, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d105      	bne.n	8001e64 <TIM2_IRQHandler+0xa0>
        		  		IOUT_PROTECTION_CNT_BEFORESTART++;
 8001e58:	4a50      	ldr	r2, [pc, #320]	; (8001f9c <TIM2_IRQHandler+0x1d8>)
 8001e5a:	6813      	ldr	r3, [r2, #0]
 8001e5c:	3301      	adds	r3, #1
        		  		if (IOUT_PROTECTION_CNT_BEFORESTART>=DelaySecBeforeStartAfterIOUTProtection) {
 8001e5e:	2b1d      	cmp	r3, #29
 8001e60:	dc27      	bgt.n	8001eb2 <TIM2_IRQHandler+0xee>
        		  		IOUT_PROTECTION_CNT_BEFORESTART++;
 8001e62:	6013      	str	r3, [r2, #0]
        		  	  if (DC_BLOCKED==1) {
 8001e64:	494e      	ldr	r1, [pc, #312]	; (8001fa0 <TIM2_IRQHandler+0x1dc>)
 8001e66:	680b      	ldr	r3, [r1, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	f040 8081 	bne.w	8001f70 <TIM2_IRQHandler+0x1ac>
  					  if (DC_DataAverage<DC_PROTECTION_ROLLBACK) {
 8001e6e:	4b4d      	ldr	r3, [pc, #308]	; (8001fa4 <TIM2_IRQHandler+0x1e0>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8001e76:	429a      	cmp	r2, r3
 8001e78:	4b4b      	ldr	r3, [pc, #300]	; (8001fa8 <TIM2_IRQHandler+0x1e4>)
 8001e7a:	d82b      	bhi.n	8001ed4 <TIM2_IRQHandler+0x110>
  						DC_PROTECTION_CNT_BEFORESTART++;
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	3201      	adds	r2, #1
  						if (DC_PROTECTION_CNT_BEFORESTART>=DelaySecBeforeStartAfterDCProtection) {
 8001e80:	2a09      	cmp	r2, #9
 8001e82:	dc1e      	bgt.n	8001ec2 <TIM2_IRQHandler+0xfe>
  						  DC_PROTECTION_CNT_BEFORESTART=0;
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        			  if (CalibCmdCheck()==1) {
 8001e88:	f7ff f97e 	bl	8001188 <CalibCmdCheck>
 8001e8c:	2801      	cmp	r0, #1
 8001e8e:	d1c9      	bne.n	8001e24 <TIM2_IRQHandler+0x60>
 8001e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        		  			AMP_PROTECTION_CNT_BEFORESTART=0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	6013      	str	r3, [r2, #0]
        		  			AMP_PROTECTION_CNT=0;
 8001e96:	4a45      	ldr	r2, [pc, #276]	; (8001fac <TIM2_IRQHandler+0x1e8>)
        		  			AMP_BLOCKED=0;
 8001e98:	600b      	str	r3, [r1, #0]
        		  			AMP_PROTECTION_CNT=0;
 8001e9a:	6013      	str	r3, [r2, #0]
        		  			SetSoftstart();
 8001e9c:	f7ff fb6c 	bl	8001578 <SetSoftstart>
 8001ea0:	e7cc      	b.n	8001e3c <TIM2_IRQHandler+0x78>
        		  			VOUT_PROTECTION_CNT_BEFORESTART=0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	6013      	str	r3, [r2, #0]
        		  			VOUT_PROTECTION_CNT=0;
 8001ea6:	4a42      	ldr	r2, [pc, #264]	; (8001fb0 <TIM2_IRQHandler+0x1ec>)
        		  			VOUT_BLOCKED=0;
 8001ea8:	600b      	str	r3, [r1, #0]
        		  			VOUT_PROTECTION_CNT=0;
 8001eaa:	6013      	str	r3, [r2, #0]
        		  			SetSoftstart();
 8001eac:	f7ff fb64 	bl	8001578 <SetSoftstart>
 8001eb0:	e7ce      	b.n	8001e50 <TIM2_IRQHandler+0x8c>
        		  			IOUT_PROTECTION_CNT_BEFORESTART=0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	6013      	str	r3, [r2, #0]
        		  			IOUT_PROTECTION_CNT=0;
 8001eb6:	4a3f      	ldr	r2, [pc, #252]	; (8001fb4 <TIM2_IRQHandler+0x1f0>)
        		  			IOUT_BLOCKED=0;
 8001eb8:	600b      	str	r3, [r1, #0]
        		  			IOUT_PROTECTION_CNT=0;
 8001eba:	6013      	str	r3, [r2, #0]
        		  			SetSoftstart();
 8001ebc:	f7ff fb5c 	bl	8001578 <SetSoftstart>
 8001ec0:	e7d0      	b.n	8001e64 <TIM2_IRQHandler+0xa0>
  							DC_PROTECTION_CNT_BEFORESTART=0;
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
  							DC_PROTECTION_CNT=0;
 8001ec6:	4b3c      	ldr	r3, [pc, #240]	; (8001fb8 <TIM2_IRQHandler+0x1f4>)
  							DC_BLOCKED=0;
 8001ec8:	600a      	str	r2, [r1, #0]
  							DC_PROTECTION_CNT=0;
 8001eca:	601a      	str	r2, [r3, #0]
}
 8001ecc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  							SetSoftstart();
 8001ed0:	f7ff bb52 	b.w	8001578 <SetSoftstart>
  						  DC_PROTECTION_CNT_BEFORESTART=0;
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	e7d5      	b.n	8001e84 <TIM2_IRQHandler+0xc0>
        		  	  	PrintCurrentState();
 8001ed8:	f7ff f814 	bl	8000f04 <PrintCurrentState>
  					if ((buttonUpdate(&FaultFlag) == isPressed) || (buttonUpdate(&FaultFlag) == isPressedLong)
 8001edc:	4828      	ldr	r0, [pc, #160]	; (8001f80 <TIM2_IRQHandler+0x1bc>)
 8001ede:	f7ff fc22 	bl	8001726 <buttonUpdate>
 8001ee2:	2802      	cmp	r0, #2
 8001ee4:	4d35      	ldr	r5, [pc, #212]	; (8001fbc <TIM2_IRQHandler+0x1f8>)
 8001ee6:	4f36      	ldr	r7, [pc, #216]	; (8001fc0 <TIM2_IRQHandler+0x1fc>)
 8001ee8:	4e36      	ldr	r6, [pc, #216]	; (8001fc4 <TIM2_IRQHandler+0x200>)
 8001eea:	d11b      	bne.n	8001f24 <TIM2_IRQHandler+0x160>
  						RstCnt++;
 8001eec:	682b      	ldr	r3, [r5, #0]
 8001eee:	3301      	adds	r3, #1
  						if (RstCnt==DelaySecBeforeAttemRst) {
 8001ef0:	2b0a      	cmp	r3, #10
  						RstCnt++;
 8001ef2:	602b      	str	r3, [r5, #0]
  						if (RstCnt==DelaySecBeforeAttemRst) {
 8001ef4:	d12c      	bne.n	8001f50 <TIM2_IRQHandler+0x18c>
  							RstCnt=0;
 8001ef6:	2300      	movs	r3, #0
  							HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin,GPIO_PIN_SET);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	2120      	movs	r1, #32
 8001efc:	481f      	ldr	r0, [pc, #124]	; (8001f7c <TIM2_IRQHandler+0x1b8>)
  							RstCnt=0;
 8001efe:	602b      	str	r3, [r5, #0]
  							HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin,GPIO_PIN_SET);
 8001f00:	f001 fd8a 	bl	8003a18 <HAL_GPIO_WritePin>
  							TIM2->ARR=sRST_Delay;
 8001f04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  							TIM2->ARR=sDEF_Delay;
 8001f08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  						HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001f0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  							TIM2->ARR=sDEF_Delay;
 8001f10:	62da      	str	r2, [r3, #44]	; 0x2c
  						HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001f12:	481a      	ldr	r0, [pc, #104]	; (8001f7c <TIM2_IRQHandler+0x1b8>)
 8001f14:	f001 fd9a 	bl	8003a4c <HAL_GPIO_TogglePin>
  						BoardStatus=sFaultFlag;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	7023      	strb	r3, [r4, #0]
  						SinWave=swNOP;
 8001f1c:	703b      	strb	r3, [r7, #0]
  						FaultWaitCnt=0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	6033      	str	r3, [r6, #0]
 8001f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  					if ((buttonUpdate(&FaultFlag) == isPressed) || (buttonUpdate(&FaultFlag) == isPressedLong)
 8001f24:	4816      	ldr	r0, [pc, #88]	; (8001f80 <TIM2_IRQHandler+0x1bc>)
 8001f26:	f7ff fbfe 	bl	8001726 <buttonUpdate>
 8001f2a:	2803      	cmp	r0, #3
 8001f2c:	d0de      	beq.n	8001eec <TIM2_IRQHandler+0x128>
  						  SinWave=swNOP;
 8001f2e:	2103      	movs	r1, #3
  						  RstCnt=0;
 8001f30:	2200      	movs	r2, #0
  						  FaultWaitCnt++;
 8001f32:	6833      	ldr	r3, [r6, #0]
  						  SinWave=swNOP;
 8001f34:	7039      	strb	r1, [r7, #0]
  						  FaultWaitCnt++;
 8001f36:	3301      	adds	r3, #1
  						  if (FaultWaitCnt>=DelaySecBeforeStartAfterFault) {
 8001f38:	2b09      	cmp	r3, #9
  						  RstCnt=0;
 8001f3a:	602a      	str	r2, [r5, #0]
  						  FaultWaitCnt++;
 8001f3c:	6033      	str	r3, [r6, #0]
  						  if (FaultWaitCnt>=DelaySecBeforeStartAfterFault) {
 8001f3e:	dd0f      	ble.n	8001f60 <TIM2_IRQHandler+0x19c>
  							  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,GPIO_PIN_RESET);
 8001f40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f44:	480d      	ldr	r0, [pc, #52]	; (8001f7c <TIM2_IRQHandler+0x1b8>)
 8001f46:	f001 fd67 	bl	8003a18 <HAL_GPIO_WritePin>
  							  BoardStatus=sGEN;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	7023      	strb	r3, [r4, #0]
 8001f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  							HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin,GPIO_PIN_RESET);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2120      	movs	r1, #32
 8001f54:	4809      	ldr	r0, [pc, #36]	; (8001f7c <TIM2_IRQHandler+0x1b8>)
 8001f56:	f001 fd5f 	bl	8003a18 <HAL_GPIO_WritePin>
  							TIM2->ARR=sDEF_Delay;
 8001f5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f5e:	e7d3      	b.n	8001f08 <TIM2_IRQHandler+0x144>
  							  BoardStatus=sFaultFlag;
 8001f60:	7021      	strb	r1, [r4, #0]
  							  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001f62:	4806      	ldr	r0, [pc, #24]	; (8001f7c <TIM2_IRQHandler+0x1b8>)
 8001f64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
}
 8001f68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  							  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001f6c:	f001 bd6e 	b.w	8003a4c <HAL_GPIO_TogglePin>
 8001f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000454 	.word	0x20000454
 8001f78:	20000142 	.word	0x20000142
 8001f7c:	40010c00 	.word	0x40010c00
 8001f80:	20000328 	.word	0x20000328
 8001f84:	20000144 	.word	0x20000144
 8001f88:	200000e8 	.word	0x200000e8
 8001f8c:	200000f0 	.word	0x200000f0
 8001f90:	20000128 	.word	0x20000128
 8001f94:	20000130 	.word	0x20000130
 8001f98:	2000010c 	.word	0x2000010c
 8001f9c:	20000114 	.word	0x20000114
 8001fa0:	200000f4 	.word	0x200000f4
 8001fa4:	200000fc 	.word	0x200000fc
 8001fa8:	20000108 	.word	0x20000108
 8001fac:	200000ec 	.word	0x200000ec
 8001fb0:	2000012c 	.word	0x2000012c
 8001fb4:	20000110 	.word	0x20000110
 8001fb8:	20000104 	.word	0x20000104
 8001fbc:	20000174 	.word	0x20000174
 8001fc0:	20000178 	.word	0x20000178
 8001fc4:	20000168 	.word	0x20000168

08001fc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fc8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fca:	4c10      	ldr	r4, [pc, #64]	; (800200c <TIM3_IRQHandler+0x44>)
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f002 fcee 	bl	80049ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8001fd2:	f06f 0201 	mvn.w	r2, #1
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	611a      	str	r2, [r3, #16]


  	if ((SinWave==swStop) || (SinWave==swStart) || (SinWave==swNOP))  {
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <TIM3_IRQHandler+0x48>)
 8001fdc:	781a      	ldrb	r2, [r3, #0]
 8001fde:	b12a      	cbz	r2, 8001fec <TIM3_IRQHandler+0x24>
 8001fe0:	781a      	ldrb	r2, [r3, #0]
 8001fe2:	2a01      	cmp	r2, #1
 8001fe4:	d002      	beq.n	8001fec <TIM3_IRQHandler+0x24>
 8001fe6:	781a      	ldrb	r2, [r3, #0]
 8001fe8:	2a03      	cmp	r2, #3
 8001fea:	d105      	bne.n	8001ff8 <TIM3_IRQHandler+0x30>
   		TIM3->CCR2=0;
 8001fec:	2200      	movs	r2, #0
 8001fee:	4909      	ldr	r1, [pc, #36]	; (8002014 <TIM3_IRQHandler+0x4c>)
 8001ff0:	638a      	str	r2, [r1, #56]	; 0x38
   		TIM3->CCR1=0;
 8001ff2:	634a      	str	r2, [r1, #52]	; 0x34
   		//TIM1->CCR3=0;
   		sin_step=0;
 8001ff4:	4908      	ldr	r1, [pc, #32]	; (8002018 <TIM3_IRQHandler+0x50>)
 8001ff6:	800a      	strh	r2, [r1, #0]
   	}

  	if (SinWave==swNOP) {return;}
 8001ff8:	781a      	ldrb	r2, [r3, #0]
 8001ffa:	2a03      	cmp	r2, #3
 8001ffc:	d004      	beq.n	8002008 <TIM3_IRQHandler+0x40>

     	if (SinWave==swStart)  {
 8001ffe:	781a      	ldrb	r2, [r3, #0]
 8002000:	2a01      	cmp	r2, #1
     		SinWave=swGEN;
 8002002:	bf04      	itt	eq
 8002004:	2202      	moveq	r2, #2
 8002006:	701a      	strbeq	r2, [r3, #0]
 8002008:	bd10      	pop	{r4, pc}
 800200a:	bf00      	nop
 800200c:	200003d4 	.word	0x200003d4
 8002010:	20000178 	.word	0x20000178
 8002014:	40000400 	.word	0x40000400
 8002018:	20000140 	.word	0x20000140

0800201c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800201c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800201e:	4c41      	ldr	r4, [pc, #260]	; (8002124 <TIM4_IRQHandler+0x108>)
 8002020:	4620      	mov	r0, r4
 8002022:	f002 fcc4 	bl	80049ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  __HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_UPDATE);
 8002026:	f06f 0201 	mvn.w	r2, #1
 800202a:	6823      	ldr	r3, [r4, #0]



    if ((buttonUpdate(&FaultFlag) == isPressed) || (buttonUpdate(&FaultFlag) == isPressedLong)) {
 800202c:	483e      	ldr	r0, [pc, #248]	; (8002128 <TIM4_IRQHandler+0x10c>)
  __HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_UPDATE);
 800202e:	611a      	str	r2, [r3, #16]
    if ((buttonUpdate(&FaultFlag) == isPressed) || (buttonUpdate(&FaultFlag) == isPressedLong)) {
 8002030:	f7ff fb79 	bl	8001726 <buttonUpdate>
 8002034:	2802      	cmp	r0, #2
 8002036:	4c3d      	ldr	r4, [pc, #244]	; (800212c <TIM4_IRQHandler+0x110>)
 8002038:	d109      	bne.n	800204e <TIM4_IRQHandler+0x32>
  	  BoardStatus=sFaultFlag;
 800203a:	2203      	movs	r2, #3
 800203c:	4b3c      	ldr	r3, [pc, #240]	; (8002130 <TIM4_IRQHandler+0x114>)
 800203e:	701a      	strb	r2, [r3, #0]
  	  FaultWaitCnt=0;
 8002040:	2200      	movs	r2, #0
 8002042:	4b3c      	ldr	r3, [pc, #240]	; (8002134 <TIM4_IRQHandler+0x118>)
 8002044:	601a      	str	r2, [r3, #0]
  		  if (SinWave!=swGEN) {
 8002046:	7823      	ldrb	r3, [r4, #0]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d131      	bne.n	80020b0 <TIM4_IRQHandler+0x94>
 800204c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((buttonUpdate(&FaultFlag) == isPressed) || (buttonUpdate(&FaultFlag) == isPressedLong)) {
 800204e:	4836      	ldr	r0, [pc, #216]	; (8002128 <TIM4_IRQHandler+0x10c>)
 8002050:	f7ff fb69 	bl	8001726 <buttonUpdate>
 8002054:	2803      	cmp	r0, #3
 8002056:	d0f0      	beq.n	800203a <TIM4_IRQHandler+0x1e>
  	  //BoardStatus=sGEN;
    }



    	  if ((SinWave==swNOP) && (BoardStatus == sGEN) && (AMP_BLOCKED==0)
 8002058:	7823      	ldrb	r3, [r4, #0]
 800205a:	4e37      	ldr	r6, [pc, #220]	; (8002138 <TIM4_IRQHandler+0x11c>)
 800205c:	2b03      	cmp	r3, #3
 800205e:	d12a      	bne.n	80020b6 <TIM4_IRQHandler+0x9a>
 8002060:	4b33      	ldr	r3, [pc, #204]	; (8002130 <TIM4_IRQHandler+0x114>)
 8002062:	781f      	ldrb	r7, [r3, #0]
 8002064:	b2ff      	uxtb	r7, r7
 8002066:	2f01      	cmp	r7, #1
 8002068:	d125      	bne.n	80020b6 <TIM4_IRQHandler+0x9a>
 800206a:	4b34      	ldr	r3, [pc, #208]	; (800213c <TIM4_IRQHandler+0x120>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	bb13      	cbnz	r3, 80020b6 <TIM4_IRQHandler+0x9a>
    			  && (DC_BLOCKED==0) && (VOUT_BLOCKED==0)  && (IOUT_BLOCKED==0) && (EEPROM_FLAG==0)) {
 8002070:	4b33      	ldr	r3, [pc, #204]	; (8002140 <TIM4_IRQHandler+0x124>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	b9fb      	cbnz	r3, 80020b6 <TIM4_IRQHandler+0x9a>
 8002076:	4b33      	ldr	r3, [pc, #204]	; (8002144 <TIM4_IRQHandler+0x128>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	b9e3      	cbnz	r3, 80020b6 <TIM4_IRQHandler+0x9a>
 800207c:	4b32      	ldr	r3, [pc, #200]	; (8002148 <TIM4_IRQHandler+0x12c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	b9cb      	cbnz	r3, 80020b6 <TIM4_IRQHandler+0x9a>
 8002082:	4b32      	ldr	r3, [pc, #200]	; (800214c <TIM4_IRQHandler+0x130>)
 8002084:	681d      	ldr	r5, [r3, #0]
 8002086:	b9b5      	cbnz	r5, 80020b6 <TIM4_IRQHandler+0x9a>
    	  sin_step=0;
    	  	  if  (buttonUpdate(&DevModeKey2) == isPressedLong) {
 8002088:	4831      	ldr	r0, [pc, #196]	; (8002150 <TIM4_IRQHandler+0x134>)
    	  sin_step=0;
 800208a:	8035      	strh	r5, [r6, #0]
    	  	  if  (buttonUpdate(&DevModeKey2) == isPressedLong) {
 800208c:	f7ff fb4b 	bl	8001726 <buttonUpdate>
 8002090:	2803      	cmp	r0, #3
 8002092:	d110      	bne.n	80020b6 <TIM4_IRQHandler+0x9a>
      		SinWave=swStart;
      		TIM3->CCR2=0;
 8002094:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <TIM4_IRQHandler+0x138>)
      		SinWave=swStart;
 8002096:	7027      	strb	r7, [r4, #0]
      		TIM3->CCR2=0;
 8002098:	639d      	str	r5, [r3, #56]	; 0x38
      		 		TIM3->CCR1=0;
 800209a:	635d      	str	r5, [r3, #52]	; 0x34
      		 		TIM1->CCR3=0;
 800209c:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80020a0:	63dd      	str	r5, [r3, #60]	; 0x3c
      		 		sin_step=0;
 80020a2:	8035      	strh	r5, [r6, #0]
      		PWM_50Hz_ON();
 80020a4:	f7ff f97c 	bl	80013a0 <PWM_50Hz_ON>
    	    		sin_step = 0;
    	    	}*/


  /* USER CODE END TIM4_IRQn 1 */
}
 80020a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      		PWM_Sinus_ON();
 80020ac:	f7ff b9c4 	b.w	8001438 <PWM_Sinus_ON>
  			  SinWave=swGEN;
 80020b0:	2302      	movs	r3, #2
 80020b2:	7023      	strb	r3, [r4, #0]
 80020b4:	e7d0      	b.n	8002058 <TIM4_IRQHandler+0x3c>
    if (SinWave==swGEN) {
 80020b6:	7823      	ldrb	r3, [r4, #0]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d128      	bne.n	800210e <TIM4_IRQHandler+0xf2>
  				if (  (BoardStatus == sFaultFlag) || (buttonUpdate(&DevModeKey2) == isReleased)
 80020bc:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <TIM4_IRQHandler+0x114>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d10f      	bne.n	80020e4 <TIM4_IRQHandler+0xc8>
  		  SinWave=swNOP;
 80020c4:	2303      	movs	r3, #3
 80020c6:	7023      	strb	r3, [r4, #0]
  		  	  	TIM3->CCR2=0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	4a22      	ldr	r2, [pc, #136]	; (8002154 <TIM4_IRQHandler+0x138>)
 80020cc:	6393      	str	r3, [r2, #56]	; 0x38
  		   		TIM3->CCR1=0;
 80020ce:	6353      	str	r3, [r2, #52]	; 0x34
  		   		TIM1->CCR3=0;
 80020d0:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80020d4:	63d3      	str	r3, [r2, #60]	; 0x3c
  		   		sin_step=0;
 80020d6:	8033      	strh	r3, [r6, #0]
  		  PWM_50Hz_OFF();
 80020d8:	f7ff f969 	bl	80013ae <PWM_50Hz_OFF>
}
 80020dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  		  PWM_Sinus_OFF();
 80020e0:	f7ff b9b1 	b.w	8001446 <PWM_Sinus_OFF>
  				if (  (BoardStatus == sFaultFlag) || (buttonUpdate(&DevModeKey2) == isReleased)
 80020e4:	481a      	ldr	r0, [pc, #104]	; (8002150 <TIM4_IRQHandler+0x134>)
 80020e6:	f7ff fb1e 	bl	8001726 <buttonUpdate>
 80020ea:	2804      	cmp	r0, #4
 80020ec:	d0ea      	beq.n	80020c4 <TIM4_IRQHandler+0xa8>
  						|| (AMP_BLOCKED==1)  || (DC_BLOCKED==1) || (VOUT_BLOCKED==1)  || (IOUT_BLOCKED==1)) {
 80020ee:	4b13      	ldr	r3, [pc, #76]	; (800213c <TIM4_IRQHandler+0x120>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d0e6      	beq.n	80020c4 <TIM4_IRQHandler+0xa8>
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <TIM4_IRQHandler+0x124>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d0e2      	beq.n	80020c4 <TIM4_IRQHandler+0xa8>
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <TIM4_IRQHandler+0x128>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d0de      	beq.n	80020c4 <TIM4_IRQHandler+0xa8>
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <TIM4_IRQHandler+0x12c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d0da      	beq.n	80020c4 <TIM4_IRQHandler+0xa8>
    	  	  	  if (CheckV_FLAG==0) {
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <TIM4_IRQHandler+0x13c>)
 8002110:	8813      	ldrh	r3, [r2, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	b90b      	cbnz	r3, 800211a <TIM4_IRQHandler+0xfe>
    	  	  		CheckV_FLAG=1;
 8002116:	2301      	movs	r3, #1
 8002118:	8013      	strh	r3, [r2, #0]
    	  	  	  sin_step++;
 800211a:	8833      	ldrh	r3, [r6, #0]
 800211c:	3301      	adds	r3, #1
 800211e:	b29b      	uxth	r3, r3
 8002120:	8033      	strh	r3, [r6, #0]
 8002122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002124:	20000394 	.word	0x20000394
 8002128:	20000328 	.word	0x20000328
 800212c:	20000178 	.word	0x20000178
 8002130:	20000142 	.word	0x20000142
 8002134:	20000168 	.word	0x20000168
 8002138:	20000140 	.word	0x20000140
 800213c:	200000e8 	.word	0x200000e8
 8002140:	200000f4 	.word	0x200000f4
 8002144:	20000128 	.word	0x20000128
 8002148:	2000010c 	.word	0x2000010c
 800214c:	20000164 	.word	0x20000164
 8002150:	20000344 	.word	0x20000344
 8002154:	40000400 	.word	0x40000400
 8002158:	20000148 	.word	0x20000148

0800215c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800215c:	4801      	ldr	r0, [pc, #4]	; (8002164 <USART1_IRQHandler+0x8>)
 800215e:	f003 baaf 	b.w	80056c0 <HAL_UART_IRQHandler>
 8002162:	bf00      	nop
 8002164:	200004d8 	.word	0x200004d8

08002168 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <SystemInit+0x40>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	f042 0201 	orr.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002172:	6859      	ldr	r1, [r3, #4]
 8002174:	4a0d      	ldr	r2, [pc, #52]	; (80021ac <SystemInit+0x44>)
 8002176:	400a      	ands	r2, r1
 8002178:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002180:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002184:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800218c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002194:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002196:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800219a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800219c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <SystemInit+0x48>)
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	f8ff0000 	.word	0xf8ff0000
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021b6:	2210      	movs	r2, #16
 80021b8:	2100      	movs	r1, #0
 80021ba:	a802      	add	r0, sp, #8
 80021bc:	f003 fb72 	bl	80058a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c0:	2300      	movs	r3, #0

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 35999;
 80021c2:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80021c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 80021ca:	4814      	ldr	r0, [pc, #80]	; (800221c <MX_TIM2_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	9301      	str	r3, [sp, #4]
  htim2.Init.Prescaler = 35999;
 80021d0:	e880 0006 	stmia.w	r0, {r1, r2}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d4:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1000;
 80021d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021da:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021dc:	2380      	movs	r3, #128	; 0x80
  htim2.Init.Period = 1000;
 80021de:	60c2      	str	r2, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021e0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021e2:	f002 fcbf 	bl	8004b64 <HAL_TIM_Base_Init>
 80021e6:	b108      	cbz	r0, 80021ec <MX_TIM2_Init+0x38>
  {
    Error_Handler();
 80021e8:	f7ff fd7c 	bl	8001ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021f0:	a902      	add	r1, sp, #8
 80021f2:	480a      	ldr	r0, [pc, #40]	; (800221c <MX_TIM2_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f4:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021f6:	f002 f9b5 	bl	8004564 <HAL_TIM_ConfigClockSource>
 80021fa:	b108      	cbz	r0, 8002200 <MX_TIM2_Init+0x4c>
  {
    Error_Handler();
 80021fc:	f7ff fd72 	bl	8001ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002200:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002202:	4669      	mov	r1, sp
 8002204:	4805      	ldr	r0, [pc, #20]	; (800221c <MX_TIM2_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002206:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002208:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800220a:	f003 f803 	bl	8005214 <HAL_TIMEx_MasterConfigSynchronization>
 800220e:	b108      	cbz	r0, 8002214 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8002210:	f7ff fd68 	bl	8001ce4 <Error_Handler>
  }

}
 8002214:	b007      	add	sp, #28
 8002216:	f85d fb04 	ldr.w	pc, [sp], #4
 800221a:	bf00      	nop
 800221c:	20000454 	.word	0x20000454

08002220 <MX_TIM4_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002220:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002222:	2210      	movs	r2, #16
 8002224:	2100      	movs	r1, #0
 8002226:	a802      	add	r0, sp, #8
 8002228:	f003 fb3c 	bl	80058a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800222c:	2300      	movs	r3, #0

  htim4.Instance = TIM4;
 800222e:	4814      	ldr	r0, [pc, #80]	; (8002280 <MX_TIM4_Init+0x60>)
 8002230:	4a14      	ldr	r2, [pc, #80]	; (8002284 <MX_TIM4_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002232:	9300      	str	r3, [sp, #0]
  htim4.Init.Prescaler = 0;
 8002234:	e880 000c 	stmia.w	r0, {r2, r3}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002238:	9301      	str	r3, [sp, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223a:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 1000;
 800223c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002240:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002242:	2380      	movs	r3, #128	; 0x80
  htim4.Init.Period = 1000;
 8002244:	60c2      	str	r2, [r0, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002246:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002248:	f002 fc8c 	bl	8004b64 <HAL_TIM_Base_Init>
 800224c:	b108      	cbz	r0, 8002252 <MX_TIM4_Init+0x32>
  {
    Error_Handler();
 800224e:	f7ff fd49 	bl	8001ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002256:	a902      	add	r1, sp, #8
 8002258:	4809      	ldr	r0, [pc, #36]	; (8002280 <MX_TIM4_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800225a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800225c:	f002 f982 	bl	8004564 <HAL_TIM_ConfigClockSource>
 8002260:	b108      	cbz	r0, 8002266 <MX_TIM4_Init+0x46>
  {
    Error_Handler();
 8002262:	f7ff fd3f 	bl	8001ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002266:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002268:	4669      	mov	r1, sp
 800226a:	4805      	ldr	r0, [pc, #20]	; (8002280 <MX_TIM4_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002270:	f002 ffd0 	bl	8005214 <HAL_TIMEx_MasterConfigSynchronization>
 8002274:	b108      	cbz	r0, 800227a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002276:	f7ff fd35 	bl	8001ce4 <Error_Handler>
  }

}
 800227a:	b007      	add	sp, #28
 800227c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002280:	20000394 	.word	0x20000394
 8002284:	40000800 	.word	0x40000800

08002288 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002288:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM1)
 800228a:	6803      	ldr	r3, [r0, #0]
 800228c:	4a2e      	ldr	r2, [pc, #184]	; (8002348 <HAL_TIM_Base_MspInit+0xc0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d11c      	bne.n	80022cc <HAL_TIM_Base_MspInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002292:	4b2e      	ldr	r3, [pc, #184]	; (800234c <HAL_TIM_Base_MspInit+0xc4>)

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002294:	2018      	movs	r0, #24
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002296:	699a      	ldr	r2, [r3, #24]
 8002298:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800229c:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800229e:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022a0:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80022a2:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80022ac:	f000 fdc4 	bl	8002e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80022b0:	2018      	movs	r0, #24
 80022b2:	f000 fe03 	bl	8002ebc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2019      	movs	r0, #25
 80022ba:	4611      	mov	r1, r2
 80022bc:	f000 fdbc 	bl	8002e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80022c0:	2019      	movs	r0, #25
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80022c2:	f000 fdfb 	bl	8002ebc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80022c6:	b005      	add	sp, #20
 80022c8:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM2)
 80022cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d0:	d111      	bne.n	80022f6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022d2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80022d6:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 3);
 80022d8:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	61da      	str	r2, [r3, #28]
 80022e0:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 3);
 80022e2:	2203      	movs	r2, #3
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 3);
 80022ea:	2101      	movs	r1, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ec:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 3);
 80022ee:	f000 fda3 	bl	8002e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022f2:	201c      	movs	r0, #28
 80022f4:	e7e5      	b.n	80022c2 <HAL_TIM_Base_MspInit+0x3a>
  else if(tim_baseHandle->Instance==TIM3)
 80022f6:	4a16      	ldr	r2, [pc, #88]	; (8002350 <HAL_TIM_Base_MspInit+0xc8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d110      	bne.n	800231e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022fc:	4b13      	ldr	r3, [pc, #76]	; (800234c <HAL_TIM_Base_MspInit+0xc4>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 80022fe:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002300:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 8002302:	2100      	movs	r1, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002304:	f042 0202 	orr.w	r2, r2, #2
 8002308:	61da      	str	r2, [r3, #28]
 800230a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 800230c:	2201      	movs	r2, #1
    __HAL_RCC_TIM3_CLK_ENABLE();
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	9302      	str	r3, [sp, #8]
 8002314:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 8002316:	f000 fd8f 	bl	8002e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800231a:	201d      	movs	r0, #29
 800231c:	e7d1      	b.n	80022c2 <HAL_TIM_Base_MspInit+0x3a>
  else if(tim_baseHandle->Instance==TIM4)
 800231e:	4a0d      	ldr	r2, [pc, #52]	; (8002354 <HAL_TIM_Base_MspInit+0xcc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d1d0      	bne.n	80022c6 <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_TIM_Base_MspInit+0xc4>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002326:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002328:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800232a:	2101      	movs	r1, #1
    __HAL_RCC_TIM4_CLK_ENABLE();
 800232c:	f042 0204 	orr.w	r2, r2, #4
 8002330:	61da      	str	r2, [r3, #28]
 8002332:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002334:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	9303      	str	r3, [sp, #12]
 800233c:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800233e:	f000 fd7b 	bl	8002e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002342:	201e      	movs	r0, #30
 8002344:	e7bd      	b.n	80022c2 <HAL_TIM_Base_MspInit+0x3a>
 8002346:	bf00      	nop
 8002348:	40012c00 	.word	0x40012c00
 800234c:	40021000 	.word	0x40021000
 8002350:	40000400 	.word	0x40000400
 8002354:	40000800 	.word	0x40000800

08002358 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	2210      	movs	r2, #16
{
 800235a:	b530      	push	{r4, r5, lr}
 800235c:	4604      	mov	r4, r0
 800235e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	eb0d 0002 	add.w	r0, sp, r2
 8002364:	2100      	movs	r1, #0
 8002366:	f003 fa9d 	bl	80058a4 <memset>
  if(timHandle->Instance==TIM1)
 800236a:	6823      	ldr	r3, [r4, #0]
 800236c:	4a25      	ldr	r2, [pc, #148]	; (8002404 <HAL_TIM_MspPostInit+0xac>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d12f      	bne.n	80023d2 <HAL_TIM_MspPostInit+0x7a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM1 GPIO Configuration    
    PB1     ------> TIM1_CH3N
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = CH4_Pin;
 8002372:	2402      	movs	r4, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002374:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	4b24      	ldr	r3, [pc, #144]	; (8002408 <HAL_TIM_MspPostInit+0xb0>)
    HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8002378:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 800237c:	4823      	ldr	r0, [pc, #140]	; (800240c <HAL_TIM_MspPostInit+0xb4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237e:	f042 0208 	orr.w	r2, r2, #8
 8002382:	619a      	str	r2, [r3, #24]
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	f002 0208 	and.w	r2, r2, #8
 800238a:	9201      	str	r2, [sp, #4]
 800238c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	699a      	ldr	r2, [r3, #24]
 8002390:	f042 0204 	orr.w	r2, r2, #4
 8002394:	619a      	str	r2, [r3, #24]
 8002396:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = CH4_Pin;
 8002398:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	9302      	str	r3, [sp, #8]
 80023a0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023a4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 80023a6:	f001 f9b9 	bl	800371c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CH3_Pin;
 80023aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 80023ae:	a904      	add	r1, sp, #16
 80023b0:	4817      	ldr	r0, [pc, #92]	; (8002410 <HAL_TIM_MspPostInit+0xb8>)
    GPIO_InitStruct.Pin = CH3_Pin;
 80023b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023b6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 80023b8:	f001 f9b0 	bl	800371c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 80023bc:	4a15      	ldr	r2, [pc, #84]	; (8002414 <HAL_TIM_MspPostInit+0xbc>)
 80023be:	6853      	ldr	r3, [r2, #4]
 80023c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80023c4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80023c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023cc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80023ce:	b009      	add	sp, #36	; 0x24
 80023d0:	bd30      	pop	{r4, r5, pc}
  else if(timHandle->Instance==TIM3)
 80023d2:	4a11      	ldr	r2, [pc, #68]	; (8002418 <HAL_TIM_MspPostInit+0xc0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d1fa      	bne.n	80023ce <HAL_TIM_MspPostInit+0x76>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_TIM_MspPostInit+0xb0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023dc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023de:	480c      	ldr	r0, [pc, #48]	; (8002410 <HAL_TIM_MspPostInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e0:	f042 0204 	orr.w	r2, r2, #4
 80023e4:	619a      	str	r2, [r3, #24]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	9303      	str	r3, [sp, #12]
 80023ee:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = CH1_Pin|CH2_Pin;
 80023f0:	23c0      	movs	r3, #192	; 0xc0
 80023f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023f8:	2303      	movs	r3, #3
 80023fa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fc:	f001 f98e 	bl	800371c <HAL_GPIO_Init>
}
 8002400:	e7e5      	b.n	80023ce <HAL_TIM_MspPostInit+0x76>
 8002402:	bf00      	nop
 8002404:	40012c00 	.word	0x40012c00
 8002408:	40021000 	.word	0x40021000
 800240c:	40010c00 	.word	0x40010c00
 8002410:	40010800 	.word	0x40010800
 8002414:	40010000 	.word	0x40010000
 8002418:	40000400 	.word	0x40000400

0800241c <MX_TIM1_Init>:
{
 800241c:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800241e:	2400      	movs	r4, #0
{
 8002420:	b094      	sub	sp, #80	; 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002422:	2210      	movs	r2, #16
 8002424:	2100      	movs	r1, #0
 8002426:	a802      	add	r0, sp, #8
 8002428:	f003 fa3c 	bl	80058a4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800242c:	221c      	movs	r2, #28
 800242e:	4621      	mov	r1, r4
 8002430:	a806      	add	r0, sp, #24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002432:	9400      	str	r4, [sp, #0]
 8002434:	9401      	str	r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002436:	f003 fa35 	bl	80058a4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800243a:	221c      	movs	r2, #28
 800243c:	4621      	mov	r1, r4
 800243e:	a80d      	add	r0, sp, #52	; 0x34
 8002440:	f003 fa30 	bl	80058a4 <memset>
  htim1.Init.Prescaler = 1439;
 8002444:	f240 539f 	movw	r3, #1439	; 0x59f
  htim1.Instance = TIM1;
 8002448:	482a      	ldr	r0, [pc, #168]	; (80024f4 <MX_TIM1_Init+0xd8>)
  htim1.Init.Prescaler = 1439;
 800244a:	4a2b      	ldr	r2, [pc, #172]	; (80024f8 <MX_TIM1_Init+0xdc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244c:	6084      	str	r4, [r0, #8]
  htim1.Init.Prescaler = 1439;
 800244e:	e880 000c 	stmia.w	r0, {r2, r3}
  htim1.Init.Period = 1000;
 8002452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002456:	60c3      	str	r3, [r0, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002458:	2380      	movs	r3, #128	; 0x80
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245a:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800245c:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800245e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002460:	f002 fb80 	bl	8004b64 <HAL_TIM_Base_Init>
 8002464:	b108      	cbz	r0, 800246a <MX_TIM1_Init+0x4e>
    Error_Handler();
 8002466:	f7ff fc3d 	bl	8001ce4 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800246a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800246e:	a902      	add	r1, sp, #8
 8002470:	4820      	ldr	r0, [pc, #128]	; (80024f4 <MX_TIM1_Init+0xd8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002472:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002474:	f002 f876 	bl	8004564 <HAL_TIM_ConfigClockSource>
 8002478:	b108      	cbz	r0, 800247e <MX_TIM1_Init+0x62>
    Error_Handler();
 800247a:	f7ff fc33 	bl	8001ce4 <Error_Handler>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800247e:	481d      	ldr	r0, [pc, #116]	; (80024f4 <MX_TIM1_Init+0xd8>)
 8002480:	f002 fbc4 	bl	8004c0c <HAL_TIM_OC_Init>
 8002484:	b108      	cbz	r0, 800248a <MX_TIM1_Init+0x6e>
    Error_Handler();
 8002486:	f7ff fc2d 	bl	8001ce4 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800248a:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800248c:	4669      	mov	r1, sp
 800248e:	4819      	ldr	r0, [pc, #100]	; (80024f4 <MX_TIM1_Init+0xd8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002490:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002492:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002494:	f002 febe 	bl	8005214 <HAL_TIMEx_MasterConfigSynchronization>
 8002498:	b108      	cbz	r0, 800249e <MX_TIM1_Init+0x82>
    Error_Handler();
 800249a:	f7ff fc23 	bl	8001ce4 <Error_Handler>
  sConfigOC.Pulse = 500;
 800249e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80024a2:	9307      	str	r3, [sp, #28]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80024a4:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024a8:	2208      	movs	r2, #8
 80024aa:	a906      	add	r1, sp, #24
 80024ac:	4811      	ldr	r0, [pc, #68]	; (80024f4 <MX_TIM1_Init+0xd8>)
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80024ae:	9406      	str	r4, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024b0:	9408      	str	r4, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024b2:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b4:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80024b6:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCIDLESTATE_SET;
 80024b8:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024ba:	f002 fca5 	bl	8004e08 <HAL_TIM_OC_ConfigChannel>
 80024be:	b108      	cbz	r0, 80024c4 <MX_TIM1_Init+0xa8>
    Error_Handler();
 80024c0:	f7ff fc10 	bl	8001ce4 <Error_Handler>
  sBreakDeadTimeConfig.DeadTime = 0b01011111;
 80024c4:	225f      	movs	r2, #95	; 0x5f
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024c6:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.DeadTime = 0b01011111;
 80024c8:	9210      	str	r2, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024ce:	a90d      	add	r1, sp, #52	; 0x34
 80024d0:	4808      	ldr	r0, [pc, #32]	; (80024f4 <MX_TIM1_Init+0xd8>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024d2:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024d4:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024d6:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024d8:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024da:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024dc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024de:	f002 fe25 	bl	800512c <HAL_TIMEx_ConfigBreakDeadTime>
 80024e2:	b108      	cbz	r0, 80024e8 <MX_TIM1_Init+0xcc>
    Error_Handler();
 80024e4:	f7ff fbfe 	bl	8001ce4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <MX_TIM1_Init+0xd8>)
 80024ea:	f7ff ff35 	bl	8002358 <HAL_TIM_MspPostInit>
}
 80024ee:	b014      	add	sp, #80	; 0x50
 80024f0:	bd10      	pop	{r4, pc}
 80024f2:	bf00      	nop
 80024f4:	20000414 	.word	0x20000414
 80024f8:	40012c00 	.word	0x40012c00

080024fc <MX_TIM3_Init>:
{
 80024fc:	b510      	push	{r4, lr}
 80024fe:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002500:	2210      	movs	r2, #16
 8002502:	2100      	movs	r1, #0
 8002504:	a803      	add	r0, sp, #12
 8002506:	f003 f9cd 	bl	80058a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800250a:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800250c:	221c      	movs	r2, #28
 800250e:	4621      	mov	r1, r4
 8002510:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002514:	9401      	str	r4, [sp, #4]
 8002516:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002518:	f003 f9c4 	bl	80058a4 <memset>
  htim3.Instance = TIM3;
 800251c:	4821      	ldr	r0, [pc, #132]	; (80025a4 <MX_TIM3_Init+0xa8>)
 800251e:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <MX_TIM3_Init+0xac>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002520:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 0;
 8002522:	e880 0018 	stmia.w	r0, {r3, r4}
  htim3.Init.Period = 1000;
 8002526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252a:	60c3      	str	r3, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800252c:	2380      	movs	r3, #128	; 0x80
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800252e:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002530:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002532:	f002 fb17 	bl	8004b64 <HAL_TIM_Base_Init>
 8002536:	b108      	cbz	r0, 800253c <MX_TIM3_Init+0x40>
    Error_Handler();
 8002538:	f7ff fbd4 	bl	8001ce4 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800253c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002540:	a903      	add	r1, sp, #12
 8002542:	4818      	ldr	r0, [pc, #96]	; (80025a4 <MX_TIM3_Init+0xa8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002544:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002546:	f002 f80d 	bl	8004564 <HAL_TIM_ConfigClockSource>
 800254a:	b108      	cbz	r0, 8002550 <MX_TIM3_Init+0x54>
    Error_Handler();
 800254c:	f7ff fbca 	bl	8001ce4 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002550:	4814      	ldr	r0, [pc, #80]	; (80025a4 <MX_TIM3_Init+0xa8>)
 8002552:	f002 fbb3 	bl	8004cbc <HAL_TIM_PWM_Init>
 8002556:	b108      	cbz	r0, 800255c <MX_TIM3_Init+0x60>
    Error_Handler();
 8002558:	f7ff fbc4 	bl	8001ce4 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255c:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800255e:	a901      	add	r1, sp, #4
 8002560:	4810      	ldr	r0, [pc, #64]	; (80025a4 <MX_TIM3_Init+0xa8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002562:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002564:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002566:	f002 fe55 	bl	8005214 <HAL_TIMEx_MasterConfigSynchronization>
 800256a:	b108      	cbz	r0, 8002570 <MX_TIM3_Init+0x74>
    Error_Handler();
 800256c:	f7ff fbba 	bl	8001ce4 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002570:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002572:	2200      	movs	r2, #0
 8002574:	a907      	add	r1, sp, #28
 8002576:	480b      	ldr	r0, [pc, #44]	; (80025a4 <MX_TIM3_Init+0xa8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002578:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 800257a:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800257c:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800257e:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002580:	f002 fcec 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 8002584:	b108      	cbz	r0, 800258a <MX_TIM3_Init+0x8e>
    Error_Handler();
 8002586:	f7ff fbad 	bl	8001ce4 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800258a:	2204      	movs	r2, #4
 800258c:	a907      	add	r1, sp, #28
 800258e:	4805      	ldr	r0, [pc, #20]	; (80025a4 <MX_TIM3_Init+0xa8>)
 8002590:	f002 fce4 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 8002594:	b108      	cbz	r0, 800259a <MX_TIM3_Init+0x9e>
    Error_Handler();
 8002596:	f7ff fba5 	bl	8001ce4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 800259a:	4802      	ldr	r0, [pc, #8]	; (80025a4 <MX_TIM3_Init+0xa8>)
 800259c:	f7ff fedc 	bl	8002358 <HAL_TIM_MspPostInit>
}
 80025a0:	b00e      	add	sp, #56	; 0x38
 80025a2:	bd10      	pop	{r4, pc}
 80025a4:	200003d4 	.word	0x200003d4
 80025a8:	40000400 	.word	0x40000400

080025ac <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025ac:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 80025ae:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 80025b2:	480a      	ldr	r0, [pc, #40]	; (80025dc <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 80025b4:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025b6:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 80025b8:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025bc:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025be:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025c0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025c2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025c4:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025ca:	f002 ff53 	bl	8005474 <HAL_UART_Init>
 80025ce:	b118      	cbz	r0, 80025d8 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80025d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80025d4:	f7ff bb86 	b.w	8001ce4 <Error_Handler>
 80025d8:	bd08      	pop	{r3, pc}
 80025da:	bf00      	nop
 80025dc:	200004d8 	.word	0x200004d8
 80025e0:	40013800 	.word	0x40013800

080025e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	2710      	movs	r7, #16
{
 80025ea:	4606      	mov	r6, r0
 80025ec:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ee:	463a      	mov	r2, r7
 80025f0:	2100      	movs	r1, #0
 80025f2:	a802      	add	r0, sp, #8
 80025f4:	f003 f956 	bl	80058a4 <memset>
  if(uartHandle->Instance==USART1)
 80025f8:	6832      	ldr	r2, [r6, #0]
 80025fa:	4b28      	ldr	r3, [pc, #160]	; (800269c <HAL_UART_MspInit+0xb8>)
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d14a      	bne.n	8002696 <HAL_UART_MspInit+0xb2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002600:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002604:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002606:	2500      	movs	r5, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8002608:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800260c:	619a      	str	r2, [r3, #24]
 800260e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = RX_Pin;
 8002610:	f04f 0880 	mov.w	r8, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8002614:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002618:	9200      	str	r2, [sp, #0]
 800261a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800261c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 800261e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002620:	f042 0208 	orr.w	r2, r2, #8
 8002624:	619a      	str	r2, [r3, #24]
 8002626:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8002628:	481d      	ldr	r0, [pc, #116]	; (80026a0 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = TX_Pin;
 8002632:	2340      	movs	r3, #64	; 0x40
 8002634:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002636:	2302      	movs	r3, #2
 8002638:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800263a:	2303      	movs	r3, #3
 800263c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 800263e:	f001 f86d 	bl	800371c <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8002642:	4817      	ldr	r0, [pc, #92]	; (80026a0 <HAL_UART_MspInit+0xbc>)
 8002644:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = RX_Pin;
 8002646:	f8cd 8008 	str.w	r8, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800264a:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 800264e:	f001 f865 	bl	800371c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002652:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <HAL_UART_MspInit+0xc0>)

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002654:	4c14      	ldr	r4, [pc, #80]	; (80026a8 <HAL_UART_MspInit+0xc4>)
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002656:	6853      	ldr	r3, [r2, #4]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002658:	4620      	mov	r0, r4
    __HAL_AFIO_REMAP_USART1_ENABLE();
 800265a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	6053      	str	r3, [r2, #4]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002664:	4b11      	ldr	r3, [pc, #68]	; (80026ac <HAL_UART_MspInit+0xc8>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002666:	60a5      	str	r5, [r4, #8]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002668:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800266c:	f8c4 800c 	str.w	r8, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002670:	6125      	str	r5, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002672:	6165      	str	r5, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002674:	61a5      	str	r5, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002676:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002678:	f000 fc6a 	bl	8002f50 <HAL_DMA_Init>
 800267c:	b108      	cbz	r0, 8002682 <HAL_UART_MspInit+0x9e>
    {
      Error_Handler();
 800267e:	f7ff fb31 	bl	8001ce4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 2);
 8002682:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002684:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 2);
 8002686:	2202      	movs	r2, #2
 8002688:	2103      	movs	r1, #3
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800268a:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 2);
 800268c:	f000 fbd4 	bl	8002e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002690:	2025      	movs	r0, #37	; 0x25
 8002692:	f000 fc13 	bl	8002ebc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002696:	b006      	add	sp, #24
 8002698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800269c:	40013800 	.word	0x40013800
 80026a0:	40010c00 	.word	0x40010c00
 80026a4:	40010000 	.word	0x40010000
 80026a8:	20000494 	.word	0x20000494
 80026ac:	40020044 	.word	0x40020044

080026b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b2:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <HAL_InitTick+0x3c>)
{
 80026b4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b6:	7818      	ldrb	r0, [r3, #0]
 80026b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026bc:	fbb3 f3f0 	udiv	r3, r3, r0
 80026c0:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <HAL_InitTick+0x40>)
 80026c2:	6810      	ldr	r0, [r2, #0]
 80026c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80026c8:	f000 fc0e 	bl	8002ee8 <HAL_SYSTICK_Config>
 80026cc:	4604      	mov	r4, r0
 80026ce:	b958      	cbnz	r0, 80026e8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d0:	2d0f      	cmp	r5, #15
 80026d2:	d809      	bhi.n	80026e8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026d4:	4602      	mov	r2, r0
 80026d6:	4629      	mov	r1, r5
 80026d8:	f04f 30ff 	mov.w	r0, #4294967295
 80026dc:	f000 fbac 	bl	8002e38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <HAL_InitTick+0x44>)
 80026e2:	4620      	mov	r0, r4
 80026e4:	601d      	str	r5, [r3, #0]
 80026e6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80026e8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80026ea:	bd38      	pop	{r3, r4, r5, pc}
 80026ec:	2000005c 	.word	0x2000005c
 80026f0:	20000058 	.word	0x20000058
 80026f4:	20000060 	.word	0x20000060

080026f8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026f8:	4a07      	ldr	r2, [pc, #28]	; (8002718 <HAL_Init+0x20>)
{
 80026fa:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026fc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026fe:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002700:	f043 0310 	orr.w	r3, r3, #16
 8002704:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002706:	f000 fb79 	bl	8002dfc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800270a:	2000      	movs	r0, #0
 800270c:	f7ff ffd0 	bl	80026b0 <HAL_InitTick>
  HAL_MspInit();
 8002710:	f7ff faea 	bl	8001ce8 <HAL_MspInit>
}
 8002714:	2000      	movs	r0, #0
 8002716:	bd08      	pop	{r3, pc}
 8002718:	40022000 	.word	0x40022000

0800271c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800271c:	4a03      	ldr	r2, [pc, #12]	; (800272c <HAL_IncTick+0x10>)
 800271e:	4b04      	ldr	r3, [pc, #16]	; (8002730 <HAL_IncTick+0x14>)
 8002720:	6811      	ldr	r1, [r2, #0]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	440b      	add	r3, r1
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000518 	.word	0x20000518
 8002730:	2000005c 	.word	0x2000005c

08002734 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002734:	4b01      	ldr	r3, [pc, #4]	; (800273c <HAL_GetTick+0x8>)
 8002736:	6818      	ldr	r0, [r3, #0]
}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000518 	.word	0x20000518

08002740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002740:	b538      	push	{r3, r4, r5, lr}
 8002742:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002744:	f7ff fff6 	bl	8002734 <HAL_GetTick>
 8002748:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800274a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800274c:	bf1e      	ittt	ne
 800274e:	4b04      	ldrne	r3, [pc, #16]	; (8002760 <HAL_Delay+0x20>)
 8002750:	781b      	ldrbne	r3, [r3, #0]
 8002752:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002754:	f7ff ffee 	bl	8002734 <HAL_GetTick>
 8002758:	1b40      	subs	r0, r0, r5
 800275a:	4284      	cmp	r4, r0
 800275c:	d8fa      	bhi.n	8002754 <HAL_Delay+0x14>
  {
  }
}
 800275e:	bd38      	pop	{r3, r4, r5, pc}
 8002760:	2000005c 	.word	0x2000005c

08002764 <HAL_ADC_ConvCpltCallback>:
 8002764:	4770      	bx	lr

08002766 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002766:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002768:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800276a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800276c:	f012 0f50 	tst.w	r2, #80	; 0x50
 8002770:	d11b      	bne.n	80027aa <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002778:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	6892      	ldr	r2, [r2, #8]
 800277e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002782:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002786:	d10c      	bne.n	80027a2 <ADC_DMAConvCplt+0x3c>
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	b952      	cbnz	r2, 80027a2 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800278c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800278e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002796:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002798:	bf5e      	ittt	pl
 800279a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 800279c:	f042 0201 	orrpl.w	r2, r2, #1
 80027a0:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ffde 	bl	8002764 <HAL_ADC_ConvCpltCallback>
 80027a8:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80027aa:	6a1b      	ldr	r3, [r3, #32]
  }
}
 80027ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4718      	bx	r3

080027b4 <HAL_ADC_ConvHalfCpltCallback>:
 80027b4:	4770      	bx	lr

080027b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027b6:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80027b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80027ba:	f7ff fffb 	bl	80027b4 <HAL_ADC_ConvHalfCpltCallback>
 80027be:	bd08      	pop	{r3, pc}

080027c0 <HAL_ADC_LevelOutOfWindowCallback>:
 80027c0:	4770      	bx	lr
	...

080027c4 <HAL_ADC_IRQHandler>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80027c4:	6803      	ldr	r3, [r0, #0]
 80027c6:	4a49      	ldr	r2, [pc, #292]	; (80028ec <HAL_ADC_IRQHandler+0x128>)
{
 80027c8:	b510      	push	{r4, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80027ca:	4293      	cmp	r3, r2
{
 80027cc:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80027ce:	d008      	beq.n	80027e2 <HAL_ADC_IRQHandler+0x1e>
 80027d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d004      	beq.n	80027e2 <HAL_ADC_IRQHandler+0x1e>
 80027d8:	f240 51d9 	movw	r1, #1497	; 0x5d9
 80027dc:	4844      	ldr	r0, [pc, #272]	; (80028f0 <HAL_ADC_IRQHandler+0x12c>)
 80027de:	f7ff fa82 	bl	8001ce6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80027e2:	68e3      	ldr	r3, [r4, #12]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d904      	bls.n	80027f2 <HAL_ADC_IRQHandler+0x2e>
 80027e8:	f240 51da 	movw	r1, #1498	; 0x5da
 80027ec:	4840      	ldr	r0, [pc, #256]	; (80028f0 <HAL_ADC_IRQHandler+0x12c>)
 80027ee:	f7ff fa7a 	bl	8001ce6 <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80027f2:	6923      	ldr	r3, [r4, #16]
 80027f4:	3b01      	subs	r3, #1
 80027f6:	2b0f      	cmp	r3, #15
 80027f8:	d904      	bls.n	8002804 <HAL_ADC_IRQHandler+0x40>
 80027fa:	f240 51db 	movw	r1, #1499	; 0x5db
 80027fe:	483c      	ldr	r0, [pc, #240]	; (80028f0 <HAL_ADC_IRQHandler+0x12c>)
 8002800:	f7ff fa71 	bl	8001ce6 <assert_failed>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	0690      	lsls	r0, r2, #26
 800280a:	d527      	bpl.n	800285c <HAL_ADC_IRQHandler+0x98>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	0791      	lsls	r1, r2, #30
 8002810:	d524      	bpl.n	800285c <HAL_ADC_IRQHandler+0x98>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002812:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002814:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002816:	bf5e      	ittt	pl
 8002818:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 800281a:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 800281e:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002826:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800282a:	d110      	bne.n	800284e <HAL_ADC_IRQHandler+0x8a>
 800282c:	68e2      	ldr	r2, [r4, #12]
 800282e:	b972      	cbnz	r2, 800284e <HAL_ADC_IRQHandler+0x8a>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	f022 0220 	bic.w	r2, r2, #32
 8002836:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002838:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800283a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800283e:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002840:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002842:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002844:	bf5e      	ittt	pl
 8002846:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8002848:	f043 0301 	orrpl.w	r3, r3, #1
 800284c:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff ff88 	bl	8002764 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002854:	f06f 0212 	mvn.w	r2, #18
 8002858:	6823      	ldr	r3, [r4, #0]
 800285a:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	0610      	lsls	r0, r2, #24
 8002862:	d530      	bpl.n	80028c6 <HAL_ADC_IRQHandler+0x102>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	0751      	lsls	r1, r2, #29
 8002868:	d52d      	bpl.n	80028c6 <HAL_ADC_IRQHandler+0x102>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800286a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800286c:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800286e:	bf5e      	ittt	pl
 8002870:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8002872:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8002876:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 800287e:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8002882:	d00a      	beq.n	800289a <HAL_ADC_IRQHandler+0xd6>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002884:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002886:	0550      	lsls	r0, r2, #21
 8002888:	d416      	bmi.n	80028b8 <HAL_ADC_IRQHandler+0xf4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002890:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002894:	d110      	bne.n	80028b8 <HAL_ADC_IRQHandler+0xf4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002896:	68e2      	ldr	r2, [r4, #12]
 8002898:	b972      	cbnz	r2, 80028b8 <HAL_ADC_IRQHandler+0xf4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028a0:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80028a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028a8:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80028aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028ac:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ae:	bf5e      	ittt	pl
 80028b0:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80028b2:	f043 0301 	orrpl.w	r3, r3, #1
 80028b6:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80028b8:	4620      	mov	r0, r4
 80028ba:	f000 fa9d 	bl	8002df8 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80028be:	f06f 020c 	mvn.w	r2, #12
 80028c2:	6823      	ldr	r3, [r4, #0]
 80028c4:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	0652      	lsls	r2, r2, #25
 80028cc:	d50d      	bpl.n	80028ea <HAL_ADC_IRQHandler+0x126>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	07db      	lsls	r3, r3, #31
 80028d2:	d50a      	bpl.n	80028ea <HAL_ADC_IRQHandler+0x126>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028d6:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028de:	f7ff ff6f 	bl	80027c0 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80028e2:	f06f 0201 	mvn.w	r2, #1
 80028e6:	6823      	ldr	r3, [r4, #0]
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	bd10      	pop	{r4, pc}
 80028ec:	40012400 	.word	0x40012400
 80028f0:	080062d8 	.word	0x080062d8

080028f4 <HAL_ADC_ErrorCallback>:
{
 80028f4:	4770      	bx	lr

080028f6 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80028f8:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80028fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002900:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002902:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800290a:	f7ff fff3 	bl	80028f4 <HAL_ADC_ErrorCallback>
 800290e:	bd08      	pop	{r3, pc}

08002910 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8002910:	2300      	movs	r3, #0
{ 
 8002912:	b573      	push	{r0, r1, r4, r5, r6, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002914:	4a51      	ldr	r2, [pc, #324]	; (8002a5c <HAL_ADC_ConfigChannel+0x14c>)
  __IO uint32_t wait_loop_index = 0U;
 8002916:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002918:	6803      	ldr	r3, [r0, #0]
{ 
 800291a:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800291c:	4293      	cmp	r3, r2
{ 
 800291e:	460d      	mov	r5, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002920:	d008      	beq.n	8002934 <HAL_ADC_ConfigChannel+0x24>
 8002922:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002926:	4293      	cmp	r3, r2
 8002928:	d004      	beq.n	8002934 <HAL_ADC_ConfigChannel+0x24>
 800292a:	f240 61aa 	movw	r1, #1706	; 0x6aa
 800292e:	484c      	ldr	r0, [pc, #304]	; (8002a60 <HAL_ADC_ConfigChannel+0x150>)
 8002930:	f7ff f9d9 	bl	8001ce6 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002934:	682b      	ldr	r3, [r5, #0]
 8002936:	2b11      	cmp	r3, #17
 8002938:	d904      	bls.n	8002944 <HAL_ADC_ConfigChannel+0x34>
 800293a:	f240 61ab 	movw	r1, #1707	; 0x6ab
 800293e:	4848      	ldr	r0, [pc, #288]	; (8002a60 <HAL_ADC_ConfigChannel+0x150>)
 8002940:	f7ff f9d1 	bl	8001ce6 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002944:	686b      	ldr	r3, [r5, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	2b0f      	cmp	r3, #15
 800294a:	d904      	bls.n	8002956 <HAL_ADC_ConfigChannel+0x46>
 800294c:	f240 61ac 	movw	r1, #1708	; 0x6ac
 8002950:	4843      	ldr	r0, [pc, #268]	; (8002a60 <HAL_ADC_ConfigChannel+0x150>)
 8002952:	f7ff f9c8 	bl	8001ce6 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002956:	68ab      	ldr	r3, [r5, #8]
 8002958:	2b07      	cmp	r3, #7
 800295a:	d904      	bls.n	8002966 <HAL_ADC_ConfigChannel+0x56>
 800295c:	f240 61ad 	movw	r1, #1709	; 0x6ad
 8002960:	483f      	ldr	r0, [pc, #252]	; (8002a60 <HAL_ADC_ConfigChannel+0x150>)
 8002962:	f7ff f9c0 	bl	8001ce6 <assert_failed>
  __HAL_LOCK(hadc);
 8002966:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800296a:	2b01      	cmp	r3, #1
 800296c:	d073      	beq.n	8002a56 <HAL_ADC_ConfigChannel+0x146>
 800296e:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8002970:	6868      	ldr	r0, [r5, #4]
  __HAL_LOCK(hadc);
 8002972:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8002976:	2806      	cmp	r0, #6
 8002978:	6822      	ldr	r2, [r4, #0]
 800297a:	6829      	ldr	r1, [r5, #0]
 800297c:	ea4f 0380 	mov.w	r3, r0, lsl #2
 8002980:	d824      	bhi.n	80029cc <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002982:	4403      	add	r3, r0
 8002984:	201f      	movs	r0, #31
 8002986:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8002988:	3b05      	subs	r3, #5
 800298a:	4098      	lsls	r0, r3
 800298c:	ea26 0000 	bic.w	r0, r6, r0
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	4303      	orrs	r3, r0
 8002996:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002998:	2909      	cmp	r1, #9
 800299a:	68ad      	ldr	r5, [r5, #8]
 800299c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80029a0:	d92e      	bls.n	8002a00 <HAL_ADC_ConfigChannel+0xf0>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029a2:	2607      	movs	r6, #7
 80029a4:	440b      	add	r3, r1
 80029a6:	68d0      	ldr	r0, [r2, #12]
 80029a8:	3b1e      	subs	r3, #30
 80029aa:	409e      	lsls	r6, r3
 80029ac:	ea20 0006 	bic.w	r0, r0, r6
 80029b0:	fa05 f303 	lsl.w	r3, r5, r3
 80029b4:	4303      	orrs	r3, r0
 80029b6:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029b8:	f1a1 0310 	sub.w	r3, r1, #16
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d92a      	bls.n	8002a16 <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c0:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80029c2:	2300      	movs	r3, #0
 80029c4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80029c8:	b002      	add	sp, #8
 80029ca:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80029cc:	280c      	cmp	r0, #12
 80029ce:	d80b      	bhi.n	80029e8 <HAL_ADC_ConfigChannel+0xd8>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029d0:	4403      	add	r3, r0
 80029d2:	201f      	movs	r0, #31
 80029d4:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80029d6:	3b23      	subs	r3, #35	; 0x23
 80029d8:	4098      	lsls	r0, r3
 80029da:	ea26 0000 	bic.w	r0, r6, r0
 80029de:	fa01 f303 	lsl.w	r3, r1, r3
 80029e2:	4303      	orrs	r3, r0
 80029e4:	6313      	str	r3, [r2, #48]	; 0x30
 80029e6:	e7d7      	b.n	8002998 <HAL_ADC_ConfigChannel+0x88>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029e8:	4403      	add	r3, r0
 80029ea:	201f      	movs	r0, #31
 80029ec:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80029ee:	3b41      	subs	r3, #65	; 0x41
 80029f0:	4098      	lsls	r0, r3
 80029f2:	ea26 0000 	bic.w	r0, r6, r0
 80029f6:	fa01 f303 	lsl.w	r3, r1, r3
 80029fa:	4303      	orrs	r3, r0
 80029fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80029fe:	e7cb      	b.n	8002998 <HAL_ADC_ConfigChannel+0x88>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a00:	2607      	movs	r6, #7
 8002a02:	6910      	ldr	r0, [r2, #16]
 8002a04:	440b      	add	r3, r1
 8002a06:	409e      	lsls	r6, r3
 8002a08:	ea20 0006 	bic.w	r0, r0, r6
 8002a0c:	fa05 f303 	lsl.w	r3, r5, r3
 8002a10:	4303      	orrs	r3, r0
 8002a12:	6113      	str	r3, [r2, #16]
 8002a14:	e7d0      	b.n	80029b8 <HAL_ADC_ConfigChannel+0xa8>
    if (hadc->Instance == ADC1)
 8002a16:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <HAL_ADC_ConfigChannel+0x14c>)
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d116      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x13a>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a1c:	6893      	ldr	r3, [r2, #8]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	d4ce      	bmi.n	80029c0 <HAL_ADC_ConfigChannel+0xb0>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a22:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a24:	2910      	cmp	r1, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a2a:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a2c:	d1c8      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0xb0>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <HAL_ADC_ConfigChannel+0x154>)
 8002a30:	4a0d      	ldr	r2, [pc, #52]	; (8002a68 <HAL_ADC_ConfigChannel+0x158>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a38:	230a      	movs	r3, #10
 8002a3a:	4353      	muls	r3, r2
            wait_loop_index--;
 8002a3c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002a3e:	9b01      	ldr	r3, [sp, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0bd      	beq.n	80029c0 <HAL_ADC_ConfigChannel+0xb0>
            wait_loop_index--;
 8002a44:	9b01      	ldr	r3, [sp, #4]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	e7f8      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x12c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002a4c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a4e:	f043 0320 	orr.w	r3, r3, #32
 8002a52:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a54:	e7b5      	b.n	80029c2 <HAL_ADC_ConfigChannel+0xb2>
  __HAL_LOCK(hadc);
 8002a56:	2002      	movs	r0, #2
 8002a58:	e7b6      	b.n	80029c8 <HAL_ADC_ConfigChannel+0xb8>
 8002a5a:	bf00      	nop
 8002a5c:	40012400 	.word	0x40012400
 8002a60:	080062d8 	.word	0x080062d8
 8002a64:	20000058 	.word	0x20000058
 8002a68:	000f4240 	.word	0x000f4240

08002a6c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8002a6c:	2300      	movs	r3, #0
{
 8002a6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002a70:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a72:	6803      	ldr	r3, [r0, #0]
{
 8002a74:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	07d2      	lsls	r2, r2, #31
 8002a7a:	d502      	bpl.n	8002a82 <ADC_Enable+0x16>
  return HAL_OK;
 8002a7c:	2000      	movs	r0, #0
}
 8002a7e:	b002      	add	sp, #8
 8002a80:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
 8002a88:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <ADC_Enable+0x68>)
 8002a8c:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <ADC_Enable+0x6c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8002a94:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002a96:	9b01      	ldr	r3, [sp, #4]
 8002a98:	b9c3      	cbnz	r3, 8002acc <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8002a9a:	f7ff fe4b 	bl	8002734 <HAL_GetTick>
 8002a9e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002aa0:	6823      	ldr	r3, [r4, #0]
 8002aa2:	689d      	ldr	r5, [r3, #8]
 8002aa4:	f015 0501 	ands.w	r5, r5, #1
 8002aa8:	d1e8      	bne.n	8002a7c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002aaa:	f7ff fe43 	bl	8002734 <HAL_GetTick>
 8002aae:	1b80      	subs	r0, r0, r6
 8002ab0:	2802      	cmp	r0, #2
 8002ab2:	d9f5      	bls.n	8002aa0 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8002ab6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aba:	f043 0310 	orr.w	r3, r3, #16
 8002abe:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8002ac2:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002aca:	e7d8      	b.n	8002a7e <ADC_Enable+0x12>
      wait_loop_index--;
 8002acc:	9b01      	ldr	r3, [sp, #4]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	e7e0      	b.n	8002a94 <ADC_Enable+0x28>
 8002ad2:	bf00      	nop
 8002ad4:	20000058 	.word	0x20000058
 8002ad8:	000f4240 	.word	0x000f4240

08002adc <HAL_ADC_Start_DMA>:
{
 8002adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ade:	4617      	mov	r7, r2
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
 8002ae0:	4d40      	ldr	r5, [pc, #256]	; (8002be4 <HAL_ADC_Start_DMA+0x108>)
 8002ae2:	6802      	ldr	r2, [r0, #0]
{
 8002ae4:	4604      	mov	r4, r0
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
 8002ae6:	42aa      	cmp	r2, r5
{
 8002ae8:	460e      	mov	r6, r1
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
 8002aea:	d004      	beq.n	8002af6 <HAL_ADC_Start_DMA+0x1a>
 8002aec:	f240 41fc 	movw	r1, #1276	; 0x4fc
 8002af0:	483d      	ldr	r0, [pc, #244]	; (8002be8 <HAL_ADC_Start_DMA+0x10c>)
 8002af2:	f7ff f8f8 	bl	8001ce6 <assert_failed>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002af6:	6823      	ldr	r3, [r4, #0]
 8002af8:	42ab      	cmp	r3, r5
 8002afa:	d002      	beq.n	8002b02 <HAL_ADC_Start_DMA+0x26>
 8002afc:	4a3b      	ldr	r2, [pc, #236]	; (8002bec <HAL_ADC_Start_DMA+0x110>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d104      	bne.n	8002b0c <HAL_ADC_Start_DMA+0x30>
 8002b02:	4b38      	ldr	r3, [pc, #224]	; (8002be4 <HAL_ADC_Start_DMA+0x108>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002b0a:	d167      	bne.n	8002bdc <HAL_ADC_Start_DMA+0x100>
    __HAL_LOCK(hadc);
 8002b0c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d065      	beq.n	8002be0 <HAL_ADC_Start_DMA+0x104>
 8002b14:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8002b16:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8002b18:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8002b1c:	f7ff ffa6 	bl	8002a6c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002b20:	4605      	mov	r5, r0
 8002b22:	2800      	cmp	r0, #0
 8002b24:	d156      	bne.n	8002bd4 <HAL_ADC_Start_DMA+0xf8>
      ADC_STATE_CLR_SET(hadc->State,
 8002b26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b28:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8002b2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b2e:	f023 0301 	bic.w	r3, r3, #1
 8002b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b36:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b38:	4b2c      	ldr	r3, [pc, #176]	; (8002bec <HAL_ADC_Start_DMA+0x110>)
 8002b3a:	4299      	cmp	r1, r3
 8002b3c:	d104      	bne.n	8002b48 <HAL_ADC_Start_DMA+0x6c>
 8002b3e:	4a29      	ldr	r2, [pc, #164]	; (8002be4 <HAL_ADC_Start_DMA+0x108>)
 8002b40:	6853      	ldr	r3, [r2, #4]
 8002b42:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002b46:	d13f      	bne.n	8002bc8 <HAL_ADC_Start_DMA+0xec>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b4e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b50:	684b      	ldr	r3, [r1, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b52:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b54:	bf48      	it	mi
 8002b56:	6aa3      	ldrmi	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b58:	6a20      	ldr	r0, [r4, #32]
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b5a:	bf42      	ittt	mi
 8002b5c:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 8002b60:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 8002b64:	62a3      	strmi	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b68:	4632      	mov	r2, r6
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b6a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b6e:	bf18      	it	ne
 8002b70:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b72:	f101 014c 	add.w	r1, r1, #76	; 0x4c
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b76:	bf18      	it	ne
 8002b78:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8002b7c:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b84:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <HAL_ADC_Start_DMA+0x114>)
 8002b86:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b88:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <HAL_ADC_Start_DMA+0x118>)
 8002b8a:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b8c:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <HAL_ADC_Start_DMA+0x11c>)
 8002b8e:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002b90:	f06f 0302 	mvn.w	r3, #2
 8002b94:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b98:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8002b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba0:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ba4:	463b      	mov	r3, r7
 8002ba6:	f000 fa63 	bl	8003070 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002baa:	6823      	ldr	r3, [r4, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002bb2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	bf0c      	ite	eq
 8002bba:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002bbe:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8002bc2:	609a      	str	r2, [r3, #8]
}
 8002bc4:	4628      	mov	r0, r5
 8002bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002bca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bce:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002bd0:	6853      	ldr	r3, [r2, #4]
 8002bd2:	e7be      	b.n	8002b52 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002bda:	e7f3      	b.n	8002bc4 <HAL_ADC_Start_DMA+0xe8>
    tmp_hal_status = HAL_ERROR;
 8002bdc:	2501      	movs	r5, #1
 8002bde:	e7f1      	b.n	8002bc4 <HAL_ADC_Start_DMA+0xe8>
    __HAL_LOCK(hadc);
 8002be0:	2502      	movs	r5, #2
 8002be2:	e7ef      	b.n	8002bc4 <HAL_ADC_Start_DMA+0xe8>
 8002be4:	40012400 	.word	0x40012400
 8002be8:	080062d8 	.word	0x080062d8
 8002bec:	40012800 	.word	0x40012800
 8002bf0:	08002767 	.word	0x08002767
 8002bf4:	080027b7 	.word	0x080027b7
 8002bf8:	080028f7 	.word	0x080028f7

08002bfc <ADC_ConversionStop_Disable>:
{
 8002bfc:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bfe:	6803      	ldr	r3, [r0, #0]
{
 8002c00:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	07d2      	lsls	r2, r2, #31
 8002c06:	d401      	bmi.n	8002c0c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8002c08:	2000      	movs	r0, #0
 8002c0a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002c14:	f7ff fd8e 	bl	8002734 <HAL_GetTick>
 8002c18:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	07db      	lsls	r3, r3, #31
 8002c20:	d5f2      	bpl.n	8002c08 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c22:	f7ff fd87 	bl	8002734 <HAL_GetTick>
 8002c26:	1b40      	subs	r0, r0, r5
 8002c28:	2802      	cmp	r0, #2
 8002c2a:	d9f6      	bls.n	8002c1a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c2e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c30:	f043 0310 	orr.w	r3, r3, #16
 8002c34:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c3e:	bd38      	pop	{r3, r4, r5, pc}

08002c40 <HAL_ADC_Init>:
{
 8002c40:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8002c42:	4604      	mov	r4, r0
 8002c44:	2800      	cmp	r0, #0
 8002c46:	f000 80c9 	beq.w	8002ddc <HAL_ADC_Init+0x19c>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002c4a:	6803      	ldr	r3, [r0, #0]
 8002c4c:	4a66      	ldr	r2, [pc, #408]	; (8002de8 <HAL_ADC_Init+0x1a8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d008      	beq.n	8002c64 <HAL_ADC_Init+0x24>
 8002c52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d004      	beq.n	8002c64 <HAL_ADC_Init+0x24>
 8002c5a:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8002c5e:	4863      	ldr	r0, [pc, #396]	; (8002dec <HAL_ADC_Init+0x1ac>)
 8002c60:	f7ff f841 	bl	8001ce6 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002c64:	6863      	ldr	r3, [r4, #4]
 8002c66:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8002c6a:	d004      	beq.n	8002c76 <HAL_ADC_Init+0x36>
 8002c6c:	f240 1183 	movw	r1, #387	; 0x183
 8002c70:	485e      	ldr	r0, [pc, #376]	; (8002dec <HAL_ADC_Init+0x1ac>)
 8002c72:	f7ff f838 	bl	8001ce6 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002c76:	68a3      	ldr	r3, [r4, #8]
 8002c78:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8002c7c:	d004      	beq.n	8002c88 <HAL_ADC_Init+0x48>
 8002c7e:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8002c82:	485a      	ldr	r0, [pc, #360]	; (8002dec <HAL_ADC_Init+0x1ac>)
 8002c84:	f7ff f82f 	bl	8001ce6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002c88:	68e3      	ldr	r3, [r4, #12]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d904      	bls.n	8002c98 <HAL_ADC_Init+0x58>
 8002c8e:	f240 1185 	movw	r1, #389	; 0x185
 8002c92:	4856      	ldr	r0, [pc, #344]	; (8002dec <HAL_ADC_Init+0x1ac>)
 8002c94:	f7ff f827 	bl	8001ce6 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002c98:	69e3      	ldr	r3, [r4, #28]
 8002c9a:	f433 2220 	bics.w	r2, r3, #655360	; 0xa0000
 8002c9e:	d00c      	beq.n	8002cba <HAL_ADC_Init+0x7a>
 8002ca0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002ca4:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
 8002ca8:	d007      	beq.n	8002cba <HAL_ADC_Init+0x7a>
 8002caa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cae:	d004      	beq.n	8002cba <HAL_ADC_Init+0x7a>
 8002cb0:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8002cb4:	484d      	ldr	r0, [pc, #308]	; (8002dec <HAL_ADC_Init+0x1ac>)
 8002cb6:	f7ff f816 	bl	8001ce6 <assert_failed>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cba:	68a3      	ldr	r3, [r4, #8]
 8002cbc:	b1db      	cbz	r3, 8002cf6 <HAL_ADC_Init+0xb6>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002cbe:	6923      	ldr	r3, [r4, #16]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	2b0f      	cmp	r3, #15
 8002cc4:	d904      	bls.n	8002cd0 <HAL_ADC_Init+0x90>
 8002cc6:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8002cca:	4848      	ldr	r0, [pc, #288]	; (8002dec <HAL_ADC_Init+0x1ac>)
 8002ccc:	f7ff f80b 	bl	8001ce6 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002cd0:	6963      	ldr	r3, [r4, #20]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d904      	bls.n	8002ce0 <HAL_ADC_Init+0xa0>
 8002cd6:	f240 118b 	movw	r1, #395	; 0x18b
 8002cda:	4844      	ldr	r0, [pc, #272]	; (8002dec <HAL_ADC_Init+0x1ac>)
 8002cdc:	f7ff f803 	bl	8001ce6 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ce0:	6963      	ldr	r3, [r4, #20]
 8002ce2:	b143      	cbz	r3, 8002cf6 <HAL_ADC_Init+0xb6>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002ce4:	69a3      	ldr	r3, [r4, #24]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	2b07      	cmp	r3, #7
 8002cea:	d904      	bls.n	8002cf6 <HAL_ADC_Init+0xb6>
 8002cec:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8002cf0:	483e      	ldr	r0, [pc, #248]	; (8002dec <HAL_ADC_Init+0x1ac>)
 8002cf2:	f7fe fff8 	bl	8001ce6 <assert_failed>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002cf8:	b92b      	cbnz	r3, 8002d06 <HAL_ADC_Init+0xc6>
    ADC_CLEAR_ERRORCODE(hadc);
 8002cfa:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002cfc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002d00:	4620      	mov	r0, r4
 8002d02:	f7fd fd65 	bl	80007d0 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d06:	4620      	mov	r0, r4
 8002d08:	f7ff ff78 	bl	8002bfc <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d0e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8002d12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d14:	d164      	bne.n	8002de0 <HAL_ADC_Init+0x1a0>
 8002d16:	2800      	cmp	r0, #0
 8002d18:	d162      	bne.n	8002de0 <HAL_ADC_Init+0x1a0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8002d1a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8002d1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8002d20:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8002d22:	f023 0302 	bic.w	r3, r3, #2
 8002d26:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8002d2a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d2c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8002d2e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8002d30:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d32:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8002d36:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d3a:	d038      	beq.n	8002dae <HAL_ADC_Init+0x16e>
 8002d3c:	2901      	cmp	r1, #1
 8002d3e:	bf14      	ite	ne
 8002d40:	4606      	movne	r6, r0
 8002d42:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d46:	6965      	ldr	r5, [r4, #20]
 8002d48:	2d01      	cmp	r5, #1
 8002d4a:	d107      	bne.n	8002d5c <HAL_ADC_Init+0x11c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d130      	bne.n	8002db2 <HAL_ADC_Init+0x172>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d50:	69a3      	ldr	r3, [r4, #24]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8002d58:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8002d5c:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d5e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002d62:	685d      	ldr	r5, [r3, #4]
 8002d64:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8002d68:	ea45 0506 	orr.w	r5, r5, r6
 8002d6c:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002d6e:	689e      	ldr	r6, [r3, #8]
 8002d70:	4d1f      	ldr	r5, [pc, #124]	; (8002df0 <HAL_ADC_Init+0x1b0>)
 8002d72:	ea05 0506 	and.w	r5, r5, r6
 8002d76:	ea45 0502 	orr.w	r5, r5, r2
 8002d7a:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d7c:	d001      	beq.n	8002d82 <HAL_ADC_Init+0x142>
 8002d7e:	2901      	cmp	r1, #1
 8002d80:	d120      	bne.n	8002dc4 <HAL_ADC_Init+0x184>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d82:	6921      	ldr	r1, [r4, #16]
 8002d84:	3901      	subs	r1, #1
 8002d86:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8002d88:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8002d8a:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8002d8e:	4329      	orrs	r1, r5
 8002d90:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d92:	6899      	ldr	r1, [r3, #8]
 8002d94:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <HAL_ADC_Init+0x1b4>)
 8002d96:	400b      	ands	r3, r1
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d115      	bne.n	8002dc8 <HAL_ADC_Init+0x188>
      ADC_CLEAR_ERRORCODE(hadc);
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002da0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002da2:	f023 0303 	bic.w	r3, r3, #3
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	62a3      	str	r3, [r4, #40]	; 0x28
 8002dac:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002dae:	460e      	mov	r6, r1
 8002db0:	e7c9      	b.n	8002d46 <HAL_ADC_Init+0x106>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002db4:	f043 0320 	orr.w	r3, r3, #32
 8002db8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002dc2:	e7cb      	b.n	8002d5c <HAL_ADC_Init+0x11c>
  uint32_t tmp_sqr1 = 0U;
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	e7df      	b.n	8002d88 <HAL_ADC_Init+0x148>
      ADC_STATE_CLR_SET(hadc->State,
 8002dc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002dca:	f023 0312 	bic.w	r3, r3, #18
 8002dce:	f043 0310 	orr.w	r3, r3, #16
 8002dd2:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8002ddc:	2001      	movs	r0, #1
}
 8002dde:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de0:	f043 0310 	orr.w	r3, r3, #16
 8002de4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002de6:	e7f9      	b.n	8002ddc <HAL_ADC_Init+0x19c>
 8002de8:	40012400 	.word	0x40012400
 8002dec:	080062d8 	.word	0x080062d8
 8002df0:	ffe1f7fd 	.word	0xffe1f7fd
 8002df4:	ff1f0efe 	.word	0xff1f0efe

08002df8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002df8:	4770      	bx	lr
	...

08002dfc <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002dfc:	1ec3      	subs	r3, r0, #3
 8002dfe:	2b04      	cmp	r3, #4
{
 8002e00:	b510      	push	{r4, lr}
 8002e02:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002e04:	d903      	bls.n	8002e0e <HAL_NVIC_SetPriorityGrouping+0x12>
 8002e06:	21a2      	movs	r1, #162	; 0xa2
 8002e08:	4809      	ldr	r0, [pc, #36]	; (8002e30 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8002e0a:	f7fe ff6c 	bl	8001ce6 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e0e:	4a09      	ldr	r2, [pc, #36]	; (8002e34 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002e10:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e12:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002e14:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e18:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e1c:	041b      	lsls	r3, r3, #16
 8002e1e:	0c1b      	lsrs	r3, r3, #16
 8002e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002e28:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8002e2a:	60d4      	str	r4, [r2, #12]
 8002e2c:	bd10      	pop	{r4, pc}
 8002e2e:	bf00      	nop
 8002e30:	08006310 	.word	0x08006310
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002e38:	2a0f      	cmp	r2, #15
{ 
 8002e3a:	b570      	push	{r4, r5, r6, lr}
 8002e3c:	4604      	mov	r4, r0
 8002e3e:	460e      	mov	r6, r1
 8002e40:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002e42:	d903      	bls.n	8002e4c <HAL_NVIC_SetPriority+0x14>
 8002e44:	21ba      	movs	r1, #186	; 0xba
 8002e46:	481a      	ldr	r0, [pc, #104]	; (8002eb0 <HAL_NVIC_SetPriority+0x78>)
 8002e48:	f7fe ff4d 	bl	8001ce6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002e4c:	2e0f      	cmp	r6, #15
 8002e4e:	d903      	bls.n	8002e58 <HAL_NVIC_SetPriority+0x20>
 8002e50:	21bb      	movs	r1, #187	; 0xbb
 8002e52:	4817      	ldr	r0, [pc, #92]	; (8002eb0 <HAL_NVIC_SetPriority+0x78>)
 8002e54:	f7fe ff47 	bl	8001ce6 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e58:	4b16      	ldr	r3, [pc, #88]	; (8002eb4 <HAL_NVIC_SetPriority+0x7c>)

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e5a:	2001      	movs	r0, #1
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e5c:	68d9      	ldr	r1, [r3, #12]
 8002e5e:	f3c1 2102 	ubfx	r1, r1, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e62:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e66:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	bf28      	it	cs
 8002e6c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e6e:	2a06      	cmp	r2, #6
 8002e70:	bf94      	ite	ls
 8002e72:	2100      	movls	r1, #0
 8002e74:	3903      	subhi	r1, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e76:	fa00 f203 	lsl.w	r2, r0, r3
 8002e7a:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e7c:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e7e:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e80:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e82:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e84:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) < 0)
 8002e86:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	ea42 0205 	orr.w	r2, r2, r5
 8002e8c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e90:	bfaf      	iteee	ge
 8002e92:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e96:	4b08      	ldrlt	r3, [pc, #32]	; (8002eb8 <HAL_NVIC_SetPriority+0x80>)
 8002e98:	f004 040f 	andlt.w	r4, r4, #15
 8002e9c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9e:	bfa5      	ittet	ge
 8002ea0:	b2d2      	uxtbge	r2, r2
 8002ea2:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea6:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea8:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 8002eac:	bd70      	pop	{r4, r5, r6, pc}
 8002eae:	bf00      	nop
 8002eb0:	08006310 	.word	0x08006310
 8002eb4:	e000ed00 	.word	0xe000ed00
 8002eb8:	e000ed14 	.word	0xe000ed14

08002ebc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ebc:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002ebe:	1e04      	subs	r4, r0, #0
 8002ec0:	da03      	bge.n	8002eca <HAL_NVIC_EnableIRQ+0xe>
 8002ec2:	21ce      	movs	r1, #206	; 0xce
 8002ec4:	4806      	ldr	r0, [pc, #24]	; (8002ee0 <HAL_NVIC_EnableIRQ+0x24>)
 8002ec6:	f7fe ff0e 	bl	8001ce6 <assert_failed>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002eca:	2301      	movs	r3, #1
 8002ecc:	0962      	lsrs	r2, r4, #5
 8002ece:	f004 041f 	and.w	r4, r4, #31
 8002ed2:	fa03 f404 	lsl.w	r4, r3, r4
 8002ed6:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <HAL_NVIC_EnableIRQ+0x28>)
 8002ed8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8002edc:	bd10      	pop	{r4, pc}
 8002ede:	bf00      	nop
 8002ee0:	08006310 	.word	0x08006310
 8002ee4:	e000e100 	.word	0xe000e100

08002ee8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee8:	3801      	subs	r0, #1
 8002eea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002eee:	d20a      	bcs.n	8002f06 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef4:	4a06      	ldr	r2, [pc, #24]	; (8002f10 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002efc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002efe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f00:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002f06:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	e000e010 	.word	0xe000e010
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <HAL_CRC_Init>:
  * @param  hcrc: pointer to a CRC_HandleTypeDef structure that contains
  *         the configuration information for CRC
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002f14:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8002f16:	4604      	mov	r4, r0
 8002f18:	b198      	cbz	r0, 8002f42 <HAL_CRC_Init+0x2e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8002f1a:	6802      	ldr	r2, [r0, #0]
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_CRC_Init+0x34>)
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d003      	beq.n	8002f2a <HAL_CRC_Init+0x16>
 8002f22:	2177      	movs	r1, #119	; 0x77
 8002f24:	4809      	ldr	r0, [pc, #36]	; (8002f4c <HAL_CRC_Init+0x38>)
 8002f26:	f7fe fede 	bl	8001ce6 <assert_failed>

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8002f2a:	7963      	ldrb	r3, [r4, #5]
 8002f2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f30:	b91b      	cbnz	r3, 8002f3a <HAL_CRC_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002f32:	7122      	strb	r2, [r4, #4]
    
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002f34:	4620      	mov	r0, r4
 8002f36:	f7fd fcb1 	bl	800089c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f3a:	2301      	movs	r3, #1
  
  /* Return function status */
  return HAL_OK;
 8002f3c:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8002f3e:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 8002f40:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f42:	2001      	movs	r0, #1
}
 8002f44:	bd10      	pop	{r4, pc}
 8002f46:	bf00      	nop
 8002f48:	40023000 	.word	0x40023000
 8002f4c:	0800634b 	.word	0x0800634b

08002f50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f50:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f52:	4604      	mov	r4, r0
 8002f54:	2800      	cmp	r0, #0
 8002f56:	f000 8081 	beq.w	800305c <HAL_DMA_Init+0x10c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002f5a:	6803      	ldr	r3, [r0, #0]
 8002f5c:	4a40      	ldr	r2, [pc, #256]	; (8003060 <HAL_DMA_Init+0x110>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d015      	beq.n	8002f8e <HAL_DMA_Init+0x3e>
 8002f62:	3214      	adds	r2, #20
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d012      	beq.n	8002f8e <HAL_DMA_Init+0x3e>
 8002f68:	3214      	adds	r2, #20
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00f      	beq.n	8002f8e <HAL_DMA_Init+0x3e>
 8002f6e:	3214      	adds	r2, #20
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00c      	beq.n	8002f8e <HAL_DMA_Init+0x3e>
 8002f74:	3214      	adds	r2, #20
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d009      	beq.n	8002f8e <HAL_DMA_Init+0x3e>
 8002f7a:	3214      	adds	r2, #20
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d006      	beq.n	8002f8e <HAL_DMA_Init+0x3e>
 8002f80:	3214      	adds	r2, #20
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d003      	beq.n	8002f8e <HAL_DMA_Init+0x3e>
 8002f86:	21aa      	movs	r1, #170	; 0xaa
 8002f88:	4836      	ldr	r0, [pc, #216]	; (8003064 <HAL_DMA_Init+0x114>)
 8002f8a:	f7fe feac 	bl	8001ce6 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002f8e:	6863      	ldr	r3, [r4, #4]
 8002f90:	f033 0210 	bics.w	r2, r3, #16
 8002f94:	d006      	beq.n	8002fa4 <HAL_DMA_Init+0x54>
 8002f96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f9a:	d003      	beq.n	8002fa4 <HAL_DMA_Init+0x54>
 8002f9c:	21ab      	movs	r1, #171	; 0xab
 8002f9e:	4831      	ldr	r0, [pc, #196]	; (8003064 <HAL_DMA_Init+0x114>)
 8002fa0:	f7fe fea1 	bl	8001ce6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002fa4:	68a3      	ldr	r3, [r4, #8]
 8002fa6:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8002faa:	d003      	beq.n	8002fb4 <HAL_DMA_Init+0x64>
 8002fac:	21ac      	movs	r1, #172	; 0xac
 8002fae:	482d      	ldr	r0, [pc, #180]	; (8003064 <HAL_DMA_Init+0x114>)
 8002fb0:	f7fe fe99 	bl	8001ce6 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002fb4:	68e3      	ldr	r3, [r4, #12]
 8002fb6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8002fba:	d003      	beq.n	8002fc4 <HAL_DMA_Init+0x74>
 8002fbc:	21ad      	movs	r1, #173	; 0xad
 8002fbe:	4829      	ldr	r0, [pc, #164]	; (8003064 <HAL_DMA_Init+0x114>)
 8002fc0:	f7fe fe91 	bl	8001ce6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002fc4:	6923      	ldr	r3, [r4, #16]
 8002fc6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8002fca:	d006      	beq.n	8002fda <HAL_DMA_Init+0x8a>
 8002fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd0:	d003      	beq.n	8002fda <HAL_DMA_Init+0x8a>
 8002fd2:	21ae      	movs	r1, #174	; 0xae
 8002fd4:	4823      	ldr	r0, [pc, #140]	; (8003064 <HAL_DMA_Init+0x114>)
 8002fd6:	f7fe fe86 	bl	8001ce6 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002fda:	6963      	ldr	r3, [r4, #20]
 8002fdc:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8002fe0:	d006      	beq.n	8002ff0 <HAL_DMA_Init+0xa0>
 8002fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe6:	d003      	beq.n	8002ff0 <HAL_DMA_Init+0xa0>
 8002fe8:	21af      	movs	r1, #175	; 0xaf
 8002fea:	481e      	ldr	r0, [pc, #120]	; (8003064 <HAL_DMA_Init+0x114>)
 8002fec:	f7fe fe7b 	bl	8001ce6 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002ff0:	69a3      	ldr	r3, [r4, #24]
 8002ff2:	f033 0320 	bics.w	r3, r3, #32
 8002ff6:	d003      	beq.n	8003000 <HAL_DMA_Init+0xb0>
 8002ff8:	21b0      	movs	r1, #176	; 0xb0
 8002ffa:	481a      	ldr	r0, [pc, #104]	; (8003064 <HAL_DMA_Init+0x114>)
 8002ffc:	f7fe fe73 	bl	8001ce6 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003000:	69e3      	ldr	r3, [r4, #28]
 8003002:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8003006:	d003      	beq.n	8003010 <HAL_DMA_Init+0xc0>
 8003008:	21b1      	movs	r1, #177	; 0xb1
 800300a:	4816      	ldr	r0, [pc, #88]	; (8003064 <HAL_DMA_Init+0x114>)
 800300c:	f7fe fe6b 	bl	8001ce6 <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003010:	2214      	movs	r2, #20
 8003012:	6821      	ldr	r1, [r4, #0]
 8003014:	4b14      	ldr	r3, [pc, #80]	; (8003068 <HAL_DMA_Init+0x118>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003016:	68a0      	ldr	r0, [r4, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003018:	440b      	add	r3, r1
 800301a:	fbb3 f3f2 	udiv	r3, r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003022:	4b12      	ldr	r3, [pc, #72]	; (800306c <HAL_DMA_Init+0x11c>)
  tmp = hdma->Instance->CCR;
 8003024:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8003026:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8003028:	6863      	ldr	r3, [r4, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800302a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 800302e:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003030:	68e0      	ldr	r0, [r4, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003032:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003036:	4303      	orrs	r3, r0
 8003038:	6920      	ldr	r0, [r4, #16]
 800303a:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800303c:	6960      	ldr	r0, [r4, #20]
 800303e:	4303      	orrs	r3, r0
 8003040:	69a0      	ldr	r0, [r4, #24]
 8003042:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003044:	69e0      	ldr	r0, [r4, #28]
 8003046:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8003048:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800304a:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800304c:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800304e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003050:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8003052:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003056:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
 800305a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800305c:	2001      	movs	r0, #1
}
 800305e:	bd10      	pop	{r4, pc}
 8003060:	40020008 	.word	0x40020008
 8003064:	08006383 	.word	0x08006383
 8003068:	bffdfff8 	.word	0xbffdfff8
 800306c:	40020000 	.word	0x40020000

08003070 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003074:	4617      	mov	r7, r2
 8003076:	4698      	mov	r8, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003078:	1e5a      	subs	r2, r3, #1
 800307a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800307e:	429a      	cmp	r2, r3
{
 8003080:	4604      	mov	r4, r0
 8003082:	460e      	mov	r6, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003084:	d904      	bls.n	8003090 <HAL_DMA_Start_IT+0x20>
 8003086:	f240 117f 	movw	r1, #383	; 0x17f
 800308a:	4822      	ldr	r0, [pc, #136]	; (8003114 <HAL_DMA_Start_IT+0xa4>)
 800308c:	f7fe fe2b 	bl	8001ce6 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8003090:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d039      	beq.n	800310c <HAL_DMA_Start_IT+0x9c>
 8003098:	2301      	movs	r3, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800309a:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 800309e:	f884 3020 	strb.w	r3, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80030a2:	429d      	cmp	r5, r3
 80030a4:	f04f 0002 	mov.w	r0, #2
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	d12a      	bne.n	8003104 <HAL_DMA_Start_IT+0x94>
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030ae:	6821      	ldr	r1, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b0:	63a3      	str	r3, [r4, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 80030b2:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 80030b8:	6808      	ldr	r0, [r1, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030bc:	4095      	lsls	r5, r2
    __HAL_DMA_DISABLE(hdma);
 80030be:	f020 0001 	bic.w	r0, r0, #1
 80030c2:	6008      	str	r0, [r1, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030c4:	605d      	str	r5, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030c6:	6863      	ldr	r3, [r4, #4]
  hdma->Instance->CNDTR = DataLength;
 80030c8:	f8c1 8004 	str.w	r8, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030cc:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80030ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030d0:	6822      	ldr	r2, [r4, #0]
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030d2:	bf0b      	itete	eq
 80030d4:	608f      	streq	r7, [r1, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80030d6:	608e      	strne	r6, [r1, #8]
    hdma->Instance->CMAR = SrcAddress;
 80030d8:	60ce      	streq	r6, [r1, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80030da:	60cf      	strne	r7, [r1, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80030dc:	b153      	cbz	r3, 80030f4 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030de:	680b      	ldr	r3, [r1, #0]
 80030e0:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030e4:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma);
 80030e6:	6813      	ldr	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030e8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80030ea:	f043 0301 	orr.w	r3, r3, #1
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030f4:	680b      	ldr	r3, [r1, #0]
 80030f6:	f023 0304 	bic.w	r3, r3, #4
 80030fa:	600b      	str	r3, [r1, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030fc:	680b      	ldr	r3, [r1, #0]
 80030fe:	f043 030a 	orr.w	r3, r3, #10
 8003102:	e7ef      	b.n	80030e4 <HAL_DMA_Start_IT+0x74>
    __HAL_UNLOCK(hdma); 
 8003104:	f884 3020 	strb.w	r3, [r4, #32]
 8003108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdma);
 800310c:	2002      	movs	r0, #2
}
 800310e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003112:	bf00      	nop
 8003114:	08006383 	.word	0x08006383

08003118 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003118:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 800311c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800311e:	2b02      	cmp	r3, #2
 8003120:	d003      	beq.n	800312a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003122:	2304      	movs	r3, #4
 8003124:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8003126:	2001      	movs	r0, #1
 8003128:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800312a:	6803      	ldr	r3, [r0, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	f022 020e 	bic.w	r2, r2, #14
 8003132:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	f022 0201 	bic.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800313c:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <HAL_DMA_Abort_IT+0x88>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01f      	beq.n	8003182 <HAL_DMA_Abort_IT+0x6a>
 8003142:	3214      	adds	r2, #20
 8003144:	4293      	cmp	r3, r2
 8003146:	d01e      	beq.n	8003186 <HAL_DMA_Abort_IT+0x6e>
 8003148:	3214      	adds	r2, #20
 800314a:	4293      	cmp	r3, r2
 800314c:	d01d      	beq.n	800318a <HAL_DMA_Abort_IT+0x72>
 800314e:	3214      	adds	r2, #20
 8003150:	4293      	cmp	r3, r2
 8003152:	d01d      	beq.n	8003190 <HAL_DMA_Abort_IT+0x78>
 8003154:	3214      	adds	r2, #20
 8003156:	4293      	cmp	r3, r2
 8003158:	d01d      	beq.n	8003196 <HAL_DMA_Abort_IT+0x7e>
 800315a:	3214      	adds	r2, #20
 800315c:	4293      	cmp	r3, r2
 800315e:	bf0c      	ite	eq
 8003160:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8003164:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8003168:	4a0e      	ldr	r2, [pc, #56]	; (80031a4 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 800316a:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800316c:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800316e:	2301      	movs	r3, #1
 8003170:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8003174:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8003176:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800317a:	b17b      	cbz	r3, 800319c <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 800317c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800317e:	4620      	mov	r0, r4
 8003180:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003182:	2301      	movs	r3, #1
 8003184:	e7f0      	b.n	8003168 <HAL_DMA_Abort_IT+0x50>
 8003186:	2310      	movs	r3, #16
 8003188:	e7ee      	b.n	8003168 <HAL_DMA_Abort_IT+0x50>
 800318a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800318e:	e7eb      	b.n	8003168 <HAL_DMA_Abort_IT+0x50>
 8003190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003194:	e7e8      	b.n	8003168 <HAL_DMA_Abort_IT+0x50>
 8003196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800319a:	e7e5      	b.n	8003168 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 800319c:	4618      	mov	r0, r3
}
 800319e:	bd10      	pop	{r4, pc}
 80031a0:	40020008 	.word	0x40020008
 80031a4:	40020000 	.word	0x40020000

080031a8 <HAL_DMA_IRQHandler>:
{
 80031a8:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80031aa:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031ac:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80031ae:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031b0:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80031b2:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80031b4:	4095      	lsls	r5, r2
 80031b6:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80031b8:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80031ba:	d032      	beq.n	8003222 <HAL_DMA_IRQHandler+0x7a>
 80031bc:	074d      	lsls	r5, r1, #29
 80031be:	d530      	bpl.n	8003222 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031c4:	bf5e      	ittt	pl
 80031c6:	681a      	ldrpl	r2, [r3, #0]
 80031c8:	f022 0204 	bicpl.w	r2, r2, #4
 80031cc:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80031ce:	4a3e      	ldr	r2, [pc, #248]	; (80032c8 <HAL_DMA_IRQHandler+0x120>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d019      	beq.n	8003208 <HAL_DMA_IRQHandler+0x60>
 80031d4:	3214      	adds	r2, #20
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d018      	beq.n	800320c <HAL_DMA_IRQHandler+0x64>
 80031da:	3214      	adds	r2, #20
 80031dc:	4293      	cmp	r3, r2
 80031de:	d017      	beq.n	8003210 <HAL_DMA_IRQHandler+0x68>
 80031e0:	3214      	adds	r2, #20
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d017      	beq.n	8003216 <HAL_DMA_IRQHandler+0x6e>
 80031e6:	3214      	adds	r2, #20
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d017      	beq.n	800321c <HAL_DMA_IRQHandler+0x74>
 80031ec:	3214      	adds	r2, #20
 80031ee:	4293      	cmp	r3, r2
 80031f0:	bf0c      	ite	eq
 80031f2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80031f6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80031fa:	4a34      	ldr	r2, [pc, #208]	; (80032cc <HAL_DMA_IRQHandler+0x124>)
 80031fc:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80031fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8003200:	2b00      	cmp	r3, #0
 8003202:	d05e      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x11a>
}
 8003204:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003206:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003208:	2304      	movs	r3, #4
 800320a:	e7f6      	b.n	80031fa <HAL_DMA_IRQHandler+0x52>
 800320c:	2340      	movs	r3, #64	; 0x40
 800320e:	e7f4      	b.n	80031fa <HAL_DMA_IRQHandler+0x52>
 8003210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003214:	e7f1      	b.n	80031fa <HAL_DMA_IRQHandler+0x52>
 8003216:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800321a:	e7ee      	b.n	80031fa <HAL_DMA_IRQHandler+0x52>
 800321c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003220:	e7eb      	b.n	80031fa <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003222:	2502      	movs	r5, #2
 8003224:	4095      	lsls	r5, r2
 8003226:	4225      	tst	r5, r4
 8003228:	d035      	beq.n	8003296 <HAL_DMA_IRQHandler+0xee>
 800322a:	078d      	lsls	r5, r1, #30
 800322c:	d533      	bpl.n	8003296 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	0694      	lsls	r4, r2, #26
 8003232:	d406      	bmi.n	8003242 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	f022 020a 	bic.w	r2, r2, #10
 800323a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800323c:	2201      	movs	r2, #1
 800323e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003242:	4a21      	ldr	r2, [pc, #132]	; (80032c8 <HAL_DMA_IRQHandler+0x120>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d019      	beq.n	800327c <HAL_DMA_IRQHandler+0xd4>
 8003248:	3214      	adds	r2, #20
 800324a:	4293      	cmp	r3, r2
 800324c:	d018      	beq.n	8003280 <HAL_DMA_IRQHandler+0xd8>
 800324e:	3214      	adds	r2, #20
 8003250:	4293      	cmp	r3, r2
 8003252:	d017      	beq.n	8003284 <HAL_DMA_IRQHandler+0xdc>
 8003254:	3214      	adds	r2, #20
 8003256:	4293      	cmp	r3, r2
 8003258:	d017      	beq.n	800328a <HAL_DMA_IRQHandler+0xe2>
 800325a:	3214      	adds	r2, #20
 800325c:	4293      	cmp	r3, r2
 800325e:	d017      	beq.n	8003290 <HAL_DMA_IRQHandler+0xe8>
 8003260:	3214      	adds	r2, #20
 8003262:	4293      	cmp	r3, r2
 8003264:	bf0c      	ite	eq
 8003266:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800326a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800326e:	4a17      	ldr	r2, [pc, #92]	; (80032cc <HAL_DMA_IRQHandler+0x124>)
 8003270:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8003272:	2300      	movs	r3, #0
 8003274:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8003278:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800327a:	e7c1      	b.n	8003200 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800327c:	2302      	movs	r3, #2
 800327e:	e7f6      	b.n	800326e <HAL_DMA_IRQHandler+0xc6>
 8003280:	2320      	movs	r3, #32
 8003282:	e7f4      	b.n	800326e <HAL_DMA_IRQHandler+0xc6>
 8003284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003288:	e7f1      	b.n	800326e <HAL_DMA_IRQHandler+0xc6>
 800328a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800328e:	e7ee      	b.n	800326e <HAL_DMA_IRQHandler+0xc6>
 8003290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003294:	e7eb      	b.n	800326e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003296:	2508      	movs	r5, #8
 8003298:	4095      	lsls	r5, r2
 800329a:	4225      	tst	r5, r4
 800329c:	d011      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x11a>
 800329e:	0709      	lsls	r1, r1, #28
 80032a0:	d50f      	bpl.n	80032c2 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032a2:	6819      	ldr	r1, [r3, #0]
 80032a4:	f021 010e 	bic.w	r1, r1, #14
 80032a8:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032aa:	2301      	movs	r3, #1
 80032ac:	fa03 f202 	lsl.w	r2, r3, r2
 80032b0:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032b2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80032b4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80032b8:	2300      	movs	r3, #0
 80032ba:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80032be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80032c0:	e79e      	b.n	8003200 <HAL_DMA_IRQHandler+0x58>
}
 80032c2:	bc70      	pop	{r4, r5, r6}
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40020008 	.word	0x40020008
 80032cc:	40020000 	.word	0x40020000

080032d0 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80032d0:	4a11      	ldr	r2, [pc, #68]	; (8003318 <FLASH_SetErrorCode+0x48>)
 80032d2:	68d3      	ldr	r3, [r2, #12]
 80032d4:	f013 0310 	ands.w	r3, r3, #16
 80032d8:	d005      	beq.n	80032e6 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80032da:	4910      	ldr	r1, [pc, #64]	; (800331c <FLASH_SetErrorCode+0x4c>)
 80032dc:	69cb      	ldr	r3, [r1, #28]
 80032de:	f043 0302 	orr.w	r3, r3, #2
 80032e2:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80032e4:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80032e6:	68d2      	ldr	r2, [r2, #12]
 80032e8:	0750      	lsls	r0, r2, #29
 80032ea:	d506      	bpl.n	80032fa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80032ec:	490b      	ldr	r1, [pc, #44]	; (800331c <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80032ee:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80032f2:	69ca      	ldr	r2, [r1, #28]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80032fa:	4a07      	ldr	r2, [pc, #28]	; (8003318 <FLASH_SetErrorCode+0x48>)
 80032fc:	69d1      	ldr	r1, [r2, #28]
 80032fe:	07c9      	lsls	r1, r1, #31
 8003300:	d508      	bpl.n	8003314 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003302:	4806      	ldr	r0, [pc, #24]	; (800331c <FLASH_SetErrorCode+0x4c>)
 8003304:	69c1      	ldr	r1, [r0, #28]
 8003306:	f041 0104 	orr.w	r1, r1, #4
 800330a:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800330c:	69d1      	ldr	r1, [r2, #28]
 800330e:	f021 0101 	bic.w	r1, r1, #1
 8003312:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003314:	60d3      	str	r3, [r2, #12]
 8003316:	4770      	bx	lr
 8003318:	40022000 	.word	0x40022000
 800331c:	20000520 	.word	0x20000520

08003320 <HAL_FLASH_EndOfOperationCallback>:
 8003320:	4770      	bx	lr

08003322 <HAL_FLASH_OperationErrorCallback>:
{
 8003322:	4770      	bx	lr

08003324 <HAL_FLASH_IRQHandler>:
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003324:	4b42      	ldr	r3, [pc, #264]	; (8003430 <HAL_FLASH_IRQHandler+0x10c>)
{
 8003326:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	4c42      	ldr	r4, [pc, #264]	; (8003434 <HAL_FLASH_IRQHandler+0x110>)
 800332c:	f012 0f10 	tst.w	r2, #16
 8003330:	d102      	bne.n	8003338 <HAL_FLASH_IRQHandler+0x14>
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	075a      	lsls	r2, r3, #29
 8003336:	d50a      	bpl.n	800334e <HAL_FLASH_IRQHandler+0x2a>
    pFlash.Address = 0xFFFFFFFFU;
 8003338:	f04f 33ff 	mov.w	r3, #4294967295
    addresstmp = pFlash.Address;
 800333c:	68a5      	ldr	r5, [r4, #8]
    pFlash.Address = 0xFFFFFFFFU;
 800333e:	60a3      	str	r3, [r4, #8]
    FLASH_SetErrorCode();
 8003340:	f7ff ffc6 	bl	80032d0 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8003344:	4628      	mov	r0, r5
 8003346:	f7ff ffec 	bl	8003322 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800334a:	2300      	movs	r3, #0
 800334c:	7023      	strb	r3, [r4, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800334e:	4d38      	ldr	r5, [pc, #224]	; (8003430 <HAL_FLASH_IRQHandler+0x10c>)
 8003350:	68eb      	ldr	r3, [r5, #12]
 8003352:	069b      	lsls	r3, r3, #26
 8003354:	d518      	bpl.n	8003388 <HAL_FLASH_IRQHandler+0x64>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003356:	2320      	movs	r3, #32
 8003358:	60eb      	str	r3, [r5, #12]
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 800335a:	7823      	ldrb	r3, [r4, #0]
 800335c:	b1a3      	cbz	r3, 8003388 <HAL_FLASH_IRQHandler+0x64>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 800335e:	7823      	ldrb	r3, [r4, #0]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d127      	bne.n	80033b4 <HAL_FLASH_IRQHandler+0x90>
        pFlash.DataRemaining--;
 8003364:	6863      	ldr	r3, [r4, #4]
 8003366:	3b01      	subs	r3, #1
 8003368:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 800336a:	6863      	ldr	r3, [r4, #4]
 800336c:	b1db      	cbz	r3, 80033a6 <HAL_FLASH_IRQHandler+0x82>
          addresstmp = pFlash.Address;
 800336e:	68a0      	ldr	r0, [r4, #8]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003370:	f7ff ffd6 	bl	8003320 <HAL_FLASH_EndOfOperationCallback>
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8003374:	68a0      	ldr	r0, [r4, #8]
 8003376:	f500 6080 	add.w	r0, r0, #1024	; 0x400
          pFlash.Address = addresstmp;
 800337a:	60a0      	str	r0, [r4, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800337c:	692b      	ldr	r3, [r5, #16]
 800337e:	f023 0302 	bic.w	r3, r3, #2
 8003382:	612b      	str	r3, [r5, #16]
          FLASH_PageErase(addresstmp);
 8003384:	f000 f910 	bl	80035a8 <FLASH_PageErase>
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8003388:	7823      	ldrb	r3, [r4, #0]
 800338a:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800338e:	b94b      	cbnz	r3, 80033a4 <HAL_FLASH_IRQHandler+0x80>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8003390:	4b27      	ldr	r3, [pc, #156]	; (8003430 <HAL_FLASH_IRQHandler+0x10c>)
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	f022 0207 	bic.w	r2, r2, #7
 8003398:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	f422 52a0 	bic.w	r2, r2, #5120	; 0x1400
 80033a0:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 80033a2:	7621      	strb	r1, [r4, #24]
 80033a4:	bd70      	pop	{r4, r5, r6, pc}
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 80033a6:	f04f 30ff 	mov.w	r0, #4294967295
 80033aa:	60a0      	str	r0, [r4, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80033ac:	7023      	strb	r3, [r4, #0]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80033ae:	f7ff ffb7 	bl	8003320 <HAL_FLASH_EndOfOperationCallback>
 80033b2:	e7e9      	b.n	8003388 <HAL_FLASH_IRQHandler+0x64>
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80033b4:	7823      	ldrb	r3, [r4, #0]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d109      	bne.n	80033ce <HAL_FLASH_IRQHandler+0xaa>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80033ba:	692b      	ldr	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0U);
 80033bc:	2000      	movs	r0, #0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80033be:	f023 0304 	bic.w	r3, r3, #4
 80033c2:	612b      	str	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0U);
 80033c4:	f7ff ffac 	bl	8003320 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80033c8:	2300      	movs	r3, #0
 80033ca:	7023      	strb	r3, [r4, #0]
 80033cc:	e7dc      	b.n	8003388 <HAL_FLASH_IRQHandler+0x64>
        pFlash.DataRemaining--;
 80033ce:	6863      	ldr	r3, [r4, #4]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 80033d4:	6863      	ldr	r3, [r4, #4]
 80033d6:	b1d3      	cbz	r3, 800340e <HAL_FLASH_IRQHandler+0xea>
          pFlash.Address += 2U;
 80033d8:	68a3      	ldr	r3, [r4, #8]
 80033da:	3302      	adds	r3, #2
 80033dc:	60a3      	str	r3, [r4, #8]
          addresstmp = pFlash.Address;
 80033de:	68a6      	ldr	r6, [r4, #8]
          pFlash.Data = (pFlash.Data >> 16U);
 80033e0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80033e4:	0c02      	lsrs	r2, r0, #16
 80033e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80033ea:	0c0b      	lsrs	r3, r1, #16
 80033ec:	e9c4 2304 	strd	r2, r3, [r4, #16]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80033f0:	692b      	ldr	r3, [r5, #16]
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	612b      	str	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 80033f8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61e3      	str	r3, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003400:	692b      	ldr	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8003402:	b292      	uxth	r2, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	612b      	str	r3, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 800340a:	8032      	strh	r2, [r6, #0]
 800340c:	e7bc      	b.n	8003388 <HAL_FLASH_IRQHandler+0x64>
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 800340e:	7823      	ldrb	r3, [r4, #0]
 8003410:	2b03      	cmp	r3, #3
 8003412:	d106      	bne.n	8003422 <HAL_FLASH_IRQHandler+0xfe>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003414:	68a0      	ldr	r0, [r4, #8]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8003416:	f7ff ff83 	bl	8003320 <HAL_FLASH_EndOfOperationCallback>
          pFlash.Address = 0xFFFFFFFFU;
 800341a:	f04f 33ff 	mov.w	r3, #4294967295
 800341e:	60a3      	str	r3, [r4, #8]
 8003420:	e7d2      	b.n	80033c8 <HAL_FLASH_IRQHandler+0xa4>
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8003422:	7823      	ldrb	r3, [r4, #0]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8003424:	68a0      	ldr	r0, [r4, #8]
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8003426:	2b04      	cmp	r3, #4
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8003428:	bf0c      	ite	eq
 800342a:	3802      	subeq	r0, #2
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 800342c:	3806      	subne	r0, #6
 800342e:	e7f2      	b.n	8003416 <HAL_FLASH_IRQHandler+0xf2>
 8003430:	40022000 	.word	0x40022000
 8003434:	20000520 	.word	0x20000520

08003438 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_FLASH_Unlock+0x1c>)
 800343a:	6918      	ldr	r0, [r3, #16]
 800343c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003440:	d007      	beq.n	8003452 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003442:	4a05      	ldr	r2, [pc, #20]	; (8003458 <HAL_FLASH_Unlock+0x20>)
 8003444:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003446:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800344a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800344c:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800344e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8003452:	4770      	bx	lr
 8003454:	40022000 	.word	0x40022000
 8003458:	45670123 	.word	0x45670123

0800345c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800345c:	4a03      	ldr	r2, [pc, #12]	; (800346c <HAL_FLASH_Lock+0x10>)
}
 800345e:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003460:	6913      	ldr	r3, [r2, #16]
 8003462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003466:	6113      	str	r3, [r2, #16]
}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40022000 	.word	0x40022000

08003470 <FLASH_WaitForLastOperation>:
{
 8003470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003472:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8003474:	f7ff f95e 	bl	8002734 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003478:	4c11      	ldr	r4, [pc, #68]	; (80034c0 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 800347a:	4607      	mov	r7, r0
 800347c:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800347e:	68e3      	ldr	r3, [r4, #12]
 8003480:	07d8      	lsls	r0, r3, #31
 8003482:	d412      	bmi.n	80034aa <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003484:	68e3      	ldr	r3, [r4, #12]
 8003486:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003488:	bf44      	itt	mi
 800348a:	2320      	movmi	r3, #32
 800348c:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800348e:	68eb      	ldr	r3, [r5, #12]
 8003490:	06da      	lsls	r2, r3, #27
 8003492:	d406      	bmi.n	80034a2 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003494:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003496:	07db      	lsls	r3, r3, #31
 8003498:	d403      	bmi.n	80034a2 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800349a:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800349c:	f010 0004 	ands.w	r0, r0, #4
 80034a0:	d002      	beq.n	80034a8 <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 80034a2:	f7ff ff15 	bl	80032d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80034a6:	2001      	movs	r0, #1
}
 80034a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80034aa:	1c73      	adds	r3, r6, #1
 80034ac:	d0e7      	beq.n	800347e <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80034ae:	b90e      	cbnz	r6, 80034b4 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 80034b0:	2003      	movs	r0, #3
 80034b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80034b4:	f7ff f93e 	bl	8002734 <HAL_GetTick>
 80034b8:	1bc0      	subs	r0, r0, r7
 80034ba:	4286      	cmp	r6, r0
 80034bc:	d2df      	bcs.n	800347e <FLASH_WaitForLastOperation+0xe>
 80034be:	e7f7      	b.n	80034b0 <FLASH_WaitForLastOperation+0x40>
 80034c0:	40022000 	.word	0x40022000

080034c4 <HAL_FLASH_Program>:
{
 80034c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c8:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 80034ca:	4b2f      	ldr	r3, [pc, #188]	; (8003588 <HAL_FLASH_Program+0xc4>)
{
 80034cc:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 80034ce:	7e1a      	ldrb	r2, [r3, #24]
{
 80034d0:	4683      	mov	fp, r0
  __HAL_LOCK(&pFlash);
 80034d2:	2a01      	cmp	r2, #1
{
 80034d4:	4689      	mov	r9, r1
 80034d6:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 80034d8:	d052      	beq.n	8003580 <HAL_FLASH_Program+0xbc>
 80034da:	2301      	movs	r3, #1
 80034dc:	f888 3018 	strb.w	r3, [r8, #24]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 80034e0:	1e43      	subs	r3, r0, #1
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d903      	bls.n	80034ee <HAL_FLASH_Program+0x2a>
 80034e6:	21c2      	movs	r1, #194	; 0xc2
 80034e8:	4828      	ldr	r0, [pc, #160]	; (800358c <HAL_FLASH_Program+0xc8>)
 80034ea:	f7fe fbfc 	bl	8001ce6 <assert_failed>
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 80034ee:	f1b9 6f00 	cmp.w	r9, #134217728	; 0x8000000
 80034f2:	d306      	bcc.n	8003502 <HAL_FLASH_Program+0x3e>
 80034f4:	4b26      	ldr	r3, [pc, #152]	; (8003590 <HAL_FLASH_Program+0xcc>)
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d138      	bne.n	800356e <HAL_FLASH_Program+0xaa>
 80034fc:	4b25      	ldr	r3, [pc, #148]	; (8003594 <HAL_FLASH_Program+0xd0>)
 80034fe:	4599      	cmp	r9, r3
 8003500:	d903      	bls.n	800350a <HAL_FLASH_Program+0x46>
 8003502:	21c3      	movs	r1, #195	; 0xc3
 8003504:	4821      	ldr	r0, [pc, #132]	; (800358c <HAL_FLASH_Program+0xc8>)
 8003506:	f7fe fbee 	bl	8001ce6 <assert_failed>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800350a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800350e:	f7ff ffaf 	bl	8003470 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8003512:	bb38      	cbnz	r0, 8003564 <HAL_FLASH_Program+0xa0>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003514:	f1bb 0f01 	cmp.w	fp, #1
 8003518:	d006      	beq.n	8003528 <HAL_FLASH_Program+0x64>
      nbiterations = 4U;
 800351a:	f1bb 0f02 	cmp.w	fp, #2
 800351e:	bf0c      	ite	eq
 8003520:	f04f 0b02 	moveq.w	fp, #2
 8003524:	f04f 0b04 	movne.w	fp, #4
 8003528:	2400      	movs	r4, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800352a:	46a2      	mov	sl, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800352c:	4d1a      	ldr	r5, [pc, #104]	; (8003598 <HAL_FLASH_Program+0xd4>)
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800352e:	0122      	lsls	r2, r4, #4
 8003530:	4630      	mov	r0, r6
 8003532:	4639      	mov	r1, r7
 8003534:	f7fc fe0a 	bl	800014c <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003538:	f8c8 a01c 	str.w	sl, [r8, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800353c:	692b      	ldr	r3, [r5, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800353e:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	612b      	str	r3, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 8003546:	f829 0014 	strh.w	r0, [r9, r4, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800354a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800354e:	f7ff ff8f 	bl	8003470 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003552:	692b      	ldr	r3, [r5, #16]
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	612b      	str	r3, [r5, #16]
      if (status != HAL_OK)
 800355a:	b918      	cbnz	r0, 8003564 <HAL_FLASH_Program+0xa0>
 800355c:	3401      	adds	r4, #1
    for (index = 0U; index < nbiterations; index++)
 800355e:	b2e3      	uxtb	r3, r4
 8003560:	459b      	cmp	fp, r3
 8003562:	d8e4      	bhi.n	800352e <HAL_FLASH_Program+0x6a>
  __HAL_UNLOCK(&pFlash);
 8003564:	2300      	movs	r3, #0
 8003566:	f888 3018 	strb.w	r3, [r8, #24]
  return status;
 800356a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 800356e:	2b40      	cmp	r3, #64	; 0x40
 8003570:	d101      	bne.n	8003576 <HAL_FLASH_Program+0xb2>
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <HAL_FLASH_Program+0xd8>)
 8003574:	e7c3      	b.n	80034fe <HAL_FLASH_Program+0x3a>
 8003576:	2b20      	cmp	r3, #32
 8003578:	bf0c      	ite	eq
 800357a:	4b09      	ldreq	r3, [pc, #36]	; (80035a0 <HAL_FLASH_Program+0xdc>)
 800357c:	4b09      	ldrne	r3, [pc, #36]	; (80035a4 <HAL_FLASH_Program+0xe0>)
 800357e:	e7be      	b.n	80034fe <HAL_FLASH_Program+0x3a>
  __HAL_LOCK(&pFlash);
 8003580:	2002      	movs	r0, #2
}
 8003582:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003586:	bf00      	nop
 8003588:	20000520 	.word	0x20000520
 800358c:	080063bb 	.word	0x080063bb
 8003590:	1ffff7e0 	.word	0x1ffff7e0
 8003594:	0801ffff 	.word	0x0801ffff
 8003598:	40022000 	.word	0x40022000
 800359c:	0800ffff 	.word	0x0800ffff
 80035a0:	08007fff 	.word	0x08007fff
 80035a4:	08003fff 	.word	0x08003fff

080035a8 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80035a8:	2200      	movs	r2, #0
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <FLASH_PageErase+0x1c>)
 80035ac:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80035ae:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <FLASH_PageErase+0x20>)
 80035b0:	691a      	ldr	r2, [r3, #16]
 80035b2:	f042 0202 	orr.w	r2, r2, #2
 80035b6:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80035b8:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c0:	611a      	str	r2, [r3, #16]
 80035c2:	4770      	bx	lr
 80035c4:	20000520 	.word	0x20000520
 80035c8:	40022000 	.word	0x40022000

080035cc <HAL_FLASHEx_Erase>:
{
 80035cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80035d0:	4c4a      	ldr	r4, [pc, #296]	; (80036fc <HAL_FLASHEx_Erase+0x130>)
{
 80035d2:	4606      	mov	r6, r0
  __HAL_LOCK(&pFlash);
 80035d4:	7e23      	ldrb	r3, [r4, #24]
{
 80035d6:	460d      	mov	r5, r1
  __HAL_LOCK(&pFlash);
 80035d8:	2b01      	cmp	r3, #1
 80035da:	f000 808b 	beq.w	80036f4 <HAL_FLASHEx_Erase+0x128>
 80035de:	2301      	movs	r3, #1
 80035e0:	7623      	strb	r3, [r4, #24]
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 80035e2:	6803      	ldr	r3, [r0, #0]
 80035e4:	f033 0302 	bics.w	r3, r3, #2
 80035e8:	d003      	beq.n	80035f2 <HAL_FLASHEx_Erase+0x26>
 80035ea:	21b8      	movs	r1, #184	; 0xb8
 80035ec:	4844      	ldr	r0, [pc, #272]	; (8003700 <HAL_FLASHEx_Erase+0x134>)
 80035ee:	f7fe fb7a 	bl	8001ce6 <assert_failed>
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80035f2:	6833      	ldr	r3, [r6, #0]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d11c      	bne.n	8003632 <HAL_FLASHEx_Erase+0x66>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80035f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035fc:	f7ff ff38 	bl	8003470 <FLASH_WaitForLastOperation>
 8003600:	b120      	cbz	r0, 800360c <HAL_FLASHEx_Erase+0x40>
  HAL_StatusTypeDef status = HAL_ERROR;
 8003602:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8003604:	2300      	movs	r3, #0
 8003606:	7623      	strb	r3, [r4, #24]
  return status;
 8003608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800360c:	4d3d      	ldr	r5, [pc, #244]	; (8003704 <HAL_FLASHEx_Erase+0x138>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800360e:	61e0      	str	r0, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003610:	692b      	ldr	r3, [r5, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003612:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003616:	f043 0304 	orr.w	r3, r3, #4
 800361a:	612b      	str	r3, [r5, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800361c:	692b      	ldr	r3, [r5, #16]
 800361e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003622:	612b      	str	r3, [r5, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003624:	f7ff ff24 	bl	8003470 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003628:	692b      	ldr	r3, [r5, #16]
 800362a:	f023 0304 	bic.w	r3, r3, #4
 800362e:	612b      	str	r3, [r5, #16]
 8003630:	e7e8      	b.n	8003604 <HAL_FLASHEx_Erase+0x38>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 8003632:	68b3      	ldr	r3, [r6, #8]
 8003634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003638:	d306      	bcc.n	8003648 <HAL_FLASHEx_Erase+0x7c>
 800363a:	4a33      	ldr	r2, [pc, #204]	; (8003708 <HAL_FLASHEx_Erase+0x13c>)
 800363c:	8812      	ldrh	r2, [r2, #0]
 800363e:	2a80      	cmp	r2, #128	; 0x80
 8003640:	d13c      	bne.n	80036bc <HAL_FLASHEx_Erase+0xf0>
 8003642:	4a32      	ldr	r2, [pc, #200]	; (800370c <HAL_FLASHEx_Erase+0x140>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d903      	bls.n	8003650 <HAL_FLASHEx_Erase+0x84>
 8003648:	21f9      	movs	r1, #249	; 0xf9
 800364a:	482d      	ldr	r0, [pc, #180]	; (8003700 <HAL_FLASHEx_Erase+0x134>)
 800364c:	f7fe fb4b 	bl	8001ce6 <assert_failed>
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
 8003650:	4b2d      	ldr	r3, [pc, #180]	; (8003708 <HAL_FLASHEx_Erase+0x13c>)
 8003652:	68b2      	ldr	r2, [r6, #8]
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	68f1      	ldr	r1, [r6, #12]
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d138      	bne.n	80036ce <HAL_FLASHEx_Erase+0x102>
 800365c:	3a01      	subs	r2, #1
 800365e:	eb02 2381 	add.w	r3, r2, r1, lsl #10
 8003662:	4a2a      	ldr	r2, [pc, #168]	; (800370c <HAL_FLASHEx_Erase+0x140>)
 8003664:	4293      	cmp	r3, r2
 8003666:	bf8c      	ite	hi
 8003668:	2300      	movhi	r3, #0
 800366a:	2301      	movls	r3, #1
 800366c:	b91b      	cbnz	r3, 8003676 <HAL_FLASHEx_Erase+0xaa>
 800366e:	21fa      	movs	r1, #250	; 0xfa
 8003670:	4823      	ldr	r0, [pc, #140]	; (8003700 <HAL_FLASHEx_Erase+0x134>)
 8003672:	f7fe fb38 	bl	8001ce6 <assert_failed>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003676:	f24c 3050 	movw	r0, #50000	; 0xc350
 800367a:	f7ff fef9 	bl	8003470 <FLASH_WaitForLastOperation>
 800367e:	2800      	cmp	r0, #0
 8003680:	d1bf      	bne.n	8003602 <HAL_FLASHEx_Erase+0x36>
        *PageError = 0xFFFFFFFFU;
 8003682:	f04f 33ff 	mov.w	r3, #4294967295
  HAL_StatusTypeDef status = HAL_ERROR;
 8003686:	2001      	movs	r0, #1
        *PageError = 0xFFFFFFFFU;
 8003688:	602b      	str	r3, [r5, #0]
        for(address = pEraseInit->PageAddress;
 800368a:	68b7      	ldr	r7, [r6, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800368c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8003704 <HAL_FLASHEx_Erase+0x138>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003690:	68f2      	ldr	r2, [r6, #12]
 8003692:	68b3      	ldr	r3, [r6, #8]
 8003694:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8003698:	429f      	cmp	r7, r3
 800369a:	d2b3      	bcs.n	8003604 <HAL_FLASHEx_Erase+0x38>
          FLASH_PageErase(address);
 800369c:	4638      	mov	r0, r7
 800369e:	f7ff ff83 	bl	80035a8 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80036a2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80036a6:	f7ff fee3 	bl	8003470 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80036aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80036ae:	f023 0302 	bic.w	r3, r3, #2
 80036b2:	f8c8 3010 	str.w	r3, [r8, #16]
          if (status != HAL_OK)
 80036b6:	b1d0      	cbz	r0, 80036ee <HAL_FLASHEx_Erase+0x122>
            *PageError = address;
 80036b8:	602f      	str	r7, [r5, #0]
            break;
 80036ba:	e7a3      	b.n	8003604 <HAL_FLASHEx_Erase+0x38>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 80036bc:	2a40      	cmp	r2, #64	; 0x40
 80036be:	d101      	bne.n	80036c4 <HAL_FLASHEx_Erase+0xf8>
 80036c0:	4a13      	ldr	r2, [pc, #76]	; (8003710 <HAL_FLASHEx_Erase+0x144>)
 80036c2:	e7bf      	b.n	8003644 <HAL_FLASHEx_Erase+0x78>
 80036c4:	2a20      	cmp	r2, #32
 80036c6:	bf0c      	ite	eq
 80036c8:	4a12      	ldreq	r2, [pc, #72]	; (8003714 <HAL_FLASHEx_Erase+0x148>)
 80036ca:	4a13      	ldrne	r2, [pc, #76]	; (8003718 <HAL_FLASHEx_Erase+0x14c>)
 80036cc:	e7ba      	b.n	8003644 <HAL_FLASHEx_Erase+0x78>
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	d104      	bne.n	80036dc <HAL_FLASHEx_Erase+0x110>
 80036d2:	1e53      	subs	r3, r2, #1
 80036d4:	eb03 2381 	add.w	r3, r3, r1, lsl #10
 80036d8:	4a0d      	ldr	r2, [pc, #52]	; (8003710 <HAL_FLASHEx_Erase+0x144>)
 80036da:	e7c3      	b.n	8003664 <HAL_FLASHEx_Erase+0x98>
 80036dc:	2b20      	cmp	r3, #32
 80036de:	f102 33ff 	add.w	r3, r2, #4294967295
 80036e2:	eb03 2381 	add.w	r3, r3, r1, lsl #10
 80036e6:	bf0c      	ite	eq
 80036e8:	4a0a      	ldreq	r2, [pc, #40]	; (8003714 <HAL_FLASHEx_Erase+0x148>)
 80036ea:	4a0b      	ldrne	r2, [pc, #44]	; (8003718 <HAL_FLASHEx_Erase+0x14c>)
 80036ec:	e7ba      	b.n	8003664 <HAL_FLASHEx_Erase+0x98>
            address += FLASH_PAGE_SIZE)
 80036ee:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80036f2:	e7cd      	b.n	8003690 <HAL_FLASHEx_Erase+0xc4>
  __HAL_LOCK(&pFlash);
 80036f4:	2002      	movs	r0, #2
}
 80036f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036fa:	bf00      	nop
 80036fc:	20000520 	.word	0x20000520
 8003700:	080063f5 	.word	0x080063f5
 8003704:	40022000 	.word	0x40022000
 8003708:	1ffff7e0 	.word	0x1ffff7e0
 800370c:	0801ffff 	.word	0x0801ffff
 8003710:	0800ffff 	.word	0x0800ffff
 8003714:	08007fff 	.word	0x08007fff
 8003718:	08003fff 	.word	0x08003fff

0800371c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800371c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00U;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003720:	4aaa      	ldr	r2, [pc, #680]	; (80039cc <HAL_GPIO_Init+0x2b0>)
{
 8003722:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003724:	4290      	cmp	r0, r2
{
 8003726:	4604      	mov	r4, r0
 8003728:	468b      	mov	fp, r1
 800372a:	9201      	str	r2, [sp, #4]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800372c:	d013      	beq.n	8003756 <HAL_GPIO_Init+0x3a>
 800372e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003732:	4290      	cmp	r0, r2
 8003734:	d00f      	beq.n	8003756 <HAL_GPIO_Init+0x3a>
 8003736:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800373a:	4290      	cmp	r0, r2
 800373c:	d00b      	beq.n	8003756 <HAL_GPIO_Init+0x3a>
 800373e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003742:	4290      	cmp	r0, r2
 8003744:	d007      	beq.n	8003756 <HAL_GPIO_Init+0x3a>
 8003746:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800374a:	4290      	cmp	r0, r2
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_Init+0x3a>
 800374e:	21cd      	movs	r1, #205	; 0xcd
 8003750:	489f      	ldr	r0, [pc, #636]	; (80039d0 <HAL_GPIO_Init+0x2b4>)
 8003752:	f7fe fac8 	bl	8001ce6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003756:	f8db 2000 	ldr.w	r2, [fp]
 800375a:	b291      	uxth	r1, r2
 800375c:	b111      	cbz	r1, 8003764 <HAL_GPIO_Init+0x48>
 800375e:	0c12      	lsrs	r2, r2, #16
 8003760:	0412      	lsls	r2, r2, #16
 8003762:	b11a      	cbz	r2, 800376c <HAL_GPIO_Init+0x50>
 8003764:	21ce      	movs	r1, #206	; 0xce
 8003766:	489a      	ldr	r0, [pc, #616]	; (80039d0 <HAL_GPIO_Init+0x2b4>)
 8003768:	f7fe fabd 	bl	8001ce6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800376c:	f8db 2004 	ldr.w	r2, [fp, #4]
 8003770:	2a03      	cmp	r2, #3
 8003772:	d917      	bls.n	80037a4 <HAL_GPIO_Init+0x88>
 8003774:	f1a2 0111 	sub.w	r1, r2, #17
 8003778:	2901      	cmp	r1, #1
 800377a:	d913      	bls.n	80037a4 <HAL_GPIO_Init+0x88>
 800377c:	4895      	ldr	r0, [pc, #596]	; (80039d4 <HAL_GPIO_Init+0x2b8>)
 800377e:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 8003782:	4281      	cmp	r1, r0
 8003784:	d00e      	beq.n	80037a4 <HAL_GPIO_Init+0x88>
 8003786:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800378a:	4282      	cmp	r2, r0
 800378c:	d00a      	beq.n	80037a4 <HAL_GPIO_Init+0x88>
 800378e:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 8003792:	4281      	cmp	r1, r0
 8003794:	d006      	beq.n	80037a4 <HAL_GPIO_Init+0x88>
 8003796:	4990      	ldr	r1, [pc, #576]	; (80039d8 <HAL_GPIO_Init+0x2bc>)
 8003798:	428a      	cmp	r2, r1
 800379a:	d003      	beq.n	80037a4 <HAL_GPIO_Init+0x88>
 800379c:	21cf      	movs	r1, #207	; 0xcf
 800379e:	488c      	ldr	r0, [pc, #560]	; (80039d0 <HAL_GPIO_Init+0x2b4>)
 80037a0:	f7fe faa1 	bl	8001ce6 <assert_failed>
{
 80037a4:	2500      	movs	r5, #0
 80037a6:	46a8      	mov	r8, r5
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80037a8:	f8df a244 	ldr.w	sl, [pc, #580]	; 80039f0 <HAL_GPIO_Init+0x2d4>
 80037ac:	4e8b      	ldr	r6, [pc, #556]	; (80039dc <HAL_GPIO_Init+0x2c0>)
    ioposition = (0x01U << position);
 80037ae:	2201      	movs	r2, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037b0:	f8db 7000 	ldr.w	r7, [fp]
    ioposition = (0x01U << position);
 80037b4:	fa02 f908 	lsl.w	r9, r2, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037b8:	ea09 0707 	and.w	r7, r9, r7
    if (iocurrent == ioposition)
 80037bc:	45b9      	cmp	r9, r7
 80037be:	f040 808f 	bne.w	80038e0 <HAL_GPIO_Init+0x1c4>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80037c2:	9b01      	ldr	r3, [sp, #4]
 80037c4:	429c      	cmp	r4, r3
 80037c6:	d011      	beq.n	80037ec <HAL_GPIO_Init+0xd0>
 80037c8:	4985      	ldr	r1, [pc, #532]	; (80039e0 <HAL_GPIO_Init+0x2c4>)
 80037ca:	428c      	cmp	r4, r1
 80037cc:	d00e      	beq.n	80037ec <HAL_GPIO_Init+0xd0>
 80037ce:	4b85      	ldr	r3, [pc, #532]	; (80039e4 <HAL_GPIO_Init+0x2c8>)
 80037d0:	429c      	cmp	r4, r3
 80037d2:	d00b      	beq.n	80037ec <HAL_GPIO_Init+0xd0>
 80037d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037d8:	428c      	cmp	r4, r1
 80037da:	d007      	beq.n	80037ec <HAL_GPIO_Init+0xd0>
 80037dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80037e0:	428c      	cmp	r4, r1
 80037e2:	d003      	beq.n	80037ec <HAL_GPIO_Init+0xd0>
 80037e4:	21dd      	movs	r1, #221	; 0xdd
 80037e6:	487a      	ldr	r0, [pc, #488]	; (80039d0 <HAL_GPIO_Init+0x2b4>)
 80037e8:	f7fe fa7d 	bl	8001ce6 <assert_failed>
      switch (GPIO_Init->Mode)
 80037ec:	f8db 1004 	ldr.w	r1, [fp, #4]
 80037f0:	2912      	cmp	r1, #18
 80037f2:	f000 80d3 	beq.w	800399c <HAL_GPIO_Init+0x280>
 80037f6:	f200 808d 	bhi.w	8003914 <HAL_GPIO_Init+0x1f8>
 80037fa:	2902      	cmp	r1, #2
 80037fc:	f000 80c1 	beq.w	8003982 <HAL_GPIO_Init+0x266>
 8003800:	d877      	bhi.n	80038f2 <HAL_GPIO_Init+0x1d6>
 8003802:	2900      	cmp	r1, #0
 8003804:	f000 8093 	beq.w	800392e <HAL_GPIO_Init+0x212>
 8003808:	2901      	cmp	r1, #1
 800380a:	f000 80ae 	beq.w	800396a <HAL_GPIO_Init+0x24e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800380e:	2fff      	cmp	r7, #255	; 0xff
 8003810:	bf82      	ittt	hi
 8003812:	f108 4e80 	addhi.w	lr, r8, #1073741824	; 0x40000000
 8003816:	f1ae 0e08 	subhi.w	lr, lr, #8
 800381a:	ea4f 018e 	movhi.w	r1, lr, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800381e:	f04f 0e0f 	mov.w	lr, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003822:	bf9d      	ittte	ls
 8003824:	4620      	movls	r0, r4
 8003826:	6822      	ldrls	r2, [r4, #0]
 8003828:	ea4f 0188 	movls.w	r1, r8, lsl #2
 800382c:	6862      	ldrhi	r2, [r4, #4]
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800382e:	fa0e fc01 	lsl.w	ip, lr, r1
 8003832:	ea22 020c 	bic.w	r2, r2, ip
 8003836:	fa05 f101 	lsl.w	r1, r5, r1
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800383a:	bf88      	it	hi
 800383c:	1d20      	addhi	r0, r4, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800383e:	4311      	orrs	r1, r2
 8003840:	6001      	str	r1, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003842:	f8db 0004 	ldr.w	r0, [fp, #4]
 8003846:	00c3      	lsls	r3, r0, #3
 8003848:	d54a      	bpl.n	80038e0 <HAL_GPIO_Init+0x1c4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800384a:	f8da 2018 	ldr.w	r2, [sl, #24]
 800384e:	f028 0103 	bic.w	r1, r8, #3
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	f8ca 2018 	str.w	r2, [sl, #24]
 800385a:	f8da 2018 	ldr.w	r2, [sl, #24]
 800385e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003862:	f002 0201 	and.w	r2, r2, #1
 8003866:	9203      	str	r2, [sp, #12]
 8003868:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800386c:	f008 0c03 	and.w	ip, r8, #3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003870:	9b01      	ldr	r3, [sp, #4]
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003872:	9a03      	ldr	r2, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003874:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8003878:	688a      	ldr	r2, [r1, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800387a:	fa0e fe0c 	lsl.w	lr, lr, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800387e:	429c      	cmp	r4, r3
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003880:	ea22 0e0e 	bic.w	lr, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003884:	f000 809b 	beq.w	80039be <HAL_GPIO_Init+0x2a2>
 8003888:	4a55      	ldr	r2, [pc, #340]	; (80039e0 <HAL_GPIO_Init+0x2c4>)
 800388a:	4294      	cmp	r4, r2
 800388c:	f000 8099 	beq.w	80039c2 <HAL_GPIO_Init+0x2a6>
 8003890:	4b54      	ldr	r3, [pc, #336]	; (80039e4 <HAL_GPIO_Init+0x2c8>)
 8003892:	429c      	cmp	r4, r3
 8003894:	f000 8097 	beq.w	80039c6 <HAL_GPIO_Init+0x2aa>
 8003898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800389c:	4294      	cmp	r4, r2
 800389e:	bf14      	ite	ne
 80038a0:	2204      	movne	r2, #4
 80038a2:	2203      	moveq	r2, #3
 80038a4:	fa02 f20c 	lsl.w	r2, r2, ip
 80038a8:	ea42 020e 	orr.w	r2, r2, lr
        AFIO->EXTICR[position >> 2U] = temp;
 80038ac:	608a      	str	r2, [r1, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038ae:	6832      	ldr	r2, [r6, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038b0:	03c1      	lsls	r1, r0, #15
          SET_BIT(EXTI->IMR, iocurrent);
 80038b2:	bf4c      	ite	mi
 80038b4:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038b6:	43ba      	bicpl	r2, r7
 80038b8:	6032      	str	r2, [r6, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80038ba:	6872      	ldr	r2, [r6, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038bc:	0383      	lsls	r3, r0, #14
          SET_BIT(EXTI->EMR, iocurrent);
 80038be:	bf4c      	ite	mi
 80038c0:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80038c2:	43ba      	bicpl	r2, r7
 80038c4:	6072      	str	r2, [r6, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038c6:	68b2      	ldr	r2, [r6, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038c8:	02c1      	lsls	r1, r0, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 80038ca:	bf4c      	ite	mi
 80038cc:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038ce:	43ba      	bicpl	r2, r7
 80038d0:	60b2      	str	r2, [r6, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038d2:	68f2      	ldr	r2, [r6, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038d4:	0283      	lsls	r3, r0, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 80038d6:	bf4c      	ite	mi
 80038d8:	4317      	orrmi	r7, r2
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038da:	ea22 0707 	bicpl.w	r7, r2, r7
 80038de:	60f7      	str	r7, [r6, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80038e0:	f108 0801 	add.w	r8, r8, #1
 80038e4:	f1b8 0f10 	cmp.w	r8, #16
 80038e8:	f47f af61 	bne.w	80037ae <HAL_GPIO_Init+0x92>
        }
      }
    }
  }
}
 80038ec:	b005      	add	sp, #20
 80038ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80038f2:	2903      	cmp	r1, #3
 80038f4:	d05f      	beq.n	80039b6 <HAL_GPIO_Init+0x29a>
 80038f6:	2911      	cmp	r1, #17
 80038f8:	d189      	bne.n	800380e <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80038fa:	f8db 200c 	ldr.w	r2, [fp, #12]
 80038fe:	3a01      	subs	r2, #1
 8003900:	2a02      	cmp	r2, #2
 8003902:	d903      	bls.n	800390c <HAL_GPIO_Init+0x1f0>
 8003904:	21ec      	movs	r1, #236	; 0xec
 8003906:	4832      	ldr	r0, [pc, #200]	; (80039d0 <HAL_GPIO_Init+0x2b4>)
 8003908:	f7fe f9ed 	bl	8001ce6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800390c:	f8db 500c 	ldr.w	r5, [fp, #12]
 8003910:	3504      	adds	r5, #4
          break;
 8003912:	e77c      	b.n	800380e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8003914:	4834      	ldr	r0, [pc, #208]	; (80039e8 <HAL_GPIO_Init+0x2cc>)
 8003916:	4281      	cmp	r1, r0
 8003918:	d009      	beq.n	800392e <HAL_GPIO_Init+0x212>
 800391a:	d81c      	bhi.n	8003956 <HAL_GPIO_Init+0x23a>
 800391c:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8003920:	4281      	cmp	r1, r0
 8003922:	d004      	beq.n	800392e <HAL_GPIO_Init+0x212>
 8003924:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8003928:	4281      	cmp	r1, r0
 800392a:	f47f af70 	bne.w	800380e <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800392e:	f8db 1008 	ldr.w	r1, [fp, #8]
 8003932:	2902      	cmp	r1, #2
 8003934:	d904      	bls.n	8003940 <HAL_GPIO_Init+0x224>
 8003936:	f240 1107 	movw	r1, #263	; 0x107
 800393a:	4825      	ldr	r0, [pc, #148]	; (80039d0 <HAL_GPIO_Init+0x2b4>)
 800393c:	f7fe f9d3 	bl	8001ce6 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003940:	f8db 1008 	ldr.w	r1, [fp, #8]
 8003944:	b3c9      	cbz	r1, 80039ba <HAL_GPIO_Init+0x29e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003946:	2901      	cmp	r1, #1
            GPIOx->BSRR = ioposition;
 8003948:	bf0c      	ite	eq
 800394a:	f8c4 9010 	streq.w	r9, [r4, #16]
            GPIOx->BRR = ioposition;
 800394e:	f8c4 9014 	strne.w	r9, [r4, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003952:	2508      	movs	r5, #8
 8003954:	e75b      	b.n	800380e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8003956:	4825      	ldr	r0, [pc, #148]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 8003958:	4281      	cmp	r1, r0
 800395a:	d0e8      	beq.n	800392e <HAL_GPIO_Init+0x212>
 800395c:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8003960:	4281      	cmp	r1, r0
 8003962:	d0e4      	beq.n	800392e <HAL_GPIO_Init+0x212>
 8003964:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8003968:	e7de      	b.n	8003928 <HAL_GPIO_Init+0x20c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800396a:	f8db 200c 	ldr.w	r2, [fp, #12]
 800396e:	3a01      	subs	r2, #1
 8003970:	2a02      	cmp	r2, #2
 8003972:	d903      	bls.n	800397c <HAL_GPIO_Init+0x260>
 8003974:	21e5      	movs	r1, #229	; 0xe5
 8003976:	4816      	ldr	r0, [pc, #88]	; (80039d0 <HAL_GPIO_Init+0x2b4>)
 8003978:	f7fe f9b5 	bl	8001ce6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800397c:	f8db 500c 	ldr.w	r5, [fp, #12]
          break;
 8003980:	e745      	b.n	800380e <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003982:	f8db 200c 	ldr.w	r2, [fp, #12]
 8003986:	3a01      	subs	r2, #1
 8003988:	2a02      	cmp	r2, #2
 800398a:	d903      	bls.n	8003994 <HAL_GPIO_Init+0x278>
 800398c:	21f3      	movs	r1, #243	; 0xf3
 800398e:	4810      	ldr	r0, [pc, #64]	; (80039d0 <HAL_GPIO_Init+0x2b4>)
 8003990:	f7fe f9a9 	bl	8001ce6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003994:	f8db 500c 	ldr.w	r5, [fp, #12]
 8003998:	3508      	adds	r5, #8
          break;
 800399a:	e738      	b.n	800380e <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800399c:	f8db 200c 	ldr.w	r2, [fp, #12]
 80039a0:	3a01      	subs	r2, #1
 80039a2:	2a02      	cmp	r2, #2
 80039a4:	d903      	bls.n	80039ae <HAL_GPIO_Init+0x292>
 80039a6:	21fa      	movs	r1, #250	; 0xfa
 80039a8:	4809      	ldr	r0, [pc, #36]	; (80039d0 <HAL_GPIO_Init+0x2b4>)
 80039aa:	f7fe f99c 	bl	8001ce6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80039ae:	f8db 500c 	ldr.w	r5, [fp, #12]
 80039b2:	350c      	adds	r5, #12
          break;
 80039b4:	e72b      	b.n	800380e <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039b6:	2500      	movs	r5, #0
 80039b8:	e729      	b.n	800380e <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039ba:	2504      	movs	r5, #4
 80039bc:	e727      	b.n	800380e <HAL_GPIO_Init+0xf2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039be:	2200      	movs	r2, #0
 80039c0:	e770      	b.n	80038a4 <HAL_GPIO_Init+0x188>
 80039c2:	2201      	movs	r2, #1
 80039c4:	e76e      	b.n	80038a4 <HAL_GPIO_Init+0x188>
 80039c6:	2202      	movs	r2, #2
 80039c8:	e76c      	b.n	80038a4 <HAL_GPIO_Init+0x188>
 80039ca:	bf00      	nop
 80039cc:	40010800 	.word	0x40010800
 80039d0:	08006432 	.word	0x08006432
 80039d4:	10110000 	.word	0x10110000
 80039d8:	10220000 	.word	0x10220000
 80039dc:	40010400 	.word	0x40010400
 80039e0:	40010c00 	.word	0x40010c00
 80039e4:	40011000 	.word	0x40011000
 80039e8:	10210000 	.word	0x10210000
 80039ec:	10310000 	.word	0x10310000
 80039f0:	40021000 	.word	0x40021000

080039f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039f4:	b538      	push	{r3, r4, r5, lr}
 80039f6:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80039f8:	460c      	mov	r4, r1
 80039fa:	b921      	cbnz	r1, 8003a06 <HAL_GPIO_ReadPin+0x12>
 80039fc:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003a00:	4804      	ldr	r0, [pc, #16]	; (8003a14 <HAL_GPIO_ReadPin+0x20>)
 8003a02:	f7fe f970 	bl	8001ce6 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a06:	68ab      	ldr	r3, [r5, #8]
 8003a08:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003a0a:	bf14      	ite	ne
 8003a0c:	2001      	movne	r0, #1
 8003a0e:	2000      	moveq	r0, #0
 8003a10:	bd38      	pop	{r3, r4, r5, pc}
 8003a12:	bf00      	nop
 8003a14:	08006432 	.word	0x08006432

08003a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	4605      	mov	r5, r0
 8003a1c:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003a1e:	460c      	mov	r4, r1
 8003a20:	b921      	cbnz	r1, 8003a2c <HAL_GPIO_WritePin+0x14>
 8003a22:	f240 11e3 	movw	r1, #483	; 0x1e3
 8003a26:	4808      	ldr	r0, [pc, #32]	; (8003a48 <HAL_GPIO_WritePin+0x30>)
 8003a28:	f7fe f95d 	bl	8001ce6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003a2c:	2e01      	cmp	r6, #1
 8003a2e:	d906      	bls.n	8003a3e <HAL_GPIO_WritePin+0x26>
 8003a30:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8003a34:	4804      	ldr	r0, [pc, #16]	; (8003a48 <HAL_GPIO_WritePin+0x30>)
 8003a36:	f7fe f956 	bl	8001ce6 <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a3a:	612c      	str	r4, [r5, #16]
 8003a3c:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
 8003a3e:	2e00      	cmp	r6, #0
 8003a40:	d1fb      	bne.n	8003a3a <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a42:	0424      	lsls	r4, r4, #16
 8003a44:	e7f9      	b.n	8003a3a <HAL_GPIO_WritePin+0x22>
 8003a46:	bf00      	nop
 8003a48:	08006432 	.word	0x08006432

08003a4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a4c:	b538      	push	{r3, r4, r5, lr}
 8003a4e:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003a50:	460c      	mov	r4, r1
 8003a52:	b921      	cbnz	r1, 8003a5e <HAL_GPIO_TogglePin+0x12>
 8003a54:	f240 11f9 	movw	r1, #505	; 0x1f9
 8003a58:	4803      	ldr	r0, [pc, #12]	; (8003a68 <HAL_GPIO_TogglePin+0x1c>)
 8003a5a:	f7fe f944 	bl	8001ce6 <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 8003a5e:	68eb      	ldr	r3, [r5, #12]
 8003a60:	405c      	eors	r4, r3
 8003a62:	60ec      	str	r4, [r5, #12]
 8003a64:	bd38      	pop	{r3, r4, r5, pc}
 8003a66:	bf00      	nop
 8003a68:	08006432 	.word	0x08006432

08003a6c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003a6c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003a6e:	4604      	mov	r4, r0
 8003a70:	2800      	cmp	r0, #0
 8003a72:	d032      	beq.n	8003ada <HAL_IWDG_Init+0x6e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 8003a74:	6802      	ldr	r2, [r0, #0]
 8003a76:	4b1a      	ldr	r3, [pc, #104]	; (8003ae0 <HAL_IWDG_Init+0x74>)
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d003      	beq.n	8003a84 <HAL_IWDG_Init+0x18>
 8003a7c:	21ad      	movs	r1, #173	; 0xad
 8003a7e:	4819      	ldr	r0, [pc, #100]	; (8003ae4 <HAL_IWDG_Init+0x78>)
 8003a80:	f7fe f931 	bl	8001ce6 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 8003a84:	6863      	ldr	r3, [r4, #4]
 8003a86:	2b06      	cmp	r3, #6
 8003a88:	d903      	bls.n	8003a92 <HAL_IWDG_Init+0x26>
 8003a8a:	21ae      	movs	r1, #174	; 0xae
 8003a8c:	4815      	ldr	r0, [pc, #84]	; (8003ae4 <HAL_IWDG_Init+0x78>)
 8003a8e:	f7fe f92a 	bl	8001ce6 <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 8003a92:	68a3      	ldr	r3, [r4, #8]
 8003a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a98:	d303      	bcc.n	8003aa2 <HAL_IWDG_Init+0x36>
 8003a9a:	21af      	movs	r1, #175	; 0xaf
 8003a9c:	4811      	ldr	r0, [pc, #68]	; (8003ae4 <HAL_IWDG_Init+0x78>)
 8003a9e:	f7fe f922 	bl	8001ce6 <assert_failed>

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8003aa2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003aaa:	f245 5255 	movw	r2, #21845	; 0x5555
 8003aae:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003ab0:	6862      	ldr	r2, [r4, #4]
 8003ab2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003ab4:	68a2      	ldr	r2, [r4, #8]
 8003ab6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003ab8:	f7fe fe3c 	bl	8002734 <HAL_GetTick>
 8003abc:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != RESET)
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	68d8      	ldr	r0, [r3, #12]
 8003ac2:	b918      	cbnz	r0, 8003acc <HAL_IWDG_Init+0x60>
      return HAL_TIMEOUT;
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003ac4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003ac8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003aca:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003acc:	f7fe fe32 	bl	8002734 <HAL_GetTick>
 8003ad0:	1b40      	subs	r0, r0, r5
 8003ad2:	2830      	cmp	r0, #48	; 0x30
 8003ad4:	d9f3      	bls.n	8003abe <HAL_IWDG_Init+0x52>
      return HAL_TIMEOUT;
 8003ad6:	2003      	movs	r0, #3
}
 8003ad8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003ada:	2001      	movs	r0, #1
 8003adc:	bd38      	pop	{r3, r4, r5, pc}
 8003ade:	bf00      	nop
 8003ae0:	40003000 	.word	0x40003000
 8003ae4:	0800646b 	.word	0x0800646b

08003ae8 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003ae8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003aec:	6803      	ldr	r3, [r0, #0]

  /* Return function status */
  return HAL_OK;
}
 8003aee:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003af0:	601a      	str	r2, [r3, #0]
}
 8003af2:	4770      	bx	lr

08003af4 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003af4:	4770      	bx	lr
	...

08003af8 <HAL_PWR_PVD_IRQHandler>:
{
 8003af8:	b510      	push	{r4, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003afa:	4c05      	ldr	r4, [pc, #20]	; (8003b10 <HAL_PWR_PVD_IRQHandler+0x18>)
 8003afc:	6963      	ldr	r3, [r4, #20]
 8003afe:	03db      	lsls	r3, r3, #15
 8003b00:	d504      	bpl.n	8003b0c <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 8003b02:	f7ff fff7 	bl	8003af4 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b0a:	6163      	str	r3, [r4, #20]
 8003b0c:	bd10      	pop	{r4, pc}
 8003b0e:	bf00      	nop
 8003b10:	40010400 	.word	0x40010400

08003b14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   uint32_t tickstart = 0U;
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 8003b18:	4604      	mov	r4, r0
 8003b1a:	b920      	cbnz	r0, 8003b26 <HAL_RCC_OscConfig+0x12>
 8003b1c:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8003b20:	48a5      	ldr	r0, [pc, #660]	; (8003db8 <HAL_RCC_OscConfig+0x2a4>)
 8003b22:	f7fe f8e0 	bl	8001ce6 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	b133      	cbz	r3, 8003b38 <HAL_RCC_OscConfig+0x24>
 8003b2a:	071a      	lsls	r2, r3, #28
 8003b2c:	d104      	bne.n	8003b38 <HAL_RCC_OscConfig+0x24>
 8003b2e:	f240 1171 	movw	r1, #369	; 0x171
 8003b32:	48a1      	ldr	r0, [pc, #644]	; (8003db8 <HAL_RCC_OscConfig+0x2a4>)
 8003b34:	f7fe f8d7 	bl	8001ce6 <assert_failed>
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	07db      	lsls	r3, r3, #31
 8003b3c:	d418      	bmi.n	8003b70 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	079f      	lsls	r7, r3, #30
 8003b42:	d472      	bmi.n	8003c2a <HAL_RCC_OscConfig+0x116>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	0719      	lsls	r1, r3, #28
 8003b48:	f100 80b9 	bmi.w	8003cbe <HAL_RCC_OscConfig+0x1aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4c:	6823      	ldr	r3, [r4, #0]
 8003b4e:	075a      	lsls	r2, r3, #29
 8003b50:	f100 80eb 	bmi.w	8003d2a <HAL_RCC_OscConfig+0x216>
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003b54:	69e3      	ldr	r3, [r4, #28]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d904      	bls.n	8003b64 <HAL_RCC_OscConfig+0x50>
 8003b5a:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003b5e:	4896      	ldr	r0, [pc, #600]	; (8003db8 <HAL_RCC_OscConfig+0x2a4>)
 8003b60:	f7fe f8c1 	bl	8001ce6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b64:	69e2      	ldr	r2, [r4, #28]
 8003b66:	2a00      	cmp	r2, #0
 8003b68:	f040 815e 	bne.w	8003e28 <HAL_RCC_OscConfig+0x314>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	e020      	b.n	8003bb2 <HAL_RCC_OscConfig+0x9e>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003b70:	6863      	ldr	r3, [r4, #4]
 8003b72:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8003b76:	d007      	beq.n	8003b88 <HAL_RCC_OscConfig+0x74>
 8003b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b7c:	d004      	beq.n	8003b88 <HAL_RCC_OscConfig+0x74>
 8003b7e:	f240 1177 	movw	r1, #375	; 0x177
 8003b82:	488d      	ldr	r0, [pc, #564]	; (8003db8 <HAL_RCC_OscConfig+0x2a4>)
 8003b84:	f7fe f8af 	bl	8001ce6 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003b88:	4d8c      	ldr	r5, [pc, #560]	; (8003dbc <HAL_RCC_OscConfig+0x2a8>)
 8003b8a:	686b      	ldr	r3, [r5, #4]
 8003b8c:	f003 030c 	and.w	r3, r3, #12
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d007      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x90>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b94:	686b      	ldr	r3, [r5, #4]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0xa4>
 8003b9e:	686b      	ldr	r3, [r5, #4]
 8003ba0:	03de      	lsls	r6, r3, #15
 8003ba2:	d509      	bpl.n	8003bb8 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba4:	682b      	ldr	r3, [r5, #0]
 8003ba6:	039d      	lsls	r5, r3, #14
 8003ba8:	d5c9      	bpl.n	8003b3e <HAL_RCC_OscConfig+0x2a>
 8003baa:	6863      	ldr	r3, [r4, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1c6      	bne.n	8003b3e <HAL_RCC_OscConfig+0x2a>
        return HAL_ERROR;
 8003bb0:	2001      	movs	r0, #1
}
 8003bb2:	b002      	add	sp, #8
 8003bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb8:	6863      	ldr	r3, [r4, #4]
 8003bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbe:	d110      	bne.n	8003be2 <HAL_RCC_OscConfig+0xce>
 8003bc0:	682b      	ldr	r3, [r5, #0]
 8003bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003bc8:	f7fe fdb4 	bl	8002734 <HAL_GetTick>
 8003bcc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	682b      	ldr	r3, [r5, #0]
 8003bd0:	0398      	lsls	r0, r3, #14
 8003bd2:	d4b4      	bmi.n	8003b3e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bd4:	f7fe fdae 	bl	8002734 <HAL_GetTick>
 8003bd8:	1b80      	subs	r0, r0, r6
 8003bda:	2864      	cmp	r0, #100	; 0x64
 8003bdc:	d9f7      	bls.n	8003bce <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8003bde:	2003      	movs	r0, #3
 8003be0:	e7e7      	b.n	8003bb2 <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be2:	b99b      	cbnz	r3, 8003c0c <HAL_RCC_OscConfig+0xf8>
 8003be4:	682b      	ldr	r3, [r5, #0]
 8003be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bea:	602b      	str	r3, [r5, #0]
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003bf4:	f7fe fd9e 	bl	8002734 <HAL_GetTick>
 8003bf8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfa:	682b      	ldr	r3, [r5, #0]
 8003bfc:	0399      	lsls	r1, r3, #14
 8003bfe:	d59e      	bpl.n	8003b3e <HAL_RCC_OscConfig+0x2a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c00:	f7fe fd98 	bl	8002734 <HAL_GetTick>
 8003c04:	1b80      	subs	r0, r0, r6
 8003c06:	2864      	cmp	r0, #100	; 0x64
 8003c08:	d9f7      	bls.n	8003bfa <HAL_RCC_OscConfig+0xe6>
 8003c0a:	e7e8      	b.n	8003bde <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c10:	682b      	ldr	r3, [r5, #0]
 8003c12:	d103      	bne.n	8003c1c <HAL_RCC_OscConfig+0x108>
 8003c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c18:	602b      	str	r3, [r5, #0]
 8003c1a:	e7d1      	b.n	8003bc0 <HAL_RCC_OscConfig+0xac>
 8003c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c20:	602b      	str	r3, [r5, #0]
 8003c22:	682b      	ldr	r3, [r5, #0]
 8003c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c28:	e7cd      	b.n	8003bc6 <HAL_RCC_OscConfig+0xb2>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003c2a:	6923      	ldr	r3, [r4, #16]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d904      	bls.n	8003c3a <HAL_RCC_OscConfig+0x126>
 8003c30:	f240 11ab 	movw	r1, #427	; 0x1ab
 8003c34:	4860      	ldr	r0, [pc, #384]	; (8003db8 <HAL_RCC_OscConfig+0x2a4>)
 8003c36:	f7fe f856 	bl	8001ce6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003c3a:	6963      	ldr	r3, [r4, #20]
 8003c3c:	2b1f      	cmp	r3, #31
 8003c3e:	d904      	bls.n	8003c4a <HAL_RCC_OscConfig+0x136>
 8003c40:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8003c44:	485c      	ldr	r0, [pc, #368]	; (8003db8 <HAL_RCC_OscConfig+0x2a4>)
 8003c46:	f7fe f84e 	bl	8001ce6 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c4a:	4d5c      	ldr	r5, [pc, #368]	; (8003dbc <HAL_RCC_OscConfig+0x2a8>)
 8003c4c:	686b      	ldr	r3, [r5, #4]
 8003c4e:	f013 0f0c 	tst.w	r3, #12
 8003c52:	d007      	beq.n	8003c64 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c54:	686b      	ldr	r3, [r5, #4]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d110      	bne.n	8003c80 <HAL_RCC_OscConfig+0x16c>
 8003c5e:	686b      	ldr	r3, [r5, #4]
 8003c60:	03da      	lsls	r2, r3, #15
 8003c62:	d40d      	bmi.n	8003c80 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c64:	682b      	ldr	r3, [r5, #0]
 8003c66:	079b      	lsls	r3, r3, #30
 8003c68:	d502      	bpl.n	8003c70 <HAL_RCC_OscConfig+0x15c>
 8003c6a:	6923      	ldr	r3, [r4, #16]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d19f      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c70:	682b      	ldr	r3, [r5, #0]
 8003c72:	6962      	ldr	r2, [r4, #20]
 8003c74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003c78:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003c7c:	602b      	str	r3, [r5, #0]
 8003c7e:	e761      	b.n	8003b44 <HAL_RCC_OscConfig+0x30>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c80:	6922      	ldr	r2, [r4, #16]
 8003c82:	4b4f      	ldr	r3, [pc, #316]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	b16a      	cbz	r2, 8003ca2 <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_ENABLE();
 8003c86:	2201      	movs	r2, #1
 8003c88:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003c8a:	f7fe fd53 	bl	8002734 <HAL_GetTick>
 8003c8e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	079f      	lsls	r7, r3, #30
 8003c94:	d4ec      	bmi.n	8003c70 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c96:	f7fe fd4d 	bl	8002734 <HAL_GetTick>
 8003c9a:	1b80      	subs	r0, r0, r6
 8003c9c:	2802      	cmp	r0, #2
 8003c9e:	d9f7      	bls.n	8003c90 <HAL_RCC_OscConfig+0x17c>
 8003ca0:	e79d      	b.n	8003bde <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_DISABLE();
 8003ca2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fd46 	bl	8002734 <HAL_GetTick>
 8003ca8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003caa:	682b      	ldr	r3, [r5, #0]
 8003cac:	0798      	lsls	r0, r3, #30
 8003cae:	f57f af49 	bpl.w	8003b44 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb2:	f7fe fd3f 	bl	8002734 <HAL_GetTick>
 8003cb6:	1b80      	subs	r0, r0, r6
 8003cb8:	2802      	cmp	r0, #2
 8003cba:	d9f6      	bls.n	8003caa <HAL_RCC_OscConfig+0x196>
 8003cbc:	e78f      	b.n	8003bde <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003cbe:	69a3      	ldr	r3, [r4, #24]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d904      	bls.n	8003cce <HAL_RCC_OscConfig+0x1ba>
 8003cc4:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8003cc8:	483b      	ldr	r0, [pc, #236]	; (8003db8 <HAL_RCC_OscConfig+0x2a4>)
 8003cca:	f7fe f80c 	bl	8001ce6 <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cce:	69a2      	ldr	r2, [r4, #24]
 8003cd0:	4d3a      	ldr	r5, [pc, #232]	; (8003dbc <HAL_RCC_OscConfig+0x2a8>)
 8003cd2:	4b3c      	ldr	r3, [pc, #240]	; (8003dc4 <HAL_RCC_OscConfig+0x2b0>)
 8003cd4:	b1da      	cbz	r2, 8003d0e <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003cda:	f7fe fd2b 	bl	8002734 <HAL_GetTick>
 8003cde:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ce2:	079b      	lsls	r3, r3, #30
 8003ce4:	d50d      	bpl.n	8003d02 <HAL_RCC_OscConfig+0x1ee>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ce6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003cea:	4b37      	ldr	r3, [pc, #220]	; (8003dc8 <HAL_RCC_OscConfig+0x2b4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cf2:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8003cf4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8003cf6:	9b01      	ldr	r3, [sp, #4]
 8003cf8:	1e5a      	subs	r2, r3, #1
 8003cfa:	9201      	str	r2, [sp, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1f9      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x1e0>
 8003d00:	e724      	b.n	8003b4c <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d02:	f7fe fd17 	bl	8002734 <HAL_GetTick>
 8003d06:	1b80      	subs	r0, r0, r6
 8003d08:	2802      	cmp	r0, #2
 8003d0a:	d9e9      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x1cc>
 8003d0c:	e767      	b.n	8003bde <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_LSI_DISABLE();
 8003d0e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003d10:	f7fe fd10 	bl	8002734 <HAL_GetTick>
 8003d14:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003d18:	079f      	lsls	r7, r3, #30
 8003d1a:	f57f af17 	bpl.w	8003b4c <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d1e:	f7fe fd09 	bl	8002734 <HAL_GetTick>
 8003d22:	1b80      	subs	r0, r0, r6
 8003d24:	2802      	cmp	r0, #2
 8003d26:	d9f6      	bls.n	8003d16 <HAL_RCC_OscConfig+0x202>
 8003d28:	e759      	b.n	8003bde <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003d2a:	68e3      	ldr	r3, [r4, #12]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d906      	bls.n	8003d3e <HAL_RCC_OscConfig+0x22a>
 8003d30:	2b05      	cmp	r3, #5
 8003d32:	d004      	beq.n	8003d3e <HAL_RCC_OscConfig+0x22a>
 8003d34:	f240 211b 	movw	r1, #539	; 0x21b
 8003d38:	481f      	ldr	r0, [pc, #124]	; (8003db8 <HAL_RCC_OscConfig+0x2a4>)
 8003d3a:	f7fd ffd4 	bl	8001ce6 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d3e:	4d1f      	ldr	r5, [pc, #124]	; (8003dbc <HAL_RCC_OscConfig+0x2a8>)
 8003d40:	69eb      	ldr	r3, [r5, #28]
 8003d42:	00d8      	lsls	r0, r3, #3
 8003d44:	d424      	bmi.n	8003d90 <HAL_RCC_OscConfig+0x27c>
      pwrclkchanged = SET;
 8003d46:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d48:	69eb      	ldr	r3, [r5, #28]
 8003d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	61eb      	str	r3, [r5, #28]
 8003d50:	69eb      	ldr	r3, [r5, #28]
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5a:	4e1c      	ldr	r6, [pc, #112]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003d5c:	6833      	ldr	r3, [r6, #0]
 8003d5e:	05d9      	lsls	r1, r3, #23
 8003d60:	d518      	bpl.n	8003d94 <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d62:	68e3      	ldr	r3, [r4, #12]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d133      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x2bc>
 8003d68:	6a2b      	ldr	r3, [r5, #32]
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003d70:	f7fe fce0 	bl	8002734 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d74:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003d78:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7a:	6a2b      	ldr	r3, [r5, #32]
 8003d7c:	079b      	lsls	r3, r3, #30
 8003d7e:	d54c      	bpl.n	8003e1a <HAL_RCC_OscConfig+0x306>
    if(pwrclkchanged == SET)
 8003d80:	2f00      	cmp	r7, #0
 8003d82:	f43f aee7 	beq.w	8003b54 <HAL_RCC_OscConfig+0x40>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d86:	69eb      	ldr	r3, [r5, #28]
 8003d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	61eb      	str	r3, [r5, #28]
 8003d8e:	e6e1      	b.n	8003b54 <HAL_RCC_OscConfig+0x40>
    FlagStatus       pwrclkchanged = RESET;
 8003d90:	2700      	movs	r7, #0
 8003d92:	e7e2      	b.n	8003d5a <HAL_RCC_OscConfig+0x246>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d94:	6833      	ldr	r3, [r6, #0]
 8003d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d9a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003d9c:	f7fe fcca 	bl	8002734 <HAL_GetTick>
 8003da0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da2:	6833      	ldr	r3, [r6, #0]
 8003da4:	05da      	lsls	r2, r3, #23
 8003da6:	d4dc      	bmi.n	8003d62 <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da8:	f7fe fcc4 	bl	8002734 <HAL_GetTick>
 8003dac:	eba0 0008 	sub.w	r0, r0, r8
 8003db0:	2864      	cmp	r0, #100	; 0x64
 8003db2:	d9f6      	bls.n	8003da2 <HAL_RCC_OscConfig+0x28e>
 8003db4:	e713      	b.n	8003bde <HAL_RCC_OscConfig+0xca>
 8003db6:	bf00      	nop
 8003db8:	080064a4 	.word	0x080064a4
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	42420000 	.word	0x42420000
 8003dc4:	42420480 	.word	0x42420480
 8003dc8:	20000058 	.word	0x20000058
 8003dcc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd0:	b9ab      	cbnz	r3, 8003dfe <HAL_RCC_OscConfig+0x2ea>
 8003dd2:	6a2b      	ldr	r3, [r5, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd8:	f023 0301 	bic.w	r3, r3, #1
 8003ddc:	622b      	str	r3, [r5, #32]
 8003dde:	6a2b      	ldr	r3, [r5, #32]
 8003de0:	f023 0304 	bic.w	r3, r3, #4
 8003de4:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003de6:	f7fe fca5 	bl	8002734 <HAL_GetTick>
 8003dea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dec:	6a2b      	ldr	r3, [r5, #32]
 8003dee:	0798      	lsls	r0, r3, #30
 8003df0:	d5c6      	bpl.n	8003d80 <HAL_RCC_OscConfig+0x26c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df2:	f7fe fc9f 	bl	8002734 <HAL_GetTick>
 8003df6:	1b80      	subs	r0, r0, r6
 8003df8:	4540      	cmp	r0, r8
 8003dfa:	d9f7      	bls.n	8003dec <HAL_RCC_OscConfig+0x2d8>
 8003dfc:	e6ef      	b.n	8003bde <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dfe:	2b05      	cmp	r3, #5
 8003e00:	6a2b      	ldr	r3, [r5, #32]
 8003e02:	d103      	bne.n	8003e0c <HAL_RCC_OscConfig+0x2f8>
 8003e04:	f043 0304 	orr.w	r3, r3, #4
 8003e08:	622b      	str	r3, [r5, #32]
 8003e0a:	e7ad      	b.n	8003d68 <HAL_RCC_OscConfig+0x254>
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	622b      	str	r3, [r5, #32]
 8003e12:	6a2b      	ldr	r3, [r5, #32]
 8003e14:	f023 0304 	bic.w	r3, r3, #4
 8003e18:	e7a9      	b.n	8003d6e <HAL_RCC_OscConfig+0x25a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e1a:	f7fe fc8b 	bl	8002734 <HAL_GetTick>
 8003e1e:	eba0 0008 	sub.w	r0, r0, r8
 8003e22:	42b0      	cmp	r0, r6
 8003e24:	d9a9      	bls.n	8003d7a <HAL_RCC_OscConfig+0x266>
 8003e26:	e6da      	b.n	8003bde <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e28:	4d38      	ldr	r5, [pc, #224]	; (8003f0c <HAL_RCC_OscConfig+0x3f8>)
 8003e2a:	686b      	ldr	r3, [r5, #4]
 8003e2c:	f003 030c 	and.w	r3, r3, #12
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	f43f aebd 	beq.w	8003bb0 <HAL_RCC_OscConfig+0x9c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e36:	2a02      	cmp	r2, #2
 8003e38:	4e35      	ldr	r6, [pc, #212]	; (8003f10 <HAL_RCC_OscConfig+0x3fc>)
 8003e3a:	d157      	bne.n	8003eec <HAL_RCC_OscConfig+0x3d8>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003e3c:	6a23      	ldr	r3, [r4, #32]
 8003e3e:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8003e42:	d004      	beq.n	8003e4e <HAL_RCC_OscConfig+0x33a>
 8003e44:	f240 21c2 	movw	r1, #706	; 0x2c2
 8003e48:	4832      	ldr	r0, [pc, #200]	; (8003f14 <HAL_RCC_OscConfig+0x400>)
 8003e4a:	f7fd ff4c 	bl	8001ce6 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e50:	f433 2240 	bics.w	r2, r3, #786432	; 0xc0000
 8003e54:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e58:	d010      	beq.n	8003e7c <HAL_RCC_OscConfig+0x368>
 8003e5a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003e5e:	d00d      	beq.n	8003e7c <HAL_RCC_OscConfig+0x368>
 8003e60:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003e64:	d00a      	beq.n	8003e7c <HAL_RCC_OscConfig+0x368>
 8003e66:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8003e6a:	d007      	beq.n	8003e7c <HAL_RCC_OscConfig+0x368>
 8003e6c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003e70:	d004      	beq.n	8003e7c <HAL_RCC_OscConfig+0x368>
 8003e72:	f240 21c3 	movw	r1, #707	; 0x2c3
 8003e76:	4827      	ldr	r0, [pc, #156]	; (8003f14 <HAL_RCC_OscConfig+0x400>)
 8003e78:	f7fd ff35 	bl	8001ce6 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003e80:	f7fe fc58 	bl	8002734 <HAL_GetTick>
 8003e84:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e86:	682b      	ldr	r3, [r5, #0]
 8003e88:	0199      	lsls	r1, r3, #6
 8003e8a:	d429      	bmi.n	8003ee0 <HAL_RCC_OscConfig+0x3cc>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e8c:	6a23      	ldr	r3, [r4, #32]
 8003e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e92:	d10e      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x39e>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8003e94:	68a3      	ldr	r3, [r4, #8]
 8003e96:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8003e9a:	d004      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x392>
 8003e9c:	f240 21d9 	movw	r1, #729	; 0x2d9
 8003ea0:	481c      	ldr	r0, [pc, #112]	; (8003f14 <HAL_RCC_OscConfig+0x400>)
 8003ea2:	f7fd ff20 	bl	8001ce6 <assert_failed>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ea6:	686b      	ldr	r3, [r5, #4]
 8003ea8:	68a2      	ldr	r2, [r4, #8]
 8003eaa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eb2:	6a23      	ldr	r3, [r4, #32]
 8003eb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003eb6:	686a      	ldr	r2, [r5, #4]
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003ec6:	f7fe fc35 	bl	8002734 <HAL_GetTick>
 8003eca:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	019a      	lsls	r2, r3, #6
 8003ed0:	f53f ae4c 	bmi.w	8003b6c <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fe fc2e 	bl	8002734 <HAL_GetTick>
 8003ed8:	1b00      	subs	r0, r0, r4
 8003eda:	2802      	cmp	r0, #2
 8003edc:	d9f6      	bls.n	8003ecc <HAL_RCC_OscConfig+0x3b8>
 8003ede:	e67e      	b.n	8003bde <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee0:	f7fe fc28 	bl	8002734 <HAL_GetTick>
 8003ee4:	1bc0      	subs	r0, r0, r7
 8003ee6:	2802      	cmp	r0, #2
 8003ee8:	d9cd      	bls.n	8003e86 <HAL_RCC_OscConfig+0x372>
 8003eea:	e678      	b.n	8003bde <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_PLL_DISABLE();
 8003eec:	2300      	movs	r3, #0
 8003eee:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003ef0:	f7fe fc20 	bl	8002734 <HAL_GetTick>
 8003ef4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef6:	682b      	ldr	r3, [r5, #0]
 8003ef8:	019b      	lsls	r3, r3, #6
 8003efa:	f57f ae37 	bpl.w	8003b6c <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efe:	f7fe fc19 	bl	8002734 <HAL_GetTick>
 8003f02:	1b00      	subs	r0, r0, r4
 8003f04:	2802      	cmp	r0, #2
 8003f06:	d9f6      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x3e2>
 8003f08:	e669      	b.n	8003bde <HAL_RCC_OscConfig+0xca>
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	42420060 	.word	0x42420060
 8003f14:	080064a4 	.word	0x080064a4

08003f18 <HAL_RCC_GetSysClockFreq>:
{
 8003f18:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f1a:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8003f1c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f1e:	ac02      	add	r4, sp, #8
 8003f20:	f103 0510 	add.w	r5, r3, #16
 8003f24:	4622      	mov	r2, r4
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	3308      	adds	r3, #8
 8003f2c:	c203      	stmia	r2!, {r0, r1}
 8003f2e:	42ab      	cmp	r3, r5
 8003f30:	4614      	mov	r4, r2
 8003f32:	d1f7      	bne.n	8003f24 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f34:	2301      	movs	r3, #1
 8003f36:	f88d 3004 	strb.w	r3, [sp, #4]
 8003f3a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8003f3c:	4911      	ldr	r1, [pc, #68]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f3e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8003f42:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003f44:	f003 020c 	and.w	r2, r3, #12
 8003f48:	2a08      	cmp	r2, #8
 8003f4a:	d117      	bne.n	8003f7c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f4c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003f50:	a806      	add	r0, sp, #24
 8003f52:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f54:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f56:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f5a:	d50c      	bpl.n	8003f76 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f5c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f5e:	480a      	ldr	r0, [pc, #40]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f60:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f64:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f66:	aa06      	add	r2, sp, #24
 8003f68:	4413      	add	r3, r2
 8003f6a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f6e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003f72:	b007      	add	sp, #28
 8003f74:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f76:	4805      	ldr	r0, [pc, #20]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x74>)
 8003f78:	4350      	muls	r0, r2
 8003f7a:	e7fa      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8003f7c:	4802      	ldr	r0, [pc, #8]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8003f7e:	e7f8      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x5a>
 8003f80:	0800616c 	.word	0x0800616c
 8003f84:	40021000 	.word	0x40021000
 8003f88:	007a1200 	.word	0x007a1200
 8003f8c:	003d0900 	.word	0x003d0900

08003f90 <HAL_RCC_ClockConfig>:
{
 8003f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f94:	460e      	mov	r6, r1
  assert_param(RCC_ClkInitStruct != NULL);
 8003f96:	4604      	mov	r4, r0
 8003f98:	b920      	cbnz	r0, 8003fa4 <HAL_RCC_ClockConfig+0x14>
 8003f9a:	f240 312e 	movw	r1, #814	; 0x32e
 8003f9e:	487f      	ldr	r0, [pc, #508]	; (800419c <HAL_RCC_ClockConfig+0x20c>)
 8003fa0:	f7fd fea1 	bl	8001ce6 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	071d      	lsls	r5, r3, #28
 8003fa8:	d104      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x24>
 8003faa:	f240 312f 	movw	r1, #815	; 0x32f
 8003fae:	487b      	ldr	r0, [pc, #492]	; (800419c <HAL_RCC_ClockConfig+0x20c>)
 8003fb0:	f7fd fe99 	bl	8001ce6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003fb4:	2e02      	cmp	r6, #2
 8003fb6:	d904      	bls.n	8003fc2 <HAL_RCC_ClockConfig+0x32>
 8003fb8:	f44f 714c 	mov.w	r1, #816	; 0x330
 8003fbc:	4877      	ldr	r0, [pc, #476]	; (800419c <HAL_RCC_ClockConfig+0x20c>)
 8003fbe:	f7fd fe92 	bl	8001ce6 <assert_failed>
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003fc2:	4a77      	ldr	r2, [pc, #476]	; (80041a0 <HAL_RCC_ClockConfig+0x210>)
 8003fc4:	6813      	ldr	r3, [r2, #0]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	429e      	cmp	r6, r3
 8003fcc:	d83d      	bhi.n	800404a <HAL_RCC_ClockConfig+0xba>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	0798      	lsls	r0, r3, #30
 8003fd2:	d447      	bmi.n	8004064 <HAL_RCC_ClockConfig+0xd4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	07da      	lsls	r2, r3, #31
 8003fd8:	d470      	bmi.n	80040bc <HAL_RCC_ClockConfig+0x12c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003fda:	4a71      	ldr	r2, [pc, #452]	; (80041a0 <HAL_RCC_ClockConfig+0x210>)
 8003fdc:	6813      	ldr	r3, [r2, #0]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	429e      	cmp	r6, r3
 8003fe4:	f0c0 80b5 	bcc.w	8004152 <HAL_RCC_ClockConfig+0x1c2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	4d6e      	ldr	r5, [pc, #440]	; (80041a4 <HAL_RCC_ClockConfig+0x214>)
 8003fec:	f013 0f04 	tst.w	r3, #4
 8003ff0:	f040 80bb 	bne.w	800416a <HAL_RCC_ClockConfig+0x1da>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	071b      	lsls	r3, r3, #28
 8003ff8:	d517      	bpl.n	800402a <HAL_RCC_ClockConfig+0x9a>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003ffa:	6923      	ldr	r3, [r4, #16]
 8003ffc:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8004000:	d00c      	beq.n	800401c <HAL_RCC_ClockConfig+0x8c>
 8004002:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004006:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800400a:	d007      	beq.n	800401c <HAL_RCC_ClockConfig+0x8c>
 800400c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004010:	d004      	beq.n	800401c <HAL_RCC_ClockConfig+0x8c>
 8004012:	f44f 716e 	mov.w	r1, #952	; 0x3b8
 8004016:	4861      	ldr	r0, [pc, #388]	; (800419c <HAL_RCC_ClockConfig+0x20c>)
 8004018:	f7fd fe65 	bl	8001ce6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800401c:	686b      	ldr	r3, [r5, #4]
 800401e:	6922      	ldr	r2, [r4, #16]
 8004020:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004024:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004028:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800402a:	f7ff ff75 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 800402e:	686b      	ldr	r3, [r5, #4]
 8004030:	4a5d      	ldr	r2, [pc, #372]	; (80041a8 <HAL_RCC_ClockConfig+0x218>)
 8004032:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004036:	5cd3      	ldrb	r3, [r2, r3]
 8004038:	40d8      	lsrs	r0, r3
 800403a:	4b5c      	ldr	r3, [pc, #368]	; (80041ac <HAL_RCC_ClockConfig+0x21c>)
 800403c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800403e:	2000      	movs	r0, #0
 8004040:	f7fe fb36 	bl	80026b0 <HAL_InitTick>
  return HAL_OK;
 8004044:	2000      	movs	r0, #0
}
 8004046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	6813      	ldr	r3, [r2, #0]
 800404c:	f023 0307 	bic.w	r3, r3, #7
 8004050:	4333      	orrs	r3, r6
 8004052:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004054:	6813      	ldr	r3, [r2, #0]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	429e      	cmp	r6, r3
 800405c:	d0b7      	beq.n	8003fce <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
 800405e:	2001      	movs	r0, #1
 8004060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004064:	4d4f      	ldr	r5, [pc, #316]	; (80041a4 <HAL_RCC_ClockConfig+0x214>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004066:	f013 0f04 	tst.w	r3, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800406a:	bf1e      	ittt	ne
 800406c:	686a      	ldrne	r2, [r5, #4]
 800406e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8004072:	606a      	strne	r2, [r5, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004074:	0719      	lsls	r1, r3, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004076:	bf42      	ittt	mi
 8004078:	686b      	ldrmi	r3, [r5, #4]
 800407a:	f443 5360 	orrmi.w	r3, r3, #14336	; 0x3800
 800407e:	606b      	strmi	r3, [r5, #4]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004080:	68a3      	ldr	r3, [r4, #8]
 8004082:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8004086:	d012      	beq.n	80040ae <HAL_RCC_ClockConfig+0x11e>
 8004088:	f023 0220 	bic.w	r2, r3, #32
 800408c:	2a90      	cmp	r2, #144	; 0x90
 800408e:	d00e      	beq.n	80040ae <HAL_RCC_ClockConfig+0x11e>
 8004090:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004094:	2aa0      	cmp	r2, #160	; 0xa0
 8004096:	d00a      	beq.n	80040ae <HAL_RCC_ClockConfig+0x11e>
 8004098:	f023 0210 	bic.w	r2, r3, #16
 800409c:	2ac0      	cmp	r2, #192	; 0xc0
 800409e:	d006      	beq.n	80040ae <HAL_RCC_ClockConfig+0x11e>
 80040a0:	2bf0      	cmp	r3, #240	; 0xf0
 80040a2:	d004      	beq.n	80040ae <HAL_RCC_ClockConfig+0x11e>
 80040a4:	f240 3156 	movw	r1, #854	; 0x356
 80040a8:	483c      	ldr	r0, [pc, #240]	; (800419c <HAL_RCC_ClockConfig+0x20c>)
 80040aa:	f7fd fe1c 	bl	8001ce6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ae:	686b      	ldr	r3, [r5, #4]
 80040b0:	68a2      	ldr	r2, [r4, #8]
 80040b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040b6:	4313      	orrs	r3, r2
 80040b8:	606b      	str	r3, [r5, #4]
 80040ba:	e78b      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x44>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80040bc:	6863      	ldr	r3, [r4, #4]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d904      	bls.n	80040cc <HAL_RCC_ClockConfig+0x13c>
 80040c2:	f240 315d 	movw	r1, #861	; 0x35d
 80040c6:	4835      	ldr	r0, [pc, #212]	; (800419c <HAL_RCC_ClockConfig+0x20c>)
 80040c8:	f7fd fe0d 	bl	8001ce6 <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040cc:	6862      	ldr	r2, [r4, #4]
 80040ce:	4d35      	ldr	r5, [pc, #212]	; (80041a4 <HAL_RCC_ClockConfig+0x214>)
 80040d0:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d2:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d4:	d11d      	bne.n	8004112 <HAL_RCC_ClockConfig+0x182>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040da:	d0c0      	beq.n	800405e <HAL_RCC_ClockConfig+0xce>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040dc:	686b      	ldr	r3, [r5, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040de:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040e2:	f023 0303 	bic.w	r3, r3, #3
 80040e6:	4313      	orrs	r3, r2
 80040e8:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80040ea:	f7fe fb23 	bl	8002734 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ee:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80040f0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d115      	bne.n	8004122 <HAL_RCC_ClockConfig+0x192>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040f6:	686b      	ldr	r3, [r5, #4]
 80040f8:	f003 030c 	and.w	r3, r3, #12
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	f43f af6c 	beq.w	8003fda <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004102:	f7fe fb17 	bl	8002734 <HAL_GetTick>
 8004106:	1bc0      	subs	r0, r0, r7
 8004108:	4540      	cmp	r0, r8
 800410a:	d9f4      	bls.n	80040f6 <HAL_RCC_ClockConfig+0x166>
          return HAL_TIMEOUT;
 800410c:	2003      	movs	r0, #3
 800410e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004112:	2a02      	cmp	r2, #2
 8004114:	d102      	bne.n	800411c <HAL_RCC_ClockConfig+0x18c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004116:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800411a:	e7de      	b.n	80040da <HAL_RCC_ClockConfig+0x14a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411c:	f013 0f02 	tst.w	r3, #2
 8004120:	e7db      	b.n	80040da <HAL_RCC_ClockConfig+0x14a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004122:	2b02      	cmp	r3, #2
 8004124:	d110      	bne.n	8004148 <HAL_RCC_ClockConfig+0x1b8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004126:	686b      	ldr	r3, [r5, #4]
 8004128:	f003 030c 	and.w	r3, r3, #12
 800412c:	2b08      	cmp	r3, #8
 800412e:	f43f af54 	beq.w	8003fda <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004132:	f7fe faff 	bl	8002734 <HAL_GetTick>
 8004136:	1bc0      	subs	r0, r0, r7
 8004138:	4540      	cmp	r0, r8
 800413a:	d9f4      	bls.n	8004126 <HAL_RCC_ClockConfig+0x196>
 800413c:	e7e6      	b.n	800410c <HAL_RCC_ClockConfig+0x17c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800413e:	f7fe faf9 	bl	8002734 <HAL_GetTick>
 8004142:	1bc0      	subs	r0, r0, r7
 8004144:	4540      	cmp	r0, r8
 8004146:	d8e1      	bhi.n	800410c <HAL_RCC_ClockConfig+0x17c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004148:	686b      	ldr	r3, [r5, #4]
 800414a:	f013 0f0c 	tst.w	r3, #12
 800414e:	d1f6      	bne.n	800413e <HAL_RCC_ClockConfig+0x1ae>
 8004150:	e743      	b.n	8003fda <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004152:	6813      	ldr	r3, [r2, #0]
 8004154:	f023 0307 	bic.w	r3, r3, #7
 8004158:	4333      	orrs	r3, r6
 800415a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800415c:	6813      	ldr	r3, [r2, #0]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	429e      	cmp	r6, r3
 8004164:	f47f af7b 	bne.w	800405e <HAL_RCC_ClockConfig+0xce>
 8004168:	e73e      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x58>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800416a:	68e3      	ldr	r3, [r4, #12]
 800416c:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8004170:	d00c      	beq.n	800418c <HAL_RCC_ClockConfig+0x1fc>
 8004172:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004176:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800417a:	d007      	beq.n	800418c <HAL_RCC_ClockConfig+0x1fc>
 800417c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004180:	d004      	beq.n	800418c <HAL_RCC_ClockConfig+0x1fc>
 8004182:	f240 31b1 	movw	r1, #945	; 0x3b1
 8004186:	4805      	ldr	r0, [pc, #20]	; (800419c <HAL_RCC_ClockConfig+0x20c>)
 8004188:	f7fd fdad 	bl	8001ce6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800418c:	686b      	ldr	r3, [r5, #4]
 800418e:	68e2      	ldr	r2, [r4, #12]
 8004190:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004194:	4313      	orrs	r3, r2
 8004196:	606b      	str	r3, [r5, #4]
 8004198:	e72c      	b.n	8003ff4 <HAL_RCC_ClockConfig+0x64>
 800419a:	bf00      	nop
 800419c:	080064a4 	.word	0x080064a4
 80041a0:	40022000 	.word	0x40022000
 80041a4:	40021000 	.word	0x40021000
 80041a8:	080062c0 	.word	0x080062c0
 80041ac:	20000058 	.word	0x20000058

080041b0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80041b2:	4a05      	ldr	r2, [pc, #20]	; (80041c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80041ba:	5cd3      	ldrb	r3, [r2, r3]
 80041bc:	4a03      	ldr	r2, [pc, #12]	; (80041cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80041be:	6810      	ldr	r0, [r2, #0]
}    
 80041c0:	40d8      	lsrs	r0, r3
 80041c2:	4770      	bx	lr
 80041c4:	40021000 	.word	0x40021000
 80041c8:	080062d0 	.word	0x080062d0
 80041cc:	20000058 	.word	0x20000058

080041d0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041d0:	4b04      	ldr	r3, [pc, #16]	; (80041e4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80041d2:	4a05      	ldr	r2, [pc, #20]	; (80041e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80041da:	5cd3      	ldrb	r3, [r2, r3]
 80041dc:	4a03      	ldr	r2, [pc, #12]	; (80041ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80041de:	6810      	ldr	r0, [r2, #0]
} 
 80041e0:	40d8      	lsrs	r0, r3
 80041e2:	4770      	bx	lr
 80041e4:	40021000 	.word	0x40021000
 80041e8:	080062d0 	.word	0x080062d0
 80041ec:	20000058 	.word	0x20000058

080041f0 <HAL_RCCEx_PeriphCLKConfig>:
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80041f0:	6803      	ldr	r3, [r0, #0]
{
 80041f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80041f6:	f013 0f13 	tst.w	r3, #19
{
 80041fa:	4605      	mov	r5, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80041fc:	d103      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x16>
 80041fe:	217c      	movs	r1, #124	; 0x7c
 8004200:	4845      	ldr	r0, [pc, #276]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004202:	f7fd fd70 	bl	8001ce6 <assert_failed>
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004206:	682b      	ldr	r3, [r5, #0]
 8004208:	07d9      	lsls	r1, r3, #31
 800420a:	d528      	bpl.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800420c:	686b      	ldr	r3, [r5, #4]
 800420e:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8004212:	d003      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8004214:	2182      	movs	r1, #130	; 0x82
 8004216:	4840      	ldr	r0, [pc, #256]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004218:	f7fd fd65 	bl	8001ce6 <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800421c:	4c3f      	ldr	r4, [pc, #252]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800421e:	69e3      	ldr	r3, [r4, #28]
 8004220:	00da      	lsls	r2, r3, #3
 8004222:	d444      	bmi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8004224:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8004226:	69e3      	ldr	r3, [r4, #28]
 8004228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422c:	61e3      	str	r3, [r4, #28]
 800422e:	69e3      	ldr	r3, [r4, #28]
 8004230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004234:	9301      	str	r3, [sp, #4]
 8004236:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004238:	4e39      	ldr	r6, [pc, #228]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800423a:	6833      	ldr	r3, [r6, #0]
 800423c:	05db      	lsls	r3, r3, #23
 800423e:	d538      	bpl.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004240:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004242:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004246:	d148      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004248:	6a23      	ldr	r3, [r4, #32]
 800424a:	686a      	ldr	r2, [r5, #4]
 800424c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004250:	4313      	orrs	r3, r2
 8004252:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004254:	b11f      	cbz	r7, 800425e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004256:	69e3      	ldr	r3, [r4, #28]
 8004258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800425c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800425e:	682b      	ldr	r3, [r5, #0]
 8004260:	079b      	lsls	r3, r3, #30
 8004262:	d50e      	bpl.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004264:	68ab      	ldr	r3, [r5, #8]
 8004266:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 800426a:	d003      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x84>
 800426c:	21c9      	movs	r1, #201	; 0xc9
 800426e:	482a      	ldr	r0, [pc, #168]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004270:	f7fd fd39 	bl	8001ce6 <assert_failed>
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004274:	4a29      	ldr	r2, [pc, #164]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8004276:	68a9      	ldr	r1, [r5, #8]
 8004278:	6853      	ldr	r3, [r2, #4]
 800427a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800427e:	430b      	orrs	r3, r1
 8004280:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004282:	6828      	ldr	r0, [r5, #0]
 8004284:	f010 0010 	ands.w	r0, r0, #16
 8004288:	d024      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 800428a:	68eb      	ldr	r3, [r5, #12]
 800428c:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8004290:	d004      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004292:	f240 1125 	movw	r1, #293	; 0x125
 8004296:	4820      	ldr	r0, [pc, #128]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004298:	f7fd fd25 	bl	8001ce6 <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800429c:	4a1f      	ldr	r2, [pc, #124]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800429e:	68e9      	ldr	r1, [r5, #12]
 80042a0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80042a2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80042a8:	430b      	orrs	r3, r1
 80042aa:	6053      	str	r3, [r2, #4]
 80042ac:	e012      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    FlagStatus       pwrclkchanged = RESET;
 80042ae:	2700      	movs	r7, #0
 80042b0:	e7c2      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x48>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b2:	6833      	ldr	r3, [r6, #0]
 80042b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80042ba:	f7fe fa3b 	bl	8002734 <HAL_GetTick>
 80042be:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c0:	6833      	ldr	r3, [r6, #0]
 80042c2:	05d8      	lsls	r0, r3, #23
 80042c4:	d4bc      	bmi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x50>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c6:	f7fe fa35 	bl	8002734 <HAL_GetTick>
 80042ca:	eba0 0008 	sub.w	r0, r0, r8
 80042ce:	2864      	cmp	r0, #100	; 0x64
 80042d0:	d9f6      	bls.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
          return HAL_TIMEOUT;
 80042d2:	2003      	movs	r0, #3
}
 80042d4:	b002      	add	sp, #8
 80042d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042da:	686a      	ldr	r2, [r5, #4]
 80042dc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d0b1      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 80042e4:	2001      	movs	r0, #1
 80042e6:	4a0f      	ldr	r2, [pc, #60]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x134>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042e8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80042ea:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ec:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042f2:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80042f4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042f6:	07d9      	lsls	r1, r3, #31
 80042f8:	d5a6      	bpl.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 80042fa:	f7fe fa1b 	bl	8002734 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fe:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004302:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004304:	6a23      	ldr	r3, [r4, #32]
 8004306:	079a      	lsls	r2, r3, #30
 8004308:	d49e      	bmi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x58>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7fe fa13 	bl	8002734 <HAL_GetTick>
 800430e:	1b80      	subs	r0, r0, r6
 8004310:	4540      	cmp	r0, r8
 8004312:	d9f7      	bls.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004314:	e7dd      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004316:	bf00      	nop
 8004318:	080064dc 	.word	0x080064dc
 800431c:	40021000 	.word	0x40021000
 8004320:	40007000 	.word	0x40007000
 8004324:	42420440 	.word	0x42420440

08004328 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004328:	6a03      	ldr	r3, [r0, #32]
{
 800432a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800432e:	f023 0301 	bic.w	r3, r3, #1
 8004332:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004334:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004336:	f8d0 8004 	ldr.w	r8, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800433a:	6986      	ldr	r6, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800433c:	680b      	ldr	r3, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800433e:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004342:	431e      	orrs	r6, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004344:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004346:	f024 0402 	bic.w	r4, r4, #2
  tmpccer |= OC_Config->OCPolarity;
 800434a:	431c      	orrs	r4, r3

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800434c:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <TIM_OC1_SetConfig+0x90>)
{
 800434e:	4605      	mov	r5, r0
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004350:	4298      	cmp	r0, r3
{
 8004352:	460f      	mov	r7, r1
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004354:	d127      	bne.n	80043a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004356:	68cb      	ldr	r3, [r1, #12]
 8004358:	f033 0308 	bics.w	r3, r3, #8
 800435c:	d004      	beq.n	8004368 <TIM_OC1_SetConfig+0x40>
 800435e:	f241 213f 	movw	r1, #4671	; 0x123f
 8004362:	4816      	ldr	r0, [pc, #88]	; (80043bc <TIM_OC1_SetConfig+0x94>)
 8004364:	f7fd fcbf 	bl	8001ce6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004368:	68fb      	ldr	r3, [r7, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800436a:	f024 0408 	bic.w	r4, r4, #8
    tmpccer |= OC_Config->OCNPolarity;
 800436e:	431c      	orrs	r4, r3
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004370:	69bb      	ldr	r3, [r7, #24]
    tmpccer &= ~TIM_CCER_CC1NE;
 8004372:	f024 0404 	bic.w	r4, r4, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004376:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800437a:	d004      	beq.n	8004386 <TIM_OC1_SetConfig+0x5e>
 800437c:	f241 214c 	movw	r1, #4684	; 0x124c
 8004380:	480e      	ldr	r0, [pc, #56]	; (80043bc <TIM_OC1_SetConfig+0x94>)
 8004382:	f7fd fcb0 	bl	8001ce6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800438c:	d004      	beq.n	8004398 <TIM_OC1_SetConfig+0x70>
 800438e:	f241 214d 	movw	r1, #4685	; 0x124d
 8004392:	480a      	ldr	r0, [pc, #40]	; (80043bc <TIM_OC1_SetConfig+0x94>)
 8004394:	f7fd fca7 	bl	8001ce6 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800439c:	f428 7840 	bic.w	r8, r8, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80043a0:	4313      	orrs	r3, r2
 80043a2:	ea43 0808 	orr.w	r8, r3, r8

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043a6:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 80043a8:	f8c5 8004 	str.w	r8, [r5, #4]
  TIMx->CCMR1 = tmpccmrx;
 80043ac:	61ae      	str	r6, [r5, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80043ae:	636b      	str	r3, [r5, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b0:	622c      	str	r4, [r5, #32]
 80043b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043b6:	bf00      	nop
 80043b8:	40012c00 	.word	0x40012c00
 80043bc:	08006517 	.word	0x08006517

080043c0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043c0:	6a03      	ldr	r3, [r0, #32]
{
 80043c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ca:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043cc:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ce:	f8d0 8004 	ldr.w	r8, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043d2:	69c6      	ldr	r6, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043d4:	680b      	ldr	r3, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043d6:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80043da:	431e      	orrs	r6, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043dc:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80043de:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043e2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043e6:	4b1b      	ldr	r3, [pc, #108]	; (8004454 <TIM_OC3_SetConfig+0x94>)
{
 80043e8:	4605      	mov	r5, r0
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043ea:	4298      	cmp	r0, r3
{
 80043ec:	460f      	mov	r7, r1
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043ee:	d128      	bne.n	8004442 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80043f0:	68cb      	ldr	r3, [r1, #12]
 80043f2:	f033 0308 	bics.w	r3, r3, #8
 80043f6:	d004      	beq.n	8004402 <TIM_OC3_SetConfig+0x42>
 80043f8:	f241 21d4 	movw	r1, #4820	; 0x12d4
 80043fc:	4816      	ldr	r0, [pc, #88]	; (8004458 <TIM_OC3_SetConfig+0x98>)
 80043fe:	f7fd fc72 	bl	8001ce6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004402:	68fb      	ldr	r3, [r7, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004404:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004408:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800440c:	69bb      	ldr	r3, [r7, #24]
    tmpccer &= ~TIM_CCER_CC3NE;
 800440e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004412:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8004416:	d004      	beq.n	8004422 <TIM_OC3_SetConfig+0x62>
 8004418:	f241 21e1 	movw	r1, #4833	; 0x12e1
 800441c:	480e      	ldr	r0, [pc, #56]	; (8004458 <TIM_OC3_SetConfig+0x98>)
 800441e:	f7fd fc62 	bl	8001ce6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8004428:	d004      	beq.n	8004434 <TIM_OC3_SetConfig+0x74>
 800442a:	f241 21e2 	movw	r1, #4834	; 0x12e2
 800442e:	480a      	ldr	r0, [pc, #40]	; (8004458 <TIM_OC3_SetConfig+0x98>)
 8004430:	f7fd fc59 	bl	8001ce6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004434:	697b      	ldr	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004436:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004438:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800443c:	4313      	orrs	r3, r2
 800443e:	ea48 1803 	orr.w	r8, r8, r3, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004442:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 8004444:	f8c5 8004 	str.w	r8, [r5, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004448:	61ee      	str	r6, [r5, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800444a:	63eb      	str	r3, [r5, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444c:	622c      	str	r4, [r5, #32]
 800444e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004452:	bf00      	nop
 8004454:	40012c00 	.word	0x40012c00
 8004458:	08006517 	.word	0x08006517

0800445c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800445c:	6a03      	ldr	r3, [r0, #32]
{
 800445e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004466:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004468:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800446a:	f8d0 8004 	ldr.w	r8, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800446e:	69c7      	ldr	r7, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004470:	680b      	ldr	r3, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004472:	f427 47e6 	bic.w	r7, r7, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004476:	ea47 2703 	orr.w	r7, r7, r3, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800447a:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800447c:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004480:	ea45 3503 	orr.w	r5, r5, r3, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004484:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <TIM_OC4_SetConfig+0x60>)
{
 8004486:	4604      	mov	r4, r0
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004488:	4298      	cmp	r0, r3
{
 800448a:	460e      	mov	r6, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800448c:	d10d      	bne.n	80044aa <TIM_OC4_SetConfig+0x4e>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800448e:	694b      	ldr	r3, [r1, #20]
 8004490:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8004494:	d004      	beq.n	80044a0 <TIM_OC4_SetConfig+0x44>
 8004496:	f241 311f 	movw	r1, #4895	; 0x131f
 800449a:	4809      	ldr	r0, [pc, #36]	; (80044c0 <TIM_OC4_SetConfig+0x64>)
 800449c:	f7fd fc23 	bl	8001ce6 <assert_failed>

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80044a0:	6973      	ldr	r3, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044a2:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80044a6:	ea48 1883 	orr.w	r8, r8, r3, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044aa:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 80044ac:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 80044b0:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80044b2:	6423      	str	r3, [r4, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b4:	6225      	str	r5, [r4, #32]
 80044b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044ba:	bf00      	nop
 80044bc:	40012c00 	.word	0x40012c00
 80044c0:	08006517 	.word	0x08006517

080044c4 <HAL_TIM_Base_Start>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80044c4:	6803      	ldr	r3, [r0, #0]
 80044c6:	4a11      	ldr	r2, [pc, #68]	; (800450c <HAL_TIM_Base_Start+0x48>)
{
 80044c8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80044ca:	4293      	cmp	r3, r2
{
 80044cc:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80044ce:	d00f      	beq.n	80044f0 <HAL_TIM_Base_Start+0x2c>
 80044d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d4:	d00c      	beq.n	80044f0 <HAL_TIM_Base_Start+0x2c>
 80044d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80044da:	4293      	cmp	r3, r2
 80044dc:	d008      	beq.n	80044f0 <HAL_TIM_Base_Start+0x2c>
 80044de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d004      	beq.n	80044f0 <HAL_TIM_Base_Start+0x2c>
 80044e6:	f240 1133 	movw	r1, #307	; 0x133
 80044ea:	4809      	ldr	r0, [pc, #36]	; (8004510 <HAL_TIM_Base_Start+0x4c>)
 80044ec:	f7fd fbfb 	bl	8001ce6 <assert_failed>
  htim->State= HAL_TIM_STATE_BUSY;
 80044f0:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 80044f2:	6822      	ldr	r2, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80044f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 80044f8:	6813      	ldr	r3, [r2, #0]
}
 80044fa:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 80044fc:	f043 0301 	orr.w	r3, r3, #1
 8004500:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8004502:	2301      	movs	r3, #1
 8004504:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004508:	bd10      	pop	{r4, pc}
 800450a:	bf00      	nop
 800450c:	40012c00 	.word	0x40012c00
 8004510:	08006517 	.word	0x08006517

08004514 <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004514:	6803      	ldr	r3, [r0, #0]
 8004516:	4a10      	ldr	r2, [pc, #64]	; (8004558 <HAL_TIM_Base_Start_IT+0x44>)
{
 8004518:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800451a:	4293      	cmp	r3, r2
{
 800451c:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800451e:	d00f      	beq.n	8004540 <HAL_TIM_Base_Start_IT+0x2c>
 8004520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004524:	d00c      	beq.n	8004540 <HAL_TIM_Base_Start_IT+0x2c>
 8004526:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800452a:	4293      	cmp	r3, r2
 800452c:	d008      	beq.n	8004540 <HAL_TIM_Base_Start_IT+0x2c>
 800452e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004532:	4293      	cmp	r3, r2
 8004534:	d004      	beq.n	8004540 <HAL_TIM_Base_Start_IT+0x2c>
 8004536:	f240 1161 	movw	r1, #353	; 0x161
 800453a:	4808      	ldr	r0, [pc, #32]	; (800455c <HAL_TIM_Base_Start_IT+0x48>)
 800453c:	f7fd fbd3 	bl	8001ce6 <assert_failed>
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004540:	6823      	ldr	r3, [r4, #0]
}
 8004542:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
}
 8004554:	bd10      	pop	{r4, pc}
 8004556:	bf00      	nop
 8004558:	40012c00 	.word	0x40012c00
 800455c:	08006517 	.word	0x08006517

08004560 <HAL_TIM_OC_MspInit>:
 8004560:	4770      	bx	lr

08004562 <HAL_TIM_PWM_MspInit>:
 8004562:	4770      	bx	lr

08004564 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004564:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004568:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800456a:	2b01      	cmp	r3, #1
{
 800456c:	4605      	mov	r5, r0
 800456e:	460c      	mov	r4, r1
 8004570:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8004574:	d02e      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0x70>
 8004576:	2301      	movs	r3, #1
 8004578:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800457c:	680b      	ldr	r3, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800457e:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8004582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004586:	d00c      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0x3e>
 8004588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800458c:	d009      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0x3e>
 800458e:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8004592:	d006      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0x3e>
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d004      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0x3e>
 8004598:	f640 7171 	movw	r1, #3953	; 0xf71
 800459c:	48b5      	ldr	r0, [pc, #724]	; (8004874 <HAL_TIM_ConfigClockSource+0x310>)
 800459e:	f7fd fba2 	bl	8001ce6 <assert_failed>
  tmpsmcr = htim->Instance->SMCR;
 80045a2:	682b      	ldr	r3, [r5, #0]
 80045a4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045a6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80045aa:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80045ae:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80045b0:	6822      	ldr	r2, [r4, #0]
 80045b2:	2a40      	cmp	r2, #64	; 0x40
 80045b4:	f000 8162 	beq.w	800487c <HAL_TIM_ConfigClockSource+0x318>
 80045b8:	d82c      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0xb0>
 80045ba:	2a10      	cmp	r2, #16
 80045bc:	f000 81b9 	beq.w	8004932 <HAL_TIM_ConfigClockSource+0x3ce>
 80045c0:	d809      	bhi.n	80045d6 <HAL_TIM_ConfigClockSource+0x72>
 80045c2:	2a00      	cmp	r2, #0
 80045c4:	f000 819b 	beq.w	80048fe <HAL_TIM_ConfigClockSource+0x39a>
  htim->State = HAL_TIM_STATE_READY;
 80045c8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80045ca:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80045d0:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
}
 80045d4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80045d6:	2a20      	cmp	r2, #32
 80045d8:	f000 81c5 	beq.w	8004966 <HAL_TIM_ConfigClockSource+0x402>
 80045dc:	2a30      	cmp	r2, #48	; 0x30
 80045de:	d1f3      	bne.n	80045c8 <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80045e0:	4aa5      	ldr	r2, [pc, #660]	; (8004878 <HAL_TIM_ConfigClockSource+0x314>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00f      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0xa2>
 80045e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ea:	d00c      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0xa2>
 80045ec:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d008      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0xa2>
 80045f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d004      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0xa2>
 80045fc:	f640 71f9 	movw	r1, #4089	; 0xff9
 8004600:	489c      	ldr	r0, [pc, #624]	; (8004874 <HAL_TIM_ConfigClockSource+0x310>)
 8004602:	f7fd fb70 	bl	8001ce6 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8004606:	682a      	ldr	r2, [r5, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8004608:	6893      	ldr	r3, [r2, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800460e:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8004612:	e0a9      	b.n	8004768 <HAL_TIM_ConfigClockSource+0x204>
  switch (sClockSourceConfig->ClockSource)
 8004614:	2a70      	cmp	r2, #112	; 0x70
 8004616:	f000 80a9 	beq.w	800476c <HAL_TIM_ConfigClockSource+0x208>
 800461a:	d846      	bhi.n	80046aa <HAL_TIM_ConfigClockSource+0x146>
 800461c:	2a50      	cmp	r2, #80	; 0x50
 800461e:	f000 80e7 	beq.w	80047f0 <HAL_TIM_ConfigClockSource+0x28c>
 8004622:	2a60      	cmp	r2, #96	; 0x60
 8004624:	d1d0      	bne.n	80045c8 <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004626:	4a94      	ldr	r2, [pc, #592]	; (8004878 <HAL_TIM_ConfigClockSource+0x314>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00f      	beq.n	800464c <HAL_TIM_ConfigClockSource+0xe8>
 800462c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004630:	d00c      	beq.n	800464c <HAL_TIM_ConfigClockSource+0xe8>
 8004632:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004636:	4293      	cmp	r3, r2
 8004638:	d008      	beq.n	800464c <HAL_TIM_ConfigClockSource+0xe8>
 800463a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800463e:	4293      	cmp	r3, r2
 8004640:	d004      	beq.n	800464c <HAL_TIM_ConfigClockSource+0xe8>
 8004642:	f640 71c3 	movw	r1, #4035	; 0xfc3
 8004646:	488b      	ldr	r0, [pc, #556]	; (8004874 <HAL_TIM_ConfigClockSource+0x310>)
 8004648:	f7fd fb4d 	bl	8001ce6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800464c:	6863      	ldr	r3, [r4, #4]
 800464e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004652:	d009      	beq.n	8004668 <HAL_TIM_ConfigClockSource+0x104>
 8004654:	f033 0202 	bics.w	r2, r3, #2
 8004658:	d006      	beq.n	8004668 <HAL_TIM_ConfigClockSource+0x104>
 800465a:	2b0a      	cmp	r3, #10
 800465c:	d004      	beq.n	8004668 <HAL_TIM_ConfigClockSource+0x104>
 800465e:	f640 71c6 	movw	r1, #4038	; 0xfc6
 8004662:	4884      	ldr	r0, [pc, #528]	; (8004874 <HAL_TIM_ConfigClockSource+0x310>)
 8004664:	f7fd fb3f 	bl	8001ce6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004668:	68e3      	ldr	r3, [r4, #12]
 800466a:	2b0f      	cmp	r3, #15
 800466c:	d904      	bls.n	8004678 <HAL_TIM_ConfigClockSource+0x114>
 800466e:	f640 71c7 	movw	r1, #4039	; 0xfc7
 8004672:	4880      	ldr	r0, [pc, #512]	; (8004874 <HAL_TIM_ConfigClockSource+0x310>)
 8004674:	f7fd fb37 	bl	8001ce6 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	6866      	ldr	r6, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800467c:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800467e:	68e4      	ldr	r4, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004680:	f020 0010 	bic.w	r0, r0, #16
 8004684:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004686:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8004688:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800468a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800468e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004692:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004696:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800469a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800469c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800469e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80046a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80046a4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80046a8:	e0e2      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x30c>
  switch (sClockSourceConfig->ClockSource)
 80046aa:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80046ae:	d044      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x1d6>
 80046b0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80046b4:	d188      	bne.n	80045c8 <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80046b6:	4a70      	ldr	r2, [pc, #448]	; (8004878 <HAL_TIM_ConfigClockSource+0x314>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00f      	beq.n	80046dc <HAL_TIM_ConfigClockSource+0x178>
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c0:	d00c      	beq.n	80046dc <HAL_TIM_ConfigClockSource+0x178>
 80046c2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d008      	beq.n	80046dc <HAL_TIM_ConfigClockSource+0x178>
 80046ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d004      	beq.n	80046dc <HAL_TIM_ConfigClockSource+0x178>
 80046d2:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80046d6:	4867      	ldr	r0, [pc, #412]	; (8004874 <HAL_TIM_ConfigClockSource+0x310>)
 80046d8:	f7fd fb05 	bl	8001ce6 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80046dc:	68a3      	ldr	r3, [r4, #8]
 80046de:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80046e2:	d004      	beq.n	80046ee <HAL_TIM_ConfigClockSource+0x18a>
 80046e4:	f640 71a3 	movw	r1, #4003	; 0xfa3
 80046e8:	4862      	ldr	r0, [pc, #392]	; (8004874 <HAL_TIM_ConfigClockSource+0x310>)
 80046ea:	f7fd fafc 	bl	8001ce6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80046ee:	6863      	ldr	r3, [r4, #4]
 80046f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046f4:	d009      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x1a6>
 80046f6:	f033 0202 	bics.w	r2, r3, #2
 80046fa:	d006      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x1a6>
 80046fc:	2b0a      	cmp	r3, #10
 80046fe:	d004      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x1a6>
 8004700:	f640 71a4 	movw	r1, #4004	; 0xfa4
 8004704:	485b      	ldr	r0, [pc, #364]	; (8004874 <HAL_TIM_ConfigClockSource+0x310>)
 8004706:	f7fd faee 	bl	8001ce6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800470a:	68e3      	ldr	r3, [r4, #12]
 800470c:	2b0f      	cmp	r3, #15
 800470e:	d904      	bls.n	800471a <HAL_TIM_ConfigClockSource+0x1b6>
 8004710:	f640 71a5 	movw	r1, #4005	; 0xfa5
 8004714:	4857      	ldr	r0, [pc, #348]	; (8004874 <HAL_TIM_ConfigClockSource+0x310>)
 8004716:	f7fd fae6 	bl	8001ce6 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800471a:	682a      	ldr	r2, [r5, #0]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800471c:	6860      	ldr	r0, [r4, #4]
 800471e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr = TIMx->SMCR;
 8004720:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004722:	4303      	orrs	r3, r0
 8004724:	68e0      	ldr	r0, [r4, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004726:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800472a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800472e:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004730:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004732:	6893      	ldr	r3, [r2, #8]
 8004734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004738:	e016      	b.n	8004768 <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800473a:	4a4f      	ldr	r2, [pc, #316]	; (8004878 <HAL_TIM_ConfigClockSource+0x314>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00f      	beq.n	8004760 <HAL_TIM_ConfigClockSource+0x1fc>
 8004740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004744:	d00c      	beq.n	8004760 <HAL_TIM_ConfigClockSource+0x1fc>
 8004746:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800474a:	4293      	cmp	r3, r2
 800474c:	d008      	beq.n	8004760 <HAL_TIM_ConfigClockSource+0x1fc>
 800474e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004752:	4293      	cmp	r3, r2
 8004754:	d004      	beq.n	8004760 <HAL_TIM_ConfigClockSource+0x1fc>
 8004756:	f640 717d 	movw	r1, #3965	; 0xf7d
 800475a:	4846      	ldr	r0, [pc, #280]	; (8004874 <HAL_TIM_ConfigClockSource+0x310>)
 800475c:	f7fd fac3 	bl	8001ce6 <assert_failed>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004760:	682a      	ldr	r2, [r5, #0]
 8004762:	6893      	ldr	r3, [r2, #8]
 8004764:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8004768:	6093      	str	r3, [r2, #8]
 800476a:	e72d      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800476c:	4a42      	ldr	r2, [pc, #264]	; (8004878 <HAL_TIM_ConfigClockSource+0x314>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00f      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x22e>
 8004772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004776:	d00c      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x22e>
 8004778:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800477c:	4293      	cmp	r3, r2
 800477e:	d008      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x22e>
 8004780:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004784:	4293      	cmp	r3, r2
 8004786:	d004      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x22e>
 8004788:	f640 7186 	movw	r1, #3974	; 0xf86
 800478c:	4839      	ldr	r0, [pc, #228]	; (8004874 <HAL_TIM_ConfigClockSource+0x310>)
 800478e:	f7fd faaa 	bl	8001ce6 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004792:	68a3      	ldr	r3, [r4, #8]
 8004794:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8004798:	d004      	beq.n	80047a4 <HAL_TIM_ConfigClockSource+0x240>
 800479a:	f640 7189 	movw	r1, #3977	; 0xf89
 800479e:	4835      	ldr	r0, [pc, #212]	; (8004874 <HAL_TIM_ConfigClockSource+0x310>)
 80047a0:	f7fd faa1 	bl	8001ce6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80047a4:	6863      	ldr	r3, [r4, #4]
 80047a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047aa:	d009      	beq.n	80047c0 <HAL_TIM_ConfigClockSource+0x25c>
 80047ac:	f033 0202 	bics.w	r2, r3, #2
 80047b0:	d006      	beq.n	80047c0 <HAL_TIM_ConfigClockSource+0x25c>
 80047b2:	2b0a      	cmp	r3, #10
 80047b4:	d004      	beq.n	80047c0 <HAL_TIM_ConfigClockSource+0x25c>
 80047b6:	f640 718a 	movw	r1, #3978	; 0xf8a
 80047ba:	482e      	ldr	r0, [pc, #184]	; (8004874 <HAL_TIM_ConfigClockSource+0x310>)
 80047bc:	f7fd fa93 	bl	8001ce6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80047c0:	68e3      	ldr	r3, [r4, #12]
 80047c2:	2b0f      	cmp	r3, #15
 80047c4:	d904      	bls.n	80047d0 <HAL_TIM_ConfigClockSource+0x26c>
 80047c6:	f640 718b 	movw	r1, #3979	; 0xf8b
 80047ca:	482a      	ldr	r0, [pc, #168]	; (8004874 <HAL_TIM_ConfigClockSource+0x310>)
 80047cc:	f7fd fa8b 	bl	8001ce6 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80047d0:	682a      	ldr	r2, [r5, #0]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047d2:	6860      	ldr	r0, [r4, #4]
 80047d4:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr = TIMx->SMCR;
 80047d6:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047d8:	4303      	orrs	r3, r0
 80047da:	68e0      	ldr	r0, [r4, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047dc:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047e0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80047e4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80047e6:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80047e8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047ee:	e7bb      	b.n	8004768 <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80047f0:	4a21      	ldr	r2, [pc, #132]	; (8004878 <HAL_TIM_ConfigClockSource+0x314>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00f      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x2b2>
 80047f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fa:	d00c      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x2b2>
 80047fc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004800:	4293      	cmp	r3, r2
 8004802:	d008      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x2b2>
 8004804:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004808:	4293      	cmp	r3, r2
 800480a:	d004      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x2b2>
 800480c:	f640 71b4 	movw	r1, #4020	; 0xfb4
 8004810:	4818      	ldr	r0, [pc, #96]	; (8004874 <HAL_TIM_ConfigClockSource+0x310>)
 8004812:	f7fd fa68 	bl	8001ce6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004816:	6863      	ldr	r3, [r4, #4]
 8004818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800481c:	d009      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x2ce>
 800481e:	f033 0202 	bics.w	r2, r3, #2
 8004822:	d006      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x2ce>
 8004824:	2b0a      	cmp	r3, #10
 8004826:	d004      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x2ce>
 8004828:	f640 71b7 	movw	r1, #4023	; 0xfb7
 800482c:	4811      	ldr	r0, [pc, #68]	; (8004874 <HAL_TIM_ConfigClockSource+0x310>)
 800482e:	f7fd fa5a 	bl	8001ce6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004832:	68e3      	ldr	r3, [r4, #12]
 8004834:	2b0f      	cmp	r3, #15
 8004836:	d904      	bls.n	8004842 <HAL_TIM_ConfigClockSource+0x2de>
 8004838:	f640 71b8 	movw	r1, #4024	; 0xfb8
 800483c:	480d      	ldr	r0, [pc, #52]	; (8004874 <HAL_TIM_ConfigClockSource+0x310>)
 800483e:	f7fd fa52 	bl	8001ce6 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004842:	682b      	ldr	r3, [r5, #0]
 8004844:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 8004846:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004848:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800484a:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800484c:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004850:	f024 0401 	bic.w	r4, r4, #1
 8004854:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004856:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8004858:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800485a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800485e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004864:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8004866:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004868:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800486c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8004870:	609a      	str	r2, [r3, #8]
 8004872:	e6a9      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x64>
 8004874:	08006517 	.word	0x08006517
 8004878:	40012c00 	.word	0x40012c00
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800487c:	4a47      	ldr	r2, [pc, #284]	; (800499c <HAL_TIM_ConfigClockSource+0x438>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00f      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0x33e>
 8004882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004886:	d00c      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0x33e>
 8004888:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800488c:	4293      	cmp	r3, r2
 800488e:	d008      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0x33e>
 8004890:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004894:	4293      	cmp	r3, r2
 8004896:	d004      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0x33e>
 8004898:	f640 71d2 	movw	r1, #4050	; 0xfd2
 800489c:	4840      	ldr	r0, [pc, #256]	; (80049a0 <HAL_TIM_ConfigClockSource+0x43c>)
 800489e:	f7fd fa22 	bl	8001ce6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80048a2:	6863      	ldr	r3, [r4, #4]
 80048a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a8:	d009      	beq.n	80048be <HAL_TIM_ConfigClockSource+0x35a>
 80048aa:	f033 0202 	bics.w	r2, r3, #2
 80048ae:	d006      	beq.n	80048be <HAL_TIM_ConfigClockSource+0x35a>
 80048b0:	2b0a      	cmp	r3, #10
 80048b2:	d004      	beq.n	80048be <HAL_TIM_ConfigClockSource+0x35a>
 80048b4:	f640 71d5 	movw	r1, #4053	; 0xfd5
 80048b8:	4839      	ldr	r0, [pc, #228]	; (80049a0 <HAL_TIM_ConfigClockSource+0x43c>)
 80048ba:	f7fd fa14 	bl	8001ce6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80048be:	68e3      	ldr	r3, [r4, #12]
 80048c0:	2b0f      	cmp	r3, #15
 80048c2:	d904      	bls.n	80048ce <HAL_TIM_ConfigClockSource+0x36a>
 80048c4:	f640 71d6 	movw	r1, #4054	; 0xfd6
 80048c8:	4835      	ldr	r0, [pc, #212]	; (80049a0 <HAL_TIM_ConfigClockSource+0x43c>)
 80048ca:	f7fd fa0c 	bl	8001ce6 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ce:	682b      	ldr	r3, [r5, #0]
 80048d0:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 80048d2:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048d4:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048d6:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048d8:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048dc:	f024 0401 	bic.w	r4, r4, #1
 80048e0:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e2:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80048e4:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048ea:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80048ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f0:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80048f2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80048f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80048f8:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80048fc:	e7b8      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x30c>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80048fe:	4a27      	ldr	r2, [pc, #156]	; (800499c <HAL_TIM_ConfigClockSource+0x438>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00f      	beq.n	8004924 <HAL_TIM_ConfigClockSource+0x3c0>
 8004904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004908:	d00c      	beq.n	8004924 <HAL_TIM_ConfigClockSource+0x3c0>
 800490a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800490e:	4293      	cmp	r3, r2
 8004910:	d008      	beq.n	8004924 <HAL_TIM_ConfigClockSource+0x3c0>
 8004912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004916:	4293      	cmp	r3, r2
 8004918:	d004      	beq.n	8004924 <HAL_TIM_ConfigClockSource+0x3c0>
 800491a:	f640 71e1 	movw	r1, #4065	; 0xfe1
 800491e:	4820      	ldr	r0, [pc, #128]	; (80049a0 <HAL_TIM_ConfigClockSource+0x43c>)
 8004920:	f7fd f9e1 	bl	8001ce6 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8004924:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 8004926:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800492c:	f043 0307 	orr.w	r3, r3, #7
 8004930:	e71a      	b.n	8004768 <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8004932:	4a1a      	ldr	r2, [pc, #104]	; (800499c <HAL_TIM_ConfigClockSource+0x438>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00f      	beq.n	8004958 <HAL_TIM_ConfigClockSource+0x3f4>
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493c:	d00c      	beq.n	8004958 <HAL_TIM_ConfigClockSource+0x3f4>
 800493e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004942:	4293      	cmp	r3, r2
 8004944:	d008      	beq.n	8004958 <HAL_TIM_ConfigClockSource+0x3f4>
 8004946:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800494a:	4293      	cmp	r3, r2
 800494c:	d004      	beq.n	8004958 <HAL_TIM_ConfigClockSource+0x3f4>
 800494e:	f640 71e9 	movw	r1, #4073	; 0xfe9
 8004952:	4813      	ldr	r0, [pc, #76]	; (80049a0 <HAL_TIM_ConfigClockSource+0x43c>)
 8004954:	f7fd f9c7 	bl	8001ce6 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8004958:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 800495a:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800495c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004960:	f043 0317 	orr.w	r3, r3, #23
 8004964:	e700      	b.n	8004768 <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8004966:	4a0d      	ldr	r2, [pc, #52]	; (800499c <HAL_TIM_ConfigClockSource+0x438>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00f      	beq.n	800498c <HAL_TIM_ConfigClockSource+0x428>
 800496c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004970:	d00c      	beq.n	800498c <HAL_TIM_ConfigClockSource+0x428>
 8004972:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004976:	4293      	cmp	r3, r2
 8004978:	d008      	beq.n	800498c <HAL_TIM_ConfigClockSource+0x428>
 800497a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800497e:	4293      	cmp	r3, r2
 8004980:	d004      	beq.n	800498c <HAL_TIM_ConfigClockSource+0x428>
 8004982:	f640 71f1 	movw	r1, #4081	; 0xff1
 8004986:	4806      	ldr	r0, [pc, #24]	; (80049a0 <HAL_TIM_ConfigClockSource+0x43c>)
 8004988:	f7fd f9ad 	bl	8001ce6 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800498c:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 800498e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004994:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8004998:	e6e6      	b.n	8004768 <HAL_TIM_ConfigClockSource+0x204>
 800499a:	bf00      	nop
 800499c:	40012c00 	.word	0x40012c00
 80049a0:	08006517 	.word	0x08006517

080049a4 <HAL_TIM_PeriodElapsedCallback>:
 80049a4:	4770      	bx	lr

080049a6 <HAL_TIM_OC_DelayElapsedCallback>:
 80049a6:	4770      	bx	lr

080049a8 <HAL_TIM_IC_CaptureCallback>:
 80049a8:	4770      	bx	lr

080049aa <HAL_TIM_PWM_PulseFinishedCallback>:
 80049aa:	4770      	bx	lr

080049ac <HAL_TIM_TriggerCallback>:
 80049ac:	4770      	bx	lr

080049ae <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049ae:	6803      	ldr	r3, [r0, #0]
{
 80049b0:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049b2:	691a      	ldr	r2, [r3, #16]
{
 80049b4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049b6:	0791      	lsls	r1, r2, #30
 80049b8:	d50e      	bpl.n	80049d8 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	0792      	lsls	r2, r2, #30
 80049be:	d50b      	bpl.n	80049d8 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049c0:	f06f 0202 	mvn.w	r2, #2
 80049c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049c6:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049c8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ca:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049cc:	079b      	lsls	r3, r3, #30
 80049ce:	d077      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80049d0:	f7ff ffea 	bl	80049a8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d4:	2300      	movs	r3, #0
 80049d6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	0750      	lsls	r0, r2, #29
 80049de:	d510      	bpl.n	8004a02 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	0751      	lsls	r1, r2, #29
 80049e4:	d50d      	bpl.n	8004a02 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049e6:	f06f 0204 	mvn.w	r2, #4
 80049ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ec:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049ee:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049f0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049f2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80049f6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049f8:	d068      	beq.n	8004acc <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80049fa:	f7ff ffd5 	bl	80049a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fe:	2300      	movs	r3, #0
 8004a00:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	0712      	lsls	r2, r2, #28
 8004a08:	d50f      	bpl.n	8004a2a <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	0710      	lsls	r0, r2, #28
 8004a0e:	d50c      	bpl.n	8004a2a <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a10:	f06f 0208 	mvn.w	r2, #8
 8004a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a16:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a18:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a1a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a1c:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a20:	d05a      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a22:	f7ff ffc1 	bl	80049a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	2300      	movs	r3, #0
 8004a28:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	691a      	ldr	r2, [r3, #16]
 8004a2e:	06d2      	lsls	r2, r2, #27
 8004a30:	d510      	bpl.n	8004a54 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	06d0      	lsls	r0, r2, #27
 8004a36:	d50d      	bpl.n	8004a54 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a38:	f06f 0210 	mvn.w	r2, #16
 8004a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a3e:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a40:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a42:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a44:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004a48:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a4a:	d04b      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4c:	f7ff ffac 	bl	80049a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a50:	2300      	movs	r3, #0
 8004a52:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	07d1      	lsls	r1, r2, #31
 8004a5a:	d508      	bpl.n	8004a6e <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	07d2      	lsls	r2, r2, #31
 8004a60:	d505      	bpl.n	8004a6e <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a62:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a66:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a68:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a6a:	f7ff ff9b 	bl	80049a4 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	691a      	ldr	r2, [r3, #16]
 8004a72:	0610      	lsls	r0, r2, #24
 8004a74:	d508      	bpl.n	8004a88 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	0611      	lsls	r1, r2, #24
 8004a7a:	d505      	bpl.n	8004a88 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004a80:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a82:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004a84:	f000 fc15 	bl	80052b2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	0652      	lsls	r2, r2, #25
 8004a8e:	d508      	bpl.n	8004aa2 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	0650      	lsls	r0, r2, #25
 8004a94:	d505      	bpl.n	8004aa2 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a96:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8004a9a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a9c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004a9e:	f7ff ff85 	bl	80049ac <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	0691      	lsls	r1, r2, #26
 8004aa8:	d522      	bpl.n	8004af0 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	0692      	lsls	r2, r2, #26
 8004aae:	d51f      	bpl.n	8004af0 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ab0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8004ab4:	4620      	mov	r0, r4
}
 8004ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004aba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004abc:	f000 bbf8 	b.w	80052b0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac0:	f7ff ff71 	bl	80049a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	f7ff ff70 	bl	80049aa <HAL_TIM_PWM_PulseFinishedCallback>
 8004aca:	e783      	b.n	80049d4 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004acc:	f7ff ff6b 	bl	80049a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f7ff ff6a 	bl	80049aa <HAL_TIM_PWM_PulseFinishedCallback>
 8004ad6:	e792      	b.n	80049fe <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad8:	f7ff ff65 	bl	80049a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004adc:	4620      	mov	r0, r4
 8004ade:	f7ff ff64 	bl	80049aa <HAL_TIM_PWM_PulseFinishedCallback>
 8004ae2:	e7a0      	b.n	8004a26 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae4:	f7ff ff5f 	bl	80049a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f7ff ff5e 	bl	80049aa <HAL_TIM_PWM_PulseFinishedCallback>
 8004aee:	e7af      	b.n	8004a50 <HAL_TIM_IRQHandler+0xa2>
 8004af0:	bd10      	pop	{r4, pc}
	...

08004af4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af4:	4a1a      	ldr	r2, [pc, #104]	; (8004b60 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8004af6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af8:	4290      	cmp	r0, r2
 8004afa:	d00a      	beq.n	8004b12 <TIM_Base_SetConfig+0x1e>
 8004afc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004b00:	d007      	beq.n	8004b12 <TIM_Base_SetConfig+0x1e>
 8004b02:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004b06:	4290      	cmp	r0, r2
 8004b08:	d003      	beq.n	8004b12 <TIM_Base_SetConfig+0x1e>
 8004b0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b0e:	4290      	cmp	r0, r2
 8004b10:	d115      	bne.n	8004b3e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8004b12:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004b18:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b1a:	4a11      	ldr	r2, [pc, #68]	; (8004b60 <TIM_Base_SetConfig+0x6c>)
 8004b1c:	4290      	cmp	r0, r2
 8004b1e:	d00a      	beq.n	8004b36 <TIM_Base_SetConfig+0x42>
 8004b20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004b24:	d007      	beq.n	8004b36 <TIM_Base_SetConfig+0x42>
 8004b26:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004b2a:	4290      	cmp	r0, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_Base_SetConfig+0x42>
 8004b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b32:	4290      	cmp	r0, r2
 8004b34:	d103      	bne.n	8004b3e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b36:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b3c:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8004b3e:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8004b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8004b44:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004b46:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b48:	688b      	ldr	r3, [r1, #8]
 8004b4a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004b4c:	680b      	ldr	r3, [r1, #0]
 8004b4e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b50:	4b03      	ldr	r3, [pc, #12]	; (8004b60 <TIM_Base_SetConfig+0x6c>)
 8004b52:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8004b54:	bf04      	itt	eq
 8004b56:	690b      	ldreq	r3, [r1, #16]
 8004b58:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	6143      	str	r3, [r0, #20]
 8004b5e:	4770      	bx	lr
 8004b60:	40012c00 	.word	0x40012c00

08004b64 <HAL_TIM_Base_Init>:
{
 8004b64:	b510      	push	{r4, lr}
  if(htim == NULL)
 8004b66:	4604      	mov	r4, r0
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	d049      	beq.n	8004c00 <HAL_TIM_Base_Init+0x9c>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004b6c:	6803      	ldr	r3, [r0, #0]
 8004b6e:	4a25      	ldr	r2, [pc, #148]	; (8004c04 <HAL_TIM_Base_Init+0xa0>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00e      	beq.n	8004b92 <HAL_TIM_Base_Init+0x2e>
 8004b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b78:	d00b      	beq.n	8004b92 <HAL_TIM_Base_Init+0x2e>
 8004b7a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d007      	beq.n	8004b92 <HAL_TIM_Base_Init+0x2e>
 8004b82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d003      	beq.n	8004b92 <HAL_TIM_Base_Init+0x2e>
 8004b8a:	21d9      	movs	r1, #217	; 0xd9
 8004b8c:	481e      	ldr	r0, [pc, #120]	; (8004c08 <HAL_TIM_Base_Init+0xa4>)
 8004b8e:	f7fd f8aa 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004b92:	68a3      	ldr	r3, [r4, #8]
 8004b94:	f033 0210 	bics.w	r2, r3, #16
 8004b98:	d009      	beq.n	8004bae <HAL_TIM_Base_Init+0x4a>
 8004b9a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004b9e:	2a20      	cmp	r2, #32
 8004ba0:	d005      	beq.n	8004bae <HAL_TIM_Base_Init+0x4a>
 8004ba2:	2b40      	cmp	r3, #64	; 0x40
 8004ba4:	d003      	beq.n	8004bae <HAL_TIM_Base_Init+0x4a>
 8004ba6:	21da      	movs	r1, #218	; 0xda
 8004ba8:	4817      	ldr	r0, [pc, #92]	; (8004c08 <HAL_TIM_Base_Init+0xa4>)
 8004baa:	f7fd f89c 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004bae:	6923      	ldr	r3, [r4, #16]
 8004bb0:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8004bb4:	d006      	beq.n	8004bc4 <HAL_TIM_Base_Init+0x60>
 8004bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bba:	d003      	beq.n	8004bc4 <HAL_TIM_Base_Init+0x60>
 8004bbc:	21db      	movs	r1, #219	; 0xdb
 8004bbe:	4812      	ldr	r0, [pc, #72]	; (8004c08 <HAL_TIM_Base_Init+0xa4>)
 8004bc0:	f7fd f891 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004bc4:	69a3      	ldr	r3, [r4, #24]
 8004bc6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8004bca:	d003      	beq.n	8004bd4 <HAL_TIM_Base_Init+0x70>
 8004bcc:	21dc      	movs	r1, #220	; 0xdc
 8004bce:	480e      	ldr	r0, [pc, #56]	; (8004c08 <HAL_TIM_Base_Init+0xa4>)
 8004bd0:	f7fd f889 	bl	8001ce6 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8004bd4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004bd8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004bdc:	b923      	cbnz	r3, 8004be8 <HAL_TIM_Base_Init+0x84>
    htim->Lock = HAL_UNLOCKED;
 8004bde:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004be2:	4620      	mov	r0, r4
 8004be4:	f7fd fb50 	bl	8002288 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8004be8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bea:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8004bec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bf0:	1d21      	adds	r1, r4, #4
 8004bf2:	f7ff ff7f 	bl	8004af4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8004bf6:	2301      	movs	r3, #1
  return HAL_OK;
 8004bf8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8004bfa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004bfe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004c00:	2001      	movs	r0, #1
}
 8004c02:	bd10      	pop	{r4, pc}
 8004c04:	40012c00 	.word	0x40012c00
 8004c08:	08006517 	.word	0x08006517

08004c0c <HAL_TIM_OC_Init>:
{
 8004c0c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8004c0e:	4604      	mov	r4, r0
 8004c10:	2800      	cmp	r0, #0
 8004c12:	d04d      	beq.n	8004cb0 <HAL_TIM_OC_Init+0xa4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004c14:	6803      	ldr	r3, [r0, #0]
 8004c16:	4a27      	ldr	r2, [pc, #156]	; (8004cb4 <HAL_TIM_OC_Init+0xa8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00f      	beq.n	8004c3c <HAL_TIM_OC_Init+0x30>
 8004c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c20:	d00c      	beq.n	8004c3c <HAL_TIM_OC_Init+0x30>
 8004c22:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d008      	beq.n	8004c3c <HAL_TIM_OC_Init+0x30>
 8004c2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d004      	beq.n	8004c3c <HAL_TIM_OC_Init+0x30>
 8004c32:	f240 11f1 	movw	r1, #497	; 0x1f1
 8004c36:	4820      	ldr	r0, [pc, #128]	; (8004cb8 <HAL_TIM_OC_Init+0xac>)
 8004c38:	f7fd f855 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004c3c:	68a3      	ldr	r3, [r4, #8]
 8004c3e:	f033 0210 	bics.w	r2, r3, #16
 8004c42:	d00a      	beq.n	8004c5a <HAL_TIM_OC_Init+0x4e>
 8004c44:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004c48:	2a20      	cmp	r2, #32
 8004c4a:	d006      	beq.n	8004c5a <HAL_TIM_OC_Init+0x4e>
 8004c4c:	2b40      	cmp	r3, #64	; 0x40
 8004c4e:	d004      	beq.n	8004c5a <HAL_TIM_OC_Init+0x4e>
 8004c50:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8004c54:	4818      	ldr	r0, [pc, #96]	; (8004cb8 <HAL_TIM_OC_Init+0xac>)
 8004c56:	f7fd f846 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8004c60:	d007      	beq.n	8004c72 <HAL_TIM_OC_Init+0x66>
 8004c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c66:	d004      	beq.n	8004c72 <HAL_TIM_OC_Init+0x66>
 8004c68:	f240 11f3 	movw	r1, #499	; 0x1f3
 8004c6c:	4812      	ldr	r0, [pc, #72]	; (8004cb8 <HAL_TIM_OC_Init+0xac>)
 8004c6e:	f7fd f83a 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004c72:	69a3      	ldr	r3, [r4, #24]
 8004c74:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8004c78:	d004      	beq.n	8004c84 <HAL_TIM_OC_Init+0x78>
 8004c7a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004c7e:	480e      	ldr	r0, [pc, #56]	; (8004cb8 <HAL_TIM_OC_Init+0xac>)
 8004c80:	f7fd f831 	bl	8001ce6 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8004c84:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004c88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004c8c:	b923      	cbnz	r3, 8004c98 <HAL_TIM_OC_Init+0x8c>
    htim->Lock = HAL_UNLOCKED;
 8004c8e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8004c92:	4620      	mov	r0, r4
 8004c94:	f7ff fc64 	bl	8004560 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8004c98:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004c9a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8004c9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004ca0:	1d21      	adds	r1, r4, #4
 8004ca2:	f7ff ff27 	bl	8004af4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8004ca6:	2301      	movs	r3, #1
  return HAL_OK;
 8004ca8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8004caa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004cae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004cb0:	2001      	movs	r0, #1
}
 8004cb2:	bd10      	pop	{r4, pc}
 8004cb4:	40012c00 	.word	0x40012c00
 8004cb8:	08006517 	.word	0x08006517

08004cbc <HAL_TIM_PWM_Init>:
{
 8004cbc:	b510      	push	{r4, lr}
  if(htim == NULL)
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	d04d      	beq.n	8004d60 <HAL_TIM_PWM_Init+0xa4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004cc4:	6803      	ldr	r3, [r0, #0]
 8004cc6:	4a27      	ldr	r2, [pc, #156]	; (8004d64 <HAL_TIM_PWM_Init+0xa8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00f      	beq.n	8004cec <HAL_TIM_PWM_Init+0x30>
 8004ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd0:	d00c      	beq.n	8004cec <HAL_TIM_PWM_Init+0x30>
 8004cd2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d008      	beq.n	8004cec <HAL_TIM_PWM_Init+0x30>
 8004cda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d004      	beq.n	8004cec <HAL_TIM_PWM_Init+0x30>
 8004ce2:	f240 31ee 	movw	r1, #1006	; 0x3ee
 8004ce6:	4820      	ldr	r0, [pc, #128]	; (8004d68 <HAL_TIM_PWM_Init+0xac>)
 8004ce8:	f7fc fffd 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004cec:	68a3      	ldr	r3, [r4, #8]
 8004cee:	f033 0210 	bics.w	r2, r3, #16
 8004cf2:	d00a      	beq.n	8004d0a <HAL_TIM_PWM_Init+0x4e>
 8004cf4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004cf8:	2a20      	cmp	r2, #32
 8004cfa:	d006      	beq.n	8004d0a <HAL_TIM_PWM_Init+0x4e>
 8004cfc:	2b40      	cmp	r3, #64	; 0x40
 8004cfe:	d004      	beq.n	8004d0a <HAL_TIM_PWM_Init+0x4e>
 8004d00:	f240 31ef 	movw	r1, #1007	; 0x3ef
 8004d04:	4818      	ldr	r0, [pc, #96]	; (8004d68 <HAL_TIM_PWM_Init+0xac>)
 8004d06:	f7fc ffee 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004d0a:	6923      	ldr	r3, [r4, #16]
 8004d0c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8004d10:	d007      	beq.n	8004d22 <HAL_TIM_PWM_Init+0x66>
 8004d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d16:	d004      	beq.n	8004d22 <HAL_TIM_PWM_Init+0x66>
 8004d18:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8004d1c:	4812      	ldr	r0, [pc, #72]	; (8004d68 <HAL_TIM_PWM_Init+0xac>)
 8004d1e:	f7fc ffe2 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004d22:	69a3      	ldr	r3, [r4, #24]
 8004d24:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8004d28:	d004      	beq.n	8004d34 <HAL_TIM_PWM_Init+0x78>
 8004d2a:	f240 31f1 	movw	r1, #1009	; 0x3f1
 8004d2e:	480e      	ldr	r0, [pc, #56]	; (8004d68 <HAL_TIM_PWM_Init+0xac>)
 8004d30:	f7fc ffd9 	bl	8001ce6 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8004d34:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004d38:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d3c:	b923      	cbnz	r3, 8004d48 <HAL_TIM_PWM_Init+0x8c>
    htim->Lock = HAL_UNLOCKED;
 8004d3e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004d42:	4620      	mov	r0, r4
 8004d44:	f7ff fc0d 	bl	8004562 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8004d48:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d4a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8004d4c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d50:	1d21      	adds	r1, r4, #4
 8004d52:	f7ff fecf 	bl	8004af4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8004d56:	2301      	movs	r3, #1
  return HAL_OK;
 8004d58:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8004d5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004d5e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004d60:	2001      	movs	r0, #1
}
 8004d62:	bd10      	pop	{r4, pc}
 8004d64:	40012c00 	.word	0x40012c00
 8004d68:	08006517 	.word	0x08006517

08004d6c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d6c:	6a03      	ldr	r3, [r0, #32]
{
 8004d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d72:	f023 0310 	bic.w	r3, r3, #16
 8004d76:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004d78:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004d7a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004d7e:	6986      	ldr	r6, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d80:	680b      	ldr	r3, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d82:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d86:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d8a:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004d8c:	f024 0420 	bic.w	r4, r4, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d90:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d94:	4b1a      	ldr	r3, [pc, #104]	; (8004e00 <TIM_OC2_SetConfig+0x94>)
{
 8004d96:	4605      	mov	r5, r0
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d98:	4298      	cmp	r0, r3
{
 8004d9a:	460f      	mov	r7, r1
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d9c:	d128      	bne.n	8004df0 <TIM_OC2_SetConfig+0x84>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004d9e:	68cb      	ldr	r3, [r1, #12]
 8004da0:	f033 0308 	bics.w	r3, r3, #8
 8004da4:	d004      	beq.n	8004db0 <TIM_OC2_SetConfig+0x44>
 8004da6:	f241 2189 	movw	r1, #4745	; 0x1289
 8004daa:	4816      	ldr	r0, [pc, #88]	; (8004e04 <TIM_OC2_SetConfig+0x98>)
 8004dac:	f7fc ff9b 	bl	8001ce6 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004db0:	68fb      	ldr	r3, [r7, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004db2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004db6:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004dba:	69bb      	ldr	r3, [r7, #24]
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dbc:	f024 0440 	bic.w	r4, r4, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004dc0:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8004dc4:	d004      	beq.n	8004dd0 <TIM_OC2_SetConfig+0x64>
 8004dc6:	f241 2197 	movw	r1, #4759	; 0x1297
 8004dca:	480e      	ldr	r0, [pc, #56]	; (8004e04 <TIM_OC2_SetConfig+0x98>)
 8004dcc:	f7fc ff8b 	bl	8001ce6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8004dd6:	d004      	beq.n	8004de2 <TIM_OC2_SetConfig+0x76>
 8004dd8:	f241 2198 	movw	r1, #4760	; 0x1298
 8004ddc:	4809      	ldr	r0, [pc, #36]	; (8004e04 <TIM_OC2_SetConfig+0x98>)
 8004dde:	f7fc ff82 	bl	8001ce6 <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8004de2:	697b      	ldr	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8004de4:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004de6:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8004dea:	4313      	orrs	r3, r2
 8004dec:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8004df0:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 8004df2:	f8c5 8004 	str.w	r8, [r5, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004df6:	61ae      	str	r6, [r5, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004df8:	63ab      	str	r3, [r5, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004dfa:	622c      	str	r4, [r5, #32]
 8004dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e00:	40012c00 	.word	0x40012c00
 8004e04:	08006517 	.word	0x08006517

08004e08 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8004e08:	2a18      	cmp	r2, #24
{
 8004e0a:	b570      	push	{r4, r5, r6, lr}
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	460d      	mov	r5, r1
 8004e10:	4616      	mov	r6, r2
  assert_param(IS_TIM_CHANNELS(Channel));
 8004e12:	d803      	bhi.n	8004e1c <HAL_TIM_OC_ConfigChannel+0x14>
 8004e14:	4b4e      	ldr	r3, [pc, #312]	; (8004f50 <HAL_TIM_OC_ConfigChannel+0x148>)
 8004e16:	40d3      	lsrs	r3, r2
 8004e18:	07db      	lsls	r3, r3, #31
 8004e1a:	d404      	bmi.n	8004e26 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004e1c:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 8004e20:	484c      	ldr	r0, [pc, #304]	; (8004f54 <HAL_TIM_OC_ConfigChannel+0x14c>)
 8004e22:	f7fc ff60 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8004e26:	682b      	ldr	r3, [r5, #0]
 8004e28:	f023 0210 	bic.w	r2, r3, #16
 8004e2c:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8004e30:	d006      	beq.n	8004e40 <HAL_TIM_OC_ConfigChannel+0x38>
 8004e32:	2a40      	cmp	r2, #64	; 0x40
 8004e34:	d004      	beq.n	8004e40 <HAL_TIM_OC_ConfigChannel+0x38>
 8004e36:	f640 3191 	movw	r1, #2961	; 0xb91
 8004e3a:	4846      	ldr	r0, [pc, #280]	; (8004f54 <HAL_TIM_OC_ConfigChannel+0x14c>)
 8004e3c:	f7fc ff53 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8004e40:	68ab      	ldr	r3, [r5, #8]
 8004e42:	f033 0302 	bics.w	r3, r3, #2
 8004e46:	d004      	beq.n	8004e52 <HAL_TIM_OC_ConfigChannel+0x4a>
 8004e48:	f640 3192 	movw	r1, #2962	; 0xb92
 8004e4c:	4841      	ldr	r0, [pc, #260]	; (8004f54 <HAL_TIM_OC_ConfigChannel+0x14c>)
 8004e4e:	f7fc ff4a 	bl	8001ce6 <assert_failed>
  __HAL_LOCK(htim);
 8004e52:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004e56:	2002      	movs	r0, #2
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d02d      	beq.n	8004eb8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004e5c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004e62:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8004e66:	2e0c      	cmp	r6, #12
 8004e68:	d820      	bhi.n	8004eac <HAL_TIM_OC_ConfigChannel+0xa4>
 8004e6a:	e8df f006 	tbb	[pc, r6]
 8004e6e:	1f07      	.short	0x1f07
 8004e70:	1f261f1f 	.word	0x1f261f1f
 8004e74:	1f3f1f1f 	.word	0x1f3f1f1f
 8004e78:	1f1f      	.short	0x1f1f
 8004e7a:	58          	.byte	0x58
 8004e7b:	00          	.byte	0x00
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	4a36      	ldr	r2, [pc, #216]	; (8004f58 <HAL_TIM_OC_ConfigChannel+0x150>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00f      	beq.n	8004ea4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e88:	d00c      	beq.n	8004ea4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004e8a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d008      	beq.n	8004ea4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004e92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004e9a:	f640 319d 	movw	r1, #2973	; 0xb9d
 8004e9e:	482d      	ldr	r0, [pc, #180]	; (8004f54 <HAL_TIM_OC_ConfigChannel+0x14c>)
 8004ea0:	f7fc ff21 	bl	8001ce6 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	6820      	ldr	r0, [r4, #0]
 8004ea8:	f7ff fa3e 	bl	8004328 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004eac:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004eae:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004eb0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004eb4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004eb8:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	4a26      	ldr	r2, [pc, #152]	; (8004f58 <HAL_TIM_OC_ConfigChannel+0x150>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00f      	beq.n	8004ee2 <HAL_TIM_OC_ConfigChannel+0xda>
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec6:	d00c      	beq.n	8004ee2 <HAL_TIM_OC_ConfigChannel+0xda>
 8004ec8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d008      	beq.n	8004ee2 <HAL_TIM_OC_ConfigChannel+0xda>
 8004ed0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d004      	beq.n	8004ee2 <HAL_TIM_OC_ConfigChannel+0xda>
 8004ed8:	f640 31a5 	movw	r1, #2981	; 0xba5
 8004edc:	481d      	ldr	r0, [pc, #116]	; (8004f54 <HAL_TIM_OC_ConfigChannel+0x14c>)
 8004ede:	f7fc ff02 	bl	8001ce6 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	6820      	ldr	r0, [r4, #0]
 8004ee6:	f7ff ff41 	bl	8004d6c <TIM_OC2_SetConfig>
    break;
 8004eea:	e7df      	b.n	8004eac <HAL_TIM_OC_ConfigChannel+0xa4>
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	4a1a      	ldr	r2, [pc, #104]	; (8004f58 <HAL_TIM_OC_ConfigChannel+0x150>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00f      	beq.n	8004f14 <HAL_TIM_OC_ConfigChannel+0x10c>
 8004ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef8:	d00c      	beq.n	8004f14 <HAL_TIM_OC_ConfigChannel+0x10c>
 8004efa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d008      	beq.n	8004f14 <HAL_TIM_OC_ConfigChannel+0x10c>
 8004f02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d004      	beq.n	8004f14 <HAL_TIM_OC_ConfigChannel+0x10c>
 8004f0a:	f640 31ad 	movw	r1, #2989	; 0xbad
 8004f0e:	4811      	ldr	r0, [pc, #68]	; (8004f54 <HAL_TIM_OC_ConfigChannel+0x14c>)
 8004f10:	f7fc fee9 	bl	8001ce6 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f14:	4629      	mov	r1, r5
 8004f16:	6820      	ldr	r0, [r4, #0]
 8004f18:	f7ff fa52 	bl	80043c0 <TIM_OC3_SetConfig>
    break;
 8004f1c:	e7c6      	b.n	8004eac <HAL_TIM_OC_ConfigChannel+0xa4>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	4a0d      	ldr	r2, [pc, #52]	; (8004f58 <HAL_TIM_OC_ConfigChannel+0x150>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00f      	beq.n	8004f46 <HAL_TIM_OC_ConfigChannel+0x13e>
 8004f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2a:	d00c      	beq.n	8004f46 <HAL_TIM_OC_ConfigChannel+0x13e>
 8004f2c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d008      	beq.n	8004f46 <HAL_TIM_OC_ConfigChannel+0x13e>
 8004f34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d004      	beq.n	8004f46 <HAL_TIM_OC_ConfigChannel+0x13e>
 8004f3c:	f640 31b5 	movw	r1, #2997	; 0xbb5
 8004f40:	4804      	ldr	r0, [pc, #16]	; (8004f54 <HAL_TIM_OC_ConfigChannel+0x14c>)
 8004f42:	f7fc fed0 	bl	8001ce6 <assert_failed>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f46:	4629      	mov	r1, r5
 8004f48:	6820      	ldr	r0, [r4, #0]
 8004f4a:	f7ff fa87 	bl	800445c <TIM_OC4_SetConfig>
    break;
 8004f4e:	e7ad      	b.n	8004eac <HAL_TIM_OC_ConfigChannel+0xa4>
 8004f50:	01001111 	.word	0x01001111
 8004f54:	08006517 	.word	0x08006517
 8004f58:	40012c00 	.word	0x40012c00

08004f5c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004f5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004f60:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004f62:	2b01      	cmp	r3, #1
{
 8004f64:	4604      	mov	r4, r0
 8004f66:	460d      	mov	r5, r1
 8004f68:	4616      	mov	r6, r2
  __HAL_LOCK(htim);
 8004f6a:	f000 80d6 	beq.w	800511a <HAL_TIM_PWM_ConfigChannel+0x1be>
 8004f6e:	2301      	movs	r3, #1
  assert_param(IS_TIM_CHANNELS(Channel));
 8004f70:	2a18      	cmp	r2, #24
  __HAL_LOCK(htim);
 8004f72:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
 8004f76:	d803      	bhi.n	8004f80 <HAL_TIM_PWM_ConfigChannel+0x24>
 8004f78:	4b69      	ldr	r3, [pc, #420]	; (8005120 <HAL_TIM_PWM_ConfigChannel+0x1c4>)
 8004f7a:	40d3      	lsrs	r3, r2
 8004f7c:	07db      	lsls	r3, r3, #31
 8004f7e:	d404      	bmi.n	8004f8a <HAL_TIM_PWM_ConfigChannel+0x2e>
 8004f80:	f640 4137 	movw	r1, #3127	; 0xc37
 8004f84:	4867      	ldr	r0, [pc, #412]	; (8005124 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8004f86:	f7fc feae 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8004f8a:	682b      	ldr	r3, [r5, #0]
 8004f8c:	f023 0310 	bic.w	r3, r3, #16
 8004f90:	2b60      	cmp	r3, #96	; 0x60
 8004f92:	d004      	beq.n	8004f9e <HAL_TIM_PWM_ConfigChannel+0x42>
 8004f94:	f640 4138 	movw	r1, #3128	; 0xc38
 8004f98:	4862      	ldr	r0, [pc, #392]	; (8005124 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8004f9a:	f7fc fea4 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8004f9e:	68ab      	ldr	r3, [r5, #8]
 8004fa0:	f033 0302 	bics.w	r3, r3, #2
 8004fa4:	d004      	beq.n	8004fb0 <HAL_TIM_PWM_ConfigChannel+0x54>
 8004fa6:	f640 4139 	movw	r1, #3129	; 0xc39
 8004faa:	485e      	ldr	r0, [pc, #376]	; (8005124 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8004fac:	f7fc fe9b 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8004fb0:	692b      	ldr	r3, [r5, #16]
 8004fb2:	f033 0304 	bics.w	r3, r3, #4
 8004fb6:	d004      	beq.n	8004fc2 <HAL_TIM_PWM_ConfigChannel+0x66>
 8004fb8:	f640 413a 	movw	r1, #3130	; 0xc3a
 8004fbc:	4859      	ldr	r0, [pc, #356]	; (8005124 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8004fbe:	f7fc fe92 	bl	8001ce6 <assert_failed>
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 8004fc8:	2e0c      	cmp	r6, #12
 8004fca:	d82d      	bhi.n	8005028 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8004fcc:	e8df f006 	tbb	[pc, r6]
 8004fd0:	2c2c2c07 	.word	0x2c2c2c07
 8004fd4:	2c2c2c33 	.word	0x2c2c2c33
 8004fd8:	2c2c2c59 	.word	0x2c2c2c59
 8004fdc:	7f          	.byte	0x7f
 8004fdd:	00          	.byte	0x00
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	4a51      	ldr	r2, [pc, #324]	; (8005128 <HAL_TIM_PWM_ConfigChannel+0x1cc>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00f      	beq.n	8005006 <HAL_TIM_PWM_ConfigChannel+0xaa>
 8004fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fea:	d00c      	beq.n	8005006 <HAL_TIM_PWM_ConfigChannel+0xaa>
 8004fec:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d008      	beq.n	8005006 <HAL_TIM_PWM_ConfigChannel+0xaa>
 8004ff4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d004      	beq.n	8005006 <HAL_TIM_PWM_ConfigChannel+0xaa>
 8004ffc:	f640 4142 	movw	r1, #3138	; 0xc42
 8005000:	4848      	ldr	r0, [pc, #288]	; (8005124 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8005002:	f7fc fe70 	bl	8001ce6 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005006:	4629      	mov	r1, r5
 8005008:	6820      	ldr	r0, [r4, #0]
 800500a:	f7ff f98d 	bl	8004328 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800500e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005010:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005012:	699a      	ldr	r2, [r3, #24]
 8005014:	f042 0208 	orr.w	r2, r2, #8
 8005018:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800501a:	699a      	ldr	r2, [r3, #24]
 800501c:	f022 0204 	bic.w	r2, r2, #4
 8005020:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005022:	699a      	ldr	r2, [r3, #24]
 8005024:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8005026:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8005028:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800502a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800502c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005030:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8005034:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	4a3b      	ldr	r2, [pc, #236]	; (8005128 <HAL_TIM_PWM_ConfigChannel+0x1cc>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00f      	beq.n	800505e <HAL_TIM_PWM_ConfigChannel+0x102>
 800503e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005042:	d00c      	beq.n	800505e <HAL_TIM_PWM_ConfigChannel+0x102>
 8005044:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005048:	4293      	cmp	r3, r2
 800504a:	d008      	beq.n	800505e <HAL_TIM_PWM_ConfigChannel+0x102>
 800504c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005050:	4293      	cmp	r3, r2
 8005052:	d004      	beq.n	800505e <HAL_TIM_PWM_ConfigChannel+0x102>
 8005054:	f640 4151 	movw	r1, #3153	; 0xc51
 8005058:	4832      	ldr	r0, [pc, #200]	; (8005124 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 800505a:	f7fc fe44 	bl	8001ce6 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800505e:	4629      	mov	r1, r5
 8005060:	6820      	ldr	r0, [r4, #0]
 8005062:	f7ff fe83 	bl	8004d6c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005066:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8005068:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800506a:	699a      	ldr	r2, [r3, #24]
 800506c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005070:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005072:	699a      	ldr	r2, [r3, #24]
 8005074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005078:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800507a:	699a      	ldr	r2, [r3, #24]
 800507c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005080:	e7d1      	b.n	8005026 <HAL_TIM_PWM_ConfigChannel+0xca>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	4a28      	ldr	r2, [pc, #160]	; (8005128 <HAL_TIM_PWM_ConfigChannel+0x1cc>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00f      	beq.n	80050aa <HAL_TIM_PWM_ConfigChannel+0x14e>
 800508a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508e:	d00c      	beq.n	80050aa <HAL_TIM_PWM_ConfigChannel+0x14e>
 8005090:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005094:	4293      	cmp	r3, r2
 8005096:	d008      	beq.n	80050aa <HAL_TIM_PWM_ConfigChannel+0x14e>
 8005098:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800509c:	4293      	cmp	r3, r2
 800509e:	d004      	beq.n	80050aa <HAL_TIM_PWM_ConfigChannel+0x14e>
 80050a0:	f44f 6146 	mov.w	r1, #3168	; 0xc60
 80050a4:	481f      	ldr	r0, [pc, #124]	; (8005124 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 80050a6:	f7fc fe1e 	bl	8001ce6 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050aa:	4629      	mov	r1, r5
 80050ac:	6820      	ldr	r0, [r4, #0]
 80050ae:	f7ff f987 	bl	80043c0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050b2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050b4:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050b6:	69da      	ldr	r2, [r3, #28]
 80050b8:	f042 0208 	orr.w	r2, r2, #8
 80050bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050be:	69da      	ldr	r2, [r3, #28]
 80050c0:	f022 0204 	bic.w	r2, r2, #4
 80050c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050c6:	69da      	ldr	r2, [r3, #28]
 80050c8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80050ca:	61da      	str	r2, [r3, #28]
    break;
 80050cc:	e7ac      	b.n	8005028 <HAL_TIM_PWM_ConfigChannel+0xcc>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	4a15      	ldr	r2, [pc, #84]	; (8005128 <HAL_TIM_PWM_ConfigChannel+0x1cc>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00f      	beq.n	80050f6 <HAL_TIM_PWM_ConfigChannel+0x19a>
 80050d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050da:	d00c      	beq.n	80050f6 <HAL_TIM_PWM_ConfigChannel+0x19a>
 80050dc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d008      	beq.n	80050f6 <HAL_TIM_PWM_ConfigChannel+0x19a>
 80050e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d004      	beq.n	80050f6 <HAL_TIM_PWM_ConfigChannel+0x19a>
 80050ec:	f640 416f 	movw	r1, #3183	; 0xc6f
 80050f0:	480c      	ldr	r0, [pc, #48]	; (8005124 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 80050f2:	f7fc fdf8 	bl	8001ce6 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050f6:	4629      	mov	r1, r5
 80050f8:	6820      	ldr	r0, [r4, #0]
 80050fa:	f7ff f9af 	bl	800445c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050fe:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8005100:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005102:	69da      	ldr	r2, [r3, #28]
 8005104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800510a:	69da      	ldr	r2, [r3, #28]
 800510c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8005112:	69da      	ldr	r2, [r3, #28]
 8005114:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005118:	e7d7      	b.n	80050ca <HAL_TIM_PWM_ConfigChannel+0x16e>
  __HAL_LOCK(htim);
 800511a:	2002      	movs	r0, #2
}
 800511c:	bd70      	pop	{r4, r5, r6, pc}
 800511e:	bf00      	nop
 8005120:	01001111 	.word	0x01001111
 8005124:	08006517 	.word	0x08006517
 8005128:	40012c00 	.word	0x40012c00

0800512c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800512c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpbdtr = 0U;

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800512e:	6802      	ldr	r2, [r0, #0]
 8005130:	4b36      	ldr	r3, [pc, #216]	; (800520c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>)
{
 8005132:	4604      	mov	r4, r0
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8005134:	429a      	cmp	r2, r3
{
 8005136:	460d      	mov	r5, r1
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8005138:	d004      	beq.n	8005144 <HAL_TIMEx_ConfigBreakDeadTime+0x18>
 800513a:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800513e:	4834      	ldr	r0, [pc, #208]	; (8005210 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 8005140:	f7fc fdd1 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8005144:	682b      	ldr	r3, [r5, #0]
 8005146:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800514a:	d004      	beq.n	8005156 <HAL_TIMEx_ConfigBreakDeadTime+0x2a>
 800514c:	f240 6109 	movw	r1, #1545	; 0x609
 8005150:	482f      	ldr	r0, [pc, #188]	; (8005210 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 8005152:	f7fc fdc8 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8005156:	686b      	ldr	r3, [r5, #4]
 8005158:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800515c:	d004      	beq.n	8005168 <HAL_TIMEx_ConfigBreakDeadTime+0x3c>
 800515e:	f240 610a 	movw	r1, #1546	; 0x60a
 8005162:	482b      	ldr	r0, [pc, #172]	; (8005210 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 8005164:	f7fc fdbf 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8005168:	68ab      	ldr	r3, [r5, #8]
 800516a:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800516e:	d004      	beq.n	800517a <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8005170:	f240 610b 	movw	r1, #1547	; 0x60b
 8005174:	4826      	ldr	r0, [pc, #152]	; (8005210 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 8005176:	f7fc fdb6 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800517a:	68eb      	ldr	r3, [r5, #12]
 800517c:	2bff      	cmp	r3, #255	; 0xff
 800517e:	d904      	bls.n	800518a <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 8005180:	f240 610c 	movw	r1, #1548	; 0x60c
 8005184:	4822      	ldr	r0, [pc, #136]	; (8005210 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 8005186:	f7fc fdae 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800518a:	692b      	ldr	r3, [r5, #16]
 800518c:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8005190:	d004      	beq.n	800519c <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8005192:	f240 610d 	movw	r1, #1549	; 0x60d
 8005196:	481e      	ldr	r0, [pc, #120]	; (8005210 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 8005198:	f7fc fda5 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800519c:	696b      	ldr	r3, [r5, #20]
 800519e:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80051a2:	d004      	beq.n	80051ae <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 80051a4:	f240 610e 	movw	r1, #1550	; 0x60e
 80051a8:	4819      	ldr	r0, [pc, #100]	; (8005210 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 80051aa:	f7fc fd9c 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80051ae:	69ab      	ldr	r3, [r5, #24]
 80051b0:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 80051b4:	d004      	beq.n	80051c0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80051b6:	f240 610f 	movw	r1, #1551	; 0x60f
 80051ba:	4815      	ldr	r0, [pc, #84]	; (8005210 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 80051bc:	f7fc fd93 	bl	8001ce6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80051c0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d01e      	beq.n	8005206 <HAL_TIMEx_ConfigBreakDeadTime+0xda>
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80051c8:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051ca:	68eb      	ldr	r3, [r5, #12]
 80051cc:	68aa      	ldr	r2, [r5, #8]
 80051ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051d4:	686a      	ldr	r2, [r5, #4]
 80051d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051da:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051dc:	682a      	ldr	r2, [r5, #0]
 80051de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051e2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051e4:	692a      	ldr	r2, [r5, #16]
 80051e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051ea:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051ec:	696a      	ldr	r2, [r5, #20]
 80051ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051f2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051f4:	69aa      	ldr	r2, [r5, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80051fa:	4313      	orrs	r3, r2
  htim->Instance->BDTR = tmpbdtr;
 80051fc:	6822      	ldr	r2, [r4, #0]
 80051fe:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8005200:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 8005204:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8005206:	2002      	movs	r0, #2
}
 8005208:	bd38      	pop	{r3, r4, r5, pc}
 800520a:	bf00      	nop
 800520c:	40012c00 	.word	0x40012c00
 8005210:	0800654f 	.word	0x0800654f

08005214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8005214:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8005216:	4a24      	ldr	r2, [pc, #144]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8005218:	6803      	ldr	r3, [r0, #0]
{
 800521a:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800521c:	4293      	cmp	r3, r2
{
 800521e:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8005220:	d00f      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8005222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005226:	d00c      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8005228:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800522c:	4293      	cmp	r3, r2
 800522e:	d008      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8005230:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005234:	4293      	cmp	r3, r2
 8005236:	d004      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8005238:	f44f 61c7 	mov.w	r1, #1592	; 0x638
 800523c:	481b      	ldr	r0, [pc, #108]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800523e:	f7fc fd52 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8005242:	682b      	ldr	r3, [r5, #0]
 8005244:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8005248:	d006      	beq.n	8005258 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800524a:	2b40      	cmp	r3, #64	; 0x40
 800524c:	d004      	beq.n	8005258 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800524e:	f240 6139 	movw	r1, #1593	; 0x639
 8005252:	4816      	ldr	r0, [pc, #88]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8005254:	f7fc fd47 	bl	8001ce6 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8005258:	686b      	ldr	r3, [r5, #4]
 800525a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800525e:	d004      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005260:	f240 613a 	movw	r1, #1594	; 0x63a
 8005264:	4811      	ldr	r0, [pc, #68]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8005266:	f7fc fd3e 	bl	8001ce6 <assert_failed>

  __HAL_LOCK(htim);
 800526a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800526e:	2002      	movs	r0, #2
 8005270:	2b01      	cmp	r3, #1
 8005272:	d018      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0x92>

  htim->State = HAL_TIM_STATE_BUSY;

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005274:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005276:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800527a:	685a      	ldr	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800527c:	6829      	ldr	r1, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800527e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005282:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8005284:	685a      	ldr	r2, [r3, #4]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005286:	2000      	movs	r0, #0
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8005288:	430a      	orrs	r2, r1
 800528a:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800528c:	689a      	ldr	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800528e:	6869      	ldr	r1, [r5, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8005290:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005294:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	430a      	orrs	r2, r1
 800529a:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800529c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800529e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80052a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
}
 80052a6:	bd38      	pop	{r3, r4, r5, pc}
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	0800654f 	.word	0x0800654f

080052b0 <HAL_TIMEx_CommutationCallback>:
 80052b0:	4770      	bx	lr

080052b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052b2:	4770      	bx	lr

080052b4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b4:	6803      	ldr	r3, [r0, #0]
 80052b6:	68da      	ldr	r2, [r3, #12]
 80052b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052bc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052be:	695a      	ldr	r2, [r3, #20]
 80052c0:	f022 0201 	bic.w	r2, r2, #1
 80052c4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052c6:	2320      	movs	r3, #32
 80052c8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80052cc:	4770      	bx	lr
	...

080052d0 <UART_SetConfig>:
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg = 0x00U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80052d0:	6842      	ldr	r2, [r0, #4]
 80052d2:	4b65      	ldr	r3, [pc, #404]	; (8005468 <UART_SetConfig+0x198>)
{
 80052d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80052d8:	429a      	cmp	r2, r3
{
 80052da:	4681      	mov	r9, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80052dc:	d904      	bls.n	80052e8 <UART_SetConfig+0x18>
 80052de:	f640 11a7 	movw	r1, #2471	; 0x9a7
 80052e2:	4862      	ldr	r0, [pc, #392]	; (800546c <UART_SetConfig+0x19c>)
 80052e4:	f7fc fcff 	bl	8001ce6 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80052e8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80052ec:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80052f0:	d004      	beq.n	80052fc <UART_SetConfig+0x2c>
 80052f2:	f640 11a8 	movw	r1, #2472	; 0x9a8
 80052f6:	485d      	ldr	r0, [pc, #372]	; (800546c <UART_SetConfig+0x19c>)
 80052f8:	f7fc fcf5 	bl	8001ce6 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80052fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005300:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8005304:	d007      	beq.n	8005316 <UART_SetConfig+0x46>
 8005306:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800530a:	d004      	beq.n	8005316 <UART_SetConfig+0x46>
 800530c:	f640 11a9 	movw	r1, #2473	; 0x9a9
 8005310:	4856      	ldr	r0, [pc, #344]	; (800546c <UART_SetConfig+0x19c>)
 8005312:	f7fc fce8 	bl	8001ce6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005316:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 800531a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800531e:	4213      	tst	r3, r2
 8005320:	d100      	bne.n	8005324 <UART_SetConfig+0x54>
 8005322:	b923      	cbnz	r3, 800532e <UART_SetConfig+0x5e>
 8005324:	f640 11aa 	movw	r1, #2474	; 0x9aa
 8005328:	4850      	ldr	r0, [pc, #320]	; (800546c <UART_SetConfig+0x19c>)
 800532a:	f7fc fcdc 	bl	8001ce6 <assert_failed>

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800532e:	f8d9 5000 	ldr.w	r5, [r9]
 8005332:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8005336:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005338:	f8d9 1010 	ldr.w	r1, [r9, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800533c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005340:	4313      	orrs	r3, r2
 8005342:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005344:	f8d9 3008 	ldr.w	r3, [r9, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8005348:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800534a:	430b      	orrs	r3, r1
 800534c:	f8d9 1014 	ldr.w	r1, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8005350:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8005354:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005358:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800535a:	4313      	orrs	r3, r2
 800535c:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800535e:	696b      	ldr	r3, [r5, #20]
 8005360:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8005364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005368:	4313      	orrs	r3, r2
 800536a:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800536c:	4b40      	ldr	r3, [pc, #256]	; (8005470 <UART_SetConfig+0x1a0>)
 800536e:	2419      	movs	r4, #25
 8005370:	429d      	cmp	r5, r3
 8005372:	d146      	bne.n	8005402 <UART_SetConfig+0x132>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005374:	f7fe ff2c 	bl	80041d0 <HAL_RCC_GetPCLK2Freq>
 8005378:	fb04 f300 	mul.w	r3, r4, r0
 800537c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8005380:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005384:	00b6      	lsls	r6, r6, #2
 8005386:	fbb3 f3f6 	udiv	r3, r3, r6
 800538a:	fbb3 f3f8 	udiv	r3, r3, r8
 800538e:	011e      	lsls	r6, r3, #4
 8005390:	f7fe ff1e 	bl	80041d0 <HAL_RCC_GetPCLK2Freq>
 8005394:	4360      	muls	r0, r4
 8005396:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	fbb0 f7f3 	udiv	r7, r0, r3
 80053a0:	f7fe ff16 	bl	80041d0 <HAL_RCC_GetPCLK2Freq>
 80053a4:	4360      	muls	r0, r4
 80053a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80053b0:	fbb3 f3f8 	udiv	r3, r3, r8
 80053b4:	fb08 7313 	mls	r3, r8, r3, r7
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	3332      	adds	r3, #50	; 0x32
 80053bc:	fbb3 f3f8 	udiv	r3, r3, r8
 80053c0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80053c4:	f7fe ff04 	bl	80041d0 <HAL_RCC_GetPCLK2Freq>
 80053c8:	4360      	muls	r0, r4
 80053ca:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80053ce:	0092      	lsls	r2, r2, #2
 80053d0:	fbb0 faf2 	udiv	sl, r0, r2
 80053d4:	f7fe fefc 	bl	80041d0 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80053d8:	4360      	muls	r0, r4
 80053da:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80053e4:	fbb3 f3f8 	udiv	r3, r3, r8
 80053e8:	fb08 a313 	mls	r3, r8, r3, sl
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	3332      	adds	r3, #50	; 0x32
 80053f0:	fbb3 f3f8 	udiv	r3, r3, r8
 80053f4:	f003 030f 	and.w	r3, r3, #15
 80053f8:	433b      	orrs	r3, r7
 80053fa:	4433      	add	r3, r6
 80053fc:	60ab      	str	r3, [r5, #8]
 80053fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005402:	f7fe fed5 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 8005406:	fb04 f300 	mul.w	r3, r4, r0
 800540a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800540e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005412:	00b6      	lsls	r6, r6, #2
 8005414:	fbb3 f3f6 	udiv	r3, r3, r6
 8005418:	fbb3 f3f8 	udiv	r3, r3, r8
 800541c:	011e      	lsls	r6, r3, #4
 800541e:	f7fe fec7 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 8005422:	4360      	muls	r0, r4
 8005424:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	fbb0 f7f3 	udiv	r7, r0, r3
 800542e:	f7fe febf 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 8005432:	4360      	muls	r0, r4
 8005434:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	fbb0 f3f3 	udiv	r3, r0, r3
 800543e:	fbb3 f3f8 	udiv	r3, r3, r8
 8005442:	fb08 7313 	mls	r3, r8, r3, r7
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	3332      	adds	r3, #50	; 0x32
 800544a:	fbb3 f3f8 	udiv	r3, r3, r8
 800544e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8005452:	f7fe fead 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 8005456:	4360      	muls	r0, r4
 8005458:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800545c:	0092      	lsls	r2, r2, #2
 800545e:	fbb0 faf2 	udiv	sl, r0, r2
 8005462:	f7fe fea5 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 8005466:	e7b7      	b.n	80053d8 <UART_SetConfig+0x108>
 8005468:	0044aa20 	.word	0x0044aa20
 800546c:	0800658a 	.word	0x0800658a
 8005470:	40013800 	.word	0x40013800

08005474 <HAL_UART_Init>:
{
 8005474:	b510      	push	{r4, lr}
  if(huart == NULL)
 8005476:	4604      	mov	r4, r0
 8005478:	2800      	cmp	r0, #0
 800547a:	d05b      	beq.n	8005534 <HAL_UART_Init+0xc0>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800547c:	6981      	ldr	r1, [r0, #24]
 800547e:	6803      	ldr	r3, [r0, #0]
 8005480:	4a2d      	ldr	r2, [pc, #180]	; (8005538 <HAL_UART_Init+0xc4>)
 8005482:	2900      	cmp	r1, #0
 8005484:	d04a      	beq.n	800551c <HAL_UART_Init+0xa8>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005486:	4293      	cmp	r3, r2
 8005488:	d00c      	beq.n	80054a4 <HAL_UART_Init+0x30>
 800548a:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800548e:	4293      	cmp	r3, r2
 8005490:	d008      	beq.n	80054a4 <HAL_UART_Init+0x30>
 8005492:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005496:	4293      	cmp	r3, r2
 8005498:	d004      	beq.n	80054a4 <HAL_UART_Init+0x30>
 800549a:	f240 110f 	movw	r1, #271	; 0x10f
 800549e:	4827      	ldr	r0, [pc, #156]	; (800553c <HAL_UART_Init+0xc8>)
 80054a0:	f7fc fc21 	bl	8001ce6 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80054a4:	69a3      	ldr	r3, [r4, #24]
 80054a6:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 80054aa:	d004      	beq.n	80054b6 <HAL_UART_Init+0x42>
 80054ac:	f44f 7188 	mov.w	r1, #272	; 0x110
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80054b0:	4822      	ldr	r0, [pc, #136]	; (800553c <HAL_UART_Init+0xc8>)
 80054b2:	f7fc fc18 	bl	8001ce6 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80054b6:	68a3      	ldr	r3, [r4, #8]
 80054b8:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80054bc:	d004      	beq.n	80054c8 <HAL_UART_Init+0x54>
 80054be:	f44f 718b 	mov.w	r1, #278	; 0x116
 80054c2:	481e      	ldr	r0, [pc, #120]	; (800553c <HAL_UART_Init+0xc8>)
 80054c4:	f7fc fc0f 	bl	8001ce6 <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 80054c8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80054cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80054d0:	b923      	cbnz	r3, 80054dc <HAL_UART_Init+0x68>
    huart->Lock = HAL_UNLOCKED;
 80054d2:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80054d6:	4620      	mov	r0, r4
 80054d8:	f7fd f884 	bl	80025e4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80054dc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80054de:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80054e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80054e4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80054e6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80054e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054ec:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80054ee:	f7ff feef 	bl	80052d0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054f2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054fe:	695a      	ldr	r2, [r3, #20]
 8005500:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005504:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800550c:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800550e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005510:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8005512:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8005516:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800551a:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800551c:	4293      	cmp	r3, r2
 800551e:	d0ca      	beq.n	80054b6 <HAL_UART_Init+0x42>
 8005520:	4a07      	ldr	r2, [pc, #28]	; (8005540 <HAL_UART_Init+0xcc>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d0c7      	beq.n	80054b6 <HAL_UART_Init+0x42>
 8005526:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800552a:	4293      	cmp	r3, r2
 800552c:	d0c3      	beq.n	80054b6 <HAL_UART_Init+0x42>
 800552e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005532:	e7bd      	b.n	80054b0 <HAL_UART_Init+0x3c>
    return HAL_ERROR;
 8005534:	2001      	movs	r0, #1
}
 8005536:	bd10      	pop	{r4, pc}
 8005538:	40013800 	.word	0x40013800
 800553c:	0800658a 	.word	0x0800658a
 8005540:	40004400 	.word	0x40004400

08005544 <HAL_UART_Transmit_DMA>:
{
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	4604      	mov	r4, r0
 8005548:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800554a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800554e:	2a20      	cmp	r2, #32
 8005550:	d12a      	bne.n	80055a8 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL) || (Size == 0U))
 8005552:	b339      	cbz	r1, 80055a4 <HAL_UART_Transmit_DMA+0x60>
 8005554:	b333      	cbz	r3, 80055a4 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8005556:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800555a:	2a01      	cmp	r2, #1
 800555c:	d024      	beq.n	80055a8 <HAL_UART_Transmit_DMA+0x64>
 800555e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005560:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8005562:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005566:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8005568:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800556a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556c:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800556e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005572:	4a0e      	ldr	r2, [pc, #56]	; (80055ac <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8005574:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8005576:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005578:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800557a:	4a0d      	ldr	r2, [pc, #52]	; (80055b0 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferAbortCallback = NULL;
 800557c:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800557e:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005580:	4a0c      	ldr	r2, [pc, #48]	; (80055b4 <HAL_UART_Transmit_DMA+0x70>)
 8005582:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005584:	6822      	ldr	r2, [r4, #0]
 8005586:	3204      	adds	r2, #4
 8005588:	f7fd fd72 	bl	8003070 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800558c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005590:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8005592:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005594:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005596:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8005598:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800559c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055a0:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 80055a2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80055a4:	2001      	movs	r0, #1
 80055a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 80055a8:	2002      	movs	r0, #2
}
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	080055b9 	.word	0x080055b9
 80055b0:	080055e7 	.word	0x080055e7
 80055b4:	08005671 	.word	0x08005671

080055b8 <UART_DMATransmitCplt>:
{
 80055b8:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055ba:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80055bc:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f013 0320 	ands.w	r3, r3, #32
 80055c4:	d10a      	bne.n	80055dc <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 80055c6:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055c8:	6813      	ldr	r3, [r2, #0]
 80055ca:	695a      	ldr	r2, [r3, #20]
 80055cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055d0:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055d8:	60da      	str	r2, [r3, #12]
 80055da:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80055dc:	4610      	mov	r0, r2
 80055de:	f7fb fc7d 	bl	8000edc <HAL_UART_TxCpltCallback>
 80055e2:	bd08      	pop	{r3, pc}

080055e4 <HAL_UART_TxHalfCpltCallback>:
 80055e4:	4770      	bx	lr

080055e6 <UART_DMATxHalfCplt>:
{
 80055e6:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80055e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80055ea:	f7ff fffb 	bl	80055e4 <HAL_UART_TxHalfCpltCallback>
 80055ee:	bd08      	pop	{r3, pc}

080055f0 <HAL_UART_RxCpltCallback>:
 80055f0:	4770      	bx	lr

080055f2 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80055f2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80055f6:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80055f8:	2b22      	cmp	r3, #34	; 0x22
 80055fa:	d136      	bne.n	800566a <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80055fc:	6883      	ldr	r3, [r0, #8]
 80055fe:	6901      	ldr	r1, [r0, #16]
 8005600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005604:	6802      	ldr	r2, [r0, #0]
 8005606:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005608:	d123      	bne.n	8005652 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800560a:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800560c:	b9e9      	cbnz	r1, 800564a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800560e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005612:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8005616:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8005618:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800561a:	3c01      	subs	r4, #1
 800561c:	b2a4      	uxth	r4, r4
 800561e:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8005620:	b98c      	cbnz	r4, 8005646 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005622:	6803      	ldr	r3, [r0, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	f022 0220 	bic.w	r2, r2, #32
 800562a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005632:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005634:	695a      	ldr	r2, [r3, #20]
 8005636:	f022 0201 	bic.w	r2, r2, #1
 800563a:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800563c:	2320      	movs	r3, #32
 800563e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8005642:	f7ff ffd5 	bl	80055f0 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8005646:	2000      	movs	r0, #0
}
 8005648:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	f823 2b01 	strh.w	r2, [r3], #1
 8005650:	e7e1      	b.n	8005616 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005652:	b921      	cbnz	r1, 800565e <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005654:	1c59      	adds	r1, r3, #1
 8005656:	6852      	ldr	r2, [r2, #4]
 8005658:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800565a:	701a      	strb	r2, [r3, #0]
 800565c:	e7dc      	b.n	8005618 <UART_Receive_IT+0x26>
 800565e:	6852      	ldr	r2, [r2, #4]
 8005660:	1c59      	adds	r1, r3, #1
 8005662:	6281      	str	r1, [r0, #40]	; 0x28
 8005664:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005668:	e7f7      	b.n	800565a <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800566a:	2002      	movs	r0, #2
 800566c:	bd10      	pop	{r4, pc}

0800566e <HAL_UART_ErrorCallback>:
 800566e:	4770      	bx	lr

08005670 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005670:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8005672:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005674:	680b      	ldr	r3, [r1, #0]
 8005676:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005678:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 800567c:	2821      	cmp	r0, #33	; 0x21
 800567e:	d10a      	bne.n	8005696 <UART_DMAError+0x26>
 8005680:	0612      	lsls	r2, r2, #24
 8005682:	d508      	bpl.n	8005696 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8005684:	2200      	movs	r2, #0
 8005686:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005688:	68da      	ldr	r2, [r3, #12]
 800568a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800568e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005690:	2220      	movs	r2, #32
 8005692:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8005696:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005698:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 800569c:	2a22      	cmp	r2, #34	; 0x22
 800569e:	d106      	bne.n	80056ae <UART_DMAError+0x3e>
 80056a0:	065b      	lsls	r3, r3, #25
 80056a2:	d504      	bpl.n	80056ae <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 80056a4:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 80056a6:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 80056a8:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80056aa:	f7ff fe03 	bl	80052b4 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056ae:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80056b0:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056b2:	f043 0310 	orr.w	r3, r3, #16
 80056b6:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80056b8:	f7ff ffd9 	bl	800566e <HAL_UART_ErrorCallback>
 80056bc:	bd08      	pop	{r3, pc}
	...

080056c0 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056c0:	6803      	ldr	r3, [r0, #0]
{
 80056c2:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056c4:	681a      	ldr	r2, [r3, #0]
{
 80056c6:	4604      	mov	r4, r0
  if(errorflags == RESET)
 80056c8:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056ca:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056cc:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80056ce:	d107      	bne.n	80056e0 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056d0:	0696      	lsls	r6, r2, #26
 80056d2:	d55a      	bpl.n	800578a <HAL_UART_IRQHandler+0xca>
 80056d4:	068d      	lsls	r5, r1, #26
 80056d6:	d558      	bpl.n	800578a <HAL_UART_IRQHandler+0xca>
}
 80056d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80056dc:	f7ff bf89 	b.w	80055f2 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056e0:	f015 0501 	ands.w	r5, r5, #1
 80056e4:	d102      	bne.n	80056ec <HAL_UART_IRQHandler+0x2c>
 80056e6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80056ea:	d04e      	beq.n	800578a <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056ec:	07d3      	lsls	r3, r2, #31
 80056ee:	d505      	bpl.n	80056fc <HAL_UART_IRQHandler+0x3c>
 80056f0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056f2:	bf42      	ittt	mi
 80056f4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80056f6:	f043 0301 	orrmi.w	r3, r3, #1
 80056fa:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056fc:	0750      	lsls	r0, r2, #29
 80056fe:	d504      	bpl.n	800570a <HAL_UART_IRQHandler+0x4a>
 8005700:	b11d      	cbz	r5, 800570a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005702:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005704:	f043 0302 	orr.w	r3, r3, #2
 8005708:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800570a:	0793      	lsls	r3, r2, #30
 800570c:	d504      	bpl.n	8005718 <HAL_UART_IRQHandler+0x58>
 800570e:	b11d      	cbz	r5, 8005718 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005710:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005712:	f043 0304 	orr.w	r3, r3, #4
 8005716:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005718:	0716      	lsls	r6, r2, #28
 800571a:	d504      	bpl.n	8005726 <HAL_UART_IRQHandler+0x66>
 800571c:	b11d      	cbz	r5, 8005726 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800571e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005720:	f043 0308 	orr.w	r3, r3, #8
 8005724:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005726:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005728:	2b00      	cmp	r3, #0
 800572a:	d066      	beq.n	80057fa <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800572c:	0695      	lsls	r5, r2, #26
 800572e:	d504      	bpl.n	800573a <HAL_UART_IRQHandler+0x7a>
 8005730:	0688      	lsls	r0, r1, #26
 8005732:	d502      	bpl.n	800573a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8005734:	4620      	mov	r0, r4
 8005736:	f7ff ff5c 	bl	80055f2 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800573a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800573c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800573e:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005740:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005742:	0711      	lsls	r1, r2, #28
 8005744:	d402      	bmi.n	800574c <HAL_UART_IRQHandler+0x8c>
 8005746:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800574a:	d01a      	beq.n	8005782 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800574c:	f7ff fdb2 	bl	80052b4 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	695a      	ldr	r2, [r3, #20]
 8005754:	0652      	lsls	r2, r2, #25
 8005756:	d510      	bpl.n	800577a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005758:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800575a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800575c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005760:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8005762:	b150      	cbz	r0, 800577a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005764:	4b25      	ldr	r3, [pc, #148]	; (80057fc <HAL_UART_IRQHandler+0x13c>)
 8005766:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005768:	f7fd fcd6 	bl	8003118 <HAL_DMA_Abort_IT>
 800576c:	2800      	cmp	r0, #0
 800576e:	d044      	beq.n	80057fa <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005770:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8005772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005776:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005778:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800577a:	4620      	mov	r0, r4
 800577c:	f7ff ff77 	bl	800566e <HAL_UART_ErrorCallback>
 8005780:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005782:	f7ff ff74 	bl	800566e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005786:	63e5      	str	r5, [r4, #60]	; 0x3c
 8005788:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800578a:	0616      	lsls	r6, r2, #24
 800578c:	d527      	bpl.n	80057de <HAL_UART_IRQHandler+0x11e>
 800578e:	060d      	lsls	r5, r1, #24
 8005790:	d525      	bpl.n	80057de <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8005792:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8005796:	2a21      	cmp	r2, #33	; 0x21
 8005798:	d12f      	bne.n	80057fa <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800579a:	68a2      	ldr	r2, [r4, #8]
 800579c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80057a0:	6a22      	ldr	r2, [r4, #32]
 80057a2:	d117      	bne.n	80057d4 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057a4:	8811      	ldrh	r1, [r2, #0]
 80057a6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80057aa:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80057ac:	6921      	ldr	r1, [r4, #16]
 80057ae:	b979      	cbnz	r1, 80057d0 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80057b0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80057b2:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80057b4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80057b6:	3a01      	subs	r2, #1
 80057b8:	b292      	uxth	r2, r2
 80057ba:	84e2      	strh	r2, [r4, #38]	; 0x26
 80057bc:	b9ea      	cbnz	r2, 80057fa <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057c4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057cc:	60da      	str	r2, [r3, #12]
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80057d0:	3201      	adds	r2, #1
 80057d2:	e7ee      	b.n	80057b2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057d4:	1c51      	adds	r1, r2, #1
 80057d6:	6221      	str	r1, [r4, #32]
 80057d8:	7812      	ldrb	r2, [r2, #0]
 80057da:	605a      	str	r2, [r3, #4]
 80057dc:	e7ea      	b.n	80057b4 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057de:	0650      	lsls	r0, r2, #25
 80057e0:	d50b      	bpl.n	80057fa <HAL_UART_IRQHandler+0x13a>
 80057e2:	064a      	lsls	r2, r1, #25
 80057e4:	d509      	bpl.n	80057fa <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057e6:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80057e8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ee:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80057f0:	2320      	movs	r3, #32
 80057f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80057f6:	f7fb fb71 	bl	8000edc <HAL_UART_TxCpltCallback>
 80057fa:	bd70      	pop	{r4, r5, r6, pc}
 80057fc:	08005801 	.word	0x08005801

08005800 <UART_DMAAbortOnError>:
{
 8005800:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8005802:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005804:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8005806:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005808:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800580a:	f7ff ff30 	bl	800566e <HAL_UART_ErrorCallback>
 800580e:	bd08      	pop	{r3, pc}

08005810 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005810:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005812:	e003      	b.n	800581c <LoopCopyDataInit>

08005814 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005814:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005816:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005818:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800581a:	3104      	adds	r1, #4

0800581c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800581c:	480a      	ldr	r0, [pc, #40]	; (8005848 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800581e:	4b0b      	ldr	r3, [pc, #44]	; (800584c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005820:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005822:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005824:	d3f6      	bcc.n	8005814 <CopyDataInit>
  ldr r2, =_sbss
 8005826:	4a0a      	ldr	r2, [pc, #40]	; (8005850 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005828:	e002      	b.n	8005830 <LoopFillZerobss>

0800582a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800582a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800582c:	f842 3b04 	str.w	r3, [r2], #4

08005830 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005830:	4b08      	ldr	r3, [pc, #32]	; (8005854 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005832:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005834:	d3f9      	bcc.n	800582a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005836:	f7fc fc97 	bl	8002168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800583a:	f000 f80f 	bl	800585c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800583e:	f7fc f897 	bl	8001970 <main>
  bx lr
 8005842:	4770      	bx	lr
  ldr r3, =_sidata
 8005844:	08006600 	.word	0x08006600
  ldr r0, =_sdata
 8005848:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800584c:	200000c8 	.word	0x200000c8
  ldr r2, =_sbss
 8005850:	200000c8 	.word	0x200000c8
  ldr r3, = _ebss
 8005854:	20000544 	.word	0x20000544

08005858 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005858:	e7fe      	b.n	8005858 <CAN1_RX1_IRQHandler>
	...

0800585c <__libc_init_array>:
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	2500      	movs	r5, #0
 8005860:	4e0c      	ldr	r6, [pc, #48]	; (8005894 <__libc_init_array+0x38>)
 8005862:	4c0d      	ldr	r4, [pc, #52]	; (8005898 <__libc_init_array+0x3c>)
 8005864:	1ba4      	subs	r4, r4, r6
 8005866:	10a4      	asrs	r4, r4, #2
 8005868:	42a5      	cmp	r5, r4
 800586a:	d109      	bne.n	8005880 <__libc_init_array+0x24>
 800586c:	f000 fc72 	bl	8006154 <_init>
 8005870:	2500      	movs	r5, #0
 8005872:	4e0a      	ldr	r6, [pc, #40]	; (800589c <__libc_init_array+0x40>)
 8005874:	4c0a      	ldr	r4, [pc, #40]	; (80058a0 <__libc_init_array+0x44>)
 8005876:	1ba4      	subs	r4, r4, r6
 8005878:	10a4      	asrs	r4, r4, #2
 800587a:	42a5      	cmp	r5, r4
 800587c:	d105      	bne.n	800588a <__libc_init_array+0x2e>
 800587e:	bd70      	pop	{r4, r5, r6, pc}
 8005880:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005884:	4798      	blx	r3
 8005886:	3501      	adds	r5, #1
 8005888:	e7ee      	b.n	8005868 <__libc_init_array+0xc>
 800588a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800588e:	4798      	blx	r3
 8005890:	3501      	adds	r5, #1
 8005892:	e7f2      	b.n	800587a <__libc_init_array+0x1e>
 8005894:	080065f8 	.word	0x080065f8
 8005898:	080065f8 	.word	0x080065f8
 800589c:	080065f8 	.word	0x080065f8
 80058a0:	080065fc 	.word	0x080065fc

080058a4 <memset>:
 80058a4:	4603      	mov	r3, r0
 80058a6:	4402      	add	r2, r0
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d100      	bne.n	80058ae <memset+0xa>
 80058ac:	4770      	bx	lr
 80058ae:	f803 1b01 	strb.w	r1, [r3], #1
 80058b2:	e7f9      	b.n	80058a8 <memset+0x4>

080058b4 <siprintf>:
 80058b4:	b40e      	push	{r1, r2, r3}
 80058b6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80058ba:	b500      	push	{lr}
 80058bc:	b09c      	sub	sp, #112	; 0x70
 80058be:	f8ad 1014 	strh.w	r1, [sp, #20]
 80058c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058c6:	9104      	str	r1, [sp, #16]
 80058c8:	9107      	str	r1, [sp, #28]
 80058ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80058ce:	ab1d      	add	r3, sp, #116	; 0x74
 80058d0:	9002      	str	r0, [sp, #8]
 80058d2:	9006      	str	r0, [sp, #24]
 80058d4:	4808      	ldr	r0, [pc, #32]	; (80058f8 <siprintf+0x44>)
 80058d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80058da:	f8ad 1016 	strh.w	r1, [sp, #22]
 80058de:	6800      	ldr	r0, [r0, #0]
 80058e0:	a902      	add	r1, sp, #8
 80058e2:	9301      	str	r3, [sp, #4]
 80058e4:	f000 f87c 	bl	80059e0 <_svfiprintf_r>
 80058e8:	2200      	movs	r2, #0
 80058ea:	9b02      	ldr	r3, [sp, #8]
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	b01c      	add	sp, #112	; 0x70
 80058f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80058f4:	b003      	add	sp, #12
 80058f6:	4770      	bx	lr
 80058f8:	20000064 	.word	0x20000064

080058fc <strcat>:
 80058fc:	4602      	mov	r2, r0
 80058fe:	b510      	push	{r4, lr}
 8005900:	4613      	mov	r3, r2
 8005902:	781c      	ldrb	r4, [r3, #0]
 8005904:	3201      	adds	r2, #1
 8005906:	2c00      	cmp	r4, #0
 8005908:	d1fa      	bne.n	8005900 <strcat+0x4>
 800590a:	3b01      	subs	r3, #1
 800590c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005910:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005914:	2a00      	cmp	r2, #0
 8005916:	d1f9      	bne.n	800590c <strcat+0x10>
 8005918:	bd10      	pop	{r4, pc}

0800591a <strcpy>:
 800591a:	4603      	mov	r3, r0
 800591c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005920:	f803 2b01 	strb.w	r2, [r3], #1
 8005924:	2a00      	cmp	r2, #0
 8005926:	d1f9      	bne.n	800591c <strcpy+0x2>
 8005928:	4770      	bx	lr

0800592a <__ssputs_r>:
 800592a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800592e:	688e      	ldr	r6, [r1, #8]
 8005930:	4682      	mov	sl, r0
 8005932:	429e      	cmp	r6, r3
 8005934:	460c      	mov	r4, r1
 8005936:	4691      	mov	r9, r2
 8005938:	4698      	mov	r8, r3
 800593a:	d835      	bhi.n	80059a8 <__ssputs_r+0x7e>
 800593c:	898a      	ldrh	r2, [r1, #12]
 800593e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005942:	d031      	beq.n	80059a8 <__ssputs_r+0x7e>
 8005944:	2302      	movs	r3, #2
 8005946:	6825      	ldr	r5, [r4, #0]
 8005948:	6909      	ldr	r1, [r1, #16]
 800594a:	1a6f      	subs	r7, r5, r1
 800594c:	6965      	ldr	r5, [r4, #20]
 800594e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005952:	fb95 f5f3 	sdiv	r5, r5, r3
 8005956:	f108 0301 	add.w	r3, r8, #1
 800595a:	443b      	add	r3, r7
 800595c:	429d      	cmp	r5, r3
 800595e:	bf38      	it	cc
 8005960:	461d      	movcc	r5, r3
 8005962:	0553      	lsls	r3, r2, #21
 8005964:	d531      	bpl.n	80059ca <__ssputs_r+0xa0>
 8005966:	4629      	mov	r1, r5
 8005968:	f000 fb46 	bl	8005ff8 <_malloc_r>
 800596c:	4606      	mov	r6, r0
 800596e:	b950      	cbnz	r0, 8005986 <__ssputs_r+0x5c>
 8005970:	230c      	movs	r3, #12
 8005972:	f8ca 3000 	str.w	r3, [sl]
 8005976:	89a3      	ldrh	r3, [r4, #12]
 8005978:	f04f 30ff 	mov.w	r0, #4294967295
 800597c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005980:	81a3      	strh	r3, [r4, #12]
 8005982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005986:	463a      	mov	r2, r7
 8005988:	6921      	ldr	r1, [r4, #16]
 800598a:	f000 fac3 	bl	8005f14 <memcpy>
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005998:	81a3      	strh	r3, [r4, #12]
 800599a:	6126      	str	r6, [r4, #16]
 800599c:	443e      	add	r6, r7
 800599e:	6026      	str	r6, [r4, #0]
 80059a0:	4646      	mov	r6, r8
 80059a2:	6165      	str	r5, [r4, #20]
 80059a4:	1bed      	subs	r5, r5, r7
 80059a6:	60a5      	str	r5, [r4, #8]
 80059a8:	4546      	cmp	r6, r8
 80059aa:	bf28      	it	cs
 80059ac:	4646      	movcs	r6, r8
 80059ae:	4649      	mov	r1, r9
 80059b0:	4632      	mov	r2, r6
 80059b2:	6820      	ldr	r0, [r4, #0]
 80059b4:	f000 fab9 	bl	8005f2a <memmove>
 80059b8:	68a3      	ldr	r3, [r4, #8]
 80059ba:	2000      	movs	r0, #0
 80059bc:	1b9b      	subs	r3, r3, r6
 80059be:	60a3      	str	r3, [r4, #8]
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	441e      	add	r6, r3
 80059c4:	6026      	str	r6, [r4, #0]
 80059c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ca:	462a      	mov	r2, r5
 80059cc:	f000 fb72 	bl	80060b4 <_realloc_r>
 80059d0:	4606      	mov	r6, r0
 80059d2:	2800      	cmp	r0, #0
 80059d4:	d1e1      	bne.n	800599a <__ssputs_r+0x70>
 80059d6:	6921      	ldr	r1, [r4, #16]
 80059d8:	4650      	mov	r0, sl
 80059da:	f000 fac1 	bl	8005f60 <_free_r>
 80059de:	e7c7      	b.n	8005970 <__ssputs_r+0x46>

080059e0 <_svfiprintf_r>:
 80059e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e4:	b09d      	sub	sp, #116	; 0x74
 80059e6:	9303      	str	r3, [sp, #12]
 80059e8:	898b      	ldrh	r3, [r1, #12]
 80059ea:	4680      	mov	r8, r0
 80059ec:	061c      	lsls	r4, r3, #24
 80059ee:	460d      	mov	r5, r1
 80059f0:	4616      	mov	r6, r2
 80059f2:	d50f      	bpl.n	8005a14 <_svfiprintf_r+0x34>
 80059f4:	690b      	ldr	r3, [r1, #16]
 80059f6:	b96b      	cbnz	r3, 8005a14 <_svfiprintf_r+0x34>
 80059f8:	2140      	movs	r1, #64	; 0x40
 80059fa:	f000 fafd 	bl	8005ff8 <_malloc_r>
 80059fe:	6028      	str	r0, [r5, #0]
 8005a00:	6128      	str	r0, [r5, #16]
 8005a02:	b928      	cbnz	r0, 8005a10 <_svfiprintf_r+0x30>
 8005a04:	230c      	movs	r3, #12
 8005a06:	f8c8 3000 	str.w	r3, [r8]
 8005a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a0e:	e0c4      	b.n	8005b9a <_svfiprintf_r+0x1ba>
 8005a10:	2340      	movs	r3, #64	; 0x40
 8005a12:	616b      	str	r3, [r5, #20]
 8005a14:	2300      	movs	r3, #0
 8005a16:	9309      	str	r3, [sp, #36]	; 0x24
 8005a18:	2320      	movs	r3, #32
 8005a1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a1e:	2330      	movs	r3, #48	; 0x30
 8005a20:	f04f 0b01 	mov.w	fp, #1
 8005a24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a28:	4637      	mov	r7, r6
 8005a2a:	463c      	mov	r4, r7
 8005a2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d13c      	bne.n	8005aae <_svfiprintf_r+0xce>
 8005a34:	ebb7 0a06 	subs.w	sl, r7, r6
 8005a38:	d00b      	beq.n	8005a52 <_svfiprintf_r+0x72>
 8005a3a:	4653      	mov	r3, sl
 8005a3c:	4632      	mov	r2, r6
 8005a3e:	4629      	mov	r1, r5
 8005a40:	4640      	mov	r0, r8
 8005a42:	f7ff ff72 	bl	800592a <__ssputs_r>
 8005a46:	3001      	adds	r0, #1
 8005a48:	f000 80a2 	beq.w	8005b90 <_svfiprintf_r+0x1b0>
 8005a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a4e:	4453      	add	r3, sl
 8005a50:	9309      	str	r3, [sp, #36]	; 0x24
 8005a52:	783b      	ldrb	r3, [r7, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 809b 	beq.w	8005b90 <_svfiprintf_r+0x1b0>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a60:	9304      	str	r3, [sp, #16]
 8005a62:	9307      	str	r3, [sp, #28]
 8005a64:	9205      	str	r2, [sp, #20]
 8005a66:	9306      	str	r3, [sp, #24]
 8005a68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a6c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a6e:	2205      	movs	r2, #5
 8005a70:	7821      	ldrb	r1, [r4, #0]
 8005a72:	4850      	ldr	r0, [pc, #320]	; (8005bb4 <_svfiprintf_r+0x1d4>)
 8005a74:	f000 fa40 	bl	8005ef8 <memchr>
 8005a78:	1c67      	adds	r7, r4, #1
 8005a7a:	9b04      	ldr	r3, [sp, #16]
 8005a7c:	b9d8      	cbnz	r0, 8005ab6 <_svfiprintf_r+0xd6>
 8005a7e:	06d9      	lsls	r1, r3, #27
 8005a80:	bf44      	itt	mi
 8005a82:	2220      	movmi	r2, #32
 8005a84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a88:	071a      	lsls	r2, r3, #28
 8005a8a:	bf44      	itt	mi
 8005a8c:	222b      	movmi	r2, #43	; 0x2b
 8005a8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a92:	7822      	ldrb	r2, [r4, #0]
 8005a94:	2a2a      	cmp	r2, #42	; 0x2a
 8005a96:	d016      	beq.n	8005ac6 <_svfiprintf_r+0xe6>
 8005a98:	2100      	movs	r1, #0
 8005a9a:	200a      	movs	r0, #10
 8005a9c:	9a07      	ldr	r2, [sp, #28]
 8005a9e:	4627      	mov	r7, r4
 8005aa0:	783b      	ldrb	r3, [r7, #0]
 8005aa2:	3401      	adds	r4, #1
 8005aa4:	3b30      	subs	r3, #48	; 0x30
 8005aa6:	2b09      	cmp	r3, #9
 8005aa8:	d950      	bls.n	8005b4c <_svfiprintf_r+0x16c>
 8005aaa:	b1c9      	cbz	r1, 8005ae0 <_svfiprintf_r+0x100>
 8005aac:	e011      	b.n	8005ad2 <_svfiprintf_r+0xf2>
 8005aae:	2b25      	cmp	r3, #37	; 0x25
 8005ab0:	d0c0      	beq.n	8005a34 <_svfiprintf_r+0x54>
 8005ab2:	4627      	mov	r7, r4
 8005ab4:	e7b9      	b.n	8005a2a <_svfiprintf_r+0x4a>
 8005ab6:	4a3f      	ldr	r2, [pc, #252]	; (8005bb4 <_svfiprintf_r+0x1d4>)
 8005ab8:	463c      	mov	r4, r7
 8005aba:	1a80      	subs	r0, r0, r2
 8005abc:	fa0b f000 	lsl.w	r0, fp, r0
 8005ac0:	4318      	orrs	r0, r3
 8005ac2:	9004      	str	r0, [sp, #16]
 8005ac4:	e7d3      	b.n	8005a6e <_svfiprintf_r+0x8e>
 8005ac6:	9a03      	ldr	r2, [sp, #12]
 8005ac8:	1d11      	adds	r1, r2, #4
 8005aca:	6812      	ldr	r2, [r2, #0]
 8005acc:	9103      	str	r1, [sp, #12]
 8005ace:	2a00      	cmp	r2, #0
 8005ad0:	db01      	blt.n	8005ad6 <_svfiprintf_r+0xf6>
 8005ad2:	9207      	str	r2, [sp, #28]
 8005ad4:	e004      	b.n	8005ae0 <_svfiprintf_r+0x100>
 8005ad6:	4252      	negs	r2, r2
 8005ad8:	f043 0302 	orr.w	r3, r3, #2
 8005adc:	9207      	str	r2, [sp, #28]
 8005ade:	9304      	str	r3, [sp, #16]
 8005ae0:	783b      	ldrb	r3, [r7, #0]
 8005ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ae4:	d10d      	bne.n	8005b02 <_svfiprintf_r+0x122>
 8005ae6:	787b      	ldrb	r3, [r7, #1]
 8005ae8:	1c79      	adds	r1, r7, #1
 8005aea:	2b2a      	cmp	r3, #42	; 0x2a
 8005aec:	d132      	bne.n	8005b54 <_svfiprintf_r+0x174>
 8005aee:	9b03      	ldr	r3, [sp, #12]
 8005af0:	3702      	adds	r7, #2
 8005af2:	1d1a      	adds	r2, r3, #4
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	9203      	str	r2, [sp, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	bfb8      	it	lt
 8005afc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b00:	9305      	str	r3, [sp, #20]
 8005b02:	4c2d      	ldr	r4, [pc, #180]	; (8005bb8 <_svfiprintf_r+0x1d8>)
 8005b04:	2203      	movs	r2, #3
 8005b06:	7839      	ldrb	r1, [r7, #0]
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f000 f9f5 	bl	8005ef8 <memchr>
 8005b0e:	b138      	cbz	r0, 8005b20 <_svfiprintf_r+0x140>
 8005b10:	2340      	movs	r3, #64	; 0x40
 8005b12:	1b00      	subs	r0, r0, r4
 8005b14:	fa03 f000 	lsl.w	r0, r3, r0
 8005b18:	9b04      	ldr	r3, [sp, #16]
 8005b1a:	3701      	adds	r7, #1
 8005b1c:	4303      	orrs	r3, r0
 8005b1e:	9304      	str	r3, [sp, #16]
 8005b20:	7839      	ldrb	r1, [r7, #0]
 8005b22:	2206      	movs	r2, #6
 8005b24:	4825      	ldr	r0, [pc, #148]	; (8005bbc <_svfiprintf_r+0x1dc>)
 8005b26:	1c7e      	adds	r6, r7, #1
 8005b28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b2c:	f000 f9e4 	bl	8005ef8 <memchr>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	d035      	beq.n	8005ba0 <_svfiprintf_r+0x1c0>
 8005b34:	4b22      	ldr	r3, [pc, #136]	; (8005bc0 <_svfiprintf_r+0x1e0>)
 8005b36:	b9fb      	cbnz	r3, 8005b78 <_svfiprintf_r+0x198>
 8005b38:	9b03      	ldr	r3, [sp, #12]
 8005b3a:	3307      	adds	r3, #7
 8005b3c:	f023 0307 	bic.w	r3, r3, #7
 8005b40:	3308      	adds	r3, #8
 8005b42:	9303      	str	r3, [sp, #12]
 8005b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b46:	444b      	add	r3, r9
 8005b48:	9309      	str	r3, [sp, #36]	; 0x24
 8005b4a:	e76d      	b.n	8005a28 <_svfiprintf_r+0x48>
 8005b4c:	fb00 3202 	mla	r2, r0, r2, r3
 8005b50:	2101      	movs	r1, #1
 8005b52:	e7a4      	b.n	8005a9e <_svfiprintf_r+0xbe>
 8005b54:	2300      	movs	r3, #0
 8005b56:	240a      	movs	r4, #10
 8005b58:	4618      	mov	r0, r3
 8005b5a:	9305      	str	r3, [sp, #20]
 8005b5c:	460f      	mov	r7, r1
 8005b5e:	783a      	ldrb	r2, [r7, #0]
 8005b60:	3101      	adds	r1, #1
 8005b62:	3a30      	subs	r2, #48	; 0x30
 8005b64:	2a09      	cmp	r2, #9
 8005b66:	d903      	bls.n	8005b70 <_svfiprintf_r+0x190>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0ca      	beq.n	8005b02 <_svfiprintf_r+0x122>
 8005b6c:	9005      	str	r0, [sp, #20]
 8005b6e:	e7c8      	b.n	8005b02 <_svfiprintf_r+0x122>
 8005b70:	fb04 2000 	mla	r0, r4, r0, r2
 8005b74:	2301      	movs	r3, #1
 8005b76:	e7f1      	b.n	8005b5c <_svfiprintf_r+0x17c>
 8005b78:	ab03      	add	r3, sp, #12
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	462a      	mov	r2, r5
 8005b7e:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <_svfiprintf_r+0x1e4>)
 8005b80:	a904      	add	r1, sp, #16
 8005b82:	4640      	mov	r0, r8
 8005b84:	f3af 8000 	nop.w
 8005b88:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005b8c:	4681      	mov	r9, r0
 8005b8e:	d1d9      	bne.n	8005b44 <_svfiprintf_r+0x164>
 8005b90:	89ab      	ldrh	r3, [r5, #12]
 8005b92:	065b      	lsls	r3, r3, #25
 8005b94:	f53f af39 	bmi.w	8005a0a <_svfiprintf_r+0x2a>
 8005b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b9a:	b01d      	add	sp, #116	; 0x74
 8005b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba0:	ab03      	add	r3, sp, #12
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	462a      	mov	r2, r5
 8005ba6:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <_svfiprintf_r+0x1e4>)
 8005ba8:	a904      	add	r1, sp, #16
 8005baa:	4640      	mov	r0, r8
 8005bac:	f000 f884 	bl	8005cb8 <_printf_i>
 8005bb0:	e7ea      	b.n	8005b88 <_svfiprintf_r+0x1a8>
 8005bb2:	bf00      	nop
 8005bb4:	080065c3 	.word	0x080065c3
 8005bb8:	080065c9 	.word	0x080065c9
 8005bbc:	080065cd 	.word	0x080065cd
 8005bc0:	00000000 	.word	0x00000000
 8005bc4:	0800592b 	.word	0x0800592b

08005bc8 <_printf_common>:
 8005bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bcc:	4691      	mov	r9, r2
 8005bce:	461f      	mov	r7, r3
 8005bd0:	688a      	ldr	r2, [r1, #8]
 8005bd2:	690b      	ldr	r3, [r1, #16]
 8005bd4:	4606      	mov	r6, r0
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	bfb8      	it	lt
 8005bda:	4613      	movlt	r3, r2
 8005bdc:	f8c9 3000 	str.w	r3, [r9]
 8005be0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005be4:	460c      	mov	r4, r1
 8005be6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bea:	b112      	cbz	r2, 8005bf2 <_printf_common+0x2a>
 8005bec:	3301      	adds	r3, #1
 8005bee:	f8c9 3000 	str.w	r3, [r9]
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	0699      	lsls	r1, r3, #26
 8005bf6:	bf42      	ittt	mi
 8005bf8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005bfc:	3302      	addmi	r3, #2
 8005bfe:	f8c9 3000 	strmi.w	r3, [r9]
 8005c02:	6825      	ldr	r5, [r4, #0]
 8005c04:	f015 0506 	ands.w	r5, r5, #6
 8005c08:	d107      	bne.n	8005c1a <_printf_common+0x52>
 8005c0a:	f104 0a19 	add.w	sl, r4, #25
 8005c0e:	68e3      	ldr	r3, [r4, #12]
 8005c10:	f8d9 2000 	ldr.w	r2, [r9]
 8005c14:	1a9b      	subs	r3, r3, r2
 8005c16:	429d      	cmp	r5, r3
 8005c18:	db2a      	blt.n	8005c70 <_printf_common+0xa8>
 8005c1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c1e:	6822      	ldr	r2, [r4, #0]
 8005c20:	3300      	adds	r3, #0
 8005c22:	bf18      	it	ne
 8005c24:	2301      	movne	r3, #1
 8005c26:	0692      	lsls	r2, r2, #26
 8005c28:	d42f      	bmi.n	8005c8a <_printf_common+0xc2>
 8005c2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c2e:	4639      	mov	r1, r7
 8005c30:	4630      	mov	r0, r6
 8005c32:	47c0      	blx	r8
 8005c34:	3001      	adds	r0, #1
 8005c36:	d022      	beq.n	8005c7e <_printf_common+0xb6>
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	68e5      	ldr	r5, [r4, #12]
 8005c3c:	f003 0306 	and.w	r3, r3, #6
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	bf18      	it	ne
 8005c44:	2500      	movne	r5, #0
 8005c46:	f8d9 2000 	ldr.w	r2, [r9]
 8005c4a:	f04f 0900 	mov.w	r9, #0
 8005c4e:	bf08      	it	eq
 8005c50:	1aad      	subeq	r5, r5, r2
 8005c52:	68a3      	ldr	r3, [r4, #8]
 8005c54:	6922      	ldr	r2, [r4, #16]
 8005c56:	bf08      	it	eq
 8005c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	bfc4      	itt	gt
 8005c60:	1a9b      	subgt	r3, r3, r2
 8005c62:	18ed      	addgt	r5, r5, r3
 8005c64:	341a      	adds	r4, #26
 8005c66:	454d      	cmp	r5, r9
 8005c68:	d11b      	bne.n	8005ca2 <_printf_common+0xda>
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c70:	2301      	movs	r3, #1
 8005c72:	4652      	mov	r2, sl
 8005c74:	4639      	mov	r1, r7
 8005c76:	4630      	mov	r0, r6
 8005c78:	47c0      	blx	r8
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	d103      	bne.n	8005c86 <_printf_common+0xbe>
 8005c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c86:	3501      	adds	r5, #1
 8005c88:	e7c1      	b.n	8005c0e <_printf_common+0x46>
 8005c8a:	2030      	movs	r0, #48	; 0x30
 8005c8c:	18e1      	adds	r1, r4, r3
 8005c8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c98:	4422      	add	r2, r4
 8005c9a:	3302      	adds	r3, #2
 8005c9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ca0:	e7c3      	b.n	8005c2a <_printf_common+0x62>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4622      	mov	r2, r4
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	4630      	mov	r0, r6
 8005caa:	47c0      	blx	r8
 8005cac:	3001      	adds	r0, #1
 8005cae:	d0e6      	beq.n	8005c7e <_printf_common+0xb6>
 8005cb0:	f109 0901 	add.w	r9, r9, #1
 8005cb4:	e7d7      	b.n	8005c66 <_printf_common+0x9e>
	...

08005cb8 <_printf_i>:
 8005cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cbc:	4617      	mov	r7, r2
 8005cbe:	7e0a      	ldrb	r2, [r1, #24]
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	2a6e      	cmp	r2, #110	; 0x6e
 8005cc4:	4698      	mov	r8, r3
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	460c      	mov	r4, r1
 8005cca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ccc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005cd0:	f000 80bc 	beq.w	8005e4c <_printf_i+0x194>
 8005cd4:	d81a      	bhi.n	8005d0c <_printf_i+0x54>
 8005cd6:	2a63      	cmp	r2, #99	; 0x63
 8005cd8:	d02e      	beq.n	8005d38 <_printf_i+0x80>
 8005cda:	d80a      	bhi.n	8005cf2 <_printf_i+0x3a>
 8005cdc:	2a00      	cmp	r2, #0
 8005cde:	f000 80c8 	beq.w	8005e72 <_printf_i+0x1ba>
 8005ce2:	2a58      	cmp	r2, #88	; 0x58
 8005ce4:	f000 808a 	beq.w	8005dfc <_printf_i+0x144>
 8005ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cec:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005cf0:	e02a      	b.n	8005d48 <_printf_i+0x90>
 8005cf2:	2a64      	cmp	r2, #100	; 0x64
 8005cf4:	d001      	beq.n	8005cfa <_printf_i+0x42>
 8005cf6:	2a69      	cmp	r2, #105	; 0x69
 8005cf8:	d1f6      	bne.n	8005ce8 <_printf_i+0x30>
 8005cfa:	6821      	ldr	r1, [r4, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005d02:	d023      	beq.n	8005d4c <_printf_i+0x94>
 8005d04:	1d11      	adds	r1, r2, #4
 8005d06:	6019      	str	r1, [r3, #0]
 8005d08:	6813      	ldr	r3, [r2, #0]
 8005d0a:	e027      	b.n	8005d5c <_printf_i+0xa4>
 8005d0c:	2a73      	cmp	r2, #115	; 0x73
 8005d0e:	f000 80b4 	beq.w	8005e7a <_printf_i+0x1c2>
 8005d12:	d808      	bhi.n	8005d26 <_printf_i+0x6e>
 8005d14:	2a6f      	cmp	r2, #111	; 0x6f
 8005d16:	d02a      	beq.n	8005d6e <_printf_i+0xb6>
 8005d18:	2a70      	cmp	r2, #112	; 0x70
 8005d1a:	d1e5      	bne.n	8005ce8 <_printf_i+0x30>
 8005d1c:	680a      	ldr	r2, [r1, #0]
 8005d1e:	f042 0220 	orr.w	r2, r2, #32
 8005d22:	600a      	str	r2, [r1, #0]
 8005d24:	e003      	b.n	8005d2e <_printf_i+0x76>
 8005d26:	2a75      	cmp	r2, #117	; 0x75
 8005d28:	d021      	beq.n	8005d6e <_printf_i+0xb6>
 8005d2a:	2a78      	cmp	r2, #120	; 0x78
 8005d2c:	d1dc      	bne.n	8005ce8 <_printf_i+0x30>
 8005d2e:	2278      	movs	r2, #120	; 0x78
 8005d30:	496f      	ldr	r1, [pc, #444]	; (8005ef0 <_printf_i+0x238>)
 8005d32:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005d36:	e064      	b.n	8005e02 <_printf_i+0x14a>
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005d3e:	1d11      	adds	r1, r2, #4
 8005d40:	6019      	str	r1, [r3, #0]
 8005d42:	6813      	ldr	r3, [r2, #0]
 8005d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e0a3      	b.n	8005e94 <_printf_i+0x1dc>
 8005d4c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005d50:	f102 0104 	add.w	r1, r2, #4
 8005d54:	6019      	str	r1, [r3, #0]
 8005d56:	d0d7      	beq.n	8005d08 <_printf_i+0x50>
 8005d58:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	da03      	bge.n	8005d68 <_printf_i+0xb0>
 8005d60:	222d      	movs	r2, #45	; 0x2d
 8005d62:	425b      	negs	r3, r3
 8005d64:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005d68:	4962      	ldr	r1, [pc, #392]	; (8005ef4 <_printf_i+0x23c>)
 8005d6a:	220a      	movs	r2, #10
 8005d6c:	e017      	b.n	8005d9e <_printf_i+0xe6>
 8005d6e:	6820      	ldr	r0, [r4, #0]
 8005d70:	6819      	ldr	r1, [r3, #0]
 8005d72:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005d76:	d003      	beq.n	8005d80 <_printf_i+0xc8>
 8005d78:	1d08      	adds	r0, r1, #4
 8005d7a:	6018      	str	r0, [r3, #0]
 8005d7c:	680b      	ldr	r3, [r1, #0]
 8005d7e:	e006      	b.n	8005d8e <_printf_i+0xd6>
 8005d80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d84:	f101 0004 	add.w	r0, r1, #4
 8005d88:	6018      	str	r0, [r3, #0]
 8005d8a:	d0f7      	beq.n	8005d7c <_printf_i+0xc4>
 8005d8c:	880b      	ldrh	r3, [r1, #0]
 8005d8e:	2a6f      	cmp	r2, #111	; 0x6f
 8005d90:	bf14      	ite	ne
 8005d92:	220a      	movne	r2, #10
 8005d94:	2208      	moveq	r2, #8
 8005d96:	4957      	ldr	r1, [pc, #348]	; (8005ef4 <_printf_i+0x23c>)
 8005d98:	2000      	movs	r0, #0
 8005d9a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005d9e:	6865      	ldr	r5, [r4, #4]
 8005da0:	2d00      	cmp	r5, #0
 8005da2:	60a5      	str	r5, [r4, #8]
 8005da4:	f2c0 809c 	blt.w	8005ee0 <_printf_i+0x228>
 8005da8:	6820      	ldr	r0, [r4, #0]
 8005daa:	f020 0004 	bic.w	r0, r0, #4
 8005dae:	6020      	str	r0, [r4, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d13f      	bne.n	8005e34 <_printf_i+0x17c>
 8005db4:	2d00      	cmp	r5, #0
 8005db6:	f040 8095 	bne.w	8005ee4 <_printf_i+0x22c>
 8005dba:	4675      	mov	r5, lr
 8005dbc:	2a08      	cmp	r2, #8
 8005dbe:	d10b      	bne.n	8005dd8 <_printf_i+0x120>
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	07da      	lsls	r2, r3, #31
 8005dc4:	d508      	bpl.n	8005dd8 <_printf_i+0x120>
 8005dc6:	6923      	ldr	r3, [r4, #16]
 8005dc8:	6862      	ldr	r2, [r4, #4]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	bfde      	ittt	le
 8005dce:	2330      	movle	r3, #48	; 0x30
 8005dd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dd8:	ebae 0305 	sub.w	r3, lr, r5
 8005ddc:	6123      	str	r3, [r4, #16]
 8005dde:	f8cd 8000 	str.w	r8, [sp]
 8005de2:	463b      	mov	r3, r7
 8005de4:	aa03      	add	r2, sp, #12
 8005de6:	4621      	mov	r1, r4
 8005de8:	4630      	mov	r0, r6
 8005dea:	f7ff feed 	bl	8005bc8 <_printf_common>
 8005dee:	3001      	adds	r0, #1
 8005df0:	d155      	bne.n	8005e9e <_printf_i+0x1e6>
 8005df2:	f04f 30ff 	mov.w	r0, #4294967295
 8005df6:	b005      	add	sp, #20
 8005df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dfc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005e00:	493c      	ldr	r1, [pc, #240]	; (8005ef4 <_printf_i+0x23c>)
 8005e02:	6822      	ldr	r2, [r4, #0]
 8005e04:	6818      	ldr	r0, [r3, #0]
 8005e06:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005e0a:	f100 0504 	add.w	r5, r0, #4
 8005e0e:	601d      	str	r5, [r3, #0]
 8005e10:	d001      	beq.n	8005e16 <_printf_i+0x15e>
 8005e12:	6803      	ldr	r3, [r0, #0]
 8005e14:	e002      	b.n	8005e1c <_printf_i+0x164>
 8005e16:	0655      	lsls	r5, r2, #25
 8005e18:	d5fb      	bpl.n	8005e12 <_printf_i+0x15a>
 8005e1a:	8803      	ldrh	r3, [r0, #0]
 8005e1c:	07d0      	lsls	r0, r2, #31
 8005e1e:	bf44      	itt	mi
 8005e20:	f042 0220 	orrmi.w	r2, r2, #32
 8005e24:	6022      	strmi	r2, [r4, #0]
 8005e26:	b91b      	cbnz	r3, 8005e30 <_printf_i+0x178>
 8005e28:	6822      	ldr	r2, [r4, #0]
 8005e2a:	f022 0220 	bic.w	r2, r2, #32
 8005e2e:	6022      	str	r2, [r4, #0]
 8005e30:	2210      	movs	r2, #16
 8005e32:	e7b1      	b.n	8005d98 <_printf_i+0xe0>
 8005e34:	4675      	mov	r5, lr
 8005e36:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e3a:	fb02 3310 	mls	r3, r2, r0, r3
 8005e3e:	5ccb      	ldrb	r3, [r1, r3]
 8005e40:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e44:	4603      	mov	r3, r0
 8005e46:	2800      	cmp	r0, #0
 8005e48:	d1f5      	bne.n	8005e36 <_printf_i+0x17e>
 8005e4a:	e7b7      	b.n	8005dbc <_printf_i+0x104>
 8005e4c:	6808      	ldr	r0, [r1, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005e54:	6949      	ldr	r1, [r1, #20]
 8005e56:	d004      	beq.n	8005e62 <_printf_i+0x1aa>
 8005e58:	1d10      	adds	r0, r2, #4
 8005e5a:	6018      	str	r0, [r3, #0]
 8005e5c:	6813      	ldr	r3, [r2, #0]
 8005e5e:	6019      	str	r1, [r3, #0]
 8005e60:	e007      	b.n	8005e72 <_printf_i+0x1ba>
 8005e62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e66:	f102 0004 	add.w	r0, r2, #4
 8005e6a:	6018      	str	r0, [r3, #0]
 8005e6c:	6813      	ldr	r3, [r2, #0]
 8005e6e:	d0f6      	beq.n	8005e5e <_printf_i+0x1a6>
 8005e70:	8019      	strh	r1, [r3, #0]
 8005e72:	2300      	movs	r3, #0
 8005e74:	4675      	mov	r5, lr
 8005e76:	6123      	str	r3, [r4, #16]
 8005e78:	e7b1      	b.n	8005dde <_printf_i+0x126>
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	1d11      	adds	r1, r2, #4
 8005e7e:	6019      	str	r1, [r3, #0]
 8005e80:	6815      	ldr	r5, [r2, #0]
 8005e82:	2100      	movs	r1, #0
 8005e84:	6862      	ldr	r2, [r4, #4]
 8005e86:	4628      	mov	r0, r5
 8005e88:	f000 f836 	bl	8005ef8 <memchr>
 8005e8c:	b108      	cbz	r0, 8005e92 <_printf_i+0x1da>
 8005e8e:	1b40      	subs	r0, r0, r5
 8005e90:	6060      	str	r0, [r4, #4]
 8005e92:	6863      	ldr	r3, [r4, #4]
 8005e94:	6123      	str	r3, [r4, #16]
 8005e96:	2300      	movs	r3, #0
 8005e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e9c:	e79f      	b.n	8005dde <_printf_i+0x126>
 8005e9e:	6923      	ldr	r3, [r4, #16]
 8005ea0:	462a      	mov	r2, r5
 8005ea2:	4639      	mov	r1, r7
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	47c0      	blx	r8
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d0a2      	beq.n	8005df2 <_printf_i+0x13a>
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	079b      	lsls	r3, r3, #30
 8005eb0:	d507      	bpl.n	8005ec2 <_printf_i+0x20a>
 8005eb2:	2500      	movs	r5, #0
 8005eb4:	f104 0919 	add.w	r9, r4, #25
 8005eb8:	68e3      	ldr	r3, [r4, #12]
 8005eba:	9a03      	ldr	r2, [sp, #12]
 8005ebc:	1a9b      	subs	r3, r3, r2
 8005ebe:	429d      	cmp	r5, r3
 8005ec0:	db05      	blt.n	8005ece <_printf_i+0x216>
 8005ec2:	68e0      	ldr	r0, [r4, #12]
 8005ec4:	9b03      	ldr	r3, [sp, #12]
 8005ec6:	4298      	cmp	r0, r3
 8005ec8:	bfb8      	it	lt
 8005eca:	4618      	movlt	r0, r3
 8005ecc:	e793      	b.n	8005df6 <_printf_i+0x13e>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	464a      	mov	r2, r9
 8005ed2:	4639      	mov	r1, r7
 8005ed4:	4630      	mov	r0, r6
 8005ed6:	47c0      	blx	r8
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d08a      	beq.n	8005df2 <_printf_i+0x13a>
 8005edc:	3501      	adds	r5, #1
 8005ede:	e7eb      	b.n	8005eb8 <_printf_i+0x200>
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1a7      	bne.n	8005e34 <_printf_i+0x17c>
 8005ee4:	780b      	ldrb	r3, [r1, #0]
 8005ee6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005eee:	e765      	b.n	8005dbc <_printf_i+0x104>
 8005ef0:	080065e5 	.word	0x080065e5
 8005ef4:	080065d4 	.word	0x080065d4

08005ef8 <memchr>:
 8005ef8:	b510      	push	{r4, lr}
 8005efa:	b2c9      	uxtb	r1, r1
 8005efc:	4402      	add	r2, r0
 8005efe:	4290      	cmp	r0, r2
 8005f00:	4603      	mov	r3, r0
 8005f02:	d101      	bne.n	8005f08 <memchr+0x10>
 8005f04:	2000      	movs	r0, #0
 8005f06:	bd10      	pop	{r4, pc}
 8005f08:	781c      	ldrb	r4, [r3, #0]
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	428c      	cmp	r4, r1
 8005f0e:	d1f6      	bne.n	8005efe <memchr+0x6>
 8005f10:	4618      	mov	r0, r3
 8005f12:	bd10      	pop	{r4, pc}

08005f14 <memcpy>:
 8005f14:	b510      	push	{r4, lr}
 8005f16:	1e43      	subs	r3, r0, #1
 8005f18:	440a      	add	r2, r1
 8005f1a:	4291      	cmp	r1, r2
 8005f1c:	d100      	bne.n	8005f20 <memcpy+0xc>
 8005f1e:	bd10      	pop	{r4, pc}
 8005f20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f28:	e7f7      	b.n	8005f1a <memcpy+0x6>

08005f2a <memmove>:
 8005f2a:	4288      	cmp	r0, r1
 8005f2c:	b510      	push	{r4, lr}
 8005f2e:	eb01 0302 	add.w	r3, r1, r2
 8005f32:	d803      	bhi.n	8005f3c <memmove+0x12>
 8005f34:	1e42      	subs	r2, r0, #1
 8005f36:	4299      	cmp	r1, r3
 8005f38:	d10c      	bne.n	8005f54 <memmove+0x2a>
 8005f3a:	bd10      	pop	{r4, pc}
 8005f3c:	4298      	cmp	r0, r3
 8005f3e:	d2f9      	bcs.n	8005f34 <memmove+0xa>
 8005f40:	1881      	adds	r1, r0, r2
 8005f42:	1ad2      	subs	r2, r2, r3
 8005f44:	42d3      	cmn	r3, r2
 8005f46:	d100      	bne.n	8005f4a <memmove+0x20>
 8005f48:	bd10      	pop	{r4, pc}
 8005f4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f4e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005f52:	e7f7      	b.n	8005f44 <memmove+0x1a>
 8005f54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f58:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005f5c:	e7eb      	b.n	8005f36 <memmove+0xc>
	...

08005f60 <_free_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4605      	mov	r5, r0
 8005f64:	2900      	cmp	r1, #0
 8005f66:	d043      	beq.n	8005ff0 <_free_r+0x90>
 8005f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f6c:	1f0c      	subs	r4, r1, #4
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	bfb8      	it	lt
 8005f72:	18e4      	addlt	r4, r4, r3
 8005f74:	f000 f8d4 	bl	8006120 <__malloc_lock>
 8005f78:	4a1e      	ldr	r2, [pc, #120]	; (8005ff4 <_free_r+0x94>)
 8005f7a:	6813      	ldr	r3, [r2, #0]
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	b933      	cbnz	r3, 8005f8e <_free_r+0x2e>
 8005f80:	6063      	str	r3, [r4, #4]
 8005f82:	6014      	str	r4, [r2, #0]
 8005f84:	4628      	mov	r0, r5
 8005f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f8a:	f000 b8ca 	b.w	8006122 <__malloc_unlock>
 8005f8e:	42a3      	cmp	r3, r4
 8005f90:	d90b      	bls.n	8005faa <_free_r+0x4a>
 8005f92:	6821      	ldr	r1, [r4, #0]
 8005f94:	1862      	adds	r2, r4, r1
 8005f96:	4293      	cmp	r3, r2
 8005f98:	bf01      	itttt	eq
 8005f9a:	681a      	ldreq	r2, [r3, #0]
 8005f9c:	685b      	ldreq	r3, [r3, #4]
 8005f9e:	1852      	addeq	r2, r2, r1
 8005fa0:	6022      	streq	r2, [r4, #0]
 8005fa2:	6063      	str	r3, [r4, #4]
 8005fa4:	6004      	str	r4, [r0, #0]
 8005fa6:	e7ed      	b.n	8005f84 <_free_r+0x24>
 8005fa8:	4613      	mov	r3, r2
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	b10a      	cbz	r2, 8005fb2 <_free_r+0x52>
 8005fae:	42a2      	cmp	r2, r4
 8005fb0:	d9fa      	bls.n	8005fa8 <_free_r+0x48>
 8005fb2:	6819      	ldr	r1, [r3, #0]
 8005fb4:	1858      	adds	r0, r3, r1
 8005fb6:	42a0      	cmp	r0, r4
 8005fb8:	d10b      	bne.n	8005fd2 <_free_r+0x72>
 8005fba:	6820      	ldr	r0, [r4, #0]
 8005fbc:	4401      	add	r1, r0
 8005fbe:	1858      	adds	r0, r3, r1
 8005fc0:	4282      	cmp	r2, r0
 8005fc2:	6019      	str	r1, [r3, #0]
 8005fc4:	d1de      	bne.n	8005f84 <_free_r+0x24>
 8005fc6:	6810      	ldr	r0, [r2, #0]
 8005fc8:	6852      	ldr	r2, [r2, #4]
 8005fca:	4401      	add	r1, r0
 8005fcc:	6019      	str	r1, [r3, #0]
 8005fce:	605a      	str	r2, [r3, #4]
 8005fd0:	e7d8      	b.n	8005f84 <_free_r+0x24>
 8005fd2:	d902      	bls.n	8005fda <_free_r+0x7a>
 8005fd4:	230c      	movs	r3, #12
 8005fd6:	602b      	str	r3, [r5, #0]
 8005fd8:	e7d4      	b.n	8005f84 <_free_r+0x24>
 8005fda:	6820      	ldr	r0, [r4, #0]
 8005fdc:	1821      	adds	r1, r4, r0
 8005fde:	428a      	cmp	r2, r1
 8005fe0:	bf01      	itttt	eq
 8005fe2:	6811      	ldreq	r1, [r2, #0]
 8005fe4:	6852      	ldreq	r2, [r2, #4]
 8005fe6:	1809      	addeq	r1, r1, r0
 8005fe8:	6021      	streq	r1, [r4, #0]
 8005fea:	6062      	str	r2, [r4, #4]
 8005fec:	605c      	str	r4, [r3, #4]
 8005fee:	e7c9      	b.n	8005f84 <_free_r+0x24>
 8005ff0:	bd38      	pop	{r3, r4, r5, pc}
 8005ff2:	bf00      	nop
 8005ff4:	200001a4 	.word	0x200001a4

08005ff8 <_malloc_r>:
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	1ccd      	adds	r5, r1, #3
 8005ffc:	f025 0503 	bic.w	r5, r5, #3
 8006000:	3508      	adds	r5, #8
 8006002:	2d0c      	cmp	r5, #12
 8006004:	bf38      	it	cc
 8006006:	250c      	movcc	r5, #12
 8006008:	2d00      	cmp	r5, #0
 800600a:	4606      	mov	r6, r0
 800600c:	db01      	blt.n	8006012 <_malloc_r+0x1a>
 800600e:	42a9      	cmp	r1, r5
 8006010:	d903      	bls.n	800601a <_malloc_r+0x22>
 8006012:	230c      	movs	r3, #12
 8006014:	6033      	str	r3, [r6, #0]
 8006016:	2000      	movs	r0, #0
 8006018:	bd70      	pop	{r4, r5, r6, pc}
 800601a:	f000 f881 	bl	8006120 <__malloc_lock>
 800601e:	4a23      	ldr	r2, [pc, #140]	; (80060ac <_malloc_r+0xb4>)
 8006020:	6814      	ldr	r4, [r2, #0]
 8006022:	4621      	mov	r1, r4
 8006024:	b991      	cbnz	r1, 800604c <_malloc_r+0x54>
 8006026:	4c22      	ldr	r4, [pc, #136]	; (80060b0 <_malloc_r+0xb8>)
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	b91b      	cbnz	r3, 8006034 <_malloc_r+0x3c>
 800602c:	4630      	mov	r0, r6
 800602e:	f000 f867 	bl	8006100 <_sbrk_r>
 8006032:	6020      	str	r0, [r4, #0]
 8006034:	4629      	mov	r1, r5
 8006036:	4630      	mov	r0, r6
 8006038:	f000 f862 	bl	8006100 <_sbrk_r>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d126      	bne.n	800608e <_malloc_r+0x96>
 8006040:	230c      	movs	r3, #12
 8006042:	4630      	mov	r0, r6
 8006044:	6033      	str	r3, [r6, #0]
 8006046:	f000 f86c 	bl	8006122 <__malloc_unlock>
 800604a:	e7e4      	b.n	8006016 <_malloc_r+0x1e>
 800604c:	680b      	ldr	r3, [r1, #0]
 800604e:	1b5b      	subs	r3, r3, r5
 8006050:	d41a      	bmi.n	8006088 <_malloc_r+0x90>
 8006052:	2b0b      	cmp	r3, #11
 8006054:	d90f      	bls.n	8006076 <_malloc_r+0x7e>
 8006056:	600b      	str	r3, [r1, #0]
 8006058:	18cc      	adds	r4, r1, r3
 800605a:	50cd      	str	r5, [r1, r3]
 800605c:	4630      	mov	r0, r6
 800605e:	f000 f860 	bl	8006122 <__malloc_unlock>
 8006062:	f104 000b 	add.w	r0, r4, #11
 8006066:	1d23      	adds	r3, r4, #4
 8006068:	f020 0007 	bic.w	r0, r0, #7
 800606c:	1ac3      	subs	r3, r0, r3
 800606e:	d01b      	beq.n	80060a8 <_malloc_r+0xb0>
 8006070:	425a      	negs	r2, r3
 8006072:	50e2      	str	r2, [r4, r3]
 8006074:	bd70      	pop	{r4, r5, r6, pc}
 8006076:	428c      	cmp	r4, r1
 8006078:	bf0b      	itete	eq
 800607a:	6863      	ldreq	r3, [r4, #4]
 800607c:	684b      	ldrne	r3, [r1, #4]
 800607e:	6013      	streq	r3, [r2, #0]
 8006080:	6063      	strne	r3, [r4, #4]
 8006082:	bf18      	it	ne
 8006084:	460c      	movne	r4, r1
 8006086:	e7e9      	b.n	800605c <_malloc_r+0x64>
 8006088:	460c      	mov	r4, r1
 800608a:	6849      	ldr	r1, [r1, #4]
 800608c:	e7ca      	b.n	8006024 <_malloc_r+0x2c>
 800608e:	1cc4      	adds	r4, r0, #3
 8006090:	f024 0403 	bic.w	r4, r4, #3
 8006094:	42a0      	cmp	r0, r4
 8006096:	d005      	beq.n	80060a4 <_malloc_r+0xac>
 8006098:	1a21      	subs	r1, r4, r0
 800609a:	4630      	mov	r0, r6
 800609c:	f000 f830 	bl	8006100 <_sbrk_r>
 80060a0:	3001      	adds	r0, #1
 80060a2:	d0cd      	beq.n	8006040 <_malloc_r+0x48>
 80060a4:	6025      	str	r5, [r4, #0]
 80060a6:	e7d9      	b.n	800605c <_malloc_r+0x64>
 80060a8:	bd70      	pop	{r4, r5, r6, pc}
 80060aa:	bf00      	nop
 80060ac:	200001a4 	.word	0x200001a4
 80060b0:	200001a8 	.word	0x200001a8

080060b4 <_realloc_r>:
 80060b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b6:	4607      	mov	r7, r0
 80060b8:	4614      	mov	r4, r2
 80060ba:	460e      	mov	r6, r1
 80060bc:	b921      	cbnz	r1, 80060c8 <_realloc_r+0x14>
 80060be:	4611      	mov	r1, r2
 80060c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80060c4:	f7ff bf98 	b.w	8005ff8 <_malloc_r>
 80060c8:	b922      	cbnz	r2, 80060d4 <_realloc_r+0x20>
 80060ca:	f7ff ff49 	bl	8005f60 <_free_r>
 80060ce:	4625      	mov	r5, r4
 80060d0:	4628      	mov	r0, r5
 80060d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060d4:	f000 f826 	bl	8006124 <_malloc_usable_size_r>
 80060d8:	4284      	cmp	r4, r0
 80060da:	d90f      	bls.n	80060fc <_realloc_r+0x48>
 80060dc:	4621      	mov	r1, r4
 80060de:	4638      	mov	r0, r7
 80060e0:	f7ff ff8a 	bl	8005ff8 <_malloc_r>
 80060e4:	4605      	mov	r5, r0
 80060e6:	2800      	cmp	r0, #0
 80060e8:	d0f2      	beq.n	80060d0 <_realloc_r+0x1c>
 80060ea:	4631      	mov	r1, r6
 80060ec:	4622      	mov	r2, r4
 80060ee:	f7ff ff11 	bl	8005f14 <memcpy>
 80060f2:	4631      	mov	r1, r6
 80060f4:	4638      	mov	r0, r7
 80060f6:	f7ff ff33 	bl	8005f60 <_free_r>
 80060fa:	e7e9      	b.n	80060d0 <_realloc_r+0x1c>
 80060fc:	4635      	mov	r5, r6
 80060fe:	e7e7      	b.n	80060d0 <_realloc_r+0x1c>

08006100 <_sbrk_r>:
 8006100:	b538      	push	{r3, r4, r5, lr}
 8006102:	2300      	movs	r3, #0
 8006104:	4c05      	ldr	r4, [pc, #20]	; (800611c <_sbrk_r+0x1c>)
 8006106:	4605      	mov	r5, r0
 8006108:	4608      	mov	r0, r1
 800610a:	6023      	str	r3, [r4, #0]
 800610c:	f000 f814 	bl	8006138 <_sbrk>
 8006110:	1c43      	adds	r3, r0, #1
 8006112:	d102      	bne.n	800611a <_sbrk_r+0x1a>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	b103      	cbz	r3, 800611a <_sbrk_r+0x1a>
 8006118:	602b      	str	r3, [r5, #0]
 800611a:	bd38      	pop	{r3, r4, r5, pc}
 800611c:	20000540 	.word	0x20000540

08006120 <__malloc_lock>:
 8006120:	4770      	bx	lr

08006122 <__malloc_unlock>:
 8006122:	4770      	bx	lr

08006124 <_malloc_usable_size_r>:
 8006124:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006128:	2800      	cmp	r0, #0
 800612a:	f1a0 0004 	sub.w	r0, r0, #4
 800612e:	bfbc      	itt	lt
 8006130:	580b      	ldrlt	r3, [r1, r0]
 8006132:	18c0      	addlt	r0, r0, r3
 8006134:	4770      	bx	lr
	...

08006138 <_sbrk>:
 8006138:	4b04      	ldr	r3, [pc, #16]	; (800614c <_sbrk+0x14>)
 800613a:	4602      	mov	r2, r0
 800613c:	6819      	ldr	r1, [r3, #0]
 800613e:	b909      	cbnz	r1, 8006144 <_sbrk+0xc>
 8006140:	4903      	ldr	r1, [pc, #12]	; (8006150 <_sbrk+0x18>)
 8006142:	6019      	str	r1, [r3, #0]
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	4402      	add	r2, r0
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	4770      	bx	lr
 800614c:	200001ac 	.word	0x200001ac
 8006150:	20000544 	.word	0x20000544

08006154 <_init>:
 8006154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006156:	bf00      	nop
 8006158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615a:	bc08      	pop	{r3}
 800615c:	469e      	mov	lr, r3
 800615e:	4770      	bx	lr

08006160 <_fini>:
 8006160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006162:	bf00      	nop
 8006164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006166:	bc08      	pop	{r3}
 8006168:	469e      	mov	lr, r3
 800616a:	4770      	bx	lr
