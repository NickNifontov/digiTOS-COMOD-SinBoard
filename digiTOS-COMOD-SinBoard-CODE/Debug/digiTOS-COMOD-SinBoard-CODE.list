
digiTOS-COMOD-SinBoard-CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003494  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  080035a0  080035a0  000135a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800383c  0800383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08003844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000250  20000010  08003850  00020010  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000260  08003850  00020260  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00022c59  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000475f  00000000  00000000  00042c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008344  00000000  00000000  000473ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000da0  00000000  00000000  0004f738  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001188  00000000  00000000  000504d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a199  00000000  00000000  00051660  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000047ea  00000000  00000000  0005b7f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005ffe3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000026f8  00000000  00000000  00060060  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003588 	.word	0x08003588

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003588 	.word	0x08003588

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};

  /**Common config 
  */
  hadc1.Instance = ADC1;
 800014e:	4811      	ldr	r0, [pc, #68]	; (8000194 <MX_ADC1_Init+0x48>)
 8000150:	4a11      	ldr	r2, [pc, #68]	; (8000198 <MX_ADC1_Init+0x4c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000154:	2401      	movs	r4, #1
  hadc1.Instance = ADC1;
 8000156:	6002      	str	r2, [r0, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000158:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 800015c:	9301      	str	r3, [sp, #4]
 800015e:	9302      	str	r3, [sp, #8]
 8000160:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000164:	60c4      	str	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000166:	6143      	str	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000168:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800016a:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 800016c:	6104      	str	r4, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800016e:	f000 fe77 	bl	8000e60 <HAL_ADC_Init>
 8000172:	b108      	cbz	r0, 8000178 <MX_ADC1_Init+0x2c>
  {
    Error_Handler();
 8000174:	f000 f98a 	bl	800048c <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000178:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800017a:	a901      	add	r1, sp, #4
 800017c:	4805      	ldr	r0, [pc, #20]	; (8000194 <MX_ADC1_Init+0x48>)
  sConfig.Channel = ADC_CHANNEL_1;
 800017e:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000180:	9402      	str	r4, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000182:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000184:	f000 fd9c 	bl	8000cc0 <HAL_ADC_ConfigChannel>
 8000188:	b108      	cbz	r0, 800018e <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 800018a:	f000 f97f 	bl	800048c <Error_Handler>
  }

}
 800018e:	b004      	add	sp, #16
 8000190:	bd10      	pop	{r4, pc}
 8000192:	bf00      	nop
 8000194:	2000002c 	.word	0x2000002c
 8000198:	40012400 	.word	0x40012400

0800019c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	4605      	mov	r5, r0
 80001a0:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001a2:	2210      	movs	r2, #16
 80001a4:	2100      	movs	r1, #0
 80001a6:	a802      	add	r0, sp, #8
 80001a8:	f003 f9e6 	bl	8003578 <memset>
  if(adcHandle->Instance==ADC1)
 80001ac:	682a      	ldr	r2, [r5, #0]
 80001ae:	4b22      	ldr	r3, [pc, #136]	; (8000238 <HAL_ADC_MspInit+0x9c>)
 80001b0:	429a      	cmp	r2, r3
 80001b2:	d13e      	bne.n	8000232 <HAL_ADC_MspInit+0x96>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001b4:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80001b8:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = V_OUT_Pin|C_OUT_Pin|DC_FEEDBACK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001ba:	4820      	ldr	r0, [pc, #128]	; (800023c <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001c0:	619a      	str	r2, [r3, #24]
 80001c2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001c4:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001c6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80001ca:	9200      	str	r2, [sp, #0]
 80001cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ce:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80001d0:	4c1b      	ldr	r4, [pc, #108]	; (8000240 <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d2:	f042 0204 	orr.w	r2, r2, #4
 80001d6:	619a      	str	r2, [r3, #24]
 80001d8:	699b      	ldr	r3, [r3, #24]
 80001da:	f003 0304 	and.w	r3, r3, #4
 80001de:	9301      	str	r3, [sp, #4]
 80001e0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = V_OUT_Pin|C_OUT_Pin|DC_FEEDBACK_Pin;
 80001e2:	2326      	movs	r3, #38	; 0x26
 80001e4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001e6:	2303      	movs	r3, #3
 80001e8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001ea:	f001 f9f3 	bl	80015d4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80001ee:	4b15      	ldr	r3, [pc, #84]	; (8000244 <HAL_ADC_MspInit+0xa8>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80001f0:	4620      	mov	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 80001f2:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80001f4:	2300      	movs	r3, #0
 80001f6:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80001f8:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80001fa:	2380      	movs	r3, #128	; 0x80
 80001fc:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80001fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000202:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000208:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800020a:	2320      	movs	r3, #32
 800020c:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800020e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000212:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000214:	f000 ffac 	bl	8001170 <HAL_DMA_Init>
 8000218:	b108      	cbz	r0, 800021e <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 800021a:	f000 f937 	bl	800048c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800021e:	622c      	str	r4, [r5, #32]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 1);
 8000220:	2012      	movs	r0, #18
 8000222:	2201      	movs	r2, #1
 8000224:	2103      	movs	r1, #3
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000226:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 1);
 8000228:	f000 ff16 	bl	8001058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800022c:	2012      	movs	r0, #18
 800022e:	f000 ff55 	bl	80010dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000232:	b007      	add	sp, #28
 8000234:	bd30      	pop	{r4, r5, pc}
 8000236:	bf00      	nop
 8000238:	40012400 	.word	0x40012400
 800023c:	40010800 	.word	0x40010800
 8000240:	2000005c 	.word	0x2000005c
 8000244:	40020008 	.word	0x40020008

08000248 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000248:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 800024a:	4805      	ldr	r0, [pc, #20]	; (8000260 <MX_CRC_Init+0x18>)
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <MX_CRC_Init+0x1c>)
 800024e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000250:	f000 ff70 	bl	8001134 <HAL_CRC_Init>
 8000254:	b118      	cbz	r0, 800025e <MX_CRC_Init+0x16>
  {
    Error_Handler();
  }

}
 8000256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800025a:	f000 b917 	b.w	800048c <Error_Handler>
 800025e:	bd08      	pop	{r3, pc}
 8000260:	200000a0 	.word	0x200000a0
 8000264:	40023000 	.word	0x40023000

08000268 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000268:	6802      	ldr	r2, [r0, #0]
 800026a:	4b08      	ldr	r3, [pc, #32]	; (800028c <HAL_CRC_MspInit+0x24>)
{
 800026c:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 800026e:	429a      	cmp	r2, r3
 8000270:	d10a      	bne.n	8000288 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000272:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8000276:	695a      	ldr	r2, [r3, #20]
 8000278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800027c:	615a      	str	r2, [r3, #20]
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000284:	9301      	str	r3, [sp, #4]
 8000286:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000288:	b002      	add	sp, #8
 800028a:	4770      	bx	lr
 800028c:	40023000 	.word	0x40023000

08000290 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <MX_DMA_Init+0x3c>)
{
 8000292:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000294:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000296:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000298:	f042 0201 	orr.w	r2, r2, #1
 800029c:	615a      	str	r2, [r3, #20]
 800029e:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80002a0:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002a2:	f003 0301 	and.w	r3, r3, #1
 80002a6:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80002a8:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002aa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80002ac:	f000 fed4 	bl	8001058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80002b0:	200b      	movs	r0, #11
 80002b2:	f000 ff13 	bl	80010dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2103      	movs	r1, #3
 80002ba:	200e      	movs	r0, #14
 80002bc:	f000 fecc 	bl	8001058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80002c0:	200e      	movs	r0, #14
 80002c2:	f000 ff0b 	bl	80010dc <HAL_NVIC_EnableIRQ>

}
 80002c6:	b003      	add	sp, #12
 80002c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80002cc:	40021000 	.word	0x40021000

080002d0 <MX_GPIO_Init>:
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d0:	2210      	movs	r2, #16
{
 80002d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d6:	eb0d 0002 	add.w	r0, sp, r2
 80002da:	2100      	movs	r1, #0
 80002dc:	f003 f94c 	bl	8003578 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e0:	4b32      	ldr	r3, [pc, #200]	; (80003ac <MX_GPIO_Init+0xdc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
 80002e2:	4d33      	ldr	r5, [pc, #204]	; (80003b0 <MX_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
 80002e6:	4628      	mov	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e8:	f042 0210 	orr.w	r2, r2, #16
 80002ec:	619a      	str	r2, [r3, #24]
 80002ee:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
 80002f0:	f247 0121 	movw	r1, #28705	; 0x7021
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f4:	f002 0210 	and.w	r2, r2, #16
 80002f8:	9200      	str	r2, [sp, #0]
 80002fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002fc:	699a      	ldr	r2, [r3, #24]
                          |RST_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002fe:	2603      	movs	r6, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000300:	f042 0220 	orr.w	r2, r2, #32
 8000304:	619a      	str	r2, [r3, #24]
 8000306:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA0 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000308:	4f2a      	ldr	r7, [pc, #168]	; (80003b4 <MX_GPIO_Init+0xe4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800030a:	f002 0220 	and.w	r2, r2, #32
 800030e:	9201      	str	r2, [sp, #4]
 8000310:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000312:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = FAULT_FEEDBACK_Pin|DEV_MODE2_Pin|DEV_MODE1_Pin|CALIB_V_Pin 
                          |CALIB_I_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000314:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000316:	f042 0204 	orr.w	r2, r2, #4
 800031a:	619a      	str	r2, [r3, #24]
 800031c:	699a      	ldr	r2, [r3, #24]
 800031e:	f002 0204 	and.w	r2, r2, #4
 8000322:	9202      	str	r2, [sp, #8]
 8000324:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000326:	699a      	ldr	r2, [r3, #24]
 8000328:	f042 0208 	orr.w	r2, r2, #8
 800032c:	619a      	str	r2, [r3, #24]
 800032e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
 8000330:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000332:	f003 0308 	and.w	r3, r3, #8
 8000336:	9303      	str	r3, [sp, #12]
 8000338:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
 800033a:	f001 fab7 	bl	80018ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800033e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000342:	a904      	add	r1, sp, #16
 8000344:	481c      	ldr	r0, [pc, #112]	; (80003b8 <MX_GPIO_Init+0xe8>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000346:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000348:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800034a:	f001 f943 	bl	80015d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_9;
 800034e:	f240 2301 	movw	r3, #513	; 0x201
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000352:	a904      	add	r1, sp, #16
 8000354:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_9;
 8000356:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000358:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035a:	f001 f93b 	bl	80015d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FAULT_FEEDBACK_Pin|DEV_MODE2_Pin|DEV_MODE1_Pin|CALIB_V_Pin 
 800035e:	f641 1318 	movw	r3, #6424	; 0x1918
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000362:	a904      	add	r1, sp, #16
 8000364:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = FAULT_FEEDBACK_Pin|DEV_MODE2_Pin|DEV_MODE1_Pin|CALIB_V_Pin 
 8000366:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000368:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800036c:	f001 f932 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
 8000370:	f247 0321 	movw	r3, #28705	; 0x7021
 8000374:	9304      	str	r3, [sp, #16]
                          |RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000376:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000378:	a904      	add	r1, sp, #16
 800037a:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000380:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000382:	f001 f927 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8 
 8000386:	f640 7304 	movw	r3, #3844	; 0xf04
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800038a:	a904      	add	r1, sp, #16
 800038c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8 
 800038e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000390:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000392:	f001 f91f 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CALIB_MODE_Pin;
 8000396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(CALIB_MODE_GPIO_Port, &GPIO_InitStruct);
 800039a:	a904      	add	r1, sp, #16
 800039c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = CALIB_MODE_Pin;
 800039e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003a0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(CALIB_MODE_GPIO_Port, &GPIO_InitStruct);
 80003a4:	f001 f916 	bl	80015d4 <HAL_GPIO_Init>

}
 80003a8:	b009      	add	sp, #36	; 0x24
 80003aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40010c00 	.word	0x40010c00
 80003b4:	40010800 	.word	0x40010800
 80003b8:	40011000 	.word	0x40011000

080003bc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80003bc:	b508      	push	{r3, lr}

  hiwdg.Instance = IWDG;
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
  hiwdg.Init.Reload = 4095;
 80003be:	2206      	movs	r2, #6
 80003c0:	f640 73ff 	movw	r3, #4095	; 0xfff
  hiwdg.Instance = IWDG;
 80003c4:	4805      	ldr	r0, [pc, #20]	; (80003dc <MX_IWDG_Init+0x20>)
  hiwdg.Init.Reload = 4095;
 80003c6:	4906      	ldr	r1, [pc, #24]	; (80003e0 <MX_IWDG_Init+0x24>)
 80003c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80003cc:	f001 fa88 	bl	80018e0 <HAL_IWDG_Init>
 80003d0:	b118      	cbz	r0, 80003da <MX_IWDG_Init+0x1e>
  {
    Error_Handler();
  }

}
 80003d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80003d6:	f000 b859 	b.w	800048c <Error_Handler>
 80003da:	bd08      	pop	{r3, pc}
 80003dc:	200000a8 	.word	0x200000a8
 80003e0:	40003000 	.word	0x40003000

080003e4 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e4:	2228      	movs	r2, #40	; 0x28
{
 80003e6:	b510      	push	{r4, lr}
 80003e8:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ea:	eb0d 0002 	add.w	r0, sp, r2
 80003ee:	2100      	movs	r1, #0
 80003f0:	f003 f8c2 	bl	8003578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	2214      	movs	r2, #20
 80003f6:	2100      	movs	r1, #0
 80003f8:	eb0d 0002 	add.w	r0, sp, r2
 80003fc:	f003 f8bc 	bl	8003578 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000400:	2100      	movs	r1, #0
 8000402:	2210      	movs	r2, #16
 8000404:	a801      	add	r0, sp, #4
 8000406:	f003 f8b7 	bl	8003578 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800040a:	2309      	movs	r3, #9
 800040c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000412:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000414:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000416:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000418:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800041a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000420:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000422:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000424:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000426:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000428:	f001 faa8 	bl	800197c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800042e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000432:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000434:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000436:	4621      	mov	r1, r4
 8000438:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800043c:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000440:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000442:	f001 fcd9 	bl	8001df8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800044a:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800044c:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800044e:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000450:	f001 fe02 	bl	8002058 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000454:	b014      	add	sp, #80	; 0x50
 8000456:	bd10      	pop	{r4, pc}

08000458 <main>:
{
 8000458:	b508      	push	{r3, lr}
  HAL_Init();
 800045a:	f000 fb73 	bl	8000b44 <HAL_Init>
  SystemClock_Config();
 800045e:	f7ff ffc1 	bl	80003e4 <SystemClock_Config>
  MX_GPIO_Init();
 8000462:	f7ff ff35 	bl	80002d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000466:	f7ff ff13 	bl	8000290 <MX_DMA_Init>
  MX_CRC_Init();
 800046a:	f7ff feed 	bl	8000248 <MX_CRC_Init>
  MX_IWDG_Init();
 800046e:	f7ff ffa5 	bl	80003bc <MX_IWDG_Init>
  MX_TIM1_Init();
 8000472:	f000 f9fd 	bl	8000870 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000476:	f000 fa65 	bl	8000944 <MX_TIM3_Init>
  MX_TIM4_Init();
 800047a:	f000 f8e9 	bl	8000650 <MX_TIM4_Init>
  MX_TIM2_Init();
 800047e:	f000 f8af 	bl	80005e0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000482:	f000 fab9 	bl	80009f8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000486:	f7ff fe61 	bl	800014c <MX_ADC1_Init>
 800048a:	e7fe      	b.n	800048a <main+0x32>

0800048c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800048c:	4770      	bx	lr

0800048e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 800048e:	4770      	bx	lr

08000490 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000490:	4b1b      	ldr	r3, [pc, #108]	; (8000500 <HAL_MspInit+0x70>)
{
 8000492:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000494:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000496:	2005      	movs	r0, #5
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000498:	f042 0201 	orr.w	r2, r2, #1
 800049c:	619a      	str	r2, [r3, #24]
 800049e:	699a      	ldr	r2, [r3, #24]
 80004a0:	f002 0201 	and.w	r2, r2, #1
 80004a4:	9200      	str	r2, [sp, #0]
 80004a6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a8:	69da      	ldr	r2, [r3, #28]
 80004aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004ae:	61da      	str	r2, [r3, #28]
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80004ba:	f000 fdaf 	bl	800101c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	2001      	movs	r0, #1
 80004c2:	4611      	mov	r1, r2
 80004c4:	f000 fdc8 	bl	8001058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80004c8:	2001      	movs	r0, #1
 80004ca:	f000 fe07 	bl	80010dc <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2004      	movs	r0, #4
 80004d2:	4611      	mov	r1, r2
 80004d4:	f000 fdc0 	bl	8001058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80004d8:	2004      	movs	r0, #4
 80004da:	f000 fdff 	bl	80010dc <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2005      	movs	r0, #5
 80004e2:	4611      	mov	r1, r2
 80004e4:	f000 fdb8 	bl	8001058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80004e8:	2005      	movs	r0, #5
 80004ea:	f000 fdf7 	bl	80010dc <HAL_NVIC_EnableIRQ>

  /**ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State 
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 80004ee:	4a05      	ldr	r2, [pc, #20]	; (8000504 <HAL_MspInit+0x74>)
 80004f0:	6853      	ldr	r3, [r2, #4]
 80004f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004f6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f8:	b003      	add	sp, #12
 80004fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000
 8000504:	40010000 	.word	0x40010000

08000508 <NMI_Handler>:
 8000508:	4770      	bx	lr

0800050a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050a:	e7fe      	b.n	800050a <HardFault_Handler>

0800050c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800050c:	e7fe      	b.n	800050c <MemManage_Handler>

0800050e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050e:	e7fe      	b.n	800050e <BusFault_Handler>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	e7fe      	b.n	8000510 <UsageFault_Handler>

08000512 <SVC_Handler>:
 8000512:	4770      	bx	lr

08000514 <DebugMon_Handler>:
 8000514:	4770      	bx	lr

08000516 <PendSV_Handler>:
 8000516:	4770      	bx	lr

08000518 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000518:	f000 bb26 	b.w	8000b68 <HAL_IncTick>

0800051c <PVD_IRQHandler>:
void PVD_IRQHandler(void)
{
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800051c:	f001 ba20 	b.w	8001960 <HAL_PWR_PVD_IRQHandler>

08000520 <FLASH_IRQHandler>:
void FLASH_IRQHandler(void)
{
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000520:	f000 bfbc 	b.w	800149c <HAL_FLASH_IRQHandler>

08000524 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000524:	4770      	bx	lr
	...

08000528 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000528:	4801      	ldr	r0, [pc, #4]	; (8000530 <DMA1_Channel1_IRQHandler+0x8>)
 800052a:	f000 bef9 	b.w	8001320 <HAL_DMA_IRQHandler>
 800052e:	bf00      	nop
 8000530:	2000005c 	.word	0x2000005c

08000534 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000534:	4801      	ldr	r0, [pc, #4]	; (800053c <DMA1_Channel4_IRQHandler+0x8>)
 8000536:	f000 bef3 	b.w	8001320 <HAL_DMA_IRQHandler>
 800053a:	bf00      	nop
 800053c:	200001b4 	.word	0x200001b4

08000540 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000540:	4801      	ldr	r0, [pc, #4]	; (8000548 <ADC1_2_IRQHandler+0x8>)
 8000542:	f000 bb25 	b.w	8000b90 <HAL_ADC_IRQHandler>
 8000546:	bf00      	nop
 8000548:	2000002c 	.word	0x2000002c

0800054c <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800054c:	4801      	ldr	r0, [pc, #4]	; (8000554 <TIM1_CC_IRQHandler+0x8>)
 800054e:	f002 b914 	b.w	800277a <HAL_TIM_IRQHandler>
 8000552:	bf00      	nop
 8000554:	20000134 	.word	0x20000134

08000558 <TIM1_TRG_COM_IRQHandler>:
 8000558:	f7ff bff8 	b.w	800054c <TIM1_CC_IRQHandler>

0800055c <TIM1_UP_IRQHandler>:
 800055c:	f7ff bff6 	b.w	800054c <TIM1_CC_IRQHandler>

08000560 <TIM1_BRK_IRQHandler>:
 8000560:	f7ff bff4 	b.w	800054c <TIM1_CC_IRQHandler>

08000564 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000564:	4801      	ldr	r0, [pc, #4]	; (800056c <TIM2_IRQHandler+0x8>)
 8000566:	f002 b908 	b.w	800277a <HAL_TIM_IRQHandler>
 800056a:	bf00      	nop
 800056c:	20000174 	.word	0x20000174

08000570 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000570:	4801      	ldr	r0, [pc, #4]	; (8000578 <TIM3_IRQHandler+0x8>)
 8000572:	f002 b902 	b.w	800277a <HAL_TIM_IRQHandler>
 8000576:	bf00      	nop
 8000578:	200000f4 	.word	0x200000f4

0800057c <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800057c:	4801      	ldr	r0, [pc, #4]	; (8000584 <TIM4_IRQHandler+0x8>)
 800057e:	f002 b8fc 	b.w	800277a <HAL_TIM_IRQHandler>
 8000582:	bf00      	nop
 8000584:	200000b4 	.word	0x200000b4

08000588 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000588:	4801      	ldr	r0, [pc, #4]	; (8000590 <USART1_IRQHandler+0x8>)
 800058a:	f002 bf03 	b.w	8003394 <HAL_UART_IRQHandler>
 800058e:	bf00      	nop
 8000590:	200001f8 	.word	0x200001f8

08000594 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <SystemInit+0x40>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	f042 0201 	orr.w	r2, r2, #1
 800059c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800059e:	6859      	ldr	r1, [r3, #4]
 80005a0:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <SystemInit+0x44>)
 80005a2:	400a      	ands	r2, r1
 80005a4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80005ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005b0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005b8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005ba:	685a      	ldr	r2, [r3, #4]
 80005bc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80005c0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005c6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <SystemInit+0x48>)
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000
 80005d8:	f8ff0000 	.word	0xf8ff0000
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80005e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e2:	2210      	movs	r2, #16
 80005e4:	2100      	movs	r1, #0
 80005e6:	a802      	add	r0, sp, #8
 80005e8:	f002 ffc6 	bl	8003578 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ec:	2300      	movs	r3, #0

  htim2.Instance = TIM2;
 80005ee:	4817      	ldr	r0, [pc, #92]	; (800064c <MX_TIM2_Init+0x6c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	9301      	str	r3, [sp, #4]
  htim2.Init.Prescaler = 35999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f4:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1000;
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80005fc:	f44f 7380 	mov.w	r3, #256	; 0x100
  htim2.Init.Prescaler = 35999;
 8000600:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000604:	f648 429f 	movw	r2, #35999	; 0x8c9f
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000608:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800060a:	2380      	movs	r3, #128	; 0x80
  htim2.Init.Prescaler = 35999;
 800060c:	e880 0006 	stmia.w	r0, {r1, r2}
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000610:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000612:	f002 f98d 	bl	8002930 <HAL_TIM_Base_Init>
 8000616:	b108      	cbz	r0, 800061c <MX_TIM2_Init+0x3c>
  {
    Error_Handler();
 8000618:	f7ff ff38 	bl	800048c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800061c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000620:	a902      	add	r1, sp, #8
 8000622:	480a      	ldr	r0, [pc, #40]	; (800064c <MX_TIM2_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000624:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000626:	f001 fe83 	bl	8002330 <HAL_TIM_ConfigClockSource>
 800062a:	b108      	cbz	r0, 8000630 <MX_TIM2_Init+0x50>
  {
    Error_Handler();
 800062c:	f7ff ff2e 	bl	800048c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000630:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000632:	4669      	mov	r1, sp
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_TIM2_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000636:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000638:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800063a:	f002 fcd1 	bl	8002fe0 <HAL_TIMEx_MasterConfigSynchronization>
 800063e:	b108      	cbz	r0, 8000644 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000640:	f7ff ff24 	bl	800048c <Error_Handler>
  }

}
 8000644:	b007      	add	sp, #28
 8000646:	f85d fb04 	ldr.w	pc, [sp], #4
 800064a:	bf00      	nop
 800064c:	20000174 	.word	0x20000174

08000650 <MX_TIM4_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000650:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000652:	2210      	movs	r2, #16
 8000654:	2100      	movs	r1, #0
 8000656:	a802      	add	r0, sp, #8
 8000658:	f002 ff8e 	bl	8003578 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065c:	2300      	movs	r3, #0

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 2;
 800065e:	2202      	movs	r2, #2
  htim4.Instance = TIM4;
 8000660:	4814      	ldr	r0, [pc, #80]	; (80006b4 <MX_TIM4_Init+0x64>)
  htim4.Init.Prescaler = 2;
 8000662:	4915      	ldr	r1, [pc, #84]	; (80006b8 <MX_TIM4_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	9301      	str	r3, [sp, #4]
  htim4.Init.Prescaler = 2;
 8000668:	e880 0006 	stmia.w	r0, {r1, r2}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066c:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 1000;
 800066e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000672:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000674:	2380      	movs	r3, #128	; 0x80
  htim4.Init.Period = 1000;
 8000676:	60c2      	str	r2, [r0, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000678:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800067a:	f002 f959 	bl	8002930 <HAL_TIM_Base_Init>
 800067e:	b108      	cbz	r0, 8000684 <MX_TIM4_Init+0x34>
  {
    Error_Handler();
 8000680:	f7ff ff04 	bl	800048c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000688:	a902      	add	r1, sp, #8
 800068a:	480a      	ldr	r0, [pc, #40]	; (80006b4 <MX_TIM4_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800068c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800068e:	f001 fe4f 	bl	8002330 <HAL_TIM_ConfigClockSource>
 8000692:	b108      	cbz	r0, 8000698 <MX_TIM4_Init+0x48>
  {
    Error_Handler();
 8000694:	f7ff fefa 	bl	800048c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000698:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800069a:	4669      	mov	r1, sp
 800069c:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_TIM4_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a0:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006a2:	f002 fc9d 	bl	8002fe0 <HAL_TIMEx_MasterConfigSynchronization>
 80006a6:	b108      	cbz	r0, 80006ac <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80006a8:	f7ff fef0 	bl	800048c <Error_Handler>
  }

}
 80006ac:	b007      	add	sp, #28
 80006ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80006b2:	bf00      	nop
 80006b4:	200000b4 	.word	0x200000b4
 80006b8:	40000800 	.word	0x40000800

080006bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80006bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM1)
 80006be:	6803      	ldr	r3, [r0, #0]
 80006c0:	4a36      	ldr	r2, [pc, #216]	; (800079c <HAL_TIM_Base_MspInit+0xe0>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d12c      	bne.n	8000720 <HAL_TIM_Base_MspInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006c6:	4b36      	ldr	r3, [pc, #216]	; (80007a0 <HAL_TIM_Base_MspInit+0xe4>)

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80006c8:	2018      	movs	r0, #24
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006ca:	699a      	ldr	r2, [r3, #24]
 80006cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006d0:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006d4:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80006d6:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80006e0:	f000 fcba 	bl	8001058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80006e4:	2018      	movs	r0, #24
 80006e6:	f000 fcf9 	bl	80010dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2019      	movs	r0, #25
 80006ee:	4611      	mov	r1, r2
 80006f0:	f000 fcb2 	bl	8001058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80006f4:	2019      	movs	r0, #25
 80006f6:	f000 fcf1 	bl	80010dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	201a      	movs	r0, #26
 80006fe:	4611      	mov	r1, r2
 8000700:	f000 fcaa 	bl	8001058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000704:	201a      	movs	r0, #26
 8000706:	f000 fce9 	bl	80010dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	201b      	movs	r0, #27
 800070e:	4611      	mov	r1, r2
 8000710:	f000 fca2 	bl	8001058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000714:	201b      	movs	r0, #27
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000716:	f000 fce1 	bl	80010dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800071a:	b005      	add	sp, #20
 800071c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM2)
 8000720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000724:	d111      	bne.n	800074a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000726:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800072a:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 3);
 800072c:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800072e:	f042 0201 	orr.w	r2, r2, #1
 8000732:	61da      	str	r2, [r3, #28]
 8000734:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 3);
 8000736:	2203      	movs	r2, #3
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 3);
 800073e:	2101      	movs	r1, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000740:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 3);
 8000742:	f000 fc89 	bl	8001058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000746:	201c      	movs	r0, #28
 8000748:	e7e5      	b.n	8000716 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM3)
 800074a:	4a16      	ldr	r2, [pc, #88]	; (80007a4 <HAL_TIM_Base_MspInit+0xe8>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d110      	bne.n	8000772 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <HAL_TIM_Base_MspInit+0xe4>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000752:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000754:	69da      	ldr	r2, [r3, #28]
 8000756:	f042 0202 	orr.w	r2, r2, #2
 800075a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800075c:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800075e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000760:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	9302      	str	r3, [sp, #8]
 8000768:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800076a:	f000 fc75 	bl	8001058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800076e:	201d      	movs	r0, #29
 8000770:	e7d1      	b.n	8000716 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM4)
 8000772:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <HAL_TIM_Base_MspInit+0xec>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d1d0      	bne.n	800071a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_TIM_Base_MspInit+0xe4>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800077a:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 800077c:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800077e:	2101      	movs	r1, #1
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000780:	f042 0204 	orr.w	r2, r2, #4
 8000784:	61da      	str	r2, [r3, #28]
 8000786:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8000788:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	9303      	str	r3, [sp, #12]
 8000790:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8000792:	f000 fc61 	bl	8001058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000796:	201e      	movs	r0, #30
 8000798:	e7bd      	b.n	8000716 <HAL_TIM_Base_MspInit+0x5a>
 800079a:	bf00      	nop
 800079c:	40012c00 	.word	0x40012c00
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40000400 	.word	0x40000400
 80007a8:	40000800 	.word	0x40000800

080007ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	2210      	movs	r2, #16
{
 80007ae:	b530      	push	{r4, r5, lr}
 80007b0:	4604      	mov	r4, r0
 80007b2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	eb0d 0002 	add.w	r0, sp, r2
 80007b8:	2100      	movs	r1, #0
 80007ba:	f002 fedd 	bl	8003578 <memset>
  if(timHandle->Instance==TIM1)
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	4a25      	ldr	r2, [pc, #148]	; (8000858 <HAL_TIM_MspPostInit+0xac>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d12f      	bne.n	8000826 <HAL_TIM_MspPostInit+0x7a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM1 GPIO Configuration    
    PB1     ------> TIM1_CH3N
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = CH4_Pin;
 80007c6:	2402      	movs	r4, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c8:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b24      	ldr	r3, [pc, #144]	; (800085c <HAL_TIM_MspPostInit+0xb0>)
    HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 80007cc:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 80007d0:	4823      	ldr	r0, [pc, #140]	; (8000860 <HAL_TIM_MspPostInit+0xb4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	f042 0208 	orr.w	r2, r2, #8
 80007d6:	619a      	str	r2, [r3, #24]
 80007d8:	699a      	ldr	r2, [r3, #24]
 80007da:	f002 0208 	and.w	r2, r2, #8
 80007de:	9201      	str	r2, [sp, #4]
 80007e0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	699a      	ldr	r2, [r3, #24]
 80007e4:	f042 0204 	orr.w	r2, r2, #4
 80007e8:	619a      	str	r2, [r3, #24]
 80007ea:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = CH4_Pin;
 80007ec:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	9302      	str	r3, [sp, #8]
 80007f4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f000 feeb 	bl	80015d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CH3_Pin;
 80007fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8000802:	a904      	add	r1, sp, #16
 8000804:	4817      	ldr	r0, [pc, #92]	; (8000864 <HAL_TIM_MspPostInit+0xb8>)
    GPIO_InitStruct.Pin = CH3_Pin;
 8000806:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 800080c:	f000 fee2 	bl	80015d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8000810:	4a15      	ldr	r2, [pc, #84]	; (8000868 <HAL_TIM_MspPostInit+0xbc>)
 8000812:	6853      	ldr	r3, [r2, #4]
 8000814:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000818:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800081c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000820:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000822:	b009      	add	sp, #36	; 0x24
 8000824:	bd30      	pop	{r4, r5, pc}
  else if(timHandle->Instance==TIM3)
 8000826:	4a11      	ldr	r2, [pc, #68]	; (800086c <HAL_TIM_MspPostInit+0xc0>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d1fa      	bne.n	8000822 <HAL_TIM_MspPostInit+0x76>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <HAL_TIM_MspPostInit+0xb0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000832:	480c      	ldr	r0, [pc, #48]	; (8000864 <HAL_TIM_MspPostInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000834:	f042 0204 	orr.w	r2, r2, #4
 8000838:	619a      	str	r2, [r3, #24]
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	9303      	str	r3, [sp, #12]
 8000842:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = CH1_Pin|CH2_Pin;
 8000844:	23c0      	movs	r3, #192	; 0xc0
 8000846:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	f000 fec0 	bl	80015d4 <HAL_GPIO_Init>
}
 8000854:	e7e5      	b.n	8000822 <HAL_TIM_MspPostInit+0x76>
 8000856:	bf00      	nop
 8000858:	40012c00 	.word	0x40012c00
 800085c:	40021000 	.word	0x40021000
 8000860:	40010c00 	.word	0x40010c00
 8000864:	40010800 	.word	0x40010800
 8000868:	40010000 	.word	0x40010000
 800086c:	40000400 	.word	0x40000400

08000870 <MX_TIM1_Init>:
{
 8000870:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000872:	2400      	movs	r4, #0
{
 8000874:	b094      	sub	sp, #80	; 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	2210      	movs	r2, #16
 8000878:	2100      	movs	r1, #0
 800087a:	a802      	add	r0, sp, #8
 800087c:	f002 fe7c 	bl	8003578 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000880:	221c      	movs	r2, #28
 8000882:	4621      	mov	r1, r4
 8000884:	a806      	add	r0, sp, #24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000886:	9400      	str	r4, [sp, #0]
 8000888:	9401      	str	r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088a:	f002 fe75 	bl	8003578 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800088e:	221c      	movs	r2, #28
 8000890:	4621      	mov	r1, r4
 8000892:	a80d      	add	r0, sp, #52	; 0x34
 8000894:	f002 fe70 	bl	8003578 <memset>
  htim1.Init.Prescaler = 1440;
 8000898:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
  htim1.Instance = TIM1;
 800089c:	4827      	ldr	r0, [pc, #156]	; (800093c <MX_TIM1_Init+0xcc>)
  htim1.Init.Prescaler = 1440;
 800089e:	4a28      	ldr	r2, [pc, #160]	; (8000940 <MX_TIM1_Init+0xd0>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a0:	6084      	str	r4, [r0, #8]
  htim1.Init.Prescaler = 1440;
 80008a2:	e880 000c 	stmia.w	r0, {r2, r3}
  htim1.Init.Period = 1000;
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	60c3      	str	r3, [r0, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008ac:	2380      	movs	r3, #128	; 0x80
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ae:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80008b0:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008b2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008b4:	f002 f83c 	bl	8002930 <HAL_TIM_Base_Init>
 80008b8:	b108      	cbz	r0, 80008be <MX_TIM1_Init+0x4e>
    Error_Handler();
 80008ba:	f7ff fde7 	bl	800048c <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008c2:	a902      	add	r1, sp, #8
 80008c4:	481d      	ldr	r0, [pc, #116]	; (800093c <MX_TIM1_Init+0xcc>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c6:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008c8:	f001 fd32 	bl	8002330 <HAL_TIM_ConfigClockSource>
 80008cc:	b108      	cbz	r0, 80008d2 <MX_TIM1_Init+0x62>
    Error_Handler();
 80008ce:	f7ff fddd 	bl	800048c <Error_Handler>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80008d2:	481a      	ldr	r0, [pc, #104]	; (800093c <MX_TIM1_Init+0xcc>)
 80008d4:	f002 f880 	bl	80029d8 <HAL_TIM_OC_Init>
 80008d8:	b108      	cbz	r0, 80008de <MX_TIM1_Init+0x6e>
    Error_Handler();
 80008da:	f7ff fdd7 	bl	800048c <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008de:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008e0:	4669      	mov	r1, sp
 80008e2:	4816      	ldr	r0, [pc, #88]	; (800093c <MX_TIM1_Init+0xcc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e4:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e6:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008e8:	f002 fb7a 	bl	8002fe0 <HAL_TIMEx_MasterConfigSynchronization>
 80008ec:	b108      	cbz	r0, 80008f2 <MX_TIM1_Init+0x82>
    Error_Handler();
 80008ee:	f7ff fdcd 	bl	800048c <Error_Handler>
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008f2:	2208      	movs	r2, #8
 80008f4:	a906      	add	r1, sp, #24
 80008f6:	4811      	ldr	r0, [pc, #68]	; (800093c <MX_TIM1_Init+0xcc>)
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80008f8:	9406      	str	r4, [sp, #24]
  sConfigOC.Pulse = 0;
 80008fa:	9407      	str	r4, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fc:	9408      	str	r4, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008fe:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000900:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000902:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000904:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000906:	f002 f965 	bl	8002bd4 <HAL_TIM_OC_ConfigChannel>
 800090a:	b108      	cbz	r0, 8000910 <MX_TIM1_Init+0xa0>
    Error_Handler();
 800090c:	f7ff fdbe 	bl	800048c <Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000910:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000912:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000916:	a90d      	add	r1, sp, #52	; 0x34
 8000918:	4808      	ldr	r0, [pc, #32]	; (800093c <MX_TIM1_Init+0xcc>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800091a:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800091c:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800091e:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8000920:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000922:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000924:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000926:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000928:	f002 fae6 	bl	8002ef8 <HAL_TIMEx_ConfigBreakDeadTime>
 800092c:	b108      	cbz	r0, 8000932 <MX_TIM1_Init+0xc2>
    Error_Handler();
 800092e:	f7ff fdad 	bl	800048c <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8000932:	4802      	ldr	r0, [pc, #8]	; (800093c <MX_TIM1_Init+0xcc>)
 8000934:	f7ff ff3a 	bl	80007ac <HAL_TIM_MspPostInit>
}
 8000938:	b014      	add	sp, #80	; 0x50
 800093a:	bd10      	pop	{r4, pc}
 800093c:	20000134 	.word	0x20000134
 8000940:	40012c00 	.word	0x40012c00

08000944 <MX_TIM3_Init>:
{
 8000944:	b510      	push	{r4, lr}
 8000946:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000948:	2210      	movs	r2, #16
 800094a:	2100      	movs	r1, #0
 800094c:	a803      	add	r0, sp, #12
 800094e:	f002 fe13 	bl	8003578 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000952:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000954:	221c      	movs	r2, #28
 8000956:	4621      	mov	r1, r4
 8000958:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	9401      	str	r4, [sp, #4]
 800095e:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000960:	f002 fe0a 	bl	8003578 <memset>
  htim3.Init.Prescaler = 2;
 8000964:	2302      	movs	r3, #2
  htim3.Instance = TIM3;
 8000966:	4822      	ldr	r0, [pc, #136]	; (80009f0 <MX_TIM3_Init+0xac>)
  htim3.Init.Prescaler = 2;
 8000968:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <MX_TIM3_Init+0xb0>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 2;
 800096c:	e880 000c 	stmia.w	r0, {r2, r3}
  htim3.Init.Period = 1000;
 8000970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000974:	60c3      	str	r3, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000976:	2380      	movs	r3, #128	; 0x80
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000978:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800097a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800097c:	f001 ffd8 	bl	8002930 <HAL_TIM_Base_Init>
 8000980:	b108      	cbz	r0, 8000986 <MX_TIM3_Init+0x42>
    Error_Handler();
 8000982:	f7ff fd83 	bl	800048c <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800098a:	a903      	add	r1, sp, #12
 800098c:	4818      	ldr	r0, [pc, #96]	; (80009f0 <MX_TIM3_Init+0xac>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000990:	f001 fcce 	bl	8002330 <HAL_TIM_ConfigClockSource>
 8000994:	b108      	cbz	r0, 800099a <MX_TIM3_Init+0x56>
    Error_Handler();
 8000996:	f7ff fd79 	bl	800048c <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800099a:	4815      	ldr	r0, [pc, #84]	; (80009f0 <MX_TIM3_Init+0xac>)
 800099c:	f002 f874 	bl	8002a88 <HAL_TIM_PWM_Init>
 80009a0:	b108      	cbz	r0, 80009a6 <MX_TIM3_Init+0x62>
    Error_Handler();
 80009a2:	f7ff fd73 	bl	800048c <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009a8:	a901      	add	r1, sp, #4
 80009aa:	4811      	ldr	r0, [pc, #68]	; (80009f0 <MX_TIM3_Init+0xac>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ac:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ae:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009b0:	f002 fb16 	bl	8002fe0 <HAL_TIMEx_MasterConfigSynchronization>
 80009b4:	b108      	cbz	r0, 80009ba <MX_TIM3_Init+0x76>
    Error_Handler();
 80009b6:	f7ff fd69 	bl	800048c <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ba:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009bc:	2200      	movs	r2, #0
 80009be:	a907      	add	r1, sp, #28
 80009c0:	480b      	ldr	r0, [pc, #44]	; (80009f0 <MX_TIM3_Init+0xac>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c2:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 80009c4:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c6:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c8:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ca:	f002 f9ad 	bl	8002d28 <HAL_TIM_PWM_ConfigChannel>
 80009ce:	b108      	cbz	r0, 80009d4 <MX_TIM3_Init+0x90>
    Error_Handler();
 80009d0:	f7ff fd5c 	bl	800048c <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009d4:	2204      	movs	r2, #4
 80009d6:	a907      	add	r1, sp, #28
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_TIM3_Init+0xac>)
 80009da:	f002 f9a5 	bl	8002d28 <HAL_TIM_PWM_ConfigChannel>
 80009de:	b108      	cbz	r0, 80009e4 <MX_TIM3_Init+0xa0>
    Error_Handler();
 80009e0:	f7ff fd54 	bl	800048c <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <MX_TIM3_Init+0xac>)
 80009e6:	f7ff fee1 	bl	80007ac <HAL_TIM_MspPostInit>
}
 80009ea:	b00e      	add	sp, #56	; 0x38
 80009ec:	bd10      	pop	{r4, pc}
 80009ee:	bf00      	nop
 80009f0:	200000f4 	.word	0x200000f4
 80009f4:	40000400 	.word	0x40000400

080009f8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009f8:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 80009fa:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 80009fe:	480a      	ldr	r0, [pc, #40]	; (8000a28 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a02:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8000a04:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a08:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a0a:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a0e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a10:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a16:	f002 fc13 	bl	8003240 <HAL_UART_Init>
 8000a1a:	b118      	cbz	r0, 8000a24 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8000a1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000a20:	f7ff bd34 	b.w	800048c <Error_Handler>
 8000a24:	bd08      	pop	{r3, pc}
 8000a26:	bf00      	nop
 8000a28:	200001f8 	.word	0x200001f8
 8000a2c:	40013800 	.word	0x40013800

08000a30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	2710      	movs	r7, #16
{
 8000a36:	4606      	mov	r6, r0
 8000a38:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	463a      	mov	r2, r7
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	a802      	add	r0, sp, #8
 8000a40:	f002 fd9a 	bl	8003578 <memset>
  if(uartHandle->Instance==USART1)
 8000a44:	6832      	ldr	r2, [r6, #0]
 8000a46:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <HAL_UART_MspInit+0xb8>)
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d14a      	bne.n	8000ae2 <HAL_UART_MspInit+0xb2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a4c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000a50:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a52:	2500      	movs	r5, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a58:	619a      	str	r2, [r3, #24]
 8000a5a:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = RX_Pin;
 8000a5c:	f04f 0880 	mov.w	r8, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a60:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000a64:	9200      	str	r2, [sp, #0]
 8000a66:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a68:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6c:	f042 0208 	orr.w	r2, r2, #8
 8000a70:	619a      	str	r2, [r3, #24]
 8000a72:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8000a74:	481d      	ldr	r0, [pc, #116]	; (8000aec <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	9301      	str	r3, [sp, #4]
 8000a7c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = TX_Pin;
 8000a7e:	2340      	movs	r3, #64	; 0x40
 8000a80:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f000 fda3 	bl	80015d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	4817      	ldr	r0, [pc, #92]	; (8000aec <HAL_UART_MspInit+0xbc>)
 8000a90:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = RX_Pin;
 8000a92:	f8cd 8008 	str.w	r8, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f000 fd9b 	bl	80015d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000a9e:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <HAL_UART_MspInit+0xc0>)

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000aa0:	4c14      	ldr	r4, [pc, #80]	; (8000af4 <HAL_UART_MspInit+0xc4>)
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000aa2:	6853      	ldr	r3, [r2, #4]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000aa4:	4620      	mov	r0, r4
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000aa6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
 8000aae:	6053      	str	r3, [r2, #4]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_UART_MspInit+0xc8>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ab2:	60a5      	str	r5, [r4, #8]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ab4:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ab8:	f8c4 800c 	str.w	r8, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000abc:	6125      	str	r5, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000abe:	6165      	str	r5, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000ac0:	61a5      	str	r5, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ac2:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000ac4:	f000 fb54 	bl	8001170 <HAL_DMA_Init>
 8000ac8:	b108      	cbz	r0, 8000ace <HAL_UART_MspInit+0x9e>
    {
      Error_Handler();
 8000aca:	f7ff fcdf 	bl	800048c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 2);
 8000ace:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000ad0:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 2);
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	2103      	movs	r1, #3
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000ad6:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 2);
 8000ad8:	f000 fabe 	bl	8001058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000adc:	2025      	movs	r0, #37	; 0x25
 8000ade:	f000 fafd 	bl	80010dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ae2:	b006      	add	sp, #24
 8000ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ae8:	40013800 	.word	0x40013800
 8000aec:	40010c00 	.word	0x40010c00
 8000af0:	40010000 	.word	0x40010000
 8000af4:	200001b4 	.word	0x200001b4
 8000af8:	40020044 	.word	0x40020044

08000afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_InitTick+0x3c>)
{
 8000b00:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b02:	7818      	ldrb	r0, [r3, #0]
 8000b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b08:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b0c:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <HAL_InitTick+0x40>)
 8000b0e:	6810      	ldr	r0, [r2, #0]
 8000b10:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b14:	f000 faf8 	bl	8001108 <HAL_SYSTICK_Config>
 8000b18:	4604      	mov	r4, r0
 8000b1a:	b958      	cbnz	r0, 8000b34 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1c:	2d0f      	cmp	r5, #15
 8000b1e:	d809      	bhi.n	8000b34 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	4602      	mov	r2, r0
 8000b22:	4629      	mov	r1, r5
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 fa96 	bl	8001058 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <HAL_InitTick+0x44>)
 8000b2e:	4620      	mov	r0, r4
 8000b30:	601d      	str	r5, [r3, #0]
 8000b32:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b34:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b36:	bd38      	pop	{r3, r4, r5, pc}
 8000b38:	20000004 	.word	0x20000004
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	20000008 	.word	0x20000008

08000b44 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_Init+0x20>)
{
 8000b46:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4c:	f043 0310 	orr.w	r3, r3, #16
 8000b50:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b52:	f000 fa63 	bl	800101c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f7ff ffd0 	bl	8000afc <HAL_InitTick>
  HAL_MspInit();
 8000b5c:	f7ff fc98 	bl	8000490 <HAL_MspInit>
}
 8000b60:	2000      	movs	r0, #0
 8000b62:	bd08      	pop	{r3, pc}
 8000b64:	40022000 	.word	0x40022000

08000b68 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b68:	4a03      	ldr	r2, [pc, #12]	; (8000b78 <HAL_IncTick+0x10>)
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <HAL_IncTick+0x14>)
 8000b6c:	6811      	ldr	r1, [r2, #0]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	440b      	add	r3, r1
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000238 	.word	0x20000238
 8000b7c:	20000004 	.word	0x20000004

08000b80 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b80:	4b01      	ldr	r3, [pc, #4]	; (8000b88 <HAL_GetTick+0x8>)
 8000b82:	6818      	ldr	r0, [r3, #0]
}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000238 	.word	0x20000238

08000b8c <HAL_ADC_ConvCpltCallback>:
 8000b8c:	4770      	bx	lr

08000b8e <HAL_ADC_LevelOutOfWindowCallback>:
 8000b8e:	4770      	bx	lr

08000b90 <HAL_ADC_IRQHandler>:
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000b90:	6803      	ldr	r3, [r0, #0]
 8000b92:	4a49      	ldr	r2, [pc, #292]	; (8000cb8 <HAL_ADC_IRQHandler+0x128>)
{
 8000b94:	b510      	push	{r4, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000b96:	4293      	cmp	r3, r2
{
 8000b98:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000b9a:	d008      	beq.n	8000bae <HAL_ADC_IRQHandler+0x1e>
 8000b9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d004      	beq.n	8000bae <HAL_ADC_IRQHandler+0x1e>
 8000ba4:	f240 51d9 	movw	r1, #1497	; 0x5d9
 8000ba8:	4844      	ldr	r0, [pc, #272]	; (8000cbc <HAL_ADC_IRQHandler+0x12c>)
 8000baa:	f7ff fc70 	bl	800048e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000bae:	68e3      	ldr	r3, [r4, #12]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d904      	bls.n	8000bbe <HAL_ADC_IRQHandler+0x2e>
 8000bb4:	f240 51da 	movw	r1, #1498	; 0x5da
 8000bb8:	4840      	ldr	r0, [pc, #256]	; (8000cbc <HAL_ADC_IRQHandler+0x12c>)
 8000bba:	f7ff fc68 	bl	800048e <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000bbe:	6923      	ldr	r3, [r4, #16]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	2b0f      	cmp	r3, #15
 8000bc4:	d904      	bls.n	8000bd0 <HAL_ADC_IRQHandler+0x40>
 8000bc6:	f240 51db 	movw	r1, #1499	; 0x5db
 8000bca:	483c      	ldr	r0, [pc, #240]	; (8000cbc <HAL_ADC_IRQHandler+0x12c>)
 8000bcc:	f7ff fc5f 	bl	800048e <assert_failed>
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	685a      	ldr	r2, [r3, #4]
 8000bd4:	0690      	lsls	r0, r2, #26
 8000bd6:	d527      	bpl.n	8000c28 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	0791      	lsls	r1, r2, #30
 8000bdc:	d524      	bpl.n	8000c28 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000be0:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000be2:	bf5e      	ittt	pl
 8000be4:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000be6:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000bea:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000bf2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000bf6:	d110      	bne.n	8000c1a <HAL_ADC_IRQHandler+0x8a>
 8000bf8:	68e2      	ldr	r2, [r4, #12]
 8000bfa:	b972      	cbnz	r2, 8000c1a <HAL_ADC_IRQHandler+0x8a>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000bfc:	685a      	ldr	r2, [r3, #4]
 8000bfe:	f022 0220 	bic.w	r2, r2, #32
 8000c02:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c0a:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c0e:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c10:	bf5e      	ittt	pl
 8000c12:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000c14:	f043 0301 	orrpl.w	r3, r3, #1
 8000c18:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f7ff ffb6 	bl	8000b8c <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c20:	f06f 0212 	mvn.w	r2, #18
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000c28:	6823      	ldr	r3, [r4, #0]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	0610      	lsls	r0, r2, #24
 8000c2e:	d530      	bpl.n	8000c92 <HAL_ADC_IRQHandler+0x102>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	0751      	lsls	r1, r2, #29
 8000c34:	d52d      	bpl.n	8000c92 <HAL_ADC_IRQHandler+0x102>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c38:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000c3a:	bf5e      	ittt	pl
 8000c3c:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000c3e:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000c42:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000c4a:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000c4e:	d00a      	beq.n	8000c66 <HAL_ADC_IRQHandler+0xd6>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000c50:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000c52:	0550      	lsls	r0, r2, #21
 8000c54:	d416      	bmi.n	8000c84 <HAL_ADC_IRQHandler+0xf4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000c5c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000c60:	d110      	bne.n	8000c84 <HAL_ADC_IRQHandler+0xf4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000c62:	68e2      	ldr	r2, [r4, #12]
 8000c64:	b972      	cbnz	r2, 8000c84 <HAL_ADC_IRQHandler+0xf4>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c6c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000c6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c74:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000c76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c78:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c7a:	bf5e      	ittt	pl
 8000c7c:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000c7e:	f043 0301 	orrpl.w	r3, r3, #1
 8000c82:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000c84:	4620      	mov	r0, r4
 8000c86:	f000 f9c7 	bl	8001018 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000c8a:	f06f 020c 	mvn.w	r2, #12
 8000c8e:	6823      	ldr	r3, [r4, #0]
 8000c90:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000c92:	6823      	ldr	r3, [r4, #0]
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	0652      	lsls	r2, r2, #25
 8000c98:	d50d      	bpl.n	8000cb6 <HAL_ADC_IRQHandler+0x126>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	07db      	lsls	r3, r3, #31
 8000c9e:	d50a      	bpl.n	8000cb6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ca0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ca2:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca8:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000caa:	f7ff ff70 	bl	8000b8e <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000cae:	f06f 0201 	mvn.w	r2, #1
 8000cb2:	6823      	ldr	r3, [r4, #0]
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	bd10      	pop	{r4, pc}
 8000cb8:	40012400 	.word	0x40012400
 8000cbc:	080035c8 	.word	0x080035c8

08000cc0 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000cc0:	2300      	movs	r3, #0
{ 
 8000cc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000cc4:	4a51      	ldr	r2, [pc, #324]	; (8000e0c <HAL_ADC_ConfigChannel+0x14c>)
  __IO uint32_t wait_loop_index = 0U;
 8000cc6:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000cc8:	6803      	ldr	r3, [r0, #0]
{ 
 8000cca:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000ccc:	4293      	cmp	r3, r2
{ 
 8000cce:	460d      	mov	r5, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000cd0:	d008      	beq.n	8000ce4 <HAL_ADC_ConfigChannel+0x24>
 8000cd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d004      	beq.n	8000ce4 <HAL_ADC_ConfigChannel+0x24>
 8000cda:	f240 61aa 	movw	r1, #1706	; 0x6aa
 8000cde:	484c      	ldr	r0, [pc, #304]	; (8000e10 <HAL_ADC_ConfigChannel+0x150>)
 8000ce0:	f7ff fbd5 	bl	800048e <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000ce4:	682b      	ldr	r3, [r5, #0]
 8000ce6:	2b11      	cmp	r3, #17
 8000ce8:	d904      	bls.n	8000cf4 <HAL_ADC_ConfigChannel+0x34>
 8000cea:	f240 61ab 	movw	r1, #1707	; 0x6ab
 8000cee:	4848      	ldr	r0, [pc, #288]	; (8000e10 <HAL_ADC_ConfigChannel+0x150>)
 8000cf0:	f7ff fbcd 	bl	800048e <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8000cf4:	686b      	ldr	r3, [r5, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d904      	bls.n	8000d06 <HAL_ADC_ConfigChannel+0x46>
 8000cfc:	f240 61ac 	movw	r1, #1708	; 0x6ac
 8000d00:	4843      	ldr	r0, [pc, #268]	; (8000e10 <HAL_ADC_ConfigChannel+0x150>)
 8000d02:	f7ff fbc4 	bl	800048e <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8000d06:	68ab      	ldr	r3, [r5, #8]
 8000d08:	2b07      	cmp	r3, #7
 8000d0a:	d904      	bls.n	8000d16 <HAL_ADC_ConfigChannel+0x56>
 8000d0c:	f240 61ad 	movw	r1, #1709	; 0x6ad
 8000d10:	483f      	ldr	r0, [pc, #252]	; (8000e10 <HAL_ADC_ConfigChannel+0x150>)
 8000d12:	f7ff fbbc 	bl	800048e <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d16:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d073      	beq.n	8000e06 <HAL_ADC_ConfigChannel+0x146>
 8000d1e:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d20:	6868      	ldr	r0, [r5, #4]
  __HAL_LOCK(hadc);
 8000d22:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000d26:	2806      	cmp	r0, #6
 8000d28:	6822      	ldr	r2, [r4, #0]
 8000d2a:	6829      	ldr	r1, [r5, #0]
 8000d2c:	ea4f 0380 	mov.w	r3, r0, lsl #2
 8000d30:	d824      	bhi.n	8000d7c <HAL_ADC_ConfigChannel+0xbc>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d32:	4403      	add	r3, r0
 8000d34:	201f      	movs	r0, #31
 8000d36:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000d38:	3b05      	subs	r3, #5
 8000d3a:	4098      	lsls	r0, r3
 8000d3c:	ea26 0000 	bic.w	r0, r6, r0
 8000d40:	fa01 f303 	lsl.w	r3, r1, r3
 8000d44:	4303      	orrs	r3, r0
 8000d46:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d48:	2909      	cmp	r1, #9
 8000d4a:	68ad      	ldr	r5, [r5, #8]
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	d92e      	bls.n	8000db0 <HAL_ADC_ConfigChannel+0xf0>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d52:	2607      	movs	r6, #7
 8000d54:	440b      	add	r3, r1
 8000d56:	68d0      	ldr	r0, [r2, #12]
 8000d58:	3b1e      	subs	r3, #30
 8000d5a:	409e      	lsls	r6, r3
 8000d5c:	ea20 0006 	bic.w	r0, r0, r6
 8000d60:	fa05 f303 	lsl.w	r3, r5, r3
 8000d64:	4303      	orrs	r3, r0
 8000d66:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d68:	f1a1 0310 	sub.w	r3, r1, #16
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d92a      	bls.n	8000dc6 <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d70:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d72:	2300      	movs	r3, #0
 8000d74:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000d7c:	280c      	cmp	r0, #12
 8000d7e:	d80b      	bhi.n	8000d98 <HAL_ADC_ConfigChannel+0xd8>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d80:	4403      	add	r3, r0
 8000d82:	201f      	movs	r0, #31
 8000d84:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000d86:	3b23      	subs	r3, #35	; 0x23
 8000d88:	4098      	lsls	r0, r3
 8000d8a:	ea26 0000 	bic.w	r0, r6, r0
 8000d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d92:	4303      	orrs	r3, r0
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	e7d7      	b.n	8000d48 <HAL_ADC_ConfigChannel+0x88>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d98:	4403      	add	r3, r0
 8000d9a:	201f      	movs	r0, #31
 8000d9c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000d9e:	3b41      	subs	r3, #65	; 0x41
 8000da0:	4098      	lsls	r0, r3
 8000da2:	ea26 0000 	bic.w	r0, r6, r0
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	4303      	orrs	r3, r0
 8000dac:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000dae:	e7cb      	b.n	8000d48 <HAL_ADC_ConfigChannel+0x88>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000db0:	2607      	movs	r6, #7
 8000db2:	6910      	ldr	r0, [r2, #16]
 8000db4:	440b      	add	r3, r1
 8000db6:	409e      	lsls	r6, r3
 8000db8:	ea20 0006 	bic.w	r0, r0, r6
 8000dbc:	fa05 f303 	lsl.w	r3, r5, r3
 8000dc0:	4303      	orrs	r3, r0
 8000dc2:	6113      	str	r3, [r2, #16]
 8000dc4:	e7d0      	b.n	8000d68 <HAL_ADC_ConfigChannel+0xa8>
    if (hadc->Instance == ADC1)
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_ADC_ConfigChannel+0x14c>)
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d116      	bne.n	8000dfa <HAL_ADC_ConfigChannel+0x13a>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000dcc:	6893      	ldr	r3, [r2, #8]
 8000dce:	021b      	lsls	r3, r3, #8
 8000dd0:	d4ce      	bmi.n	8000d70 <HAL_ADC_ConfigChannel+0xb0>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dd2:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000dd4:	2910      	cmp	r1, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dda:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000ddc:	d1c8      	bne.n	8000d70 <HAL_ADC_ConfigChannel+0xb0>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_ADC_ConfigChannel+0x154>)
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <HAL_ADC_ConfigChannel+0x158>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	fbb3 f2f2 	udiv	r2, r3, r2
 8000de8:	230a      	movs	r3, #10
 8000dea:	4353      	muls	r3, r2
            wait_loop_index--;
 8000dec:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000dee:	9b01      	ldr	r3, [sp, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0bd      	beq.n	8000d70 <HAL_ADC_ConfigChannel+0xb0>
            wait_loop_index--;
 8000df4:	9b01      	ldr	r3, [sp, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	e7f8      	b.n	8000dec <HAL_ADC_ConfigChannel+0x12c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000dfc:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dfe:	f043 0320 	orr.w	r3, r3, #32
 8000e02:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e04:	e7b5      	b.n	8000d72 <HAL_ADC_ConfigChannel+0xb2>
  __HAL_LOCK(hadc);
 8000e06:	2002      	movs	r0, #2
 8000e08:	e7b6      	b.n	8000d78 <HAL_ADC_ConfigChannel+0xb8>
 8000e0a:	bf00      	nop
 8000e0c:	40012400 	.word	0x40012400
 8000e10:	080035c8 	.word	0x080035c8
 8000e14:	20000000 	.word	0x20000000
 8000e18:	000f4240 	.word	0x000f4240

08000e1c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e1c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e1e:	6803      	ldr	r3, [r0, #0]
{
 8000e20:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	07d2      	lsls	r2, r2, #31
 8000e26:	d401      	bmi.n	8000e2c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e28:	2000      	movs	r0, #0
 8000e2a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	f022 0201 	bic.w	r2, r2, #1
 8000e32:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000e34:	f7ff fea4 	bl	8000b80 <HAL_GetTick>
 8000e38:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e3a:	6823      	ldr	r3, [r4, #0]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	07db      	lsls	r3, r3, #31
 8000e40:	d5f2      	bpl.n	8000e28 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e42:	f7ff fe9d 	bl	8000b80 <HAL_GetTick>
 8000e46:	1b40      	subs	r0, r0, r5
 8000e48:	2802      	cmp	r0, #2
 8000e4a:	d9f6      	bls.n	8000e3a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e4e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e50:	f043 0310 	orr.w	r3, r3, #16
 8000e54:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e5e:	bd38      	pop	{r3, r4, r5, pc}

08000e60 <HAL_ADC_Init>:
{
 8000e60:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000e62:	4604      	mov	r4, r0
 8000e64:	2800      	cmp	r0, #0
 8000e66:	f000 80c9 	beq.w	8000ffc <HAL_ADC_Init+0x19c>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000e6a:	6803      	ldr	r3, [r0, #0]
 8000e6c:	4a66      	ldr	r2, [pc, #408]	; (8001008 <HAL_ADC_Init+0x1a8>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d008      	beq.n	8000e84 <HAL_ADC_Init+0x24>
 8000e72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d004      	beq.n	8000e84 <HAL_ADC_Init+0x24>
 8000e7a:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8000e7e:	4863      	ldr	r0, [pc, #396]	; (800100c <HAL_ADC_Init+0x1ac>)
 8000e80:	f7ff fb05 	bl	800048e <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8000e84:	6863      	ldr	r3, [r4, #4]
 8000e86:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8000e8a:	d004      	beq.n	8000e96 <HAL_ADC_Init+0x36>
 8000e8c:	f240 1183 	movw	r1, #387	; 0x183
 8000e90:	485e      	ldr	r0, [pc, #376]	; (800100c <HAL_ADC_Init+0x1ac>)
 8000e92:	f7ff fafc 	bl	800048e <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000e96:	68a3      	ldr	r3, [r4, #8]
 8000e98:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8000e9c:	d004      	beq.n	8000ea8 <HAL_ADC_Init+0x48>
 8000e9e:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8000ea2:	485a      	ldr	r0, [pc, #360]	; (800100c <HAL_ADC_Init+0x1ac>)
 8000ea4:	f7ff faf3 	bl	800048e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000ea8:	68e3      	ldr	r3, [r4, #12]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d904      	bls.n	8000eb8 <HAL_ADC_Init+0x58>
 8000eae:	f240 1185 	movw	r1, #389	; 0x185
 8000eb2:	4856      	ldr	r0, [pc, #344]	; (800100c <HAL_ADC_Init+0x1ac>)
 8000eb4:	f7ff faeb 	bl	800048e <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000eb8:	69e3      	ldr	r3, [r4, #28]
 8000eba:	f433 2220 	bics.w	r2, r3, #655360	; 0xa0000
 8000ebe:	d00c      	beq.n	8000eda <HAL_ADC_Init+0x7a>
 8000ec0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8000ec4:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
 8000ec8:	d007      	beq.n	8000eda <HAL_ADC_Init+0x7a>
 8000eca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000ece:	d004      	beq.n	8000eda <HAL_ADC_Init+0x7a>
 8000ed0:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8000ed4:	484d      	ldr	r0, [pc, #308]	; (800100c <HAL_ADC_Init+0x1ac>)
 8000ed6:	f7ff fada 	bl	800048e <assert_failed>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000eda:	68a3      	ldr	r3, [r4, #8]
 8000edc:	b1db      	cbz	r3, 8000f16 <HAL_ADC_Init+0xb6>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000ede:	6923      	ldr	r3, [r4, #16]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	2b0f      	cmp	r3, #15
 8000ee4:	d904      	bls.n	8000ef0 <HAL_ADC_Init+0x90>
 8000ee6:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8000eea:	4848      	ldr	r0, [pc, #288]	; (800100c <HAL_ADC_Init+0x1ac>)
 8000eec:	f7ff facf 	bl	800048e <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8000ef0:	6963      	ldr	r3, [r4, #20]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d904      	bls.n	8000f00 <HAL_ADC_Init+0xa0>
 8000ef6:	f240 118b 	movw	r1, #395	; 0x18b
 8000efa:	4844      	ldr	r0, [pc, #272]	; (800100c <HAL_ADC_Init+0x1ac>)
 8000efc:	f7ff fac7 	bl	800048e <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000f00:	6963      	ldr	r3, [r4, #20]
 8000f02:	b143      	cbz	r3, 8000f16 <HAL_ADC_Init+0xb6>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000f04:	69a3      	ldr	r3, [r4, #24]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	2b07      	cmp	r3, #7
 8000f0a:	d904      	bls.n	8000f16 <HAL_ADC_Init+0xb6>
 8000f0c:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8000f10:	483e      	ldr	r0, [pc, #248]	; (800100c <HAL_ADC_Init+0x1ac>)
 8000f12:	f7ff fabc 	bl	800048e <assert_failed>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f18:	b92b      	cbnz	r3, 8000f26 <HAL_ADC_Init+0xc6>
    ADC_CLEAR_ERRORCODE(hadc);
 8000f1a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000f1c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000f20:	4620      	mov	r0, r4
 8000f22:	f7ff f93b 	bl	800019c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f26:	4620      	mov	r0, r4
 8000f28:	f7ff ff78 	bl	8000e1c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f2e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000f32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f34:	d164      	bne.n	8001000 <HAL_ADC_Init+0x1a0>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	d162      	bne.n	8001000 <HAL_ADC_Init+0x1a0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000f3a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000f3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000f40:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000f42:	f023 0302 	bic.w	r3, r3, #2
 8000f46:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000f4a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f4c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000f4e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000f50:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f52:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000f56:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f5a:	d038      	beq.n	8000fce <HAL_ADC_Init+0x16e>
 8000f5c:	2901      	cmp	r1, #1
 8000f5e:	bf14      	ite	ne
 8000f60:	4606      	movne	r6, r0
 8000f62:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f66:	6965      	ldr	r5, [r4, #20]
 8000f68:	2d01      	cmp	r5, #1
 8000f6a:	d107      	bne.n	8000f7c <HAL_ADC_Init+0x11c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d130      	bne.n	8000fd2 <HAL_ADC_Init+0x172>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f70:	69a3      	ldr	r3, [r4, #24]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000f78:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000f7c:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f7e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000f82:	685d      	ldr	r5, [r3, #4]
 8000f84:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000f88:	ea45 0506 	orr.w	r5, r5, r6
 8000f8c:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000f8e:	689e      	ldr	r6, [r3, #8]
 8000f90:	4d1f      	ldr	r5, [pc, #124]	; (8001010 <HAL_ADC_Init+0x1b0>)
 8000f92:	ea05 0506 	and.w	r5, r5, r6
 8000f96:	ea45 0502 	orr.w	r5, r5, r2
 8000f9a:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f9c:	d001      	beq.n	8000fa2 <HAL_ADC_Init+0x142>
 8000f9e:	2901      	cmp	r1, #1
 8000fa0:	d120      	bne.n	8000fe4 <HAL_ADC_Init+0x184>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fa2:	6921      	ldr	r1, [r4, #16]
 8000fa4:	3901      	subs	r1, #1
 8000fa6:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000fa8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000faa:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000fae:	4329      	orrs	r1, r5
 8000fb0:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fb2:	6899      	ldr	r1, [r3, #8]
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <HAL_ADC_Init+0x1b4>)
 8000fb6:	400b      	ands	r3, r1
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d115      	bne.n	8000fe8 <HAL_ADC_Init+0x188>
      ADC_CLEAR_ERRORCODE(hadc);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000fc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fc2:	f023 0303 	bic.w	r3, r3, #3
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	62a3      	str	r3, [r4, #40]	; 0x28
 8000fcc:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000fce:	460e      	mov	r6, r1
 8000fd0:	e7c9      	b.n	8000f66 <HAL_ADC_Init+0x106>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fd4:	f043 0320 	orr.w	r3, r3, #32
 8000fd8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000fe2:	e7cb      	b.n	8000f7c <HAL_ADC_Init+0x11c>
  uint32_t tmp_sqr1 = 0U;
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	e7df      	b.n	8000fa8 <HAL_ADC_Init+0x148>
      ADC_STATE_CLR_SET(hadc->State,
 8000fe8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fea:	f023 0312 	bic.w	r3, r3, #18
 8000fee:	f043 0310 	orr.w	r3, r3, #16
 8000ff2:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000ffc:	2001      	movs	r0, #1
}
 8000ffe:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001000:	f043 0310 	orr.w	r3, r3, #16
 8001004:	62a3      	str	r3, [r4, #40]	; 0x28
 8001006:	e7f9      	b.n	8000ffc <HAL_ADC_Init+0x19c>
 8001008:	40012400 	.word	0x40012400
 800100c:	080035c8 	.word	0x080035c8
 8001010:	ffe1f7fd 	.word	0xffe1f7fd
 8001014:	ff1f0efe 	.word	0xff1f0efe

08001018 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001018:	4770      	bx	lr
	...

0800101c <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800101c:	1ec3      	subs	r3, r0, #3
 800101e:	2b04      	cmp	r3, #4
{
 8001020:	b510      	push	{r4, lr}
 8001022:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001024:	d903      	bls.n	800102e <HAL_NVIC_SetPriorityGrouping+0x12>
 8001026:	21a2      	movs	r1, #162	; 0xa2
 8001028:	4809      	ldr	r0, [pc, #36]	; (8001050 <HAL_NVIC_SetPriorityGrouping+0x34>)
 800102a:	f7ff fa30 	bl	800048e <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102e:	4a09      	ldr	r2, [pc, #36]	; (8001054 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001030:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001032:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001034:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001038:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800103c:	041b      	lsls	r3, r3, #16
 800103e:	0c1b      	lsrs	r3, r3, #16
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001048:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 800104a:	60d4      	str	r4, [r2, #12]
 800104c:	bd10      	pop	{r4, pc}
 800104e:	bf00      	nop
 8001050:	08003600 	.word	0x08003600
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001058:	2a0f      	cmp	r2, #15
{ 
 800105a:	b570      	push	{r4, r5, r6, lr}
 800105c:	4604      	mov	r4, r0
 800105e:	460e      	mov	r6, r1
 8001060:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001062:	d903      	bls.n	800106c <HAL_NVIC_SetPriority+0x14>
 8001064:	21ba      	movs	r1, #186	; 0xba
 8001066:	481a      	ldr	r0, [pc, #104]	; (80010d0 <HAL_NVIC_SetPriority+0x78>)
 8001068:	f7ff fa11 	bl	800048e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800106c:	2e0f      	cmp	r6, #15
 800106e:	d903      	bls.n	8001078 <HAL_NVIC_SetPriority+0x20>
 8001070:	21bb      	movs	r1, #187	; 0xbb
 8001072:	4817      	ldr	r0, [pc, #92]	; (80010d0 <HAL_NVIC_SetPriority+0x78>)
 8001074:	f7ff fa0b 	bl	800048e <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_NVIC_SetPriority+0x7c>)

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107a:	2001      	movs	r0, #1
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	68d9      	ldr	r1, [r3, #12]
 800107e:	f3c1 2102 	ubfx	r1, r1, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001082:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	2b04      	cmp	r3, #4
 800108a:	bf28      	it	cs
 800108c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	2a06      	cmp	r2, #6
 8001090:	bf94      	ite	ls
 8001092:	2100      	movls	r1, #0
 8001094:	3903      	subhi	r1, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001096:	fa00 f203 	lsl.w	r2, r0, r3
 800109a:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109e:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a2:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) < 0)
 80010a6:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	ea42 0205 	orr.w	r2, r2, r5
 80010ac:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	bfaf      	iteee	ge
 80010b2:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	4b08      	ldrlt	r3, [pc, #32]	; (80010d8 <HAL_NVIC_SetPriority+0x80>)
 80010b8:	f004 040f 	andlt.w	r4, r4, #15
 80010bc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	bfa5      	ittet	ge
 80010c0:	b2d2      	uxtbge	r2, r2
 80010c2:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c6:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 80010cc:	bd70      	pop	{r4, r5, r6, pc}
 80010ce:	bf00      	nop
 80010d0:	08003600 	.word	0x08003600
 80010d4:	e000ed00 	.word	0xe000ed00
 80010d8:	e000ed14 	.word	0xe000ed14

080010dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80010de:	1e04      	subs	r4, r0, #0
 80010e0:	da03      	bge.n	80010ea <HAL_NVIC_EnableIRQ+0xe>
 80010e2:	21ce      	movs	r1, #206	; 0xce
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <HAL_NVIC_EnableIRQ+0x24>)
 80010e6:	f7ff f9d2 	bl	800048e <assert_failed>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80010ea:	2301      	movs	r3, #1
 80010ec:	0962      	lsrs	r2, r4, #5
 80010ee:	f004 041f 	and.w	r4, r4, #31
 80010f2:	fa03 f404 	lsl.w	r4, r3, r4
 80010f6:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_NVIC_EnableIRQ+0x28>)
 80010f8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80010fc:	bd10      	pop	{r4, pc}
 80010fe:	bf00      	nop
 8001100:	08003600 	.word	0x08003600
 8001104:	e000e100 	.word	0xe000e100

08001108 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	3801      	subs	r0, #1
 800110a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800110e:	d20a      	bcs.n	8001126 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001114:	4a06      	ldr	r2, [pc, #24]	; (8001130 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001116:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001120:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001126:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000e010 	.word	0xe000e010
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <HAL_CRC_Init>:
  * @param  hcrc: pointer to a CRC_HandleTypeDef structure that contains
  *         the configuration information for CRC
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001134:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8001136:	4604      	mov	r4, r0
 8001138:	b198      	cbz	r0, 8001162 <HAL_CRC_Init+0x2e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 800113a:	6802      	ldr	r2, [r0, #0]
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_CRC_Init+0x34>)
 800113e:	429a      	cmp	r2, r3
 8001140:	d003      	beq.n	800114a <HAL_CRC_Init+0x16>
 8001142:	2177      	movs	r1, #119	; 0x77
 8001144:	4809      	ldr	r0, [pc, #36]	; (800116c <HAL_CRC_Init+0x38>)
 8001146:	f7ff f9a2 	bl	800048e <assert_failed>

  if(hcrc->State == HAL_CRC_STATE_RESET)
 800114a:	7963      	ldrb	r3, [r4, #5]
 800114c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001150:	b91b      	cbnz	r3, 800115a <HAL_CRC_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001152:	7122      	strb	r2, [r4, #4]
    
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001154:	4620      	mov	r0, r4
 8001156:	f7ff f887 	bl	8000268 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800115a:	2301      	movs	r3, #1
  
  /* Return function status */
  return HAL_OK;
 800115c:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 800115e:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 8001160:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001162:	2001      	movs	r0, #1
}
 8001164:	bd10      	pop	{r4, pc}
 8001166:	bf00      	nop
 8001168:	40023000 	.word	0x40023000
 800116c:	0800363b 	.word	0x0800363b

08001170 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001170:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001172:	4604      	mov	r4, r0
 8001174:	2800      	cmp	r0, #0
 8001176:	f000 8081 	beq.w	800127c <HAL_DMA_Init+0x10c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800117a:	6803      	ldr	r3, [r0, #0]
 800117c:	4a40      	ldr	r2, [pc, #256]	; (8001280 <HAL_DMA_Init+0x110>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d015      	beq.n	80011ae <HAL_DMA_Init+0x3e>
 8001182:	3214      	adds	r2, #20
 8001184:	4293      	cmp	r3, r2
 8001186:	d012      	beq.n	80011ae <HAL_DMA_Init+0x3e>
 8001188:	3214      	adds	r2, #20
 800118a:	4293      	cmp	r3, r2
 800118c:	d00f      	beq.n	80011ae <HAL_DMA_Init+0x3e>
 800118e:	3214      	adds	r2, #20
 8001190:	4293      	cmp	r3, r2
 8001192:	d00c      	beq.n	80011ae <HAL_DMA_Init+0x3e>
 8001194:	3214      	adds	r2, #20
 8001196:	4293      	cmp	r3, r2
 8001198:	d009      	beq.n	80011ae <HAL_DMA_Init+0x3e>
 800119a:	3214      	adds	r2, #20
 800119c:	4293      	cmp	r3, r2
 800119e:	d006      	beq.n	80011ae <HAL_DMA_Init+0x3e>
 80011a0:	3214      	adds	r2, #20
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d003      	beq.n	80011ae <HAL_DMA_Init+0x3e>
 80011a6:	21aa      	movs	r1, #170	; 0xaa
 80011a8:	4836      	ldr	r0, [pc, #216]	; (8001284 <HAL_DMA_Init+0x114>)
 80011aa:	f7ff f970 	bl	800048e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80011ae:	6863      	ldr	r3, [r4, #4]
 80011b0:	f033 0210 	bics.w	r2, r3, #16
 80011b4:	d006      	beq.n	80011c4 <HAL_DMA_Init+0x54>
 80011b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011ba:	d003      	beq.n	80011c4 <HAL_DMA_Init+0x54>
 80011bc:	21ab      	movs	r1, #171	; 0xab
 80011be:	4831      	ldr	r0, [pc, #196]	; (8001284 <HAL_DMA_Init+0x114>)
 80011c0:	f7ff f965 	bl	800048e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80011c4:	68a3      	ldr	r3, [r4, #8]
 80011c6:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 80011ca:	d003      	beq.n	80011d4 <HAL_DMA_Init+0x64>
 80011cc:	21ac      	movs	r1, #172	; 0xac
 80011ce:	482d      	ldr	r0, [pc, #180]	; (8001284 <HAL_DMA_Init+0x114>)
 80011d0:	f7ff f95d 	bl	800048e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80011d4:	68e3      	ldr	r3, [r4, #12]
 80011d6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80011da:	d003      	beq.n	80011e4 <HAL_DMA_Init+0x74>
 80011dc:	21ad      	movs	r1, #173	; 0xad
 80011de:	4829      	ldr	r0, [pc, #164]	; (8001284 <HAL_DMA_Init+0x114>)
 80011e0:	f7ff f955 	bl	800048e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80011e4:	6923      	ldr	r3, [r4, #16]
 80011e6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80011ea:	d006      	beq.n	80011fa <HAL_DMA_Init+0x8a>
 80011ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011f0:	d003      	beq.n	80011fa <HAL_DMA_Init+0x8a>
 80011f2:	21ae      	movs	r1, #174	; 0xae
 80011f4:	4823      	ldr	r0, [pc, #140]	; (8001284 <HAL_DMA_Init+0x114>)
 80011f6:	f7ff f94a 	bl	800048e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80011fa:	6963      	ldr	r3, [r4, #20]
 80011fc:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8001200:	d006      	beq.n	8001210 <HAL_DMA_Init+0xa0>
 8001202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001206:	d003      	beq.n	8001210 <HAL_DMA_Init+0xa0>
 8001208:	21af      	movs	r1, #175	; 0xaf
 800120a:	481e      	ldr	r0, [pc, #120]	; (8001284 <HAL_DMA_Init+0x114>)
 800120c:	f7ff f93f 	bl	800048e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001210:	69a3      	ldr	r3, [r4, #24]
 8001212:	f033 0320 	bics.w	r3, r3, #32
 8001216:	d003      	beq.n	8001220 <HAL_DMA_Init+0xb0>
 8001218:	21b0      	movs	r1, #176	; 0xb0
 800121a:	481a      	ldr	r0, [pc, #104]	; (8001284 <HAL_DMA_Init+0x114>)
 800121c:	f7ff f937 	bl	800048e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001220:	69e3      	ldr	r3, [r4, #28]
 8001222:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8001226:	d003      	beq.n	8001230 <HAL_DMA_Init+0xc0>
 8001228:	21b1      	movs	r1, #177	; 0xb1
 800122a:	4816      	ldr	r0, [pc, #88]	; (8001284 <HAL_DMA_Init+0x114>)
 800122c:	f7ff f92f 	bl	800048e <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001230:	2214      	movs	r2, #20
 8001232:	6821      	ldr	r1, [r4, #0]
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <HAL_DMA_Init+0x118>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001236:	68a0      	ldr	r0, [r4, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001238:	440b      	add	r3, r1
 800123a:	fbb3 f3f2 	udiv	r3, r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_DMA_Init+0x11c>)
  tmp = hdma->Instance->CCR;
 8001244:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001246:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8001248:	6863      	ldr	r3, [r4, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800124a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 800124e:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001250:	68e0      	ldr	r0, [r4, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001252:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001256:	4303      	orrs	r3, r0
 8001258:	6920      	ldr	r0, [r4, #16]
 800125a:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800125c:	6960      	ldr	r0, [r4, #20]
 800125e:	4303      	orrs	r3, r0
 8001260:	69a0      	ldr	r0, [r4, #24]
 8001262:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001264:	69e0      	ldr	r0, [r4, #28]
 8001266:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001268:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800126a:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800126c:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800126e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001270:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001272:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001276:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
 800127a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800127c:	2001      	movs	r0, #1
}
 800127e:	bd10      	pop	{r4, pc}
 8001280:	40020008 	.word	0x40020008
 8001284:	08003673 	.word	0x08003673
 8001288:	bffdfff8 	.word	0xbffdfff8
 800128c:	40020000 	.word	0x40020000

08001290 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001290:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001294:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001296:	2b02      	cmp	r3, #2
 8001298:	d003      	beq.n	80012a2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800129a:	2304      	movs	r3, #4
 800129c:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800129e:	2001      	movs	r0, #1
 80012a0:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a2:	6803      	ldr	r3, [r0, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	f022 020e 	bic.w	r2, r2, #14
 80012aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	f022 0201 	bic.w	r2, r2, #1
 80012b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012b4:	4a18      	ldr	r2, [pc, #96]	; (8001318 <HAL_DMA_Abort_IT+0x88>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d01f      	beq.n	80012fa <HAL_DMA_Abort_IT+0x6a>
 80012ba:	3214      	adds	r2, #20
 80012bc:	4293      	cmp	r3, r2
 80012be:	d01e      	beq.n	80012fe <HAL_DMA_Abort_IT+0x6e>
 80012c0:	3214      	adds	r2, #20
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d01d      	beq.n	8001302 <HAL_DMA_Abort_IT+0x72>
 80012c6:	3214      	adds	r2, #20
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d01d      	beq.n	8001308 <HAL_DMA_Abort_IT+0x78>
 80012cc:	3214      	adds	r2, #20
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d01d      	beq.n	800130e <HAL_DMA_Abort_IT+0x7e>
 80012d2:	3214      	adds	r2, #20
 80012d4:	4293      	cmp	r3, r2
 80012d6:	bf0c      	ite	eq
 80012d8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80012dc:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e2:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012e4:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80012e6:	2301      	movs	r3, #1
 80012e8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80012ee:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80012f2:	b17b      	cbz	r3, 8001314 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 80012f4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80012f6:	4620      	mov	r0, r4
 80012f8:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012fa:	2301      	movs	r3, #1
 80012fc:	e7f0      	b.n	80012e0 <HAL_DMA_Abort_IT+0x50>
 80012fe:	2310      	movs	r3, #16
 8001300:	e7ee      	b.n	80012e0 <HAL_DMA_Abort_IT+0x50>
 8001302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001306:	e7eb      	b.n	80012e0 <HAL_DMA_Abort_IT+0x50>
 8001308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130c:	e7e8      	b.n	80012e0 <HAL_DMA_Abort_IT+0x50>
 800130e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001312:	e7e5      	b.n	80012e0 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001314:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8001316:	bd10      	pop	{r4, pc}
 8001318:	40020008 	.word	0x40020008
 800131c:	40020000 	.word	0x40020000

08001320 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001320:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001322:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001324:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001326:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001328:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800132a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800132c:	4095      	lsls	r5, r2
 800132e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001330:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001332:	d032      	beq.n	800139a <HAL_DMA_IRQHandler+0x7a>
 8001334:	074d      	lsls	r5, r1, #29
 8001336:	d530      	bpl.n	800139a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800133c:	bf5e      	ittt	pl
 800133e:	681a      	ldrpl	r2, [r3, #0]
 8001340:	f022 0204 	bicpl.w	r2, r2, #4
 8001344:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001346:	4a3e      	ldr	r2, [pc, #248]	; (8001440 <HAL_DMA_IRQHandler+0x120>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d019      	beq.n	8001380 <HAL_DMA_IRQHandler+0x60>
 800134c:	3214      	adds	r2, #20
 800134e:	4293      	cmp	r3, r2
 8001350:	d018      	beq.n	8001384 <HAL_DMA_IRQHandler+0x64>
 8001352:	3214      	adds	r2, #20
 8001354:	4293      	cmp	r3, r2
 8001356:	d017      	beq.n	8001388 <HAL_DMA_IRQHandler+0x68>
 8001358:	3214      	adds	r2, #20
 800135a:	4293      	cmp	r3, r2
 800135c:	d017      	beq.n	800138e <HAL_DMA_IRQHandler+0x6e>
 800135e:	3214      	adds	r2, #20
 8001360:	4293      	cmp	r3, r2
 8001362:	d017      	beq.n	8001394 <HAL_DMA_IRQHandler+0x74>
 8001364:	3214      	adds	r2, #20
 8001366:	4293      	cmp	r3, r2
 8001368:	bf0c      	ite	eq
 800136a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800136e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001372:	4a34      	ldr	r2, [pc, #208]	; (8001444 <HAL_DMA_IRQHandler+0x124>)
 8001374:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001376:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8001378:	2b00      	cmp	r3, #0
 800137a:	d05e      	beq.n	800143a <HAL_DMA_IRQHandler+0x11a>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 800137c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800137e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001380:	2304      	movs	r3, #4
 8001382:	e7f6      	b.n	8001372 <HAL_DMA_IRQHandler+0x52>
 8001384:	2340      	movs	r3, #64	; 0x40
 8001386:	e7f4      	b.n	8001372 <HAL_DMA_IRQHandler+0x52>
 8001388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800138c:	e7f1      	b.n	8001372 <HAL_DMA_IRQHandler+0x52>
 800138e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001392:	e7ee      	b.n	8001372 <HAL_DMA_IRQHandler+0x52>
 8001394:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001398:	e7eb      	b.n	8001372 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800139a:	2502      	movs	r5, #2
 800139c:	4095      	lsls	r5, r2
 800139e:	4225      	tst	r5, r4
 80013a0:	d035      	beq.n	800140e <HAL_DMA_IRQHandler+0xee>
 80013a2:	078d      	lsls	r5, r1, #30
 80013a4:	d533      	bpl.n	800140e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	0694      	lsls	r4, r2, #26
 80013aa:	d406      	bmi.n	80013ba <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	f022 020a 	bic.w	r2, r2, #10
 80013b2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80013b4:	2201      	movs	r2, #1
 80013b6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80013ba:	4a21      	ldr	r2, [pc, #132]	; (8001440 <HAL_DMA_IRQHandler+0x120>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d019      	beq.n	80013f4 <HAL_DMA_IRQHandler+0xd4>
 80013c0:	3214      	adds	r2, #20
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d018      	beq.n	80013f8 <HAL_DMA_IRQHandler+0xd8>
 80013c6:	3214      	adds	r2, #20
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d017      	beq.n	80013fc <HAL_DMA_IRQHandler+0xdc>
 80013cc:	3214      	adds	r2, #20
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d017      	beq.n	8001402 <HAL_DMA_IRQHandler+0xe2>
 80013d2:	3214      	adds	r2, #20
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d017      	beq.n	8001408 <HAL_DMA_IRQHandler+0xe8>
 80013d8:	3214      	adds	r2, #20
 80013da:	4293      	cmp	r3, r2
 80013dc:	bf0c      	ite	eq
 80013de:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80013e2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80013e6:	4a17      	ldr	r2, [pc, #92]	; (8001444 <HAL_DMA_IRQHandler+0x124>)
 80013e8:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80013ea:	2300      	movs	r3, #0
 80013ec:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80013f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80013f2:	e7c1      	b.n	8001378 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80013f4:	2302      	movs	r3, #2
 80013f6:	e7f6      	b.n	80013e6 <HAL_DMA_IRQHandler+0xc6>
 80013f8:	2320      	movs	r3, #32
 80013fa:	e7f4      	b.n	80013e6 <HAL_DMA_IRQHandler+0xc6>
 80013fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001400:	e7f1      	b.n	80013e6 <HAL_DMA_IRQHandler+0xc6>
 8001402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001406:	e7ee      	b.n	80013e6 <HAL_DMA_IRQHandler+0xc6>
 8001408:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800140c:	e7eb      	b.n	80013e6 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800140e:	2508      	movs	r5, #8
 8001410:	4095      	lsls	r5, r2
 8001412:	4225      	tst	r5, r4
 8001414:	d011      	beq.n	800143a <HAL_DMA_IRQHandler+0x11a>
 8001416:	0709      	lsls	r1, r1, #28
 8001418:	d50f      	bpl.n	800143a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800141a:	6819      	ldr	r1, [r3, #0]
 800141c:	f021 010e 	bic.w	r1, r1, #14
 8001420:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001422:	2301      	movs	r3, #1
 8001424:	fa03 f202 	lsl.w	r2, r3, r2
 8001428:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800142a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800142c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001430:	2300      	movs	r3, #0
 8001432:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001436:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001438:	e79e      	b.n	8001378 <HAL_DMA_IRQHandler+0x58>
}
 800143a:	bc70      	pop	{r4, r5, r6}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40020008 	.word	0x40020008
 8001444:	40020000 	.word	0x40020000

08001448 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001448:	4a11      	ldr	r2, [pc, #68]	; (8001490 <FLASH_SetErrorCode+0x48>)
 800144a:	68d3      	ldr	r3, [r2, #12]
 800144c:	f013 0310 	ands.w	r3, r3, #16
 8001450:	d005      	beq.n	800145e <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001452:	4910      	ldr	r1, [pc, #64]	; (8001494 <FLASH_SetErrorCode+0x4c>)
 8001454:	69cb      	ldr	r3, [r1, #28]
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800145c:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800145e:	68d2      	ldr	r2, [r2, #12]
 8001460:	0750      	lsls	r0, r2, #29
 8001462:	d506      	bpl.n	8001472 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001464:	490b      	ldr	r1, [pc, #44]	; (8001494 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001466:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800146a:	69ca      	ldr	r2, [r1, #28]
 800146c:	f042 0201 	orr.w	r2, r2, #1
 8001470:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001472:	4a07      	ldr	r2, [pc, #28]	; (8001490 <FLASH_SetErrorCode+0x48>)
 8001474:	69d1      	ldr	r1, [r2, #28]
 8001476:	07c9      	lsls	r1, r1, #31
 8001478:	d508      	bpl.n	800148c <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <FLASH_SetErrorCode+0x4c>)
 800147c:	69c1      	ldr	r1, [r0, #28]
 800147e:	f041 0104 	orr.w	r1, r1, #4
 8001482:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001484:	69d1      	ldr	r1, [r2, #28]
 8001486:	f021 0101 	bic.w	r1, r1, #1
 800148a:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800148c:	60d3      	str	r3, [r2, #12]
 800148e:	4770      	bx	lr
 8001490:	40022000 	.word	0x40022000
 8001494:	20000240 	.word	0x20000240

08001498 <HAL_FLASH_EndOfOperationCallback>:
 8001498:	4770      	bx	lr

0800149a <HAL_FLASH_OperationErrorCallback>:
{
 800149a:	4770      	bx	lr

0800149c <HAL_FLASH_IRQHandler>:
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800149c:	4b42      	ldr	r3, [pc, #264]	; (80015a8 <HAL_FLASH_IRQHandler+0x10c>)
{
 800149e:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80014a0:	68da      	ldr	r2, [r3, #12]
 80014a2:	4c42      	ldr	r4, [pc, #264]	; (80015ac <HAL_FLASH_IRQHandler+0x110>)
 80014a4:	f012 0f10 	tst.w	r2, #16
 80014a8:	d102      	bne.n	80014b0 <HAL_FLASH_IRQHandler+0x14>
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	075a      	lsls	r2, r3, #29
 80014ae:	d50a      	bpl.n	80014c6 <HAL_FLASH_IRQHandler+0x2a>
    pFlash.Address = 0xFFFFFFFFU;
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
    addresstmp = pFlash.Address;
 80014b4:	68a5      	ldr	r5, [r4, #8]
    pFlash.Address = 0xFFFFFFFFU;
 80014b6:	60a3      	str	r3, [r4, #8]
    FLASH_SetErrorCode();
 80014b8:	f7ff ffc6 	bl	8001448 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80014bc:	4628      	mov	r0, r5
 80014be:	f7ff ffec 	bl	800149a <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	7023      	strb	r3, [r4, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80014c6:	4d38      	ldr	r5, [pc, #224]	; (80015a8 <HAL_FLASH_IRQHandler+0x10c>)
 80014c8:	68eb      	ldr	r3, [r5, #12]
 80014ca:	069b      	lsls	r3, r3, #26
 80014cc:	d518      	bpl.n	8001500 <HAL_FLASH_IRQHandler+0x64>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80014ce:	2320      	movs	r3, #32
 80014d0:	60eb      	str	r3, [r5, #12]
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 80014d2:	7823      	ldrb	r3, [r4, #0]
 80014d4:	b1a3      	cbz	r3, 8001500 <HAL_FLASH_IRQHandler+0x64>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 80014d6:	7823      	ldrb	r3, [r4, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d127      	bne.n	800152c <HAL_FLASH_IRQHandler+0x90>
        pFlash.DataRemaining--;
 80014dc:	6863      	ldr	r3, [r4, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 80014e2:	6863      	ldr	r3, [r4, #4]
 80014e4:	b1db      	cbz	r3, 800151e <HAL_FLASH_IRQHandler+0x82>
          addresstmp = pFlash.Address;
 80014e6:	68a0      	ldr	r0, [r4, #8]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80014e8:	f7ff ffd6 	bl	8001498 <HAL_FLASH_EndOfOperationCallback>
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 80014ec:	68a0      	ldr	r0, [r4, #8]
 80014ee:	f500 6080 	add.w	r0, r0, #1024	; 0x400
          pFlash.Address = addresstmp;
 80014f2:	60a0      	str	r0, [r4, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80014f4:	692b      	ldr	r3, [r5, #16]
 80014f6:	f023 0302 	bic.w	r3, r3, #2
 80014fa:	612b      	str	r3, [r5, #16]
          FLASH_PageErase(addresstmp);
 80014fc:	f000 f858 	bl	80015b0 <FLASH_PageErase>
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8001500:	7823      	ldrb	r3, [r4, #0]
 8001502:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8001506:	b94b      	cbnz	r3, 800151c <HAL_FLASH_IRQHandler+0x80>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8001508:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <HAL_FLASH_IRQHandler+0x10c>)
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	f022 0207 	bic.w	r2, r2, #7
 8001510:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	f422 52a0 	bic.w	r2, r2, #5120	; 0x1400
 8001518:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 800151a:	7621      	strb	r1, [r4, #24]
 800151c:	bd70      	pop	{r4, r5, r6, pc}
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 800151e:	f04f 30ff 	mov.w	r0, #4294967295
 8001522:	60a0      	str	r0, [r4, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001524:	7023      	strb	r3, [r4, #0]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001526:	f7ff ffb7 	bl	8001498 <HAL_FLASH_EndOfOperationCallback>
 800152a:	e7e9      	b.n	8001500 <HAL_FLASH_IRQHandler+0x64>
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800152c:	7823      	ldrb	r3, [r4, #0]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d109      	bne.n	8001546 <HAL_FLASH_IRQHandler+0xaa>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001532:	692b      	ldr	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0U);
 8001534:	2000      	movs	r0, #0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001536:	f023 0304 	bic.w	r3, r3, #4
 800153a:	612b      	str	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0U);
 800153c:	f7ff ffac 	bl	8001498 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001540:	2300      	movs	r3, #0
 8001542:	7023      	strb	r3, [r4, #0]
 8001544:	e7dc      	b.n	8001500 <HAL_FLASH_IRQHandler+0x64>
        pFlash.DataRemaining--;
 8001546:	6863      	ldr	r3, [r4, #4]
 8001548:	3b01      	subs	r3, #1
 800154a:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 800154c:	6863      	ldr	r3, [r4, #4]
 800154e:	b1d3      	cbz	r3, 8001586 <HAL_FLASH_IRQHandler+0xea>
          pFlash.Address += 2U;
 8001550:	68a3      	ldr	r3, [r4, #8]
 8001552:	3302      	adds	r3, #2
 8001554:	60a3      	str	r3, [r4, #8]
          addresstmp = pFlash.Address;
 8001556:	68a6      	ldr	r6, [r4, #8]
          pFlash.Data = (pFlash.Data >> 16U);
 8001558:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800155c:	0c02      	lsrs	r2, r0, #16
 800155e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001562:	0c0b      	lsrs	r3, r1, #16
 8001564:	e9c4 2304 	strd	r2, r3, [r4, #16]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001568:	692b      	ldr	r3, [r5, #16]
 800156a:	f023 0301 	bic.w	r3, r3, #1
 800156e:	612b      	str	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8001570:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001574:	2300      	movs	r3, #0
 8001576:	61e3      	str	r3, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001578:	692b      	ldr	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 800157a:	b292      	uxth	r2, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	612b      	str	r3, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 8001582:	8032      	strh	r2, [r6, #0]
 8001584:	e7bc      	b.n	8001500 <HAL_FLASH_IRQHandler+0x64>
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8001586:	7823      	ldrb	r3, [r4, #0]
 8001588:	2b03      	cmp	r3, #3
 800158a:	d106      	bne.n	800159a <HAL_FLASH_IRQHandler+0xfe>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800158c:	68a0      	ldr	r0, [r4, #8]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 800158e:	f7ff ff83 	bl	8001498 <HAL_FLASH_EndOfOperationCallback>
          pFlash.Address = 0xFFFFFFFFU;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	60a3      	str	r3, [r4, #8]
 8001598:	e7d2      	b.n	8001540 <HAL_FLASH_IRQHandler+0xa4>
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 800159a:	7823      	ldrb	r3, [r4, #0]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 800159c:	68a0      	ldr	r0, [r4, #8]
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 800159e:	2b04      	cmp	r3, #4
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 80015a0:	bf0c      	ite	eq
 80015a2:	3802      	subeq	r0, #2
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 80015a4:	3806      	subne	r0, #6
 80015a6:	e7f2      	b.n	800158e <HAL_FLASH_IRQHandler+0xf2>
 80015a8:	40022000 	.word	0x40022000
 80015ac:	20000240 	.word	0x20000240

080015b0 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015b0:	2200      	movs	r2, #0
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <FLASH_PageErase+0x1c>)
 80015b4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <FLASH_PageErase+0x20>)
 80015b8:	691a      	ldr	r2, [r3, #16]
 80015ba:	f042 0202 	orr.w	r2, r2, #2
 80015be:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80015c0:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015c8:	611a      	str	r2, [r3, #16]
 80015ca:	4770      	bx	lr
 80015cc:	20000240 	.word	0x20000240
 80015d0:	40022000 	.word	0x40022000

080015d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00U;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80015d8:	4aaa      	ldr	r2, [pc, #680]	; (8001884 <HAL_GPIO_Init+0x2b0>)
{
 80015da:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80015dc:	4290      	cmp	r0, r2
{
 80015de:	4604      	mov	r4, r0
 80015e0:	468b      	mov	fp, r1
 80015e2:	9201      	str	r2, [sp, #4]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0x3a>
 80015e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015ea:	4290      	cmp	r0, r2
 80015ec:	d00f      	beq.n	800160e <HAL_GPIO_Init+0x3a>
 80015ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015f2:	4290      	cmp	r0, r2
 80015f4:	d00b      	beq.n	800160e <HAL_GPIO_Init+0x3a>
 80015f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015fa:	4290      	cmp	r0, r2
 80015fc:	d007      	beq.n	800160e <HAL_GPIO_Init+0x3a>
 80015fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001602:	4290      	cmp	r0, r2
 8001604:	d003      	beq.n	800160e <HAL_GPIO_Init+0x3a>
 8001606:	21cd      	movs	r1, #205	; 0xcd
 8001608:	489f      	ldr	r0, [pc, #636]	; (8001888 <HAL_GPIO_Init+0x2b4>)
 800160a:	f7fe ff40 	bl	800048e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800160e:	f8db 2000 	ldr.w	r2, [fp]
 8001612:	b291      	uxth	r1, r2
 8001614:	b111      	cbz	r1, 800161c <HAL_GPIO_Init+0x48>
 8001616:	0c12      	lsrs	r2, r2, #16
 8001618:	0412      	lsls	r2, r2, #16
 800161a:	b11a      	cbz	r2, 8001624 <HAL_GPIO_Init+0x50>
 800161c:	21ce      	movs	r1, #206	; 0xce
 800161e:	489a      	ldr	r0, [pc, #616]	; (8001888 <HAL_GPIO_Init+0x2b4>)
 8001620:	f7fe ff35 	bl	800048e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001624:	f8db 2004 	ldr.w	r2, [fp, #4]
 8001628:	2a03      	cmp	r2, #3
 800162a:	d917      	bls.n	800165c <HAL_GPIO_Init+0x88>
 800162c:	f1a2 0111 	sub.w	r1, r2, #17
 8001630:	2901      	cmp	r1, #1
 8001632:	d913      	bls.n	800165c <HAL_GPIO_Init+0x88>
 8001634:	4895      	ldr	r0, [pc, #596]	; (800188c <HAL_GPIO_Init+0x2b8>)
 8001636:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800163a:	4281      	cmp	r1, r0
 800163c:	d00e      	beq.n	800165c <HAL_GPIO_Init+0x88>
 800163e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8001642:	4282      	cmp	r2, r0
 8001644:	d00a      	beq.n	800165c <HAL_GPIO_Init+0x88>
 8001646:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 800164a:	4281      	cmp	r1, r0
 800164c:	d006      	beq.n	800165c <HAL_GPIO_Init+0x88>
 800164e:	4990      	ldr	r1, [pc, #576]	; (8001890 <HAL_GPIO_Init+0x2bc>)
 8001650:	428a      	cmp	r2, r1
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x88>
 8001654:	21cf      	movs	r1, #207	; 0xcf
 8001656:	488c      	ldr	r0, [pc, #560]	; (8001888 <HAL_GPIO_Init+0x2b4>)
 8001658:	f7fe ff19 	bl	800048e <assert_failed>
{
 800165c:	2500      	movs	r5, #0
 800165e:	46a8      	mov	r8, r5
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001660:	f8df a244 	ldr.w	sl, [pc, #580]	; 80018a8 <HAL_GPIO_Init+0x2d4>
 8001664:	4e8b      	ldr	r6, [pc, #556]	; (8001894 <HAL_GPIO_Init+0x2c0>)
    ioposition = (0x01U << position);
 8001666:	2201      	movs	r2, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001668:	f8db 7000 	ldr.w	r7, [fp]
    ioposition = (0x01U << position);
 800166c:	fa02 f908 	lsl.w	r9, r2, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001670:	ea09 0707 	and.w	r7, r9, r7
    if (iocurrent == ioposition)
 8001674:	45b9      	cmp	r9, r7
 8001676:	f040 808f 	bne.w	8001798 <HAL_GPIO_Init+0x1c4>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800167a:	9b01      	ldr	r3, [sp, #4]
 800167c:	429c      	cmp	r4, r3
 800167e:	d011      	beq.n	80016a4 <HAL_GPIO_Init+0xd0>
 8001680:	4985      	ldr	r1, [pc, #532]	; (8001898 <HAL_GPIO_Init+0x2c4>)
 8001682:	428c      	cmp	r4, r1
 8001684:	d00e      	beq.n	80016a4 <HAL_GPIO_Init+0xd0>
 8001686:	4b85      	ldr	r3, [pc, #532]	; (800189c <HAL_GPIO_Init+0x2c8>)
 8001688:	429c      	cmp	r4, r3
 800168a:	d00b      	beq.n	80016a4 <HAL_GPIO_Init+0xd0>
 800168c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001690:	428c      	cmp	r4, r1
 8001692:	d007      	beq.n	80016a4 <HAL_GPIO_Init+0xd0>
 8001694:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001698:	428c      	cmp	r4, r1
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0xd0>
 800169c:	21dd      	movs	r1, #221	; 0xdd
 800169e:	487a      	ldr	r0, [pc, #488]	; (8001888 <HAL_GPIO_Init+0x2b4>)
 80016a0:	f7fe fef5 	bl	800048e <assert_failed>
      switch (GPIO_Init->Mode)
 80016a4:	f8db 1004 	ldr.w	r1, [fp, #4]
 80016a8:	2912      	cmp	r1, #18
 80016aa:	f000 80d3 	beq.w	8001854 <HAL_GPIO_Init+0x280>
 80016ae:	f200 808d 	bhi.w	80017cc <HAL_GPIO_Init+0x1f8>
 80016b2:	2902      	cmp	r1, #2
 80016b4:	f000 80c1 	beq.w	800183a <HAL_GPIO_Init+0x266>
 80016b8:	d877      	bhi.n	80017aa <HAL_GPIO_Init+0x1d6>
 80016ba:	2900      	cmp	r1, #0
 80016bc:	f000 8093 	beq.w	80017e6 <HAL_GPIO_Init+0x212>
 80016c0:	2901      	cmp	r1, #1
 80016c2:	f000 80ae 	beq.w	8001822 <HAL_GPIO_Init+0x24e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016c6:	2fff      	cmp	r7, #255	; 0xff
 80016c8:	bf82      	ittt	hi
 80016ca:	f108 4e80 	addhi.w	lr, r8, #1073741824	; 0x40000000
 80016ce:	f1ae 0e08 	subhi.w	lr, lr, #8
 80016d2:	ea4f 018e 	movhi.w	r1, lr, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016d6:	f04f 0e0f 	mov.w	lr, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016da:	bf9d      	ittte	ls
 80016dc:	4620      	movls	r0, r4
 80016de:	6822      	ldrls	r2, [r4, #0]
 80016e0:	ea4f 0188 	movls.w	r1, r8, lsl #2
 80016e4:	6862      	ldrhi	r2, [r4, #4]
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016e6:	fa0e fc01 	lsl.w	ip, lr, r1
 80016ea:	ea22 020c 	bic.w	r2, r2, ip
 80016ee:	fa05 f101 	lsl.w	r1, r5, r1
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016f2:	bf88      	it	hi
 80016f4:	1d20      	addhi	r0, r4, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016f6:	4311      	orrs	r1, r2
 80016f8:	6001      	str	r1, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016fa:	f8db 0004 	ldr.w	r0, [fp, #4]
 80016fe:	00c3      	lsls	r3, r0, #3
 8001700:	d54a      	bpl.n	8001798 <HAL_GPIO_Init+0x1c4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001702:	f8da 2018 	ldr.w	r2, [sl, #24]
 8001706:	f028 0103 	bic.w	r1, r8, #3
 800170a:	f042 0201 	orr.w	r2, r2, #1
 800170e:	f8ca 2018 	str.w	r2, [sl, #24]
 8001712:	f8da 2018 	ldr.w	r2, [sl, #24]
 8001716:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800171a:	f002 0201 	and.w	r2, r2, #1
 800171e:	9203      	str	r2, [sp, #12]
 8001720:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001724:	f008 0c03 	and.w	ip, r8, #3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001728:	9b01      	ldr	r3, [sp, #4]
        __HAL_RCC_AFIO_CLK_ENABLE();
 800172a:	9a03      	ldr	r2, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800172c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001730:	688a      	ldr	r2, [r1, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001732:	fa0e fe0c 	lsl.w	lr, lr, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001736:	429c      	cmp	r4, r3
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001738:	ea22 0e0e 	bic.w	lr, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800173c:	f000 809b 	beq.w	8001876 <HAL_GPIO_Init+0x2a2>
 8001740:	4a55      	ldr	r2, [pc, #340]	; (8001898 <HAL_GPIO_Init+0x2c4>)
 8001742:	4294      	cmp	r4, r2
 8001744:	f000 8099 	beq.w	800187a <HAL_GPIO_Init+0x2a6>
 8001748:	4b54      	ldr	r3, [pc, #336]	; (800189c <HAL_GPIO_Init+0x2c8>)
 800174a:	429c      	cmp	r4, r3
 800174c:	f000 8097 	beq.w	800187e <HAL_GPIO_Init+0x2aa>
 8001750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001754:	4294      	cmp	r4, r2
 8001756:	bf14      	ite	ne
 8001758:	2204      	movne	r2, #4
 800175a:	2203      	moveq	r2, #3
 800175c:	fa02 f20c 	lsl.w	r2, r2, ip
 8001760:	ea42 020e 	orr.w	r2, r2, lr
        AFIO->EXTICR[position >> 2U] = temp;
 8001764:	608a      	str	r2, [r1, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001766:	6832      	ldr	r2, [r6, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001768:	03c1      	lsls	r1, r0, #15
          SET_BIT(EXTI->IMR, iocurrent);
 800176a:	bf4c      	ite	mi
 800176c:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800176e:	43ba      	bicpl	r2, r7
 8001770:	6032      	str	r2, [r6, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001772:	6872      	ldr	r2, [r6, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001774:	0383      	lsls	r3, r0, #14
          SET_BIT(EXTI->EMR, iocurrent);
 8001776:	bf4c      	ite	mi
 8001778:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800177a:	43ba      	bicpl	r2, r7
 800177c:	6072      	str	r2, [r6, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800177e:	68b2      	ldr	r2, [r6, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001780:	02c1      	lsls	r1, r0, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8001782:	bf4c      	ite	mi
 8001784:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001786:	43ba      	bicpl	r2, r7
 8001788:	60b2      	str	r2, [r6, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800178a:	68f2      	ldr	r2, [r6, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800178c:	0283      	lsls	r3, r0, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 800178e:	bf4c      	ite	mi
 8001790:	4317      	orrmi	r7, r2
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001792:	ea22 0707 	bicpl.w	r7, r2, r7
 8001796:	60f7      	str	r7, [r6, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001798:	f108 0801 	add.w	r8, r8, #1
 800179c:	f1b8 0f10 	cmp.w	r8, #16
 80017a0:	f47f af61 	bne.w	8001666 <HAL_GPIO_Init+0x92>
        }
      }
    }
  }
}
 80017a4:	b005      	add	sp, #20
 80017a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80017aa:	2903      	cmp	r1, #3
 80017ac:	d05f      	beq.n	800186e <HAL_GPIO_Init+0x29a>
 80017ae:	2911      	cmp	r1, #17
 80017b0:	d189      	bne.n	80016c6 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80017b2:	f8db 200c 	ldr.w	r2, [fp, #12]
 80017b6:	3a01      	subs	r2, #1
 80017b8:	2a02      	cmp	r2, #2
 80017ba:	d903      	bls.n	80017c4 <HAL_GPIO_Init+0x1f0>
 80017bc:	21ec      	movs	r1, #236	; 0xec
 80017be:	4832      	ldr	r0, [pc, #200]	; (8001888 <HAL_GPIO_Init+0x2b4>)
 80017c0:	f7fe fe65 	bl	800048e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017c4:	f8db 500c 	ldr.w	r5, [fp, #12]
 80017c8:	3504      	adds	r5, #4
          break;
 80017ca:	e77c      	b.n	80016c6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80017cc:	4834      	ldr	r0, [pc, #208]	; (80018a0 <HAL_GPIO_Init+0x2cc>)
 80017ce:	4281      	cmp	r1, r0
 80017d0:	d009      	beq.n	80017e6 <HAL_GPIO_Init+0x212>
 80017d2:	d81c      	bhi.n	800180e <HAL_GPIO_Init+0x23a>
 80017d4:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80017d8:	4281      	cmp	r1, r0
 80017da:	d004      	beq.n	80017e6 <HAL_GPIO_Init+0x212>
 80017dc:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80017e0:	4281      	cmp	r1, r0
 80017e2:	f47f af70 	bne.w	80016c6 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80017e6:	f8db 1008 	ldr.w	r1, [fp, #8]
 80017ea:	2902      	cmp	r1, #2
 80017ec:	d904      	bls.n	80017f8 <HAL_GPIO_Init+0x224>
 80017ee:	f240 1107 	movw	r1, #263	; 0x107
 80017f2:	4825      	ldr	r0, [pc, #148]	; (8001888 <HAL_GPIO_Init+0x2b4>)
 80017f4:	f7fe fe4b 	bl	800048e <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017f8:	f8db 1008 	ldr.w	r1, [fp, #8]
 80017fc:	b3c9      	cbz	r1, 8001872 <HAL_GPIO_Init+0x29e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017fe:	2901      	cmp	r1, #1
            GPIOx->BSRR = ioposition;
 8001800:	bf0c      	ite	eq
 8001802:	f8c4 9010 	streq.w	r9, [r4, #16]
            GPIOx->BRR = ioposition;
 8001806:	f8c4 9014 	strne.w	r9, [r4, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800180a:	2508      	movs	r5, #8
 800180c:	e75b      	b.n	80016c6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800180e:	4825      	ldr	r0, [pc, #148]	; (80018a4 <HAL_GPIO_Init+0x2d0>)
 8001810:	4281      	cmp	r1, r0
 8001812:	d0e8      	beq.n	80017e6 <HAL_GPIO_Init+0x212>
 8001814:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8001818:	4281      	cmp	r1, r0
 800181a:	d0e4      	beq.n	80017e6 <HAL_GPIO_Init+0x212>
 800181c:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8001820:	e7de      	b.n	80017e0 <HAL_GPIO_Init+0x20c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001822:	f8db 200c 	ldr.w	r2, [fp, #12]
 8001826:	3a01      	subs	r2, #1
 8001828:	2a02      	cmp	r2, #2
 800182a:	d903      	bls.n	8001834 <HAL_GPIO_Init+0x260>
 800182c:	21e5      	movs	r1, #229	; 0xe5
 800182e:	4816      	ldr	r0, [pc, #88]	; (8001888 <HAL_GPIO_Init+0x2b4>)
 8001830:	f7fe fe2d 	bl	800048e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001834:	f8db 500c 	ldr.w	r5, [fp, #12]
          break;
 8001838:	e745      	b.n	80016c6 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800183a:	f8db 200c 	ldr.w	r2, [fp, #12]
 800183e:	3a01      	subs	r2, #1
 8001840:	2a02      	cmp	r2, #2
 8001842:	d903      	bls.n	800184c <HAL_GPIO_Init+0x278>
 8001844:	21f3      	movs	r1, #243	; 0xf3
 8001846:	4810      	ldr	r0, [pc, #64]	; (8001888 <HAL_GPIO_Init+0x2b4>)
 8001848:	f7fe fe21 	bl	800048e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800184c:	f8db 500c 	ldr.w	r5, [fp, #12]
 8001850:	3508      	adds	r5, #8
          break;
 8001852:	e738      	b.n	80016c6 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001854:	f8db 200c 	ldr.w	r2, [fp, #12]
 8001858:	3a01      	subs	r2, #1
 800185a:	2a02      	cmp	r2, #2
 800185c:	d903      	bls.n	8001866 <HAL_GPIO_Init+0x292>
 800185e:	21fa      	movs	r1, #250	; 0xfa
 8001860:	4809      	ldr	r0, [pc, #36]	; (8001888 <HAL_GPIO_Init+0x2b4>)
 8001862:	f7fe fe14 	bl	800048e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001866:	f8db 500c 	ldr.w	r5, [fp, #12]
 800186a:	350c      	adds	r5, #12
          break;
 800186c:	e72b      	b.n	80016c6 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800186e:	2500      	movs	r5, #0
 8001870:	e729      	b.n	80016c6 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001872:	2504      	movs	r5, #4
 8001874:	e727      	b.n	80016c6 <HAL_GPIO_Init+0xf2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001876:	2200      	movs	r2, #0
 8001878:	e770      	b.n	800175c <HAL_GPIO_Init+0x188>
 800187a:	2201      	movs	r2, #1
 800187c:	e76e      	b.n	800175c <HAL_GPIO_Init+0x188>
 800187e:	2202      	movs	r2, #2
 8001880:	e76c      	b.n	800175c <HAL_GPIO_Init+0x188>
 8001882:	bf00      	nop
 8001884:	40010800 	.word	0x40010800
 8001888:	080036ab 	.word	0x080036ab
 800188c:	10110000 	.word	0x10110000
 8001890:	10220000 	.word	0x10220000
 8001894:	40010400 	.word	0x40010400
 8001898:	40010c00 	.word	0x40010c00
 800189c:	40011000 	.word	0x40011000
 80018a0:	10210000 	.word	0x10210000
 80018a4:	10310000 	.word	0x10310000
 80018a8:	40021000 	.word	0x40021000

080018ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ac:	b570      	push	{r4, r5, r6, lr}
 80018ae:	4605      	mov	r5, r0
 80018b0:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80018b2:	460c      	mov	r4, r1
 80018b4:	b921      	cbnz	r1, 80018c0 <HAL_GPIO_WritePin+0x14>
 80018b6:	f240 11e3 	movw	r1, #483	; 0x1e3
 80018ba:	4808      	ldr	r0, [pc, #32]	; (80018dc <HAL_GPIO_WritePin+0x30>)
 80018bc:	f7fe fde7 	bl	800048e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80018c0:	2e01      	cmp	r6, #1
 80018c2:	d906      	bls.n	80018d2 <HAL_GPIO_WritePin+0x26>
 80018c4:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 80018c8:	4804      	ldr	r0, [pc, #16]	; (80018dc <HAL_GPIO_WritePin+0x30>)
 80018ca:	f7fe fde0 	bl	800048e <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ce:	612c      	str	r4, [r5, #16]
 80018d0:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
 80018d2:	2e00      	cmp	r6, #0
 80018d4:	d1fb      	bne.n	80018ce <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018d6:	0424      	lsls	r4, r4, #16
 80018d8:	e7f9      	b.n	80018ce <HAL_GPIO_WritePin+0x22>
 80018da:	bf00      	nop
 80018dc:	080036ab 	.word	0x080036ab

080018e0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80018e0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80018e2:	4604      	mov	r4, r0
 80018e4:	2800      	cmp	r0, #0
 80018e6:	d032      	beq.n	800194e <HAL_IWDG_Init+0x6e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 80018e8:	6802      	ldr	r2, [r0, #0]
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <HAL_IWDG_Init+0x74>)
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d003      	beq.n	80018f8 <HAL_IWDG_Init+0x18>
 80018f0:	21ad      	movs	r1, #173	; 0xad
 80018f2:	4819      	ldr	r0, [pc, #100]	; (8001958 <HAL_IWDG_Init+0x78>)
 80018f4:	f7fe fdcb 	bl	800048e <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 80018f8:	6863      	ldr	r3, [r4, #4]
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d903      	bls.n	8001906 <HAL_IWDG_Init+0x26>
 80018fe:	21ae      	movs	r1, #174	; 0xae
 8001900:	4815      	ldr	r0, [pc, #84]	; (8001958 <HAL_IWDG_Init+0x78>)
 8001902:	f7fe fdc4 	bl	800048e <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 8001906:	68a3      	ldr	r3, [r4, #8]
 8001908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800190c:	d303      	bcc.n	8001916 <HAL_IWDG_Init+0x36>
 800190e:	21af      	movs	r1, #175	; 0xaf
 8001910:	4811      	ldr	r0, [pc, #68]	; (8001958 <HAL_IWDG_Init+0x78>)
 8001912:	f7fe fdbc 	bl	800048e <assert_failed>

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8001916:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800191a:	6823      	ldr	r3, [r4, #0]
 800191c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800191e:	f245 5255 	movw	r2, #21845	; 0x5555
 8001922:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001924:	6862      	ldr	r2, [r4, #4]
 8001926:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001928:	68a2      	ldr	r2, [r4, #8]
 800192a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800192c:	f7ff f928 	bl	8000b80 <HAL_GetTick>
 8001930:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != RESET)
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	68d8      	ldr	r0, [r3, #12]
 8001936:	b918      	cbnz	r0, 8001940 <HAL_IWDG_Init+0x60>
      return HAL_TIMEOUT;
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001938:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800193c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800193e:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001940:	f7ff f91e 	bl	8000b80 <HAL_GetTick>
 8001944:	1b40      	subs	r0, r0, r5
 8001946:	2830      	cmp	r0, #48	; 0x30
 8001948:	d9f3      	bls.n	8001932 <HAL_IWDG_Init+0x52>
      return HAL_TIMEOUT;
 800194a:	2003      	movs	r0, #3
}
 800194c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800194e:	2001      	movs	r0, #1
 8001950:	bd38      	pop	{r3, r4, r5, pc}
 8001952:	bf00      	nop
 8001954:	40003000 	.word	0x40003000
 8001958:	080036e4 	.word	0x080036e4

0800195c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800195c:	4770      	bx	lr
	...

08001960 <HAL_PWR_PVD_IRQHandler>:
{
 8001960:	b510      	push	{r4, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001962:	4c05      	ldr	r4, [pc, #20]	; (8001978 <HAL_PWR_PVD_IRQHandler+0x18>)
 8001964:	6963      	ldr	r3, [r4, #20]
 8001966:	03db      	lsls	r3, r3, #15
 8001968:	d504      	bpl.n	8001974 <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 800196a:	f7ff fff7 	bl	800195c <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800196e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001972:	6163      	str	r3, [r4, #20]
 8001974:	bd10      	pop	{r4, pc}
 8001976:	bf00      	nop
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800197c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   uint32_t tickstart = 0U;
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 8001980:	4604      	mov	r4, r0
 8001982:	b920      	cbnz	r0, 800198e <HAL_RCC_OscConfig+0x12>
 8001984:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8001988:	48a5      	ldr	r0, [pc, #660]	; (8001c20 <HAL_RCC_OscConfig+0x2a4>)
 800198a:	f7fe fd80 	bl	800048e <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	b133      	cbz	r3, 80019a0 <HAL_RCC_OscConfig+0x24>
 8001992:	071a      	lsls	r2, r3, #28
 8001994:	d104      	bne.n	80019a0 <HAL_RCC_OscConfig+0x24>
 8001996:	f240 1171 	movw	r1, #369	; 0x171
 800199a:	48a1      	ldr	r0, [pc, #644]	; (8001c20 <HAL_RCC_OscConfig+0x2a4>)
 800199c:	f7fe fd77 	bl	800048e <assert_failed>
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	07db      	lsls	r3, r3, #31
 80019a4:	d418      	bmi.n	80019d8 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	079f      	lsls	r7, r3, #30
 80019aa:	d472      	bmi.n	8001a92 <HAL_RCC_OscConfig+0x116>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	0719      	lsls	r1, r3, #28
 80019b0:	f100 80b9 	bmi.w	8001b26 <HAL_RCC_OscConfig+0x1aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	075a      	lsls	r2, r3, #29
 80019b8:	f100 80eb 	bmi.w	8001b92 <HAL_RCC_OscConfig+0x216>
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80019bc:	69e3      	ldr	r3, [r4, #28]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d904      	bls.n	80019cc <HAL_RCC_OscConfig+0x50>
 80019c2:	f240 21b9 	movw	r1, #697	; 0x2b9
 80019c6:	4896      	ldr	r0, [pc, #600]	; (8001c20 <HAL_RCC_OscConfig+0x2a4>)
 80019c8:	f7fe fd61 	bl	800048e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019cc:	69e2      	ldr	r2, [r4, #28]
 80019ce:	2a00      	cmp	r2, #0
 80019d0:	f040 815e 	bne.w	8001c90 <HAL_RCC_OscConfig+0x314>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80019d4:	2000      	movs	r0, #0
 80019d6:	e020      	b.n	8001a1a <HAL_RCC_OscConfig+0x9e>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80019d8:	6863      	ldr	r3, [r4, #4]
 80019da:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 80019de:	d007      	beq.n	80019f0 <HAL_RCC_OscConfig+0x74>
 80019e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e4:	d004      	beq.n	80019f0 <HAL_RCC_OscConfig+0x74>
 80019e6:	f240 1177 	movw	r1, #375	; 0x177
 80019ea:	488d      	ldr	r0, [pc, #564]	; (8001c20 <HAL_RCC_OscConfig+0x2a4>)
 80019ec:	f7fe fd4f 	bl	800048e <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019f0:	4d8c      	ldr	r5, [pc, #560]	; (8001c24 <HAL_RCC_OscConfig+0x2a8>)
 80019f2:	686b      	ldr	r3, [r5, #4]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d007      	beq.n	8001a0c <HAL_RCC_OscConfig+0x90>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019fc:	686b      	ldr	r3, [r5, #4]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0xa4>
 8001a06:	686b      	ldr	r3, [r5, #4]
 8001a08:	03de      	lsls	r6, r3, #15
 8001a0a:	d509      	bpl.n	8001a20 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	682b      	ldr	r3, [r5, #0]
 8001a0e:	039d      	lsls	r5, r3, #14
 8001a10:	d5c9      	bpl.n	80019a6 <HAL_RCC_OscConfig+0x2a>
 8001a12:	6863      	ldr	r3, [r4, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1c6      	bne.n	80019a6 <HAL_RCC_OscConfig+0x2a>
        return HAL_ERROR;
 8001a18:	2001      	movs	r0, #1
}
 8001a1a:	b002      	add	sp, #8
 8001a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a20:	6863      	ldr	r3, [r4, #4]
 8001a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a26:	d110      	bne.n	8001a4a <HAL_RCC_OscConfig+0xce>
 8001a28:	682b      	ldr	r3, [r5, #0]
 8001a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a30:	f7ff f8a6 	bl	8000b80 <HAL_GetTick>
 8001a34:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a36:	682b      	ldr	r3, [r5, #0]
 8001a38:	0398      	lsls	r0, r3, #14
 8001a3a:	d4b4      	bmi.n	80019a6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff f8a0 	bl	8000b80 <HAL_GetTick>
 8001a40:	1b80      	subs	r0, r0, r6
 8001a42:	2864      	cmp	r0, #100	; 0x64
 8001a44:	d9f7      	bls.n	8001a36 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8001a46:	2003      	movs	r0, #3
 8001a48:	e7e7      	b.n	8001a1a <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4a:	b99b      	cbnz	r3, 8001a74 <HAL_RCC_OscConfig+0xf8>
 8001a4c:	682b      	ldr	r3, [r5, #0]
 8001a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a52:	602b      	str	r3, [r5, #0]
 8001a54:	682b      	ldr	r3, [r5, #0]
 8001a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f890 	bl	8000b80 <HAL_GetTick>
 8001a60:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	682b      	ldr	r3, [r5, #0]
 8001a64:	0399      	lsls	r1, r3, #14
 8001a66:	d59e      	bpl.n	80019a6 <HAL_RCC_OscConfig+0x2a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff f88a 	bl	8000b80 <HAL_GetTick>
 8001a6c:	1b80      	subs	r0, r0, r6
 8001a6e:	2864      	cmp	r0, #100	; 0x64
 8001a70:	d9f7      	bls.n	8001a62 <HAL_RCC_OscConfig+0xe6>
 8001a72:	e7e8      	b.n	8001a46 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a78:	682b      	ldr	r3, [r5, #0]
 8001a7a:	d103      	bne.n	8001a84 <HAL_RCC_OscConfig+0x108>
 8001a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a80:	602b      	str	r3, [r5, #0]
 8001a82:	e7d1      	b.n	8001a28 <HAL_RCC_OscConfig+0xac>
 8001a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a88:	602b      	str	r3, [r5, #0]
 8001a8a:	682b      	ldr	r3, [r5, #0]
 8001a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a90:	e7cd      	b.n	8001a2e <HAL_RCC_OscConfig+0xb2>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001a92:	6923      	ldr	r3, [r4, #16]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d904      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x126>
 8001a98:	f240 11ab 	movw	r1, #427	; 0x1ab
 8001a9c:	4860      	ldr	r0, [pc, #384]	; (8001c20 <HAL_RCC_OscConfig+0x2a4>)
 8001a9e:	f7fe fcf6 	bl	800048e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001aa2:	6963      	ldr	r3, [r4, #20]
 8001aa4:	2b1f      	cmp	r3, #31
 8001aa6:	d904      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x136>
 8001aa8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001aac:	485c      	ldr	r0, [pc, #368]	; (8001c20 <HAL_RCC_OscConfig+0x2a4>)
 8001aae:	f7fe fcee 	bl	800048e <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ab2:	4d5c      	ldr	r5, [pc, #368]	; (8001c24 <HAL_RCC_OscConfig+0x2a8>)
 8001ab4:	686b      	ldr	r3, [r5, #4]
 8001ab6:	f013 0f0c 	tst.w	r3, #12
 8001aba:	d007      	beq.n	8001acc <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001abc:	686b      	ldr	r3, [r5, #4]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d110      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x16c>
 8001ac6:	686b      	ldr	r3, [r5, #4]
 8001ac8:	03da      	lsls	r2, r3, #15
 8001aca:	d40d      	bmi.n	8001ae8 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001acc:	682b      	ldr	r3, [r5, #0]
 8001ace:	079b      	lsls	r3, r3, #30
 8001ad0:	d502      	bpl.n	8001ad8 <HAL_RCC_OscConfig+0x15c>
 8001ad2:	6923      	ldr	r3, [r4, #16]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d19f      	bne.n	8001a18 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad8:	682b      	ldr	r3, [r5, #0]
 8001ada:	6962      	ldr	r2, [r4, #20]
 8001adc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ae0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ae4:	602b      	str	r3, [r5, #0]
 8001ae6:	e761      	b.n	80019ac <HAL_RCC_OscConfig+0x30>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae8:	6922      	ldr	r2, [r4, #16]
 8001aea:	4b4f      	ldr	r3, [pc, #316]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	b16a      	cbz	r2, 8001b0a <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_ENABLE();
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001af2:	f7ff f845 	bl	8000b80 <HAL_GetTick>
 8001af6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	682b      	ldr	r3, [r5, #0]
 8001afa:	079f      	lsls	r7, r3, #30
 8001afc:	d4ec      	bmi.n	8001ad8 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001afe:	f7ff f83f 	bl	8000b80 <HAL_GetTick>
 8001b02:	1b80      	subs	r0, r0, r6
 8001b04:	2802      	cmp	r0, #2
 8001b06:	d9f7      	bls.n	8001af8 <HAL_RCC_OscConfig+0x17c>
 8001b08:	e79d      	b.n	8001a46 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_DISABLE();
 8001b0a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b0c:	f7ff f838 	bl	8000b80 <HAL_GetTick>
 8001b10:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b12:	682b      	ldr	r3, [r5, #0]
 8001b14:	0798      	lsls	r0, r3, #30
 8001b16:	f57f af49 	bpl.w	80019ac <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b1a:	f7ff f831 	bl	8000b80 <HAL_GetTick>
 8001b1e:	1b80      	subs	r0, r0, r6
 8001b20:	2802      	cmp	r0, #2
 8001b22:	d9f6      	bls.n	8001b12 <HAL_RCC_OscConfig+0x196>
 8001b24:	e78f      	b.n	8001a46 <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001b26:	69a3      	ldr	r3, [r4, #24]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d904      	bls.n	8001b36 <HAL_RCC_OscConfig+0x1ba>
 8001b2c:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8001b30:	483b      	ldr	r0, [pc, #236]	; (8001c20 <HAL_RCC_OscConfig+0x2a4>)
 8001b32:	f7fe fcac 	bl	800048e <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b36:	69a2      	ldr	r2, [r4, #24]
 8001b38:	4d3a      	ldr	r5, [pc, #232]	; (8001c24 <HAL_RCC_OscConfig+0x2a8>)
 8001b3a:	4b3c      	ldr	r3, [pc, #240]	; (8001c2c <HAL_RCC_OscConfig+0x2b0>)
 8001b3c:	b1da      	cbz	r2, 8001b76 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b42:	f7ff f81d 	bl	8000b80 <HAL_GetTick>
 8001b46:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001b4a:	079b      	lsls	r3, r3, #30
 8001b4c:	d50d      	bpl.n	8001b6a <HAL_RCC_OscConfig+0x1ee>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b4e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001b52:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <HAL_RCC_OscConfig+0x2b4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b5a:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001b5c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001b5e:	9b01      	ldr	r3, [sp, #4]
 8001b60:	1e5a      	subs	r2, r3, #1
 8001b62:	9201      	str	r2, [sp, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f9      	bne.n	8001b5c <HAL_RCC_OscConfig+0x1e0>
 8001b68:	e724      	b.n	80019b4 <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6a:	f7ff f809 	bl	8000b80 <HAL_GetTick>
 8001b6e:	1b80      	subs	r0, r0, r6
 8001b70:	2802      	cmp	r0, #2
 8001b72:	d9e9      	bls.n	8001b48 <HAL_RCC_OscConfig+0x1cc>
 8001b74:	e767      	b.n	8001a46 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_LSI_DISABLE();
 8001b76:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b78:	f7ff f802 	bl	8000b80 <HAL_GetTick>
 8001b7c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001b80:	079f      	lsls	r7, r3, #30
 8001b82:	f57f af17 	bpl.w	80019b4 <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b86:	f7fe fffb 	bl	8000b80 <HAL_GetTick>
 8001b8a:	1b80      	subs	r0, r0, r6
 8001b8c:	2802      	cmp	r0, #2
 8001b8e:	d9f6      	bls.n	8001b7e <HAL_RCC_OscConfig+0x202>
 8001b90:	e759      	b.n	8001a46 <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001b92:	68e3      	ldr	r3, [r4, #12]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d906      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x22a>
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d004      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x22a>
 8001b9c:	f240 211b 	movw	r1, #539	; 0x21b
 8001ba0:	481f      	ldr	r0, [pc, #124]	; (8001c20 <HAL_RCC_OscConfig+0x2a4>)
 8001ba2:	f7fe fc74 	bl	800048e <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba6:	4d1f      	ldr	r5, [pc, #124]	; (8001c24 <HAL_RCC_OscConfig+0x2a8>)
 8001ba8:	69eb      	ldr	r3, [r5, #28]
 8001baa:	00d8      	lsls	r0, r3, #3
 8001bac:	d424      	bmi.n	8001bf8 <HAL_RCC_OscConfig+0x27c>
      pwrclkchanged = SET;
 8001bae:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb0:	69eb      	ldr	r3, [r5, #28]
 8001bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	61eb      	str	r3, [r5, #28]
 8001bb8:	69eb      	ldr	r3, [r5, #28]
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc2:	4e1c      	ldr	r6, [pc, #112]	; (8001c34 <HAL_RCC_OscConfig+0x2b8>)
 8001bc4:	6833      	ldr	r3, [r6, #0]
 8001bc6:	05d9      	lsls	r1, r3, #23
 8001bc8:	d518      	bpl.n	8001bfc <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bca:	68e3      	ldr	r3, [r4, #12]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d133      	bne.n	8001c38 <HAL_RCC_OscConfig+0x2bc>
 8001bd0:	6a2b      	ldr	r3, [r5, #32]
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001bd8:	f7fe ffd2 	bl	8000b80 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bdc:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001be0:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be2:	6a2b      	ldr	r3, [r5, #32]
 8001be4:	079b      	lsls	r3, r3, #30
 8001be6:	d54c      	bpl.n	8001c82 <HAL_RCC_OscConfig+0x306>
    if(pwrclkchanged == SET)
 8001be8:	2f00      	cmp	r7, #0
 8001bea:	f43f aee7 	beq.w	80019bc <HAL_RCC_OscConfig+0x40>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bee:	69eb      	ldr	r3, [r5, #28]
 8001bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	61eb      	str	r3, [r5, #28]
 8001bf6:	e6e1      	b.n	80019bc <HAL_RCC_OscConfig+0x40>
    FlagStatus       pwrclkchanged = RESET;
 8001bf8:	2700      	movs	r7, #0
 8001bfa:	e7e2      	b.n	8001bc2 <HAL_RCC_OscConfig+0x246>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfc:	6833      	ldr	r3, [r6, #0]
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c02:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001c04:	f7fe ffbc 	bl	8000b80 <HAL_GetTick>
 8001c08:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0a:	6833      	ldr	r3, [r6, #0]
 8001c0c:	05da      	lsls	r2, r3, #23
 8001c0e:	d4dc      	bmi.n	8001bca <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c10:	f7fe ffb6 	bl	8000b80 <HAL_GetTick>
 8001c14:	eba0 0008 	sub.w	r0, r0, r8
 8001c18:	2864      	cmp	r0, #100	; 0x64
 8001c1a:	d9f6      	bls.n	8001c0a <HAL_RCC_OscConfig+0x28e>
 8001c1c:	e713      	b.n	8001a46 <HAL_RCC_OscConfig+0xca>
 8001c1e:	bf00      	nop
 8001c20:	0800371d 	.word	0x0800371d
 8001c24:	40021000 	.word	0x40021000
 8001c28:	42420000 	.word	0x42420000
 8001c2c:	42420480 	.word	0x42420480
 8001c30:	20000000 	.word	0x20000000
 8001c34:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c38:	b9ab      	cbnz	r3, 8001c66 <HAL_RCC_OscConfig+0x2ea>
 8001c3a:	6a2b      	ldr	r3, [r5, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c3c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c40:	f023 0301 	bic.w	r3, r3, #1
 8001c44:	622b      	str	r3, [r5, #32]
 8001c46:	6a2b      	ldr	r3, [r5, #32]
 8001c48:	f023 0304 	bic.w	r3, r3, #4
 8001c4c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001c4e:	f7fe ff97 	bl	8000b80 <HAL_GetTick>
 8001c52:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c54:	6a2b      	ldr	r3, [r5, #32]
 8001c56:	0798      	lsls	r0, r3, #30
 8001c58:	d5c6      	bpl.n	8001be8 <HAL_RCC_OscConfig+0x26c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7fe ff91 	bl	8000b80 <HAL_GetTick>
 8001c5e:	1b80      	subs	r0, r0, r6
 8001c60:	4540      	cmp	r0, r8
 8001c62:	d9f7      	bls.n	8001c54 <HAL_RCC_OscConfig+0x2d8>
 8001c64:	e6ef      	b.n	8001a46 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c66:	2b05      	cmp	r3, #5
 8001c68:	6a2b      	ldr	r3, [r5, #32]
 8001c6a:	d103      	bne.n	8001c74 <HAL_RCC_OscConfig+0x2f8>
 8001c6c:	f043 0304 	orr.w	r3, r3, #4
 8001c70:	622b      	str	r3, [r5, #32]
 8001c72:	e7ad      	b.n	8001bd0 <HAL_RCC_OscConfig+0x254>
 8001c74:	f023 0301 	bic.w	r3, r3, #1
 8001c78:	622b      	str	r3, [r5, #32]
 8001c7a:	6a2b      	ldr	r3, [r5, #32]
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	e7a9      	b.n	8001bd6 <HAL_RCC_OscConfig+0x25a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7fe ff7d 	bl	8000b80 <HAL_GetTick>
 8001c86:	eba0 0008 	sub.w	r0, r0, r8
 8001c8a:	42b0      	cmp	r0, r6
 8001c8c:	d9a9      	bls.n	8001be2 <HAL_RCC_OscConfig+0x266>
 8001c8e:	e6da      	b.n	8001a46 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c90:	4d38      	ldr	r5, [pc, #224]	; (8001d74 <HAL_RCC_OscConfig+0x3f8>)
 8001c92:	686b      	ldr	r3, [r5, #4]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	f43f aebd 	beq.w	8001a18 <HAL_RCC_OscConfig+0x9c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c9e:	2a02      	cmp	r2, #2
 8001ca0:	4e35      	ldr	r6, [pc, #212]	; (8001d78 <HAL_RCC_OscConfig+0x3fc>)
 8001ca2:	d157      	bne.n	8001d54 <HAL_RCC_OscConfig+0x3d8>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001ca4:	6a23      	ldr	r3, [r4, #32]
 8001ca6:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8001caa:	d004      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x33a>
 8001cac:	f240 21c2 	movw	r1, #706	; 0x2c2
 8001cb0:	4832      	ldr	r0, [pc, #200]	; (8001d7c <HAL_RCC_OscConfig+0x400>)
 8001cb2:	f7fe fbec 	bl	800048e <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001cb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cb8:	f433 2240 	bics.w	r2, r3, #786432	; 0xc0000
 8001cbc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8001cc0:	d010      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x368>
 8001cc2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001cc6:	d00d      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x368>
 8001cc8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001ccc:	d00a      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x368>
 8001cce:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8001cd2:	d007      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x368>
 8001cd4:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001cd8:	d004      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x368>
 8001cda:	f240 21c3 	movw	r1, #707	; 0x2c3
 8001cde:	4827      	ldr	r0, [pc, #156]	; (8001d7c <HAL_RCC_OscConfig+0x400>)
 8001ce0:	f7fe fbd5 	bl	800048e <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001ce8:	f7fe ff4a 	bl	8000b80 <HAL_GetTick>
 8001cec:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cee:	682b      	ldr	r3, [r5, #0]
 8001cf0:	0199      	lsls	r1, r3, #6
 8001cf2:	d429      	bmi.n	8001d48 <HAL_RCC_OscConfig+0x3cc>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cf4:	6a23      	ldr	r3, [r4, #32]
 8001cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfa:	d10e      	bne.n	8001d1a <HAL_RCC_OscConfig+0x39e>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8001cfc:	68a3      	ldr	r3, [r4, #8]
 8001cfe:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8001d02:	d004      	beq.n	8001d0e <HAL_RCC_OscConfig+0x392>
 8001d04:	f240 21d9 	movw	r1, #729	; 0x2d9
 8001d08:	481c      	ldr	r0, [pc, #112]	; (8001d7c <HAL_RCC_OscConfig+0x400>)
 8001d0a:	f7fe fbc0 	bl	800048e <assert_failed>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d0e:	686b      	ldr	r3, [r5, #4]
 8001d10:	68a2      	ldr	r2, [r4, #8]
 8001d12:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001d16:	4313      	orrs	r3, r2
 8001d18:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d1a:	6a23      	ldr	r3, [r4, #32]
 8001d1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d1e:	686a      	ldr	r2, [r5, #4]
 8001d20:	430b      	orrs	r3, r1
 8001d22:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001d26:	4313      	orrs	r3, r2
 8001d28:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001d2e:	f7fe ff27 	bl	8000b80 <HAL_GetTick>
 8001d32:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d34:	682b      	ldr	r3, [r5, #0]
 8001d36:	019a      	lsls	r2, r3, #6
 8001d38:	f53f ae4c 	bmi.w	80019d4 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7fe ff20 	bl	8000b80 <HAL_GetTick>
 8001d40:	1b00      	subs	r0, r0, r4
 8001d42:	2802      	cmp	r0, #2
 8001d44:	d9f6      	bls.n	8001d34 <HAL_RCC_OscConfig+0x3b8>
 8001d46:	e67e      	b.n	8001a46 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d48:	f7fe ff1a 	bl	8000b80 <HAL_GetTick>
 8001d4c:	1bc0      	subs	r0, r0, r7
 8001d4e:	2802      	cmp	r0, #2
 8001d50:	d9cd      	bls.n	8001cee <HAL_RCC_OscConfig+0x372>
 8001d52:	e678      	b.n	8001a46 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_PLL_DISABLE();
 8001d54:	2300      	movs	r3, #0
 8001d56:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001d58:	f7fe ff12 	bl	8000b80 <HAL_GetTick>
 8001d5c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5e:	682b      	ldr	r3, [r5, #0]
 8001d60:	019b      	lsls	r3, r3, #6
 8001d62:	f57f ae37 	bpl.w	80019d4 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d66:	f7fe ff0b 	bl	8000b80 <HAL_GetTick>
 8001d6a:	1b00      	subs	r0, r0, r4
 8001d6c:	2802      	cmp	r0, #2
 8001d6e:	d9f6      	bls.n	8001d5e <HAL_RCC_OscConfig+0x3e2>
 8001d70:	e669      	b.n	8001a46 <HAL_RCC_OscConfig+0xca>
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	42420060 	.word	0x42420060
 8001d7c:	0800371d 	.word	0x0800371d

08001d80 <HAL_RCC_GetSysClockFreq>:
{
 8001d80:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d82:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001d84:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d86:	ac02      	add	r4, sp, #8
 8001d88:	f103 0510 	add.w	r5, r3, #16
 8001d8c:	4622      	mov	r2, r4
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	6859      	ldr	r1, [r3, #4]
 8001d92:	3308      	adds	r3, #8
 8001d94:	c203      	stmia	r2!, {r0, r1}
 8001d96:	42ab      	cmp	r3, r5
 8001d98:	4614      	mov	r4, r2
 8001d9a:	d1f7      	bne.n	8001d8c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f88d 3004 	strb.w	r3, [sp, #4]
 8001da2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001da4:	4911      	ldr	r1, [pc, #68]	; (8001dec <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001da6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001daa:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001dac:	f003 020c 	and.w	r2, r3, #12
 8001db0:	2a08      	cmp	r2, #8
 8001db2:	d117      	bne.n	8001de4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001db4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001db8:	a806      	add	r0, sp, #24
 8001dba:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dbc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dbe:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dc2:	d50c      	bpl.n	8001dde <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dc4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dc6:	480a      	ldr	r0, [pc, #40]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dc8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dcc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dce:	aa06      	add	r2, sp, #24
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dd6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001dda:	b007      	add	sp, #28
 8001ddc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dde:	4805      	ldr	r0, [pc, #20]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x74>)
 8001de0:	4350      	muls	r0, r2
 8001de2:	e7fa      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001de6:	e7f8      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x5a>
 8001de8:	080035a0 	.word	0x080035a0
 8001dec:	40021000 	.word	0x40021000
 8001df0:	007a1200 	.word	0x007a1200
 8001df4:	003d0900 	.word	0x003d0900

08001df8 <HAL_RCC_ClockConfig>:
{
 8001df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dfc:	460e      	mov	r6, r1
  assert_param(RCC_ClkInitStruct != NULL);
 8001dfe:	4604      	mov	r4, r0
 8001e00:	b920      	cbnz	r0, 8001e0c <HAL_RCC_ClockConfig+0x14>
 8001e02:	f240 312e 	movw	r1, #814	; 0x32e
 8001e06:	487f      	ldr	r0, [pc, #508]	; (8002004 <HAL_RCC_ClockConfig+0x20c>)
 8001e08:	f7fe fb41 	bl	800048e <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	071d      	lsls	r5, r3, #28
 8001e10:	d104      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x24>
 8001e12:	f240 312f 	movw	r1, #815	; 0x32f
 8001e16:	487b      	ldr	r0, [pc, #492]	; (8002004 <HAL_RCC_ClockConfig+0x20c>)
 8001e18:	f7fe fb39 	bl	800048e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001e1c:	2e02      	cmp	r6, #2
 8001e1e:	d904      	bls.n	8001e2a <HAL_RCC_ClockConfig+0x32>
 8001e20:	f44f 714c 	mov.w	r1, #816	; 0x330
 8001e24:	4877      	ldr	r0, [pc, #476]	; (8002004 <HAL_RCC_ClockConfig+0x20c>)
 8001e26:	f7fe fb32 	bl	800048e <assert_failed>
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e2a:	4a77      	ldr	r2, [pc, #476]	; (8002008 <HAL_RCC_ClockConfig+0x210>)
 8001e2c:	6813      	ldr	r3, [r2, #0]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	429e      	cmp	r6, r3
 8001e34:	d83d      	bhi.n	8001eb2 <HAL_RCC_ClockConfig+0xba>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	0798      	lsls	r0, r3, #30
 8001e3a:	d447      	bmi.n	8001ecc <HAL_RCC_ClockConfig+0xd4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	07da      	lsls	r2, r3, #31
 8001e40:	d470      	bmi.n	8001f24 <HAL_RCC_ClockConfig+0x12c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e42:	4a71      	ldr	r2, [pc, #452]	; (8002008 <HAL_RCC_ClockConfig+0x210>)
 8001e44:	6813      	ldr	r3, [r2, #0]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	429e      	cmp	r6, r3
 8001e4c:	f0c0 80b5 	bcc.w	8001fba <HAL_RCC_ClockConfig+0x1c2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	6823      	ldr	r3, [r4, #0]
 8001e52:	4d6e      	ldr	r5, [pc, #440]	; (800200c <HAL_RCC_ClockConfig+0x214>)
 8001e54:	f013 0f04 	tst.w	r3, #4
 8001e58:	f040 80bb 	bne.w	8001fd2 <HAL_RCC_ClockConfig+0x1da>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	071b      	lsls	r3, r3, #28
 8001e60:	d517      	bpl.n	8001e92 <HAL_RCC_ClockConfig+0x9a>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001e62:	6923      	ldr	r3, [r4, #16]
 8001e64:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8001e68:	d00c      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x8c>
 8001e6a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001e6e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8001e72:	d007      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x8c>
 8001e74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001e78:	d004      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x8c>
 8001e7a:	f44f 716e 	mov.w	r1, #952	; 0x3b8
 8001e7e:	4861      	ldr	r0, [pc, #388]	; (8002004 <HAL_RCC_ClockConfig+0x20c>)
 8001e80:	f7fe fb05 	bl	800048e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e84:	686b      	ldr	r3, [r5, #4]
 8001e86:	6922      	ldr	r2, [r4, #16]
 8001e88:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001e8c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e90:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e92:	f7ff ff75 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001e96:	686b      	ldr	r3, [r5, #4]
 8001e98:	4a5d      	ldr	r2, [pc, #372]	; (8002010 <HAL_RCC_ClockConfig+0x218>)
 8001e9a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	40d8      	lsrs	r0, r3
 8001ea2:	4b5c      	ldr	r3, [pc, #368]	; (8002014 <HAL_RCC_ClockConfig+0x21c>)
 8001ea4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7fe fe28 	bl	8000afc <HAL_InitTick>
  return HAL_OK;
 8001eac:	2000      	movs	r0, #0
}
 8001eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb2:	6813      	ldr	r3, [r2, #0]
 8001eb4:	f023 0307 	bic.w	r3, r3, #7
 8001eb8:	4333      	orrs	r3, r6
 8001eba:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ebc:	6813      	ldr	r3, [r2, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	429e      	cmp	r6, r3
 8001ec4:	d0b7      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ecc:	4d4f      	ldr	r5, [pc, #316]	; (800200c <HAL_RCC_ClockConfig+0x214>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ece:	f013 0f04 	tst.w	r3, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed2:	bf1e      	ittt	ne
 8001ed4:	686a      	ldrne	r2, [r5, #4]
 8001ed6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001eda:	606a      	strne	r2, [r5, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001edc:	0719      	lsls	r1, r3, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ede:	bf42      	ittt	mi
 8001ee0:	686b      	ldrmi	r3, [r5, #4]
 8001ee2:	f443 5360 	orrmi.w	r3, r3, #14336	; 0x3800
 8001ee6:	606b      	strmi	r3, [r5, #4]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001ee8:	68a3      	ldr	r3, [r4, #8]
 8001eea:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8001eee:	d012      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x11e>
 8001ef0:	f023 0220 	bic.w	r2, r3, #32
 8001ef4:	2a90      	cmp	r2, #144	; 0x90
 8001ef6:	d00e      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x11e>
 8001ef8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001efc:	2aa0      	cmp	r2, #160	; 0xa0
 8001efe:	d00a      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x11e>
 8001f00:	f023 0210 	bic.w	r2, r3, #16
 8001f04:	2ac0      	cmp	r2, #192	; 0xc0
 8001f06:	d006      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x11e>
 8001f08:	2bf0      	cmp	r3, #240	; 0xf0
 8001f0a:	d004      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x11e>
 8001f0c:	f240 3156 	movw	r1, #854	; 0x356
 8001f10:	483c      	ldr	r0, [pc, #240]	; (8002004 <HAL_RCC_ClockConfig+0x20c>)
 8001f12:	f7fe fabc 	bl	800048e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f16:	686b      	ldr	r3, [r5, #4]
 8001f18:	68a2      	ldr	r2, [r4, #8]
 8001f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	606b      	str	r3, [r5, #4]
 8001f22:	e78b      	b.n	8001e3c <HAL_RCC_ClockConfig+0x44>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001f24:	6863      	ldr	r3, [r4, #4]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d904      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x13c>
 8001f2a:	f240 315d 	movw	r1, #861	; 0x35d
 8001f2e:	4835      	ldr	r0, [pc, #212]	; (8002004 <HAL_RCC_ClockConfig+0x20c>)
 8001f30:	f7fe faad 	bl	800048e <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f34:	6862      	ldr	r2, [r4, #4]
 8001f36:	4d35      	ldr	r5, [pc, #212]	; (800200c <HAL_RCC_ClockConfig+0x214>)
 8001f38:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3c:	d11d      	bne.n	8001f7a <HAL_RCC_ClockConfig+0x182>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f42:	d0c0      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0xce>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f44:	686b      	ldr	r3, [r5, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f46:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001f52:	f7fe fe15 	bl	8000b80 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f56:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001f58:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d115      	bne.n	8001f8a <HAL_RCC_ClockConfig+0x192>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f5e:	686b      	ldr	r3, [r5, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	f43f af6c 	beq.w	8001e42 <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f6a:	f7fe fe09 	bl	8000b80 <HAL_GetTick>
 8001f6e:	1bc0      	subs	r0, r0, r7
 8001f70:	4540      	cmp	r0, r8
 8001f72:	d9f4      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x166>
          return HAL_TIMEOUT;
 8001f74:	2003      	movs	r0, #3
 8001f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f7a:	2a02      	cmp	r2, #2
 8001f7c:	d102      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x18c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f82:	e7de      	b.n	8001f42 <HAL_RCC_ClockConfig+0x14a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f84:	f013 0f02 	tst.w	r3, #2
 8001f88:	e7db      	b.n	8001f42 <HAL_RCC_ClockConfig+0x14a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d110      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x1b8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f8e:	686b      	ldr	r3, [r5, #4]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	f43f af54 	beq.w	8001e42 <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9a:	f7fe fdf1 	bl	8000b80 <HAL_GetTick>
 8001f9e:	1bc0      	subs	r0, r0, r7
 8001fa0:	4540      	cmp	r0, r8
 8001fa2:	d9f4      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x196>
 8001fa4:	e7e6      	b.n	8001f74 <HAL_RCC_ClockConfig+0x17c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa6:	f7fe fdeb 	bl	8000b80 <HAL_GetTick>
 8001faa:	1bc0      	subs	r0, r0, r7
 8001fac:	4540      	cmp	r0, r8
 8001fae:	d8e1      	bhi.n	8001f74 <HAL_RCC_ClockConfig+0x17c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fb0:	686b      	ldr	r3, [r5, #4]
 8001fb2:	f013 0f0c 	tst.w	r3, #12
 8001fb6:	d1f6      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
 8001fb8:	e743      	b.n	8001e42 <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	6813      	ldr	r3, [r2, #0]
 8001fbc:	f023 0307 	bic.w	r3, r3, #7
 8001fc0:	4333      	orrs	r3, r6
 8001fc2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fc4:	6813      	ldr	r3, [r2, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	429e      	cmp	r6, r3
 8001fcc:	f47f af7b 	bne.w	8001ec6 <HAL_RCC_ClockConfig+0xce>
 8001fd0:	e73e      	b.n	8001e50 <HAL_RCC_ClockConfig+0x58>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001fd2:	68e3      	ldr	r3, [r4, #12]
 8001fd4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8001fd8:	d00c      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x1fc>
 8001fda:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001fde:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8001fe2:	d007      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x1fc>
 8001fe4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001fe8:	d004      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x1fc>
 8001fea:	f240 31b1 	movw	r1, #945	; 0x3b1
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <HAL_RCC_ClockConfig+0x20c>)
 8001ff0:	f7fe fa4d 	bl	800048e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff4:	686b      	ldr	r3, [r5, #4]
 8001ff6:	68e2      	ldr	r2, [r4, #12]
 8001ff8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	606b      	str	r3, [r5, #4]
 8002000:	e72c      	b.n	8001e5c <HAL_RCC_ClockConfig+0x64>
 8002002:	bf00      	nop
 8002004:	0800371d 	.word	0x0800371d
 8002008:	40022000 	.word	0x40022000
 800200c:	40021000 	.word	0x40021000
 8002010:	080035b0 	.word	0x080035b0
 8002014:	20000000 	.word	0x20000000

08002018 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <HAL_RCC_GetPCLK1Freq+0x14>)
 800201a:	4a05      	ldr	r2, [pc, #20]	; (8002030 <HAL_RCC_GetPCLK1Freq+0x18>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002022:	5cd3      	ldrb	r3, [r2, r3]
 8002024:	4a03      	ldr	r2, [pc, #12]	; (8002034 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002026:	6810      	ldr	r0, [r2, #0]
}    
 8002028:	40d8      	lsrs	r0, r3
 800202a:	4770      	bx	lr
 800202c:	40021000 	.word	0x40021000
 8002030:	080035c0 	.word	0x080035c0
 8002034:	20000000 	.word	0x20000000

08002038 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <HAL_RCC_GetPCLK2Freq+0x14>)
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <HAL_RCC_GetPCLK2Freq+0x18>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	4a03      	ldr	r2, [pc, #12]	; (8002054 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002046:	6810      	ldr	r0, [r2, #0]
} 
 8002048:	40d8      	lsrs	r0, r3
 800204a:	4770      	bx	lr
 800204c:	40021000 	.word	0x40021000
 8002050:	080035c0 	.word	0x080035c0
 8002054:	20000000 	.word	0x20000000

08002058 <HAL_RCCEx_PeriphCLKConfig>:
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002058:	6803      	ldr	r3, [r0, #0]
{
 800205a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800205e:	f013 0f13 	tst.w	r3, #19
{
 8002062:	4605      	mov	r5, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002064:	d103      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x16>
 8002066:	217c      	movs	r1, #124	; 0x7c
 8002068:	4845      	ldr	r0, [pc, #276]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 800206a:	f7fe fa10 	bl	800048e <assert_failed>
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800206e:	682b      	ldr	r3, [r5, #0]
 8002070:	07d9      	lsls	r1, r3, #31
 8002072:	d528      	bpl.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8002074:	686b      	ldr	r3, [r5, #4]
 8002076:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800207a:	d003      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 800207c:	2182      	movs	r1, #130	; 0x82
 800207e:	4840      	ldr	r0, [pc, #256]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8002080:	f7fe fa05 	bl	800048e <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002084:	4c3f      	ldr	r4, [pc, #252]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002086:	69e3      	ldr	r3, [r4, #28]
 8002088:	00da      	lsls	r2, r3, #3
 800208a:	d444      	bmi.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800208c:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800208e:	69e3      	ldr	r3, [r4, #28]
 8002090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002094:	61e3      	str	r3, [r4, #28]
 8002096:	69e3      	ldr	r3, [r4, #28]
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	4e39      	ldr	r6, [pc, #228]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020a2:	6833      	ldr	r3, [r6, #0]
 80020a4:	05db      	lsls	r3, r3, #23
 80020a6:	d538      	bpl.n	800211a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020a8:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020aa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80020ae:	d148      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80020b0:	6a23      	ldr	r3, [r4, #32]
 80020b2:	686a      	ldr	r2, [r5, #4]
 80020b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b8:	4313      	orrs	r3, r2
 80020ba:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020bc:	b11f      	cbz	r7, 80020c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020be:	69e3      	ldr	r3, [r4, #28]
 80020c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020c6:	682b      	ldr	r3, [r5, #0]
 80020c8:	079b      	lsls	r3, r3, #30
 80020ca:	d50e      	bpl.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80020cc:	68ab      	ldr	r3, [r5, #8]
 80020ce:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 80020d2:	d003      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x84>
 80020d4:	21c9      	movs	r1, #201	; 0xc9
 80020d6:	482a      	ldr	r0, [pc, #168]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80020d8:	f7fe f9d9 	bl	800048e <assert_failed>
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020dc:	4a29      	ldr	r2, [pc, #164]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80020de:	68a9      	ldr	r1, [r5, #8]
 80020e0:	6853      	ldr	r3, [r2, #4]
 80020e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020e6:	430b      	orrs	r3, r1
 80020e8:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020ea:	6828      	ldr	r0, [r5, #0]
 80020ec:	f010 0010 	ands.w	r0, r0, #16
 80020f0:	d024      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80020f2:	68eb      	ldr	r3, [r5, #12]
 80020f4:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 80020f8:	d004      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80020fa:	f240 1125 	movw	r1, #293	; 0x125
 80020fe:	4820      	ldr	r0, [pc, #128]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8002100:	f7fe f9c5 	bl	800048e <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002104:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002106:	68e9      	ldr	r1, [r5, #12]
 8002108:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800210a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800210c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002110:	430b      	orrs	r3, r1
 8002112:	6053      	str	r3, [r2, #4]
 8002114:	e012      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    FlagStatus       pwrclkchanged = RESET;
 8002116:	2700      	movs	r7, #0
 8002118:	e7c2      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211a:	6833      	ldr	r3, [r6, #0]
 800211c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002120:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002122:	f7fe fd2d 	bl	8000b80 <HAL_GetTick>
 8002126:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	6833      	ldr	r3, [r6, #0]
 800212a:	05d8      	lsls	r0, r3, #23
 800212c:	d4bc      	bmi.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212e:	f7fe fd27 	bl	8000b80 <HAL_GetTick>
 8002132:	eba0 0008 	sub.w	r0, r0, r8
 8002136:	2864      	cmp	r0, #100	; 0x64
 8002138:	d9f6      	bls.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0xd0>
          return HAL_TIMEOUT;
 800213a:	2003      	movs	r0, #3
}
 800213c:	b002      	add	sp, #8
 800213e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002142:	686a      	ldr	r2, [r5, #4]
 8002144:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002148:	4293      	cmp	r3, r2
 800214a:	d0b1      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 800214c:	2001      	movs	r0, #1
 800214e:	4a0f      	ldr	r2, [pc, #60]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x134>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002150:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002152:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002154:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002156:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800215a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800215c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800215e:	07d9      	lsls	r1, r3, #31
 8002160:	d5a6      	bpl.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 8002162:	f7fe fd0d 	bl	8000b80 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002166:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800216a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216c:	6a23      	ldr	r3, [r4, #32]
 800216e:	079a      	lsls	r2, r3, #30
 8002170:	d49e      	bmi.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x58>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7fe fd05 	bl	8000b80 <HAL_GetTick>
 8002176:	1b80      	subs	r0, r0, r6
 8002178:	4540      	cmp	r0, r8
 800217a:	d9f7      	bls.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x114>
 800217c:	e7dd      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800217e:	bf00      	nop
 8002180:	08003755 	.word	0x08003755
 8002184:	40021000 	.word	0x40021000
 8002188:	40007000 	.word	0x40007000
 800218c:	42420440 	.word	0x42420440

08002190 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002190:	6a03      	ldr	r3, [r0, #32]
{
 8002192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002196:	f023 0301 	bic.w	r3, r3, #1
 800219a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800219c:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800219e:	f8d0 8004 	ldr.w	r8, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021a2:	6986      	ldr	r6, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021a4:	680b      	ldr	r3, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021a6:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80021aa:	431e      	orrs	r6, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021ac:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80021ae:	f024 0402 	bic.w	r4, r4, #2
  tmpccer |= OC_Config->OCPolarity;
 80021b2:	431c      	orrs	r4, r3

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021b4:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <TIM_OC1_SetConfig+0x90>)
{
 80021b6:	4605      	mov	r5, r0
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021b8:	4298      	cmp	r0, r3
{
 80021ba:	460f      	mov	r7, r1
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021bc:	d127      	bne.n	800220e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80021be:	68cb      	ldr	r3, [r1, #12]
 80021c0:	f033 0308 	bics.w	r3, r3, #8
 80021c4:	d004      	beq.n	80021d0 <TIM_OC1_SetConfig+0x40>
 80021c6:	f241 213f 	movw	r1, #4671	; 0x123f
 80021ca:	4816      	ldr	r0, [pc, #88]	; (8002224 <TIM_OC1_SetConfig+0x94>)
 80021cc:	f7fe f95f 	bl	800048e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021d0:	68fb      	ldr	r3, [r7, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80021d2:	f024 0408 	bic.w	r4, r4, #8
    tmpccer |= OC_Config->OCNPolarity;
 80021d6:	431c      	orrs	r4, r3
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80021d8:	69bb      	ldr	r3, [r7, #24]
    tmpccer &= ~TIM_CCER_CC1NE;
 80021da:	f024 0404 	bic.w	r4, r4, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80021de:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80021e2:	d004      	beq.n	80021ee <TIM_OC1_SetConfig+0x5e>
 80021e4:	f241 214c 	movw	r1, #4684	; 0x124c
 80021e8:	480e      	ldr	r0, [pc, #56]	; (8002224 <TIM_OC1_SetConfig+0x94>)
 80021ea:	f7fe f950 	bl	800048e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 80021f4:	d004      	beq.n	8002200 <TIM_OC1_SetConfig+0x70>
 80021f6:	f241 214d 	movw	r1, #4685	; 0x124d
 80021fa:	480a      	ldr	r0, [pc, #40]	; (8002224 <TIM_OC1_SetConfig+0x94>)
 80021fc:	f7fe f947 	bl	800048e <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002204:	f428 7840 	bic.w	r8, r8, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002208:	4313      	orrs	r3, r2
 800220a:	ea43 0808 	orr.w	r8, r3, r8

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800220e:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 8002210:	f8c5 8004 	str.w	r8, [r5, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002214:	61ae      	str	r6, [r5, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002216:	636b      	str	r3, [r5, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002218:	622c      	str	r4, [r5, #32]
 800221a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800221e:	bf00      	nop
 8002220:	40012c00 	.word	0x40012c00
 8002224:	08003790 	.word	0x08003790

08002228 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002228:	6a03      	ldr	r3, [r0, #32]
{
 800222a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800222e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002232:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002234:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002236:	f8d0 8004 	ldr.w	r8, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800223a:	69c6      	ldr	r6, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800223c:	680b      	ldr	r3, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800223e:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002242:	431e      	orrs	r6, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002244:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002246:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800224a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800224e:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <TIM_OC3_SetConfig+0x94>)
{
 8002250:	4605      	mov	r5, r0
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002252:	4298      	cmp	r0, r3
{
 8002254:	460f      	mov	r7, r1
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002256:	d128      	bne.n	80022aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8002258:	68cb      	ldr	r3, [r1, #12]
 800225a:	f033 0308 	bics.w	r3, r3, #8
 800225e:	d004      	beq.n	800226a <TIM_OC3_SetConfig+0x42>
 8002260:	f241 21d4 	movw	r1, #4820	; 0x12d4
 8002264:	4816      	ldr	r0, [pc, #88]	; (80022c0 <TIM_OC3_SetConfig+0x98>)
 8002266:	f7fe f912 	bl	800048e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800226a:	68fb      	ldr	r3, [r7, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800226c:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002270:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8002274:	69bb      	ldr	r3, [r7, #24]
    tmpccer &= ~TIM_CCER_CC3NE;
 8002276:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800227a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800227e:	d004      	beq.n	800228a <TIM_OC3_SetConfig+0x62>
 8002280:	f241 21e1 	movw	r1, #4833	; 0x12e1
 8002284:	480e      	ldr	r0, [pc, #56]	; (80022c0 <TIM_OC3_SetConfig+0x98>)
 8002286:	f7fe f902 	bl	800048e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8002290:	d004      	beq.n	800229c <TIM_OC3_SetConfig+0x74>
 8002292:	f241 21e2 	movw	r1, #4834	; 0x12e2
 8002296:	480a      	ldr	r0, [pc, #40]	; (80022c0 <TIM_OC3_SetConfig+0x98>)
 8002298:	f7fe f8f9 	bl	800048e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800229c:	697b      	ldr	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800229e:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022a0:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022a4:	4313      	orrs	r3, r2
 80022a6:	ea48 1803 	orr.w	r8, r8, r3, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022aa:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 80022ac:	f8c5 8004 	str.w	r8, [r5, #4]
  TIMx->CCMR2 = tmpccmrx;
 80022b0:	61ee      	str	r6, [r5, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80022b2:	63eb      	str	r3, [r5, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022b4:	622c      	str	r4, [r5, #32]
 80022b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022ba:	bf00      	nop
 80022bc:	40012c00 	.word	0x40012c00
 80022c0:	08003790 	.word	0x08003790

080022c4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022c4:	6a03      	ldr	r3, [r0, #32]
{
 80022c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022ce:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022d0:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022d2:	f8d0 8004 	ldr.w	r8, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022d6:	69c7      	ldr	r7, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022d8:	680b      	ldr	r3, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022da:	f427 47e6 	bic.w	r7, r7, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022de:	ea47 2703 	orr.w	r7, r7, r3, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022e2:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80022e4:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022e8:	ea45 3503 	orr.w	r5, r5, r3, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80022ec:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <TIM_OC4_SetConfig+0x60>)
{
 80022ee:	4604      	mov	r4, r0
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80022f0:	4298      	cmp	r0, r3
{
 80022f2:	460e      	mov	r6, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80022f4:	d10d      	bne.n	8002312 <TIM_OC4_SetConfig+0x4e>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80022f6:	694b      	ldr	r3, [r1, #20]
 80022f8:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 80022fc:	d004      	beq.n	8002308 <TIM_OC4_SetConfig+0x44>
 80022fe:	f241 311f 	movw	r1, #4895	; 0x131f
 8002302:	4809      	ldr	r0, [pc, #36]	; (8002328 <TIM_OC4_SetConfig+0x64>)
 8002304:	f7fe f8c3 	bl	800048e <assert_failed>

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002308:	6973      	ldr	r3, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800230a:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800230e:	ea48 1883 	orr.w	r8, r8, r3, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002312:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 8002314:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002318:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800231a:	6423      	str	r3, [r4, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800231c:	6225      	str	r5, [r4, #32]
 800231e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002322:	bf00      	nop
 8002324:	40012c00 	.word	0x40012c00
 8002328:	08003790 	.word	0x08003790

0800232c <HAL_TIM_OC_MspInit>:
 800232c:	4770      	bx	lr

0800232e <HAL_TIM_PWM_MspInit>:
 800232e:	4770      	bx	lr

08002330 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002330:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002334:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002336:	2b01      	cmp	r3, #1
{
 8002338:	4605      	mov	r5, r0
 800233a:	460c      	mov	r4, r1
 800233c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002340:	d02e      	beq.n	80023a0 <HAL_TIM_ConfigClockSource+0x70>
 8002342:	2301      	movs	r3, #1
 8002344:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8002348:	680b      	ldr	r3, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800234a:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800234e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002352:	d00c      	beq.n	800236e <HAL_TIM_ConfigClockSource+0x3e>
 8002354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002358:	d009      	beq.n	800236e <HAL_TIM_ConfigClockSource+0x3e>
 800235a:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800235e:	d006      	beq.n	800236e <HAL_TIM_ConfigClockSource+0x3e>
 8002360:	2b40      	cmp	r3, #64	; 0x40
 8002362:	d004      	beq.n	800236e <HAL_TIM_ConfigClockSource+0x3e>
 8002364:	f640 7171 	movw	r1, #3953	; 0xf71
 8002368:	48b5      	ldr	r0, [pc, #724]	; (8002640 <HAL_TIM_ConfigClockSource+0x310>)
 800236a:	f7fe f890 	bl	800048e <assert_failed>
  tmpsmcr = htim->Instance->SMCR;
 800236e:	682b      	ldr	r3, [r5, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002372:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002376:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800237a:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800237c:	6822      	ldr	r2, [r4, #0]
 800237e:	2a40      	cmp	r2, #64	; 0x40
 8002380:	f000 8162 	beq.w	8002648 <HAL_TIM_ConfigClockSource+0x318>
 8002384:	d82c      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0xb0>
 8002386:	2a10      	cmp	r2, #16
 8002388:	f000 81b9 	beq.w	80026fe <HAL_TIM_ConfigClockSource+0x3ce>
 800238c:	d809      	bhi.n	80023a2 <HAL_TIM_ConfigClockSource+0x72>
 800238e:	2a00      	cmp	r2, #0
 8002390:	f000 819b 	beq.w	80026ca <HAL_TIM_ConfigClockSource+0x39a>
  htim->State = HAL_TIM_STATE_READY;
 8002394:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002396:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002398:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800239c:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
}
 80023a0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80023a2:	2a20      	cmp	r2, #32
 80023a4:	f000 81c5 	beq.w	8002732 <HAL_TIM_ConfigClockSource+0x402>
 80023a8:	2a30      	cmp	r2, #48	; 0x30
 80023aa:	d1f3      	bne.n	8002394 <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80023ac:	4aa5      	ldr	r2, [pc, #660]	; (8002644 <HAL_TIM_ConfigClockSource+0x314>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00f      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0xa2>
 80023b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b6:	d00c      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0xa2>
 80023b8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80023bc:	4293      	cmp	r3, r2
 80023be:	d008      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0xa2>
 80023c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d004      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0xa2>
 80023c8:	f640 71f9 	movw	r1, #4089	; 0xff9
 80023cc:	489c      	ldr	r0, [pc, #624]	; (8002640 <HAL_TIM_ConfigClockSource+0x310>)
 80023ce:	f7fe f85e 	bl	800048e <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80023d2:	682a      	ldr	r2, [r5, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80023d4:	6893      	ldr	r3, [r2, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80023d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80023da:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 80023de:	e0a9      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x204>
  switch (sClockSourceConfig->ClockSource)
 80023e0:	2a70      	cmp	r2, #112	; 0x70
 80023e2:	f000 80a9 	beq.w	8002538 <HAL_TIM_ConfigClockSource+0x208>
 80023e6:	d846      	bhi.n	8002476 <HAL_TIM_ConfigClockSource+0x146>
 80023e8:	2a50      	cmp	r2, #80	; 0x50
 80023ea:	f000 80e7 	beq.w	80025bc <HAL_TIM_ConfigClockSource+0x28c>
 80023ee:	2a60      	cmp	r2, #96	; 0x60
 80023f0:	d1d0      	bne.n	8002394 <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80023f2:	4a94      	ldr	r2, [pc, #592]	; (8002644 <HAL_TIM_ConfigClockSource+0x314>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00f      	beq.n	8002418 <HAL_TIM_ConfigClockSource+0xe8>
 80023f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fc:	d00c      	beq.n	8002418 <HAL_TIM_ConfigClockSource+0xe8>
 80023fe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002402:	4293      	cmp	r3, r2
 8002404:	d008      	beq.n	8002418 <HAL_TIM_ConfigClockSource+0xe8>
 8002406:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800240a:	4293      	cmp	r3, r2
 800240c:	d004      	beq.n	8002418 <HAL_TIM_ConfigClockSource+0xe8>
 800240e:	f640 71c3 	movw	r1, #4035	; 0xfc3
 8002412:	488b      	ldr	r0, [pc, #556]	; (8002640 <HAL_TIM_ConfigClockSource+0x310>)
 8002414:	f7fe f83b 	bl	800048e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002418:	6863      	ldr	r3, [r4, #4]
 800241a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800241e:	d009      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0x104>
 8002420:	f033 0202 	bics.w	r2, r3, #2
 8002424:	d006      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0x104>
 8002426:	2b0a      	cmp	r3, #10
 8002428:	d004      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0x104>
 800242a:	f640 71c6 	movw	r1, #4038	; 0xfc6
 800242e:	4884      	ldr	r0, [pc, #528]	; (8002640 <HAL_TIM_ConfigClockSource+0x310>)
 8002430:	f7fe f82d 	bl	800048e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002434:	68e3      	ldr	r3, [r4, #12]
 8002436:	2b0f      	cmp	r3, #15
 8002438:	d904      	bls.n	8002444 <HAL_TIM_ConfigClockSource+0x114>
 800243a:	f640 71c7 	movw	r1, #4039	; 0xfc7
 800243e:	4880      	ldr	r0, [pc, #512]	; (8002640 <HAL_TIM_ConfigClockSource+0x310>)
 8002440:	f7fe f825 	bl	800048e <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002444:	682b      	ldr	r3, [r5, #0]
 8002446:	6866      	ldr	r6, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002448:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800244a:	68e4      	ldr	r4, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800244c:	f020 0010 	bic.w	r0, r0, #16
 8002450:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002452:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002454:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002456:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800245a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800245e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002462:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002466:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002468:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800246a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800246c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002470:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002474:	e0e2      	b.n	800263c <HAL_TIM_ConfigClockSource+0x30c>
  switch (sClockSourceConfig->ClockSource)
 8002476:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800247a:	d044      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0x1d6>
 800247c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002480:	d188      	bne.n	8002394 <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8002482:	4a70      	ldr	r2, [pc, #448]	; (8002644 <HAL_TIM_ConfigClockSource+0x314>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00f      	beq.n	80024a8 <HAL_TIM_ConfigClockSource+0x178>
 8002488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800248c:	d00c      	beq.n	80024a8 <HAL_TIM_ConfigClockSource+0x178>
 800248e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002492:	4293      	cmp	r3, r2
 8002494:	d008      	beq.n	80024a8 <HAL_TIM_ConfigClockSource+0x178>
 8002496:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800249a:	4293      	cmp	r3, r2
 800249c:	d004      	beq.n	80024a8 <HAL_TIM_ConfigClockSource+0x178>
 800249e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80024a2:	4867      	ldr	r0, [pc, #412]	; (8002640 <HAL_TIM_ConfigClockSource+0x310>)
 80024a4:	f7fd fff3 	bl	800048e <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80024a8:	68a3      	ldr	r3, [r4, #8]
 80024aa:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80024ae:	d004      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0x18a>
 80024b0:	f640 71a3 	movw	r1, #4003	; 0xfa3
 80024b4:	4862      	ldr	r0, [pc, #392]	; (8002640 <HAL_TIM_ConfigClockSource+0x310>)
 80024b6:	f7fd ffea 	bl	800048e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80024ba:	6863      	ldr	r3, [r4, #4]
 80024bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024c0:	d009      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x1a6>
 80024c2:	f033 0202 	bics.w	r2, r3, #2
 80024c6:	d006      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x1a6>
 80024c8:	2b0a      	cmp	r3, #10
 80024ca:	d004      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x1a6>
 80024cc:	f640 71a4 	movw	r1, #4004	; 0xfa4
 80024d0:	485b      	ldr	r0, [pc, #364]	; (8002640 <HAL_TIM_ConfigClockSource+0x310>)
 80024d2:	f7fd ffdc 	bl	800048e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80024d6:	68e3      	ldr	r3, [r4, #12]
 80024d8:	2b0f      	cmp	r3, #15
 80024da:	d904      	bls.n	80024e6 <HAL_TIM_ConfigClockSource+0x1b6>
 80024dc:	f640 71a5 	movw	r1, #4005	; 0xfa5
 80024e0:	4857      	ldr	r0, [pc, #348]	; (8002640 <HAL_TIM_ConfigClockSource+0x310>)
 80024e2:	f7fd ffd4 	bl	800048e <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80024e6:	682a      	ldr	r2, [r5, #0]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024e8:	6860      	ldr	r0, [r4, #4]
 80024ea:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr = TIMx->SMCR;
 80024ec:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024ee:	4303      	orrs	r3, r0
 80024f0:	68e0      	ldr	r0, [r4, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024f2:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024f6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80024fa:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024fc:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024fe:	6893      	ldr	r3, [r2, #8]
 8002500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002504:	e016      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002506:	4a4f      	ldr	r2, [pc, #316]	; (8002644 <HAL_TIM_ConfigClockSource+0x314>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d00f      	beq.n	800252c <HAL_TIM_ConfigClockSource+0x1fc>
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002510:	d00c      	beq.n	800252c <HAL_TIM_ConfigClockSource+0x1fc>
 8002512:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002516:	4293      	cmp	r3, r2
 8002518:	d008      	beq.n	800252c <HAL_TIM_ConfigClockSource+0x1fc>
 800251a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800251e:	4293      	cmp	r3, r2
 8002520:	d004      	beq.n	800252c <HAL_TIM_ConfigClockSource+0x1fc>
 8002522:	f640 717d 	movw	r1, #3965	; 0xf7d
 8002526:	4846      	ldr	r0, [pc, #280]	; (8002640 <HAL_TIM_ConfigClockSource+0x310>)
 8002528:	f7fd ffb1 	bl	800048e <assert_failed>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800252c:	682a      	ldr	r2, [r5, #0]
 800252e:	6893      	ldr	r3, [r2, #8]
 8002530:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8002534:	6093      	str	r3, [r2, #8]
 8002536:	e72d      	b.n	8002394 <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8002538:	4a42      	ldr	r2, [pc, #264]	; (8002644 <HAL_TIM_ConfigClockSource+0x314>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00f      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x22e>
 800253e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002542:	d00c      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x22e>
 8002544:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002548:	4293      	cmp	r3, r2
 800254a:	d008      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x22e>
 800254c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002550:	4293      	cmp	r3, r2
 8002552:	d004      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x22e>
 8002554:	f640 7186 	movw	r1, #3974	; 0xf86
 8002558:	4839      	ldr	r0, [pc, #228]	; (8002640 <HAL_TIM_ConfigClockSource+0x310>)
 800255a:	f7fd ff98 	bl	800048e <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800255e:	68a3      	ldr	r3, [r4, #8]
 8002560:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8002564:	d004      	beq.n	8002570 <HAL_TIM_ConfigClockSource+0x240>
 8002566:	f640 7189 	movw	r1, #3977	; 0xf89
 800256a:	4835      	ldr	r0, [pc, #212]	; (8002640 <HAL_TIM_ConfigClockSource+0x310>)
 800256c:	f7fd ff8f 	bl	800048e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002570:	6863      	ldr	r3, [r4, #4]
 8002572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002576:	d009      	beq.n	800258c <HAL_TIM_ConfigClockSource+0x25c>
 8002578:	f033 0202 	bics.w	r2, r3, #2
 800257c:	d006      	beq.n	800258c <HAL_TIM_ConfigClockSource+0x25c>
 800257e:	2b0a      	cmp	r3, #10
 8002580:	d004      	beq.n	800258c <HAL_TIM_ConfigClockSource+0x25c>
 8002582:	f640 718a 	movw	r1, #3978	; 0xf8a
 8002586:	482e      	ldr	r0, [pc, #184]	; (8002640 <HAL_TIM_ConfigClockSource+0x310>)
 8002588:	f7fd ff81 	bl	800048e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800258c:	68e3      	ldr	r3, [r4, #12]
 800258e:	2b0f      	cmp	r3, #15
 8002590:	d904      	bls.n	800259c <HAL_TIM_ConfigClockSource+0x26c>
 8002592:	f640 718b 	movw	r1, #3979	; 0xf8b
 8002596:	482a      	ldr	r0, [pc, #168]	; (8002640 <HAL_TIM_ConfigClockSource+0x310>)
 8002598:	f7fd ff79 	bl	800048e <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800259c:	682a      	ldr	r2, [r5, #0]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800259e:	6860      	ldr	r0, [r4, #4]
 80025a0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr = TIMx->SMCR;
 80025a2:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025a4:	4303      	orrs	r3, r0
 80025a6:	68e0      	ldr	r0, [r4, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025ac:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80025b0:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80025b2:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80025b4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025ba:	e7bb      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80025bc:	4a21      	ldr	r2, [pc, #132]	; (8002644 <HAL_TIM_ConfigClockSource+0x314>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00f      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x2b2>
 80025c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c6:	d00c      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x2b2>
 80025c8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d008      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x2b2>
 80025d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d004      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x2b2>
 80025d8:	f640 71b4 	movw	r1, #4020	; 0xfb4
 80025dc:	4818      	ldr	r0, [pc, #96]	; (8002640 <HAL_TIM_ConfigClockSource+0x310>)
 80025de:	f7fd ff56 	bl	800048e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80025e2:	6863      	ldr	r3, [r4, #4]
 80025e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e8:	d009      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0x2ce>
 80025ea:	f033 0202 	bics.w	r2, r3, #2
 80025ee:	d006      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0x2ce>
 80025f0:	2b0a      	cmp	r3, #10
 80025f2:	d004      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0x2ce>
 80025f4:	f640 71b7 	movw	r1, #4023	; 0xfb7
 80025f8:	4811      	ldr	r0, [pc, #68]	; (8002640 <HAL_TIM_ConfigClockSource+0x310>)
 80025fa:	f7fd ff48 	bl	800048e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80025fe:	68e3      	ldr	r3, [r4, #12]
 8002600:	2b0f      	cmp	r3, #15
 8002602:	d904      	bls.n	800260e <HAL_TIM_ConfigClockSource+0x2de>
 8002604:	f640 71b8 	movw	r1, #4024	; 0xfb8
 8002608:	480d      	ldr	r0, [pc, #52]	; (8002640 <HAL_TIM_ConfigClockSource+0x310>)
 800260a:	f7fd ff40 	bl	800048e <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800260e:	682b      	ldr	r3, [r5, #0]
 8002610:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 8002612:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002614:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002616:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002618:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800261c:	f024 0401 	bic.w	r4, r4, #1
 8002620:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002622:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002624:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002626:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800262a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800262e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002630:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002632:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002634:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002638:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	e6a9      	b.n	8002394 <HAL_TIM_ConfigClockSource+0x64>
 8002640:	08003790 	.word	0x08003790
 8002644:	40012c00 	.word	0x40012c00
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002648:	4a47      	ldr	r2, [pc, #284]	; (8002768 <HAL_TIM_ConfigClockSource+0x438>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00f      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x33e>
 800264e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002652:	d00c      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x33e>
 8002654:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002658:	4293      	cmp	r3, r2
 800265a:	d008      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x33e>
 800265c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002660:	4293      	cmp	r3, r2
 8002662:	d004      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x33e>
 8002664:	f640 71d2 	movw	r1, #4050	; 0xfd2
 8002668:	4840      	ldr	r0, [pc, #256]	; (800276c <HAL_TIM_ConfigClockSource+0x43c>)
 800266a:	f7fd ff10 	bl	800048e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800266e:	6863      	ldr	r3, [r4, #4]
 8002670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002674:	d009      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x35a>
 8002676:	f033 0202 	bics.w	r2, r3, #2
 800267a:	d006      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x35a>
 800267c:	2b0a      	cmp	r3, #10
 800267e:	d004      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x35a>
 8002680:	f640 71d5 	movw	r1, #4053	; 0xfd5
 8002684:	4839      	ldr	r0, [pc, #228]	; (800276c <HAL_TIM_ConfigClockSource+0x43c>)
 8002686:	f7fd ff02 	bl	800048e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800268a:	68e3      	ldr	r3, [r4, #12]
 800268c:	2b0f      	cmp	r3, #15
 800268e:	d904      	bls.n	800269a <HAL_TIM_ConfigClockSource+0x36a>
 8002690:	f640 71d6 	movw	r1, #4054	; 0xfd6
 8002694:	4835      	ldr	r0, [pc, #212]	; (800276c <HAL_TIM_ConfigClockSource+0x43c>)
 8002696:	f7fd fefa 	bl	800048e <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800269a:	682b      	ldr	r3, [r5, #0]
 800269c:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 800269e:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a0:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026a2:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026a4:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026a8:	f024 0401 	bic.w	r4, r4, #1
 80026ac:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ae:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80026b0:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026b6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80026ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026bc:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80026be:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80026c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80026c4:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80026c8:	e7b8      	b.n	800263c <HAL_TIM_ConfigClockSource+0x30c>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80026ca:	4a27      	ldr	r2, [pc, #156]	; (8002768 <HAL_TIM_ConfigClockSource+0x438>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00f      	beq.n	80026f0 <HAL_TIM_ConfigClockSource+0x3c0>
 80026d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d4:	d00c      	beq.n	80026f0 <HAL_TIM_ConfigClockSource+0x3c0>
 80026d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80026da:	4293      	cmp	r3, r2
 80026dc:	d008      	beq.n	80026f0 <HAL_TIM_ConfigClockSource+0x3c0>
 80026de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d004      	beq.n	80026f0 <HAL_TIM_ConfigClockSource+0x3c0>
 80026e6:	f640 71e1 	movw	r1, #4065	; 0xfe1
 80026ea:	4820      	ldr	r0, [pc, #128]	; (800276c <HAL_TIM_ConfigClockSource+0x43c>)
 80026ec:	f7fd fecf 	bl	800048e <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80026f0:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 80026f2:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80026f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80026f8:	f043 0307 	orr.w	r3, r3, #7
 80026fc:	e71a      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80026fe:	4a1a      	ldr	r2, [pc, #104]	; (8002768 <HAL_TIM_ConfigClockSource+0x438>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00f      	beq.n	8002724 <HAL_TIM_ConfigClockSource+0x3f4>
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002708:	d00c      	beq.n	8002724 <HAL_TIM_ConfigClockSource+0x3f4>
 800270a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800270e:	4293      	cmp	r3, r2
 8002710:	d008      	beq.n	8002724 <HAL_TIM_ConfigClockSource+0x3f4>
 8002712:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002716:	4293      	cmp	r3, r2
 8002718:	d004      	beq.n	8002724 <HAL_TIM_ConfigClockSource+0x3f4>
 800271a:	f640 71e9 	movw	r1, #4073	; 0xfe9
 800271e:	4813      	ldr	r0, [pc, #76]	; (800276c <HAL_TIM_ConfigClockSource+0x43c>)
 8002720:	f7fd feb5 	bl	800048e <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8002724:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 8002726:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800272c:	f043 0317 	orr.w	r3, r3, #23
 8002730:	e700      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8002732:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <HAL_TIM_ConfigClockSource+0x438>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d00f      	beq.n	8002758 <HAL_TIM_ConfigClockSource+0x428>
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d00c      	beq.n	8002758 <HAL_TIM_ConfigClockSource+0x428>
 800273e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002742:	4293      	cmp	r3, r2
 8002744:	d008      	beq.n	8002758 <HAL_TIM_ConfigClockSource+0x428>
 8002746:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800274a:	4293      	cmp	r3, r2
 800274c:	d004      	beq.n	8002758 <HAL_TIM_ConfigClockSource+0x428>
 800274e:	f640 71f1 	movw	r1, #4081	; 0xff1
 8002752:	4806      	ldr	r0, [pc, #24]	; (800276c <HAL_TIM_ConfigClockSource+0x43c>)
 8002754:	f7fd fe9b 	bl	800048e <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002758:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 800275a:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800275c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002760:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8002764:	e6e6      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x204>
 8002766:	bf00      	nop
 8002768:	40012c00 	.word	0x40012c00
 800276c:	08003790 	.word	0x08003790

08002770 <HAL_TIM_PeriodElapsedCallback>:
 8002770:	4770      	bx	lr

08002772 <HAL_TIM_OC_DelayElapsedCallback>:
 8002772:	4770      	bx	lr

08002774 <HAL_TIM_IC_CaptureCallback>:
 8002774:	4770      	bx	lr

08002776 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002776:	4770      	bx	lr

08002778 <HAL_TIM_TriggerCallback>:
 8002778:	4770      	bx	lr

0800277a <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800277a:	6803      	ldr	r3, [r0, #0]
{
 800277c:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800277e:	691a      	ldr	r2, [r3, #16]
{
 8002780:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002782:	0791      	lsls	r1, r2, #30
 8002784:	d50e      	bpl.n	80027a4 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	0792      	lsls	r2, r2, #30
 800278a:	d50b      	bpl.n	80027a4 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800278c:	f06f 0202 	mvn.w	r2, #2
 8002790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002792:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002794:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002796:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002798:	079b      	lsls	r3, r3, #30
 800279a:	d077      	beq.n	800288c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800279c:	f7ff ffea 	bl	8002774 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a0:	2300      	movs	r3, #0
 80027a2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	0750      	lsls	r0, r2, #29
 80027aa:	d510      	bpl.n	80027ce <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	0751      	lsls	r1, r2, #29
 80027b0:	d50d      	bpl.n	80027ce <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027b2:	f06f 0204 	mvn.w	r2, #4
 80027b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027b8:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027ba:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027bc:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027be:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80027c2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027c4:	d068      	beq.n	8002898 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80027c6:	f7ff ffd5 	bl	8002774 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ca:	2300      	movs	r3, #0
 80027cc:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	0712      	lsls	r2, r2, #28
 80027d4:	d50f      	bpl.n	80027f6 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	0710      	lsls	r0, r2, #28
 80027da:	d50c      	bpl.n	80027f6 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027dc:	f06f 0208 	mvn.w	r2, #8
 80027e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027e2:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027e4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027e6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027e8:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80027ea:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027ec:	d05a      	beq.n	80028a4 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	f7ff ffc1 	bl	8002774 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f2:	2300      	movs	r3, #0
 80027f4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027f6:	6823      	ldr	r3, [r4, #0]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	06d2      	lsls	r2, r2, #27
 80027fc:	d510      	bpl.n	8002820 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	06d0      	lsls	r0, r2, #27
 8002802:	d50d      	bpl.n	8002820 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002804:	f06f 0210 	mvn.w	r2, #16
 8002808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800280a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800280c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800280e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002810:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002814:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002816:	d04b      	beq.n	80028b0 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002818:	f7ff ffac 	bl	8002774 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281c:	2300      	movs	r3, #0
 800281e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	07d1      	lsls	r1, r2, #31
 8002826:	d508      	bpl.n	800283a <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	07d2      	lsls	r2, r2, #31
 800282c:	d505      	bpl.n	800283a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800282e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002832:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002834:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002836:	f7ff ff9b 	bl	8002770 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	0610      	lsls	r0, r2, #24
 8002840:	d508      	bpl.n	8002854 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	0611      	lsls	r1, r2, #24
 8002846:	d505      	bpl.n	8002854 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002848:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800284c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800284e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002850:	f000 fc15 	bl	800307e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	0652      	lsls	r2, r2, #25
 800285a:	d508      	bpl.n	800286e <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	0650      	lsls	r0, r2, #25
 8002860:	d505      	bpl.n	800286e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002862:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002866:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002868:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800286a:	f7ff ff85 	bl	8002778 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	0691      	lsls	r1, r2, #26
 8002874:	d522      	bpl.n	80028bc <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	0692      	lsls	r2, r2, #26
 800287a:	d51f      	bpl.n	80028bc <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800287c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002880:	4620      	mov	r0, r4
}
 8002882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002886:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002888:	f000 bbf8 	b.w	800307c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800288c:	f7ff ff71 	bl	8002772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002890:	4620      	mov	r0, r4
 8002892:	f7ff ff70 	bl	8002776 <HAL_TIM_PWM_PulseFinishedCallback>
 8002896:	e783      	b.n	80027a0 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002898:	f7ff ff6b 	bl	8002772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800289c:	4620      	mov	r0, r4
 800289e:	f7ff ff6a 	bl	8002776 <HAL_TIM_PWM_PulseFinishedCallback>
 80028a2:	e792      	b.n	80027ca <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a4:	f7ff ff65 	bl	8002772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a8:	4620      	mov	r0, r4
 80028aa:	f7ff ff64 	bl	8002776 <HAL_TIM_PWM_PulseFinishedCallback>
 80028ae:	e7a0      	b.n	80027f2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b0:	f7ff ff5f 	bl	8002772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b4:	4620      	mov	r0, r4
 80028b6:	f7ff ff5e 	bl	8002776 <HAL_TIM_PWM_PulseFinishedCallback>
 80028ba:	e7af      	b.n	800281c <HAL_TIM_IRQHandler+0xa2>
 80028bc:	bd10      	pop	{r4, pc}
	...

080028c0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c0:	4a1a      	ldr	r2, [pc, #104]	; (800292c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80028c2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c4:	4290      	cmp	r0, r2
 80028c6:	d00a      	beq.n	80028de <TIM_Base_SetConfig+0x1e>
 80028c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80028cc:	d007      	beq.n	80028de <TIM_Base_SetConfig+0x1e>
 80028ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80028d2:	4290      	cmp	r0, r2
 80028d4:	d003      	beq.n	80028de <TIM_Base_SetConfig+0x1e>
 80028d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028da:	4290      	cmp	r0, r2
 80028dc:	d115      	bne.n	800290a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80028de:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80028e4:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028e6:	4a11      	ldr	r2, [pc, #68]	; (800292c <TIM_Base_SetConfig+0x6c>)
 80028e8:	4290      	cmp	r0, r2
 80028ea:	d00a      	beq.n	8002902 <TIM_Base_SetConfig+0x42>
 80028ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80028f0:	d007      	beq.n	8002902 <TIM_Base_SetConfig+0x42>
 80028f2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80028f6:	4290      	cmp	r0, r2
 80028f8:	d003      	beq.n	8002902 <TIM_Base_SetConfig+0x42>
 80028fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028fe:	4290      	cmp	r0, r2
 8002900:	d103      	bne.n	800290a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002902:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002908:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800290a:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 800290c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002910:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002912:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002914:	688b      	ldr	r3, [r1, #8]
 8002916:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002918:	680b      	ldr	r3, [r1, #0]
 800291a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <TIM_Base_SetConfig+0x6c>)
 800291e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002920:	bf04      	itt	eq
 8002922:	690b      	ldreq	r3, [r1, #16]
 8002924:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002926:	2301      	movs	r3, #1
 8002928:	6143      	str	r3, [r0, #20]
 800292a:	4770      	bx	lr
 800292c:	40012c00 	.word	0x40012c00

08002930 <HAL_TIM_Base_Init>:
{
 8002930:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002932:	4604      	mov	r4, r0
 8002934:	2800      	cmp	r0, #0
 8002936:	d049      	beq.n	80029cc <HAL_TIM_Base_Init+0x9c>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002938:	6803      	ldr	r3, [r0, #0]
 800293a:	4a25      	ldr	r2, [pc, #148]	; (80029d0 <HAL_TIM_Base_Init+0xa0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00e      	beq.n	800295e <HAL_TIM_Base_Init+0x2e>
 8002940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002944:	d00b      	beq.n	800295e <HAL_TIM_Base_Init+0x2e>
 8002946:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <HAL_TIM_Base_Init+0x2e>
 800294e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002952:	4293      	cmp	r3, r2
 8002954:	d003      	beq.n	800295e <HAL_TIM_Base_Init+0x2e>
 8002956:	21d9      	movs	r1, #217	; 0xd9
 8002958:	481e      	ldr	r0, [pc, #120]	; (80029d4 <HAL_TIM_Base_Init+0xa4>)
 800295a:	f7fd fd98 	bl	800048e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800295e:	68a3      	ldr	r3, [r4, #8]
 8002960:	f033 0210 	bics.w	r2, r3, #16
 8002964:	d009      	beq.n	800297a <HAL_TIM_Base_Init+0x4a>
 8002966:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800296a:	2a20      	cmp	r2, #32
 800296c:	d005      	beq.n	800297a <HAL_TIM_Base_Init+0x4a>
 800296e:	2b40      	cmp	r3, #64	; 0x40
 8002970:	d003      	beq.n	800297a <HAL_TIM_Base_Init+0x4a>
 8002972:	21da      	movs	r1, #218	; 0xda
 8002974:	4817      	ldr	r0, [pc, #92]	; (80029d4 <HAL_TIM_Base_Init+0xa4>)
 8002976:	f7fd fd8a 	bl	800048e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800297a:	6923      	ldr	r3, [r4, #16]
 800297c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8002980:	d006      	beq.n	8002990 <HAL_TIM_Base_Init+0x60>
 8002982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002986:	d003      	beq.n	8002990 <HAL_TIM_Base_Init+0x60>
 8002988:	21db      	movs	r1, #219	; 0xdb
 800298a:	4812      	ldr	r0, [pc, #72]	; (80029d4 <HAL_TIM_Base_Init+0xa4>)
 800298c:	f7fd fd7f 	bl	800048e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002990:	69a3      	ldr	r3, [r4, #24]
 8002992:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8002996:	d003      	beq.n	80029a0 <HAL_TIM_Base_Init+0x70>
 8002998:	21dc      	movs	r1, #220	; 0xdc
 800299a:	480e      	ldr	r0, [pc, #56]	; (80029d4 <HAL_TIM_Base_Init+0xa4>)
 800299c:	f7fd fd77 	bl	800048e <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80029a0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80029a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029a8:	b923      	cbnz	r3, 80029b4 <HAL_TIM_Base_Init+0x84>
    htim->Lock = HAL_UNLOCKED;
 80029aa:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80029ae:	4620      	mov	r0, r4
 80029b0:	f7fd fe84 	bl	80006bc <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80029b4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80029b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029bc:	1d21      	adds	r1, r4, #4
 80029be:	f7ff ff7f 	bl	80028c0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80029c2:	2301      	movs	r3, #1
  return HAL_OK;
 80029c4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80029c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80029ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029cc:	2001      	movs	r0, #1
}
 80029ce:	bd10      	pop	{r4, pc}
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	08003790 	.word	0x08003790

080029d8 <HAL_TIM_OC_Init>:
{
 80029d8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80029da:	4604      	mov	r4, r0
 80029dc:	2800      	cmp	r0, #0
 80029de:	d04d      	beq.n	8002a7c <HAL_TIM_OC_Init+0xa4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80029e0:	6803      	ldr	r3, [r0, #0]
 80029e2:	4a27      	ldr	r2, [pc, #156]	; (8002a80 <HAL_TIM_OC_Init+0xa8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00f      	beq.n	8002a08 <HAL_TIM_OC_Init+0x30>
 80029e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ec:	d00c      	beq.n	8002a08 <HAL_TIM_OC_Init+0x30>
 80029ee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d008      	beq.n	8002a08 <HAL_TIM_OC_Init+0x30>
 80029f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d004      	beq.n	8002a08 <HAL_TIM_OC_Init+0x30>
 80029fe:	f240 11f1 	movw	r1, #497	; 0x1f1
 8002a02:	4820      	ldr	r0, [pc, #128]	; (8002a84 <HAL_TIM_OC_Init+0xac>)
 8002a04:	f7fd fd43 	bl	800048e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002a08:	68a3      	ldr	r3, [r4, #8]
 8002a0a:	f033 0210 	bics.w	r2, r3, #16
 8002a0e:	d00a      	beq.n	8002a26 <HAL_TIM_OC_Init+0x4e>
 8002a10:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002a14:	2a20      	cmp	r2, #32
 8002a16:	d006      	beq.n	8002a26 <HAL_TIM_OC_Init+0x4e>
 8002a18:	2b40      	cmp	r3, #64	; 0x40
 8002a1a:	d004      	beq.n	8002a26 <HAL_TIM_OC_Init+0x4e>
 8002a1c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8002a20:	4818      	ldr	r0, [pc, #96]	; (8002a84 <HAL_TIM_OC_Init+0xac>)
 8002a22:	f7fd fd34 	bl	800048e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002a26:	6923      	ldr	r3, [r4, #16]
 8002a28:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8002a2c:	d007      	beq.n	8002a3e <HAL_TIM_OC_Init+0x66>
 8002a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a32:	d004      	beq.n	8002a3e <HAL_TIM_OC_Init+0x66>
 8002a34:	f240 11f3 	movw	r1, #499	; 0x1f3
 8002a38:	4812      	ldr	r0, [pc, #72]	; (8002a84 <HAL_TIM_OC_Init+0xac>)
 8002a3a:	f7fd fd28 	bl	800048e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002a3e:	69a3      	ldr	r3, [r4, #24]
 8002a40:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8002a44:	d004      	beq.n	8002a50 <HAL_TIM_OC_Init+0x78>
 8002a46:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002a4a:	480e      	ldr	r0, [pc, #56]	; (8002a84 <HAL_TIM_OC_Init+0xac>)
 8002a4c:	f7fd fd1f 	bl	800048e <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002a50:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002a54:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a58:	b923      	cbnz	r3, 8002a64 <HAL_TIM_OC_Init+0x8c>
    htim->Lock = HAL_UNLOCKED;
 8002a5a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f7ff fc64 	bl	800232c <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002a64:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002a66:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002a68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002a6c:	1d21      	adds	r1, r4, #4
 8002a6e:	f7ff ff27 	bl	80028c0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002a72:	2301      	movs	r3, #1
  return HAL_OK;
 8002a74:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002a76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002a7a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a7c:	2001      	movs	r0, #1
}
 8002a7e:	bd10      	pop	{r4, pc}
 8002a80:	40012c00 	.word	0x40012c00
 8002a84:	08003790 	.word	0x08003790

08002a88 <HAL_TIM_PWM_Init>:
{
 8002a88:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	d04d      	beq.n	8002b2c <HAL_TIM_PWM_Init+0xa4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002a90:	6803      	ldr	r3, [r0, #0]
 8002a92:	4a27      	ldr	r2, [pc, #156]	; (8002b30 <HAL_TIM_PWM_Init+0xa8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00f      	beq.n	8002ab8 <HAL_TIM_PWM_Init+0x30>
 8002a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9c:	d00c      	beq.n	8002ab8 <HAL_TIM_PWM_Init+0x30>
 8002a9e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d008      	beq.n	8002ab8 <HAL_TIM_PWM_Init+0x30>
 8002aa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d004      	beq.n	8002ab8 <HAL_TIM_PWM_Init+0x30>
 8002aae:	f240 31ee 	movw	r1, #1006	; 0x3ee
 8002ab2:	4820      	ldr	r0, [pc, #128]	; (8002b34 <HAL_TIM_PWM_Init+0xac>)
 8002ab4:	f7fd fceb 	bl	800048e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002ab8:	68a3      	ldr	r3, [r4, #8]
 8002aba:	f033 0210 	bics.w	r2, r3, #16
 8002abe:	d00a      	beq.n	8002ad6 <HAL_TIM_PWM_Init+0x4e>
 8002ac0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002ac4:	2a20      	cmp	r2, #32
 8002ac6:	d006      	beq.n	8002ad6 <HAL_TIM_PWM_Init+0x4e>
 8002ac8:	2b40      	cmp	r3, #64	; 0x40
 8002aca:	d004      	beq.n	8002ad6 <HAL_TIM_PWM_Init+0x4e>
 8002acc:	f240 31ef 	movw	r1, #1007	; 0x3ef
 8002ad0:	4818      	ldr	r0, [pc, #96]	; (8002b34 <HAL_TIM_PWM_Init+0xac>)
 8002ad2:	f7fd fcdc 	bl	800048e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002ad6:	6923      	ldr	r3, [r4, #16]
 8002ad8:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8002adc:	d007      	beq.n	8002aee <HAL_TIM_PWM_Init+0x66>
 8002ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae2:	d004      	beq.n	8002aee <HAL_TIM_PWM_Init+0x66>
 8002ae4:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8002ae8:	4812      	ldr	r0, [pc, #72]	; (8002b34 <HAL_TIM_PWM_Init+0xac>)
 8002aea:	f7fd fcd0 	bl	800048e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002aee:	69a3      	ldr	r3, [r4, #24]
 8002af0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8002af4:	d004      	beq.n	8002b00 <HAL_TIM_PWM_Init+0x78>
 8002af6:	f240 31f1 	movw	r1, #1009	; 0x3f1
 8002afa:	480e      	ldr	r0, [pc, #56]	; (8002b34 <HAL_TIM_PWM_Init+0xac>)
 8002afc:	f7fd fcc7 	bl	800048e <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002b00:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002b04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b08:	b923      	cbnz	r3, 8002b14 <HAL_TIM_PWM_Init+0x8c>
    htim->Lock = HAL_UNLOCKED;
 8002b0a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002b0e:	4620      	mov	r0, r4
 8002b10:	f7ff fc0d 	bl	800232e <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002b14:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b16:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002b18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b1c:	1d21      	adds	r1, r4, #4
 8002b1e:	f7ff fecf 	bl	80028c0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002b22:	2301      	movs	r3, #1
  return HAL_OK;
 8002b24:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002b26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002b2a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b2c:	2001      	movs	r0, #1
}
 8002b2e:	bd10      	pop	{r4, pc}
 8002b30:	40012c00 	.word	0x40012c00
 8002b34:	08003790 	.word	0x08003790

08002b38 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b38:	6a03      	ldr	r3, [r0, #32]
{
 8002b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b3e:	f023 0310 	bic.w	r3, r3, #16
 8002b42:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002b44:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002b46:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002b4a:	6986      	ldr	r6, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b4c:	680b      	ldr	r3, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b4e:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b52:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b56:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002b58:	f024 0420 	bic.w	r4, r4, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b5c:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b60:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <TIM_OC2_SetConfig+0x94>)
{
 8002b62:	4605      	mov	r5, r0
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b64:	4298      	cmp	r0, r3
{
 8002b66:	460f      	mov	r7, r1
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b68:	d128      	bne.n	8002bbc <TIM_OC2_SetConfig+0x84>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8002b6a:	68cb      	ldr	r3, [r1, #12]
 8002b6c:	f033 0308 	bics.w	r3, r3, #8
 8002b70:	d004      	beq.n	8002b7c <TIM_OC2_SetConfig+0x44>
 8002b72:	f241 2189 	movw	r1, #4745	; 0x1289
 8002b76:	4816      	ldr	r0, [pc, #88]	; (8002bd0 <TIM_OC2_SetConfig+0x98>)
 8002b78:	f7fd fc89 	bl	800048e <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b7e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b82:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8002b86:	69bb      	ldr	r3, [r7, #24]
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b88:	f024 0440 	bic.w	r4, r4, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8002b8c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8002b90:	d004      	beq.n	8002b9c <TIM_OC2_SetConfig+0x64>
 8002b92:	f241 2197 	movw	r1, #4759	; 0x1297
 8002b96:	480e      	ldr	r0, [pc, #56]	; (8002bd0 <TIM_OC2_SetConfig+0x98>)
 8002b98:	f7fd fc79 	bl	800048e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8002ba2:	d004      	beq.n	8002bae <TIM_OC2_SetConfig+0x76>
 8002ba4:	f241 2198 	movw	r1, #4760	; 0x1298
 8002ba8:	4809      	ldr	r0, [pc, #36]	; (8002bd0 <TIM_OC2_SetConfig+0x98>)
 8002baa:	f7fd fc70 	bl	800048e <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002bae:	697b      	ldr	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002bb0:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bb2:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8002bbc:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 8002bbe:	f8c5 8004 	str.w	r8, [r5, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002bc2:	61ae      	str	r6, [r5, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002bc4:	63ab      	str	r3, [r5, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002bc6:	622c      	str	r4, [r5, #32]
 8002bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bcc:	40012c00 	.word	0x40012c00
 8002bd0:	08003790 	.word	0x08003790

08002bd4 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8002bd4:	2a18      	cmp	r2, #24
{
 8002bd6:	b570      	push	{r4, r5, r6, lr}
 8002bd8:	4604      	mov	r4, r0
 8002bda:	460d      	mov	r5, r1
 8002bdc:	4616      	mov	r6, r2
  assert_param(IS_TIM_CHANNELS(Channel));
 8002bde:	d803      	bhi.n	8002be8 <HAL_TIM_OC_ConfigChannel+0x14>
 8002be0:	4b4e      	ldr	r3, [pc, #312]	; (8002d1c <HAL_TIM_OC_ConfigChannel+0x148>)
 8002be2:	40d3      	lsrs	r3, r2
 8002be4:	07db      	lsls	r3, r3, #31
 8002be6:	d404      	bmi.n	8002bf2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002be8:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 8002bec:	484c      	ldr	r0, [pc, #304]	; (8002d20 <HAL_TIM_OC_ConfigChannel+0x14c>)
 8002bee:	f7fd fc4e 	bl	800048e <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8002bf2:	682b      	ldr	r3, [r5, #0]
 8002bf4:	f023 0210 	bic.w	r2, r3, #16
 8002bf8:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8002bfc:	d006      	beq.n	8002c0c <HAL_TIM_OC_ConfigChannel+0x38>
 8002bfe:	2a40      	cmp	r2, #64	; 0x40
 8002c00:	d004      	beq.n	8002c0c <HAL_TIM_OC_ConfigChannel+0x38>
 8002c02:	f640 3191 	movw	r1, #2961	; 0xb91
 8002c06:	4846      	ldr	r0, [pc, #280]	; (8002d20 <HAL_TIM_OC_ConfigChannel+0x14c>)
 8002c08:	f7fd fc41 	bl	800048e <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8002c0c:	68ab      	ldr	r3, [r5, #8]
 8002c0e:	f033 0302 	bics.w	r3, r3, #2
 8002c12:	d004      	beq.n	8002c1e <HAL_TIM_OC_ConfigChannel+0x4a>
 8002c14:	f640 3192 	movw	r1, #2962	; 0xb92
 8002c18:	4841      	ldr	r0, [pc, #260]	; (8002d20 <HAL_TIM_OC_ConfigChannel+0x14c>)
 8002c1a:	f7fd fc38 	bl	800048e <assert_failed>
  __HAL_LOCK(htim);
 8002c1e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002c22:	2002      	movs	r0, #2
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d02d      	beq.n	8002c84 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002c28:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002c2a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002c2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8002c32:	2e0c      	cmp	r6, #12
 8002c34:	d820      	bhi.n	8002c78 <HAL_TIM_OC_ConfigChannel+0xa4>
 8002c36:	e8df f006 	tbb	[pc, r6]
 8002c3a:	1f07      	.short	0x1f07
 8002c3c:	1f261f1f 	.word	0x1f261f1f
 8002c40:	1f3f1f1f 	.word	0x1f3f1f1f
 8002c44:	1f1f      	.short	0x1f1f
 8002c46:	58          	.byte	0x58
 8002c47:	00          	.byte	0x00
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	4a36      	ldr	r2, [pc, #216]	; (8002d24 <HAL_TIM_OC_ConfigChannel+0x150>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00f      	beq.n	8002c70 <HAL_TIM_OC_ConfigChannel+0x9c>
 8002c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c54:	d00c      	beq.n	8002c70 <HAL_TIM_OC_ConfigChannel+0x9c>
 8002c56:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d008      	beq.n	8002c70 <HAL_TIM_OC_ConfigChannel+0x9c>
 8002c5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d004      	beq.n	8002c70 <HAL_TIM_OC_ConfigChannel+0x9c>
 8002c66:	f640 319d 	movw	r1, #2973	; 0xb9d
 8002c6a:	482d      	ldr	r0, [pc, #180]	; (8002d20 <HAL_TIM_OC_ConfigChannel+0x14c>)
 8002c6c:	f7fd fc0f 	bl	800048e <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c70:	4629      	mov	r1, r5
 8002c72:	6820      	ldr	r0, [r4, #0]
 8002c74:	f7ff fa8c 	bl	8002190 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002c78:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002c7a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002c7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002c80:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002c84:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	4a26      	ldr	r2, [pc, #152]	; (8002d24 <HAL_TIM_OC_ConfigChannel+0x150>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00f      	beq.n	8002cae <HAL_TIM_OC_ConfigChannel+0xda>
 8002c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c92:	d00c      	beq.n	8002cae <HAL_TIM_OC_ConfigChannel+0xda>
 8002c94:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d008      	beq.n	8002cae <HAL_TIM_OC_ConfigChannel+0xda>
 8002c9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d004      	beq.n	8002cae <HAL_TIM_OC_ConfigChannel+0xda>
 8002ca4:	f640 31a5 	movw	r1, #2981	; 0xba5
 8002ca8:	481d      	ldr	r0, [pc, #116]	; (8002d20 <HAL_TIM_OC_ConfigChannel+0x14c>)
 8002caa:	f7fd fbf0 	bl	800048e <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cae:	4629      	mov	r1, r5
 8002cb0:	6820      	ldr	r0, [r4, #0]
 8002cb2:	f7ff ff41 	bl	8002b38 <TIM_OC2_SetConfig>
    break;
 8002cb6:	e7df      	b.n	8002c78 <HAL_TIM_OC_ConfigChannel+0xa4>
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	4a1a      	ldr	r2, [pc, #104]	; (8002d24 <HAL_TIM_OC_ConfigChannel+0x150>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00f      	beq.n	8002ce0 <HAL_TIM_OC_ConfigChannel+0x10c>
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d00c      	beq.n	8002ce0 <HAL_TIM_OC_ConfigChannel+0x10c>
 8002cc6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d008      	beq.n	8002ce0 <HAL_TIM_OC_ConfigChannel+0x10c>
 8002cce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d004      	beq.n	8002ce0 <HAL_TIM_OC_ConfigChannel+0x10c>
 8002cd6:	f640 31ad 	movw	r1, #2989	; 0xbad
 8002cda:	4811      	ldr	r0, [pc, #68]	; (8002d20 <HAL_TIM_OC_ConfigChannel+0x14c>)
 8002cdc:	f7fd fbd7 	bl	800048e <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	6820      	ldr	r0, [r4, #0]
 8002ce4:	f7ff faa0 	bl	8002228 <TIM_OC3_SetConfig>
    break;
 8002ce8:	e7c6      	b.n	8002c78 <HAL_TIM_OC_ConfigChannel+0xa4>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	4a0d      	ldr	r2, [pc, #52]	; (8002d24 <HAL_TIM_OC_ConfigChannel+0x150>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00f      	beq.n	8002d12 <HAL_TIM_OC_ConfigChannel+0x13e>
 8002cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf6:	d00c      	beq.n	8002d12 <HAL_TIM_OC_ConfigChannel+0x13e>
 8002cf8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d008      	beq.n	8002d12 <HAL_TIM_OC_ConfigChannel+0x13e>
 8002d00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_TIM_OC_ConfigChannel+0x13e>
 8002d08:	f640 31b5 	movw	r1, #2997	; 0xbb5
 8002d0c:	4804      	ldr	r0, [pc, #16]	; (8002d20 <HAL_TIM_OC_ConfigChannel+0x14c>)
 8002d0e:	f7fd fbbe 	bl	800048e <assert_failed>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d12:	4629      	mov	r1, r5
 8002d14:	6820      	ldr	r0, [r4, #0]
 8002d16:	f7ff fad5 	bl	80022c4 <TIM_OC4_SetConfig>
    break;
 8002d1a:	e7ad      	b.n	8002c78 <HAL_TIM_OC_ConfigChannel+0xa4>
 8002d1c:	01001111 	.word	0x01001111
 8002d20:	08003790 	.word	0x08003790
 8002d24:	40012c00 	.word	0x40012c00

08002d28 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8002d28:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002d2c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002d2e:	2b01      	cmp	r3, #1
{
 8002d30:	4604      	mov	r4, r0
 8002d32:	460d      	mov	r5, r1
 8002d34:	4616      	mov	r6, r2
  __HAL_LOCK(htim);
 8002d36:	f000 80d6 	beq.w	8002ee6 <HAL_TIM_PWM_ConfigChannel+0x1be>
 8002d3a:	2301      	movs	r3, #1
  assert_param(IS_TIM_CHANNELS(Channel));
 8002d3c:	2a18      	cmp	r2, #24
  __HAL_LOCK(htim);
 8002d3e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
 8002d42:	d803      	bhi.n	8002d4c <HAL_TIM_PWM_ConfigChannel+0x24>
 8002d44:	4b69      	ldr	r3, [pc, #420]	; (8002eec <HAL_TIM_PWM_ConfigChannel+0x1c4>)
 8002d46:	40d3      	lsrs	r3, r2
 8002d48:	07db      	lsls	r3, r3, #31
 8002d4a:	d404      	bmi.n	8002d56 <HAL_TIM_PWM_ConfigChannel+0x2e>
 8002d4c:	f640 4137 	movw	r1, #3127	; 0xc37
 8002d50:	4867      	ldr	r0, [pc, #412]	; (8002ef0 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8002d52:	f7fd fb9c 	bl	800048e <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8002d56:	682b      	ldr	r3, [r5, #0]
 8002d58:	f023 0310 	bic.w	r3, r3, #16
 8002d5c:	2b60      	cmp	r3, #96	; 0x60
 8002d5e:	d004      	beq.n	8002d6a <HAL_TIM_PWM_ConfigChannel+0x42>
 8002d60:	f640 4138 	movw	r1, #3128	; 0xc38
 8002d64:	4862      	ldr	r0, [pc, #392]	; (8002ef0 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8002d66:	f7fd fb92 	bl	800048e <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8002d6a:	68ab      	ldr	r3, [r5, #8]
 8002d6c:	f033 0302 	bics.w	r3, r3, #2
 8002d70:	d004      	beq.n	8002d7c <HAL_TIM_PWM_ConfigChannel+0x54>
 8002d72:	f640 4139 	movw	r1, #3129	; 0xc39
 8002d76:	485e      	ldr	r0, [pc, #376]	; (8002ef0 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8002d78:	f7fd fb89 	bl	800048e <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8002d7c:	692b      	ldr	r3, [r5, #16]
 8002d7e:	f033 0304 	bics.w	r3, r3, #4
 8002d82:	d004      	beq.n	8002d8e <HAL_TIM_PWM_ConfigChannel+0x66>
 8002d84:	f640 413a 	movw	r1, #3130	; 0xc3a
 8002d88:	4859      	ldr	r0, [pc, #356]	; (8002ef0 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8002d8a:	f7fd fb80 	bl	800048e <assert_failed>
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 8002d94:	2e0c      	cmp	r6, #12
 8002d96:	d82d      	bhi.n	8002df4 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8002d98:	e8df f006 	tbb	[pc, r6]
 8002d9c:	2c2c2c07 	.word	0x2c2c2c07
 8002da0:	2c2c2c33 	.word	0x2c2c2c33
 8002da4:	2c2c2c59 	.word	0x2c2c2c59
 8002da8:	7f          	.byte	0x7f
 8002da9:	00          	.byte	0x00
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	4a51      	ldr	r2, [pc, #324]	; (8002ef4 <HAL_TIM_PWM_ConfigChannel+0x1cc>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00f      	beq.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0xaa>
 8002db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db6:	d00c      	beq.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0xaa>
 8002db8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d008      	beq.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0xaa>
 8002dc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d004      	beq.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0xaa>
 8002dc8:	f640 4142 	movw	r1, #3138	; 0xc42
 8002dcc:	4848      	ldr	r0, [pc, #288]	; (8002ef0 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8002dce:	f7fd fb5e 	bl	800048e <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	6820      	ldr	r0, [r4, #0]
 8002dd6:	f7ff f9db 	bl	8002190 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dda:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ddc:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dde:	699a      	ldr	r2, [r3, #24]
 8002de0:	f042 0208 	orr.w	r2, r2, #8
 8002de4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	f022 0204 	bic.w	r2, r2, #4
 8002dec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dee:	699a      	ldr	r2, [r3, #24]
 8002df0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002df2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002df4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002df6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002df8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002dfc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8002e00:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	4a3b      	ldr	r2, [pc, #236]	; (8002ef4 <HAL_TIM_PWM_ConfigChannel+0x1cc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00f      	beq.n	8002e2a <HAL_TIM_PWM_ConfigChannel+0x102>
 8002e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0e:	d00c      	beq.n	8002e2a <HAL_TIM_PWM_ConfigChannel+0x102>
 8002e10:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d008      	beq.n	8002e2a <HAL_TIM_PWM_ConfigChannel+0x102>
 8002e18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d004      	beq.n	8002e2a <HAL_TIM_PWM_ConfigChannel+0x102>
 8002e20:	f640 4151 	movw	r1, #3153	; 0xc51
 8002e24:	4832      	ldr	r0, [pc, #200]	; (8002ef0 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8002e26:	f7fd fb32 	bl	800048e <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	6820      	ldr	r0, [r4, #0]
 8002e2e:	f7ff fe83 	bl	8002b38 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e32:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002e34:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e36:	699a      	ldr	r2, [r3, #24]
 8002e38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e3c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e3e:	699a      	ldr	r2, [r3, #24]
 8002e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e44:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002e46:	699a      	ldr	r2, [r3, #24]
 8002e48:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e4c:	e7d1      	b.n	8002df2 <HAL_TIM_PWM_ConfigChannel+0xca>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	4a28      	ldr	r2, [pc, #160]	; (8002ef4 <HAL_TIM_PWM_ConfigChannel+0x1cc>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00f      	beq.n	8002e76 <HAL_TIM_PWM_ConfigChannel+0x14e>
 8002e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5a:	d00c      	beq.n	8002e76 <HAL_TIM_PWM_ConfigChannel+0x14e>
 8002e5c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d008      	beq.n	8002e76 <HAL_TIM_PWM_ConfigChannel+0x14e>
 8002e64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d004      	beq.n	8002e76 <HAL_TIM_PWM_ConfigChannel+0x14e>
 8002e6c:	f44f 6146 	mov.w	r1, #3168	; 0xc60
 8002e70:	481f      	ldr	r0, [pc, #124]	; (8002ef0 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8002e72:	f7fd fb0c 	bl	800048e <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e76:	4629      	mov	r1, r5
 8002e78:	6820      	ldr	r0, [r4, #0]
 8002e7a:	f7ff f9d5 	bl	8002228 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e7e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e80:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e82:	69da      	ldr	r2, [r3, #28]
 8002e84:	f042 0208 	orr.w	r2, r2, #8
 8002e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e8a:	69da      	ldr	r2, [r3, #28]
 8002e8c:	f022 0204 	bic.w	r2, r2, #4
 8002e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002e96:	61da      	str	r2, [r3, #28]
    break;
 8002e98:	e7ac      	b.n	8002df4 <HAL_TIM_PWM_ConfigChannel+0xcc>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <HAL_TIM_PWM_ConfigChannel+0x1cc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00f      	beq.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x19a>
 8002ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea6:	d00c      	beq.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x19a>
 8002ea8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d008      	beq.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x19a>
 8002eb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d004      	beq.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x19a>
 8002eb8:	f640 416f 	movw	r1, #3183	; 0xc6f
 8002ebc:	480c      	ldr	r0, [pc, #48]	; (8002ef0 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8002ebe:	f7fd fae6 	bl	800048e <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	6820      	ldr	r0, [r4, #0]
 8002ec6:	f7ff f9fd 	bl	80022c4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eca:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002ecc:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ece:	69da      	ldr	r2, [r3, #28]
 8002ed0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ee4:	e7d7      	b.n	8002e96 <HAL_TIM_PWM_ConfigChannel+0x16e>
  __HAL_LOCK(htim);
 8002ee6:	2002      	movs	r0, #2
}
 8002ee8:	bd70      	pop	{r4, r5, r6, pc}
 8002eea:	bf00      	nop
 8002eec:	01001111 	.word	0x01001111
 8002ef0:	08003790 	.word	0x08003790
 8002ef4:	40012c00 	.word	0x40012c00

08002ef8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ef8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpbdtr = 0U;

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8002efa:	6802      	ldr	r2, [r0, #0]
 8002efc:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>)
{
 8002efe:	4604      	mov	r4, r0
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8002f00:	429a      	cmp	r2, r3
{
 8002f02:	460d      	mov	r5, r1
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8002f04:	d004      	beq.n	8002f10 <HAL_TIMEx_ConfigBreakDeadTime+0x18>
 8002f06:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8002f0a:	4834      	ldr	r0, [pc, #208]	; (8002fdc <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 8002f0c:	f7fd fabf 	bl	800048e <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8002f10:	682b      	ldr	r3, [r5, #0]
 8002f12:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8002f16:	d004      	beq.n	8002f22 <HAL_TIMEx_ConfigBreakDeadTime+0x2a>
 8002f18:	f240 6109 	movw	r1, #1545	; 0x609
 8002f1c:	482f      	ldr	r0, [pc, #188]	; (8002fdc <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 8002f1e:	f7fd fab6 	bl	800048e <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8002f22:	686b      	ldr	r3, [r5, #4]
 8002f24:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8002f28:	d004      	beq.n	8002f34 <HAL_TIMEx_ConfigBreakDeadTime+0x3c>
 8002f2a:	f240 610a 	movw	r1, #1546	; 0x60a
 8002f2e:	482b      	ldr	r0, [pc, #172]	; (8002fdc <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 8002f30:	f7fd faad 	bl	800048e <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8002f34:	68ab      	ldr	r3, [r5, #8]
 8002f36:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8002f3a:	d004      	beq.n	8002f46 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8002f3c:	f240 610b 	movw	r1, #1547	; 0x60b
 8002f40:	4826      	ldr	r0, [pc, #152]	; (8002fdc <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 8002f42:	f7fd faa4 	bl	800048e <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8002f46:	68eb      	ldr	r3, [r5, #12]
 8002f48:	2bff      	cmp	r3, #255	; 0xff
 8002f4a:	d904      	bls.n	8002f56 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 8002f4c:	f240 610c 	movw	r1, #1548	; 0x60c
 8002f50:	4822      	ldr	r0, [pc, #136]	; (8002fdc <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 8002f52:	f7fd fa9c 	bl	800048e <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8002f56:	692b      	ldr	r3, [r5, #16]
 8002f58:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8002f5c:	d004      	beq.n	8002f68 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8002f5e:	f240 610d 	movw	r1, #1549	; 0x60d
 8002f62:	481e      	ldr	r0, [pc, #120]	; (8002fdc <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 8002f64:	f7fd fa93 	bl	800048e <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8002f68:	696b      	ldr	r3, [r5, #20]
 8002f6a:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8002f6e:	d004      	beq.n	8002f7a <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8002f70:	f240 610e 	movw	r1, #1550	; 0x60e
 8002f74:	4819      	ldr	r0, [pc, #100]	; (8002fdc <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 8002f76:	f7fd fa8a 	bl	800048e <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8002f7a:	69ab      	ldr	r3, [r5, #24]
 8002f7c:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8002f80:	d004      	beq.n	8002f8c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8002f82:	f240 610f 	movw	r1, #1551	; 0x60f
 8002f86:	4815      	ldr	r0, [pc, #84]	; (8002fdc <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 8002f88:	f7fd fa81 	bl	800048e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f8c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d01e      	beq.n	8002fd2 <HAL_TIMEx_ConfigBreakDeadTime+0xda>
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8002f94:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f96:	68eb      	ldr	r3, [r5, #12]
 8002f98:	68aa      	ldr	r2, [r5, #8]
 8002f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002fa0:	686a      	ldr	r2, [r5, #4]
 8002fa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fa6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002fa8:	682a      	ldr	r2, [r5, #0]
 8002faa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fae:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fb0:	692a      	ldr	r2, [r5, #16]
 8002fb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fb6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002fb8:	696a      	ldr	r2, [r5, #20]
 8002fba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fbe:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002fc0:	69aa      	ldr	r2, [r5, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002fc2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002fc6:	4313      	orrs	r3, r2
  htim->Instance->BDTR = tmpbdtr;
 8002fc8:	6822      	ldr	r2, [r4, #0]
 8002fca:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8002fcc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 8002fd0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002fd2:	2002      	movs	r0, #2
}
 8002fd4:	bd38      	pop	{r3, r4, r5, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40012c00 	.word	0x40012c00
 8002fdc:	080037c8 	.word	0x080037c8

08002fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002fe0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8002fe2:	4a24      	ldr	r2, [pc, #144]	; (8003074 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8002fe4:	6803      	ldr	r3, [r0, #0]
{
 8002fe6:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8002fe8:	4293      	cmp	r3, r2
{
 8002fea:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8002fec:	d00f      	beq.n	800300e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8002fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff2:	d00c      	beq.n	800300e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8002ff4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d008      	beq.n	800300e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8002ffc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003000:	4293      	cmp	r3, r2
 8003002:	d004      	beq.n	800300e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8003004:	f44f 61c7 	mov.w	r1, #1592	; 0x638
 8003008:	481b      	ldr	r0, [pc, #108]	; (8003078 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800300a:	f7fd fa40 	bl	800048e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800300e:	682b      	ldr	r3, [r5, #0]
 8003010:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8003014:	d006      	beq.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003016:	2b40      	cmp	r3, #64	; 0x40
 8003018:	d004      	beq.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800301a:	f240 6139 	movw	r1, #1593	; 0x639
 800301e:	4816      	ldr	r0, [pc, #88]	; (8003078 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8003020:	f7fd fa35 	bl	800048e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8003024:	686b      	ldr	r3, [r5, #4]
 8003026:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800302a:	d004      	beq.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800302c:	f240 613a 	movw	r1, #1594	; 0x63a
 8003030:	4811      	ldr	r0, [pc, #68]	; (8003078 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8003032:	f7fd fa2c 	bl	800048e <assert_failed>

  __HAL_LOCK(htim);
 8003036:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800303a:	2002      	movs	r0, #2
 800303c:	2b01      	cmp	r3, #1
 800303e:	d018      	beq.n	8003072 <HAL_TIMEx_MasterConfigSynchronization+0x92>

  htim->State = HAL_TIM_STATE_BUSY;

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003040:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003042:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003046:	685a      	ldr	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003048:	6829      	ldr	r1, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800304a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800304e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003050:	685a      	ldr	r2, [r3, #4]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003052:	2000      	movs	r0, #0
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003054:	430a      	orrs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003058:	689a      	ldr	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800305a:	6869      	ldr	r1, [r5, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800305c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003060:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	430a      	orrs	r2, r1
 8003066:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003068:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800306a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800306e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
}
 8003072:	bd38      	pop	{r3, r4, r5, pc}
 8003074:	40012c00 	.word	0x40012c00
 8003078:	080037c8 	.word	0x080037c8

0800307c <HAL_TIMEx_CommutationCallback>:
 800307c:	4770      	bx	lr

0800307e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800307e:	4770      	bx	lr

08003080 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003080:	6803      	ldr	r3, [r0, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003088:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	f022 0201 	bic.w	r2, r2, #1
 8003090:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003092:	2320      	movs	r3, #32
 8003094:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8003098:	4770      	bx	lr
	...

0800309c <UART_SetConfig>:
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg = 0x00U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800309c:	6842      	ldr	r2, [r0, #4]
 800309e:	4b65      	ldr	r3, [pc, #404]	; (8003234 <UART_SetConfig+0x198>)
{
 80030a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80030a4:	429a      	cmp	r2, r3
{
 80030a6:	4681      	mov	r9, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80030a8:	d904      	bls.n	80030b4 <UART_SetConfig+0x18>
 80030aa:	f640 11a7 	movw	r1, #2471	; 0x9a7
 80030ae:	4862      	ldr	r0, [pc, #392]	; (8003238 <UART_SetConfig+0x19c>)
 80030b0:	f7fd f9ed 	bl	800048e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80030b4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80030b8:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80030bc:	d004      	beq.n	80030c8 <UART_SetConfig+0x2c>
 80030be:	f640 11a8 	movw	r1, #2472	; 0x9a8
 80030c2:	485d      	ldr	r0, [pc, #372]	; (8003238 <UART_SetConfig+0x19c>)
 80030c4:	f7fd f9e3 	bl	800048e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80030c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80030cc:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80030d0:	d007      	beq.n	80030e2 <UART_SetConfig+0x46>
 80030d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80030d6:	d004      	beq.n	80030e2 <UART_SetConfig+0x46>
 80030d8:	f640 11a9 	movw	r1, #2473	; 0x9a9
 80030dc:	4856      	ldr	r0, [pc, #344]	; (8003238 <UART_SetConfig+0x19c>)
 80030de:	f7fd f9d6 	bl	800048e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80030e2:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 80030e6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80030ea:	4213      	tst	r3, r2
 80030ec:	d100      	bne.n	80030f0 <UART_SetConfig+0x54>
 80030ee:	b923      	cbnz	r3, 80030fa <UART_SetConfig+0x5e>
 80030f0:	f640 11aa 	movw	r1, #2474	; 0x9aa
 80030f4:	4850      	ldr	r0, [pc, #320]	; (8003238 <UART_SetConfig+0x19c>)
 80030f6:	f7fd f9ca 	bl	800048e <assert_failed>

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030fa:	f8d9 5000 	ldr.w	r5, [r9]
 80030fe:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8003102:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003104:	f8d9 1010 	ldr.w	r1, [r9, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003108:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800310c:	4313      	orrs	r3, r2
 800310e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003110:	f8d9 3008 	ldr.w	r3, [r9, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8003114:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003116:	430b      	orrs	r3, r1
 8003118:	f8d9 1014 	ldr.w	r1, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800311c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8003120:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003124:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8003126:	4313      	orrs	r3, r2
 8003128:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800312a:	696b      	ldr	r3, [r5, #20]
 800312c:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8003130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003134:	4313      	orrs	r3, r2
 8003136:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003138:	4b40      	ldr	r3, [pc, #256]	; (800323c <UART_SetConfig+0x1a0>)
 800313a:	2419      	movs	r4, #25
 800313c:	429d      	cmp	r5, r3
 800313e:	d146      	bne.n	80031ce <UART_SetConfig+0x132>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003140:	f7fe ff7a 	bl	8002038 <HAL_RCC_GetPCLK2Freq>
 8003144:	fb04 f300 	mul.w	r3, r4, r0
 8003148:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800314c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003150:	00b6      	lsls	r6, r6, #2
 8003152:	fbb3 f3f6 	udiv	r3, r3, r6
 8003156:	fbb3 f3f8 	udiv	r3, r3, r8
 800315a:	011e      	lsls	r6, r3, #4
 800315c:	f7fe ff6c 	bl	8002038 <HAL_RCC_GetPCLK2Freq>
 8003160:	4360      	muls	r0, r4
 8003162:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	fbb0 f7f3 	udiv	r7, r0, r3
 800316c:	f7fe ff64 	bl	8002038 <HAL_RCC_GetPCLK2Freq>
 8003170:	4360      	muls	r0, r4
 8003172:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	fbb0 f3f3 	udiv	r3, r0, r3
 800317c:	fbb3 f3f8 	udiv	r3, r3, r8
 8003180:	fb08 7313 	mls	r3, r8, r3, r7
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	3332      	adds	r3, #50	; 0x32
 8003188:	fbb3 f3f8 	udiv	r3, r3, r8
 800318c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003190:	f7fe ff52 	bl	8002038 <HAL_RCC_GetPCLK2Freq>
 8003194:	4360      	muls	r0, r4
 8003196:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800319a:	0092      	lsls	r2, r2, #2
 800319c:	fbb0 faf2 	udiv	sl, r0, r2
 80031a0:	f7fe ff4a 	bl	8002038 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80031a4:	4360      	muls	r0, r4
 80031a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b0:	fbb3 f3f8 	udiv	r3, r3, r8
 80031b4:	fb08 a313 	mls	r3, r8, r3, sl
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	3332      	adds	r3, #50	; 0x32
 80031bc:	fbb3 f3f8 	udiv	r3, r3, r8
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	433b      	orrs	r3, r7
 80031c6:	4433      	add	r3, r6
 80031c8:	60ab      	str	r3, [r5, #8]
 80031ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ce:	f7fe ff23 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 80031d2:	fb04 f300 	mul.w	r3, r4, r0
 80031d6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80031da:	f04f 0864 	mov.w	r8, #100	; 0x64
 80031de:	00b6      	lsls	r6, r6, #2
 80031e0:	fbb3 f3f6 	udiv	r3, r3, r6
 80031e4:	fbb3 f3f8 	udiv	r3, r3, r8
 80031e8:	011e      	lsls	r6, r3, #4
 80031ea:	f7fe ff15 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 80031ee:	4360      	muls	r0, r4
 80031f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	fbb0 f7f3 	udiv	r7, r0, r3
 80031fa:	f7fe ff0d 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 80031fe:	4360      	muls	r0, r4
 8003200:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	fbb0 f3f3 	udiv	r3, r0, r3
 800320a:	fbb3 f3f8 	udiv	r3, r3, r8
 800320e:	fb08 7313 	mls	r3, r8, r3, r7
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	3332      	adds	r3, #50	; 0x32
 8003216:	fbb3 f3f8 	udiv	r3, r3, r8
 800321a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800321e:	f7fe fefb 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 8003222:	4360      	muls	r0, r4
 8003224:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003228:	0092      	lsls	r2, r2, #2
 800322a:	fbb0 faf2 	udiv	sl, r0, r2
 800322e:	f7fe fef3 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 8003232:	e7b7      	b.n	80031a4 <UART_SetConfig+0x108>
 8003234:	0044aa20 	.word	0x0044aa20
 8003238:	08003803 	.word	0x08003803
 800323c:	40013800 	.word	0x40013800

08003240 <HAL_UART_Init>:
{
 8003240:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003242:	4604      	mov	r4, r0
 8003244:	2800      	cmp	r0, #0
 8003246:	d05b      	beq.n	8003300 <HAL_UART_Init+0xc0>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003248:	6981      	ldr	r1, [r0, #24]
 800324a:	6803      	ldr	r3, [r0, #0]
 800324c:	4a2d      	ldr	r2, [pc, #180]	; (8003304 <HAL_UART_Init+0xc4>)
 800324e:	2900      	cmp	r1, #0
 8003250:	d04a      	beq.n	80032e8 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003252:	4293      	cmp	r3, r2
 8003254:	d00c      	beq.n	8003270 <HAL_UART_Init+0x30>
 8003256:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800325a:	4293      	cmp	r3, r2
 800325c:	d008      	beq.n	8003270 <HAL_UART_Init+0x30>
 800325e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <HAL_UART_Init+0x30>
 8003266:	f240 110f 	movw	r1, #271	; 0x10f
 800326a:	4827      	ldr	r0, [pc, #156]	; (8003308 <HAL_UART_Init+0xc8>)
 800326c:	f7fd f90f 	bl	800048e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003270:	69a3      	ldr	r3, [r4, #24]
 8003272:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8003276:	d004      	beq.n	8003282 <HAL_UART_Init+0x42>
 8003278:	f44f 7188 	mov.w	r1, #272	; 0x110
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800327c:	4822      	ldr	r0, [pc, #136]	; (8003308 <HAL_UART_Init+0xc8>)
 800327e:	f7fd f906 	bl	800048e <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003282:	68a3      	ldr	r3, [r4, #8]
 8003284:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8003288:	d004      	beq.n	8003294 <HAL_UART_Init+0x54>
 800328a:	f44f 718b 	mov.w	r1, #278	; 0x116
 800328e:	481e      	ldr	r0, [pc, #120]	; (8003308 <HAL_UART_Init+0xc8>)
 8003290:	f7fd f8fd 	bl	800048e <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003294:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003298:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800329c:	b923      	cbnz	r3, 80032a8 <HAL_UART_Init+0x68>
    huart->Lock = HAL_UNLOCKED;
 800329e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80032a2:	4620      	mov	r0, r4
 80032a4:	f7fd fbc4 	bl	8000a30 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80032a8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80032aa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80032ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80032b0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80032b2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80032b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032b8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80032ba:	f7ff feef 	bl	800309c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032be:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032d0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032d8:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80032da:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032dc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80032de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80032e2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80032e6:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d0ca      	beq.n	8003282 <HAL_UART_Init+0x42>
 80032ec:	4a07      	ldr	r2, [pc, #28]	; (800330c <HAL_UART_Init+0xcc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d0c7      	beq.n	8003282 <HAL_UART_Init+0x42>
 80032f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d0c3      	beq.n	8003282 <HAL_UART_Init+0x42>
 80032fa:	f44f 718a 	mov.w	r1, #276	; 0x114
 80032fe:	e7bd      	b.n	800327c <HAL_UART_Init+0x3c>
    return HAL_ERROR;
 8003300:	2001      	movs	r0, #1
}
 8003302:	bd10      	pop	{r4, pc}
 8003304:	40013800 	.word	0x40013800
 8003308:	08003803 	.word	0x08003803
 800330c:	40004400 	.word	0x40004400

08003310 <HAL_UART_TxCpltCallback>:
 8003310:	4770      	bx	lr

08003312 <HAL_UART_RxCpltCallback>:
 8003312:	4770      	bx	lr

08003314 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003314:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8003318:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800331a:	2b22      	cmp	r3, #34	; 0x22
 800331c:	d136      	bne.n	800338c <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800331e:	6883      	ldr	r3, [r0, #8]
 8003320:	6901      	ldr	r1, [r0, #16]
 8003322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003326:	6802      	ldr	r2, [r0, #0]
 8003328:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800332a:	d123      	bne.n	8003374 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800332c:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800332e:	b9e9      	cbnz	r1, 800336c <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003334:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8003338:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 800333a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800333c:	3c01      	subs	r4, #1
 800333e:	b2a4      	uxth	r4, r4
 8003340:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8003342:	b98c      	cbnz	r4, 8003368 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003344:	6803      	ldr	r3, [r0, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	f022 0220 	bic.w	r2, r2, #32
 800334c:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003354:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	f022 0201 	bic.w	r2, r2, #1
 800335c:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800335e:	2320      	movs	r3, #32
 8003360:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003364:	f7ff ffd5 	bl	8003312 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8003368:	2000      	movs	r0, #0
}
 800336a:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	f823 2b01 	strh.w	r2, [r3], #1
 8003372:	e7e1      	b.n	8003338 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003374:	b921      	cbnz	r1, 8003380 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003376:	1c59      	adds	r1, r3, #1
 8003378:	6852      	ldr	r2, [r2, #4]
 800337a:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	e7dc      	b.n	800333a <UART_Receive_IT+0x26>
 8003380:	6852      	ldr	r2, [r2, #4]
 8003382:	1c59      	adds	r1, r3, #1
 8003384:	6281      	str	r1, [r0, #40]	; 0x28
 8003386:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800338a:	e7f7      	b.n	800337c <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800338c:	2002      	movs	r0, #2
 800338e:	bd10      	pop	{r4, pc}

08003390 <HAL_UART_ErrorCallback>:
 8003390:	4770      	bx	lr
	...

08003394 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003394:	6803      	ldr	r3, [r0, #0]
{
 8003396:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003398:	681a      	ldr	r2, [r3, #0]
{
 800339a:	4604      	mov	r4, r0
  if(errorflags == RESET)
 800339c:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800339e:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033a0:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80033a2:	d107      	bne.n	80033b4 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033a4:	0696      	lsls	r6, r2, #26
 80033a6:	d55a      	bpl.n	800345e <HAL_UART_IRQHandler+0xca>
 80033a8:	068d      	lsls	r5, r1, #26
 80033aa:	d558      	bpl.n	800345e <HAL_UART_IRQHandler+0xca>
}
 80033ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80033b0:	f7ff bfb0 	b.w	8003314 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033b4:	f015 0501 	ands.w	r5, r5, #1
 80033b8:	d102      	bne.n	80033c0 <HAL_UART_IRQHandler+0x2c>
 80033ba:	f411 7f90 	tst.w	r1, #288	; 0x120
 80033be:	d04e      	beq.n	800345e <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033c0:	07d3      	lsls	r3, r2, #31
 80033c2:	d505      	bpl.n	80033d0 <HAL_UART_IRQHandler+0x3c>
 80033c4:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033c6:	bf42      	ittt	mi
 80033c8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80033ca:	f043 0301 	orrmi.w	r3, r3, #1
 80033ce:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033d0:	0750      	lsls	r0, r2, #29
 80033d2:	d504      	bpl.n	80033de <HAL_UART_IRQHandler+0x4a>
 80033d4:	b11d      	cbz	r5, 80033de <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033d8:	f043 0302 	orr.w	r3, r3, #2
 80033dc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033de:	0793      	lsls	r3, r2, #30
 80033e0:	d504      	bpl.n	80033ec <HAL_UART_IRQHandler+0x58>
 80033e2:	b11d      	cbz	r5, 80033ec <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033e6:	f043 0304 	orr.w	r3, r3, #4
 80033ea:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033ec:	0716      	lsls	r6, r2, #28
 80033ee:	d504      	bpl.n	80033fa <HAL_UART_IRQHandler+0x66>
 80033f0:	b11d      	cbz	r5, 80033fa <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033f4:	f043 0308 	orr.w	r3, r3, #8
 80033f8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d066      	beq.n	80034ce <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003400:	0695      	lsls	r5, r2, #26
 8003402:	d504      	bpl.n	800340e <HAL_UART_IRQHandler+0x7a>
 8003404:	0688      	lsls	r0, r1, #26
 8003406:	d502      	bpl.n	800340e <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8003408:	4620      	mov	r0, r4
 800340a:	f7ff ff83 	bl	8003314 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800340e:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8003410:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003412:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003414:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003416:	0711      	lsls	r1, r2, #28
 8003418:	d402      	bmi.n	8003420 <HAL_UART_IRQHandler+0x8c>
 800341a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800341e:	d01a      	beq.n	8003456 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8003420:	f7ff fe2e 	bl	8003080 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	0652      	lsls	r2, r2, #25
 800342a:	d510      	bpl.n	800344e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800342c:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800342e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003434:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8003436:	b150      	cbz	r0, 800344e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003438:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <HAL_UART_IRQHandler+0x13c>)
 800343a:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800343c:	f7fd ff28 	bl	8001290 <HAL_DMA_Abort_IT>
 8003440:	2800      	cmp	r0, #0
 8003442:	d044      	beq.n	80034ce <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003444:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8003446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800344a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800344c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800344e:	4620      	mov	r0, r4
 8003450:	f7ff ff9e 	bl	8003390 <HAL_UART_ErrorCallback>
 8003454:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003456:	f7ff ff9b 	bl	8003390 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800345c:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800345e:	0616      	lsls	r6, r2, #24
 8003460:	d527      	bpl.n	80034b2 <HAL_UART_IRQHandler+0x11e>
 8003462:	060d      	lsls	r5, r1, #24
 8003464:	d525      	bpl.n	80034b2 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8003466:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800346a:	2a21      	cmp	r2, #33	; 0x21
 800346c:	d12f      	bne.n	80034ce <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800346e:	68a2      	ldr	r2, [r4, #8]
 8003470:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003474:	6a22      	ldr	r2, [r4, #32]
 8003476:	d117      	bne.n	80034a8 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003478:	8811      	ldrh	r1, [r2, #0]
 800347a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800347e:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003480:	6921      	ldr	r1, [r4, #16]
 8003482:	b979      	cbnz	r1, 80034a4 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8003484:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8003486:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8003488:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800348a:	3a01      	subs	r2, #1
 800348c:	b292      	uxth	r2, r2
 800348e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003490:	b9ea      	cbnz	r2, 80034ce <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003498:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80034a4:	3201      	adds	r2, #1
 80034a6:	e7ee      	b.n	8003486 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034a8:	1c51      	adds	r1, r2, #1
 80034aa:	6221      	str	r1, [r4, #32]
 80034ac:	7812      	ldrb	r2, [r2, #0]
 80034ae:	605a      	str	r2, [r3, #4]
 80034b0:	e7ea      	b.n	8003488 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034b2:	0650      	lsls	r0, r2, #25
 80034b4:	d50b      	bpl.n	80034ce <HAL_UART_IRQHandler+0x13a>
 80034b6:	064a      	lsls	r2, r1, #25
 80034b8:	d509      	bpl.n	80034ce <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034ba:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80034bc:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c2:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80034c4:	2320      	movs	r3, #32
 80034c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80034ca:	f7ff ff21 	bl	8003310 <HAL_UART_TxCpltCallback>
 80034ce:	bd70      	pop	{r4, r5, r6, pc}
 80034d0:	080034d5 	.word	0x080034d5

080034d4 <UART_DMAAbortOnError>:
{
 80034d4:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80034d6:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80034da:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80034dc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80034de:	f7ff ff57 	bl	8003390 <HAL_UART_ErrorCallback>
 80034e2:	bd08      	pop	{r3, pc}

080034e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80034e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80034e6:	e003      	b.n	80034f0 <LoopCopyDataInit>

080034e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80034ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80034ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80034ee:	3104      	adds	r1, #4

080034f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80034f0:	480a      	ldr	r0, [pc, #40]	; (800351c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80034f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80034f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80034f8:	d3f6      	bcc.n	80034e8 <CopyDataInit>
  ldr r2, =_sbss
 80034fa:	4a0a      	ldr	r2, [pc, #40]	; (8003524 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80034fc:	e002      	b.n	8003504 <LoopFillZerobss>

080034fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80034fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003500:	f842 3b04 	str.w	r3, [r2], #4

08003504 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003506:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003508:	d3f9      	bcc.n	80034fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800350a:	f7fd f843 	bl	8000594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800350e:	f000 f80f 	bl	8003530 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003512:	f7fc ffa1 	bl	8000458 <main>
  bx lr
 8003516:	4770      	bx	lr
  ldr r3, =_sidata
 8003518:	08003844 	.word	0x08003844
  ldr r0, =_sdata
 800351c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003520:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8003524:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8003528:	20000260 	.word	0x20000260

0800352c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800352c:	e7fe      	b.n	800352c <CAN1_RX1_IRQHandler>
	...

08003530 <__libc_init_array>:
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	2500      	movs	r5, #0
 8003534:	4e0c      	ldr	r6, [pc, #48]	; (8003568 <__libc_init_array+0x38>)
 8003536:	4c0d      	ldr	r4, [pc, #52]	; (800356c <__libc_init_array+0x3c>)
 8003538:	1ba4      	subs	r4, r4, r6
 800353a:	10a4      	asrs	r4, r4, #2
 800353c:	42a5      	cmp	r5, r4
 800353e:	d109      	bne.n	8003554 <__libc_init_array+0x24>
 8003540:	f000 f822 	bl	8003588 <_init>
 8003544:	2500      	movs	r5, #0
 8003546:	4e0a      	ldr	r6, [pc, #40]	; (8003570 <__libc_init_array+0x40>)
 8003548:	4c0a      	ldr	r4, [pc, #40]	; (8003574 <__libc_init_array+0x44>)
 800354a:	1ba4      	subs	r4, r4, r6
 800354c:	10a4      	asrs	r4, r4, #2
 800354e:	42a5      	cmp	r5, r4
 8003550:	d105      	bne.n	800355e <__libc_init_array+0x2e>
 8003552:	bd70      	pop	{r4, r5, r6, pc}
 8003554:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003558:	4798      	blx	r3
 800355a:	3501      	adds	r5, #1
 800355c:	e7ee      	b.n	800353c <__libc_init_array+0xc>
 800355e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003562:	4798      	blx	r3
 8003564:	3501      	adds	r5, #1
 8003566:	e7f2      	b.n	800354e <__libc_init_array+0x1e>
 8003568:	0800383c 	.word	0x0800383c
 800356c:	0800383c 	.word	0x0800383c
 8003570:	0800383c 	.word	0x0800383c
 8003574:	08003840 	.word	0x08003840

08003578 <memset>:
 8003578:	4603      	mov	r3, r0
 800357a:	4402      	add	r2, r0
 800357c:	4293      	cmp	r3, r2
 800357e:	d100      	bne.n	8003582 <memset+0xa>
 8003580:	4770      	bx	lr
 8003582:	f803 1b01 	strb.w	r1, [r3], #1
 8003586:	e7f9      	b.n	800357c <memset+0x4>

08003588 <_init>:
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358a:	bf00      	nop
 800358c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358e:	bc08      	pop	{r3}
 8003590:	469e      	mov	lr, r3
 8003592:	4770      	bx	lr

08003594 <_fini>:
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	bf00      	nop
 8003598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359a:	bc08      	pop	{r3}
 800359c:	469e      	mov	lr, r3
 800359e:	4770      	bx	lr
