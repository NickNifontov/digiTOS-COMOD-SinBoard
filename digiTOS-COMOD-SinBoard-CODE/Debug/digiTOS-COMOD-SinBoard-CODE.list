
digiTOS-COMOD-SinBoard-CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005758  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08005864  08005864  00015864  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005bf0  08005bf0  00015bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005bf4  08005bf4  00015bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c4  20000000  08005bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000043c  200000c8  08005cbc  000200c8  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000504  08005cbc  00020504  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002d714  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005b01  00000000  00000000  0004d801  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008e6b  00000000  00000000  00053302  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001088  00000000  00000000  0005c170  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001468  00000000  00000000  0005d1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c1c4  00000000  00000000  0005e660  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000549e  00000000  00000000  0006a824  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006fcc2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000032e4  00000000  00000000  0006fd40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c8 	.word	0x200000c8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800584c 	.word	0x0800584c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000cc 	.word	0x200000cc
 8000148:	0800584c 	.word	0x0800584c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};

  /**Common config 
  */
  hadc1.Instance = ADC1;
 8000736:	481a      	ldr	r0, [pc, #104]	; (80007a0 <MX_ADC1_Init+0x6c>)
 8000738:	4a1a      	ldr	r2, [pc, #104]	; (80007a4 <MX_ADC1_Init+0x70>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800073a:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 800073c:	2401      	movs	r4, #1
  hadc1.Instance = ADC1;
 800073e:	6002      	str	r2, [r0, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000740:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	9302      	str	r3, [sp, #8]
 8000748:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074a:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800074c:	60c4      	str	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800074e:	6143      	str	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000750:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000752:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000754:	6104      	str	r4, [r0, #16]

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000756:	f001 ff5f 	bl	8002618 <HAL_ADC_Init>
 800075a:	b108      	cbz	r0, 8000760 <MX_ADC1_Init+0x2c>
  {
    Error_Handler();
 800075c:	f001 f95a 	bl	8001a14 <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000760:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000762:	a901      	add	r1, sp, #4
 8000764:	480e      	ldr	r0, [pc, #56]	; (80007a0 <MX_ADC1_Init+0x6c>)
  sConfig.Channel = ADC_CHANNEL_1;
 8000766:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000768:	9402      	str	r4, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800076a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076c:	f001 fdbc 	bl	80022e8 <HAL_ADC_ConfigChannel>
 8000770:	b108      	cbz	r0, 8000776 <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 8000772:	f001 f94f 	bl	8001a14 <Error_Handler>
  }

  	/**Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_2;
 8000776:	2302      	movs	r3, #2
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	a901      	add	r1, sp, #4
 800077a:	4809      	ldr	r0, [pc, #36]	; (80007a0 <MX_ADC1_Init+0x6c>)
    sConfig.Channel = ADC_CHANNEL_2;
 800077c:	9301      	str	r3, [sp, #4]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077e:	f001 fdb3 	bl	80022e8 <HAL_ADC_ConfigChannel>
 8000782:	b108      	cbz	r0, 8000788 <MX_ADC1_Init+0x54>
    {
      Error_Handler();
 8000784:	f001 f946 	bl	8001a14 <Error_Handler>

	#endif

    /**Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_5;
 8000788:	2305      	movs	r3, #5
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078a:	a901      	add	r1, sp, #4
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_ADC1_Init+0x6c>)
    sConfig.Channel = ADC_CHANNEL_5;
 800078e:	9301      	str	r3, [sp, #4]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000790:	f001 fdaa 	bl	80022e8 <HAL_ADC_ConfigChannel>
 8000794:	b108      	cbz	r0, 800079a <MX_ADC1_Init+0x66>
    {
      Error_Handler();
 8000796:	f001 f93d 	bl	8001a14 <Error_Handler>
		  {
			Error_Handler();
		  }
	#endif

}
 800079a:	b004      	add	sp, #16
 800079c:	bd10      	pop	{r4, pc}
 800079e:	bf00      	nop
 80007a0:	2000019c 	.word	0x2000019c
 80007a4:	40012400 	.word	0x40012400

080007a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	4605      	mov	r5, r0
 80007ac:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	2210      	movs	r2, #16
 80007b0:	2100      	movs	r1, #0
 80007b2:	a802      	add	r0, sp, #8
 80007b4:	f004 fbf2 	bl	8004f9c <memset>
  if(adcHandle->Instance==ADC1)
 80007b8:	682a      	ldr	r2, [r5, #0]
 80007ba:	4b22      	ldr	r3, [pc, #136]	; (8000844 <HAL_ADC_MspInit+0x9c>)
 80007bc:	429a      	cmp	r2, r3
 80007be:	d13e      	bne.n	800083e <HAL_ADC_MspInit+0x96>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007c0:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80007c4:	699a      	ldr	r2, [r3, #24]
    */
    GPIO_InitStruct.Pin = V_OUT_Pin|C_OUT_Pin|V_IN_Pin|V_IN_WAVE_DETECTOR_Pin 
                          |DC_FEEDBACK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	4820      	ldr	r0, [pc, #128]	; (8000848 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007cc:	619a      	str	r2, [r3, #24]
 80007ce:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007d2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80007d6:	9200      	str	r2, [sp, #0]
 80007d8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80007dc:	4c1b      	ldr	r4, [pc, #108]	; (800084c <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	f042 0204 	orr.w	r2, r2, #4
 80007e2:	619a      	str	r2, [r3, #24]
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = V_OUT_Pin|C_OUT_Pin|V_IN_Pin|V_IN_WAVE_DETECTOR_Pin 
 80007ee:	233e      	movs	r3, #62	; 0x3e
 80007f0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f2:	2303      	movs	r3, #3
 80007f4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f002 fb1d 	bl	8002e34 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_ADC_MspInit+0xa8>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007fc:	4620      	mov	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 80007fe:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000800:	2300      	movs	r3, #0
 8000802:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000804:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800080a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080e:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000814:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000816:	2320      	movs	r3, #32
 8000818:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000820:	f002 f882 	bl	8002928 <HAL_DMA_Init>
 8000824:	b108      	cbz	r0, 800082a <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 8000826:	f001 f8f5 	bl	8001a14 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800082a:	622c      	str	r4, [r5, #32]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 1);
 800082c:	2012      	movs	r0, #18
 800082e:	2201      	movs	r2, #1
 8000830:	2103      	movs	r1, #3
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000832:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 1);
 8000834:	f001 ffec 	bl	8002810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000838:	2012      	movs	r0, #18
 800083a:	f002 f82b 	bl	8002894 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800083e:	b007      	add	sp, #28
 8000840:	bd30      	pop	{r4, r5, pc}
 8000842:	bf00      	nop
 8000844:	40012400 	.word	0x40012400
 8000848:	40010800 	.word	0x40010800
 800084c:	200001cc 	.word	0x200001cc
 8000850:	40020008 	.word	0x40020008

08000854 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000854:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_CRC_Init+0x18>)
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <MX_CRC_Init+0x1c>)
 800085a:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800085c:	f002 f846 	bl	80028ec <HAL_CRC_Init>
 8000860:	b118      	cbz	r0, 800086a <MX_CRC_Init+0x16>
  {
    Error_Handler();
  }

}
 8000862:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000866:	f001 b8d5 	b.w	8001a14 <Error_Handler>
 800086a:	bd08      	pop	{r3, pc}
 800086c:	20000210 	.word	0x20000210
 8000870:	40023000 	.word	0x40023000

08000874 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000874:	6802      	ldr	r2, [r0, #0]
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_CRC_MspInit+0x24>)
{
 8000878:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 800087a:	429a      	cmp	r2, r3
 800087c:	d10a      	bne.n	8000894 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800087e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8000882:	695a      	ldr	r2, [r3, #20]
 8000884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000888:	615a      	str	r2, [r3, #20]
 800088a:	695b      	ldr	r3, [r3, #20]
 800088c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000894:	b002      	add	sp, #8
 8000896:	4770      	bx	lr
 8000898:	40023000 	.word	0x40023000

0800089c <StartADC>:
//uint32_t adc_cnt1=0;

void StartADC(){
	//HAL_ADC_Start_IT(&hadc);
	//ADC->CCR |= ADC_CCR_TSEN | ADC_CCR_VREFEN;
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*) &ADC_Data,ADC_ChannelCnt);
 800089c:	2203      	movs	r2, #3
 800089e:	4902      	ldr	r1, [pc, #8]	; (80008a8 <StartADC+0xc>)
 80008a0:	4802      	ldr	r0, [pc, #8]	; (80008ac <StartADC+0x10>)
 80008a2:	f001 be07 	b.w	80024b4 <HAL_ADC_Start_DMA>
 80008a6:	bf00      	nop
 80008a8:	20000224 	.word	0x20000224
 80008ac:	2000019c 	.word	0x2000019c

080008b0 <ResetV_data>:

//******* ADC **********//

//******* AMPLITUDE **********//
void ResetV_data() {
	 V_1=0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	4a1f      	ldr	r2, [pc, #124]	; (8000930 <ResetV_data+0x80>)
void ResetV_data() {
 80008b4:	b510      	push	{r4, lr}
	 V_1=0;
 80008b6:	6013      	str	r3, [r2, #0]
	 V_2=0;
 80008b8:	4a1e      	ldr	r2, [pc, #120]	; (8000934 <ResetV_data+0x84>)
	 V_3=0;
	 V_4=0;

	 V_Cnt[0]=1;
 80008ba:	491f      	ldr	r1, [pc, #124]	; (8000938 <ResetV_data+0x88>)
	 V_2=0;
 80008bc:	6013      	str	r3, [r2, #0]
	 V_3=0;
 80008be:	4a1f      	ldr	r2, [pc, #124]	; (800093c <ResetV_data+0x8c>)
	 V_Cnt[1]=1;
	 V_Cnt[2]=1;
	 V_Cnt[3]=1;

	 V_Out_Cnt=1;
	 V_Out_RawData=0;
 80008c0:	2000      	movs	r0, #0
	 V_3=0;
 80008c2:	6013      	str	r3, [r2, #0]
	 V_4=0;
 80008c4:	4a1e      	ldr	r2, [pc, #120]	; (8000940 <ResetV_data+0x90>)
	 V_Out_RawData=0;
 80008c6:	4c1f      	ldr	r4, [pc, #124]	; (8000944 <ResetV_data+0x94>)
	 V_4=0;
 80008c8:	6013      	str	r3, [r2, #0]
	 V_Cnt[0]=1;
 80008ca:	2201      	movs	r2, #1
 80008cc:	600a      	str	r2, [r1, #0]
	 V_Cnt[1]=1;
 80008ce:	604a      	str	r2, [r1, #4]
	 V_Cnt[2]=1;
 80008d0:	608a      	str	r2, [r1, #8]
	 V_Cnt[3]=1;
 80008d2:	60ca      	str	r2, [r1, #12]
	 V_Out_Cnt=1;
 80008d4:	491c      	ldr	r1, [pc, #112]	; (8000948 <ResetV_data+0x98>)
 80008d6:	600a      	str	r2, [r1, #0]
	 V_Out_RawData=0;
 80008d8:	2100      	movs	r1, #0
 80008da:	e9c4 0100 	strd	r0, r1, [r4]

	 I_Out_Cnt=1;
 80008de:	4c1b      	ldr	r4, [pc, #108]	; (800094c <ResetV_data+0x9c>)
 80008e0:	6022      	str	r2, [r4, #0]
	 I_Out_RawData=0;
 80008e2:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <ResetV_data+0xa0>)
 80008e4:	e9c2 0100 	strd	r0, r1, [r2]
	 V_Cnt[4]=1;
	 V_5=1500;
	#endif

	#ifdef DC_PROTECTION
	 	 DC_Data=0;
 80008e8:	4a1a      	ldr	r2, [pc, #104]	; (8000954 <ResetV_data+0xa4>)
 80008ea:	6013      	str	r3, [r2, #0]
	 	 DC_DataCnt=0;
 80008ec:	4a1a      	ldr	r2, [pc, #104]	; (8000958 <ResetV_data+0xa8>)
 80008ee:	6013      	str	r3, [r2, #0]
	#endif

	 	//reset temp buffer
	 	V_1_temp=0;
 80008f0:	4a1a      	ldr	r2, [pc, #104]	; (800095c <ResetV_data+0xac>)
 80008f2:	6013      	str	r3, [r2, #0]
	 	V_2_temp=0;
 80008f4:	4a1a      	ldr	r2, [pc, #104]	; (8000960 <ResetV_data+0xb0>)
 80008f6:	6013      	str	r3, [r2, #0]
	 	V_3_temp=0;
 80008f8:	4a1a      	ldr	r2, [pc, #104]	; (8000964 <ResetV_data+0xb4>)
 80008fa:	6013      	str	r3, [r2, #0]
	 	V_4_temp=0;
 80008fc:	4a1a      	ldr	r2, [pc, #104]	; (8000968 <ResetV_data+0xb8>)
 80008fe:	6013      	str	r3, [r2, #0]

	 	Vcnt_1_temp=0;
 8000900:	4a1a      	ldr	r2, [pc, #104]	; (800096c <ResetV_data+0xbc>)
 8000902:	6013      	str	r3, [r2, #0]
	 	Vcnt_2_temp=0;
 8000904:	4a1a      	ldr	r2, [pc, #104]	; (8000970 <ResetV_data+0xc0>)
 8000906:	6013      	str	r3, [r2, #0]
	 	Vcnt_3_temp=0;
 8000908:	4a1a      	ldr	r2, [pc, #104]	; (8000974 <ResetV_data+0xc4>)
 800090a:	6013      	str	r3, [r2, #0]
	 	Vcnt_4_temp=0;
 800090c:	4a1a      	ldr	r2, [pc, #104]	; (8000978 <ResetV_data+0xc8>)
 800090e:	6013      	str	r3, [r2, #0]

	 	I_Out_RawData_temp=0;
 8000910:	4a1a      	ldr	r2, [pc, #104]	; (800097c <ResetV_data+0xcc>)
 8000912:	6013      	str	r3, [r2, #0]
	 	V_Out_RawData_temp=0;
 8000914:	4a1a      	ldr	r2, [pc, #104]	; (8000980 <ResetV_data+0xd0>)
 8000916:	6013      	str	r3, [r2, #0]
	 	I_Out_Cnt_temp=0;
 8000918:	4a1a      	ldr	r2, [pc, #104]	; (8000984 <ResetV_data+0xd4>)
 800091a:	6013      	str	r3, [r2, #0]
	 	V_Out_Cnt_temp=0;
 800091c:	4a1a      	ldr	r2, [pc, #104]	; (8000988 <ResetV_data+0xd8>)
 800091e:	6013      	str	r3, [r2, #0]

	 	#ifdef DC_PROTECTION
	 		DC_Data_temp=0;
 8000920:	4a1a      	ldr	r2, [pc, #104]	; (800098c <ResetV_data+0xdc>)
 8000922:	6013      	str	r3, [r2, #0]
	 		DC_DataCnt_temp=0;
 8000924:	4a1a      	ldr	r2, [pc, #104]	; (8000990 <ResetV_data+0xe0>)
 8000926:	6013      	str	r3, [r2, #0]
	 	#ifdef USE_VREF
	 		V_5_temp=0;
	 		Vcnt_5_temp=0;
	     #endif

	 	TempBuffer_Flag=0;
 8000928:	4a1a      	ldr	r2, [pc, #104]	; (8000994 <ResetV_data+0xe4>)
 800092a:	8013      	strh	r3, [r2, #0]
 800092c:	bd10      	pop	{r4, pc}
 800092e:	bf00      	nop
 8000930:	20000018 	.word	0x20000018
 8000934:	2000001c 	.word	0x2000001c
 8000938:	20000028 	.word	0x20000028
 800093c:	20000020 	.word	0x20000020
 8000940:	20000024 	.word	0x20000024
 8000944:	20000130 	.word	0x20000130
 8000948:	20000038 	.word	0x20000038
 800094c:	20000000 	.word	0x20000000
 8000950:	20000118 	.word	0x20000118
 8000954:	200000f8 	.word	0x200000f8
 8000958:	20000100 	.word	0x20000100
 800095c:	20000168 	.word	0x20000168
 8000960:	2000016c 	.word	0x2000016c
 8000964:	20000170 	.word	0x20000170
 8000968:	20000174 	.word	0x20000174
 800096c:	20000180 	.word	0x20000180
 8000970:	20000184 	.word	0x20000184
 8000974:	20000188 	.word	0x20000188
 8000978:	2000018c 	.word	0x2000018c
 800097c:	20000160 	.word	0x20000160
 8000980:	2000017c 	.word	0x2000017c
 8000984:	2000015c 	.word	0x2000015c
 8000988:	20000178 	.word	0x20000178
 800098c:	20000144 	.word	0x20000144
 8000990:	20000140 	.word	0x20000140
 8000994:	200000e4 	.word	0x200000e4

08000998 <CalcNewAmp>:
	//
}

float CalcNewAmp(uint32_t V_curr, uint32_t V_etalon) {
	float fRes=1;
	if (V_curr>V_etalon) {
 8000998:	4288      	cmp	r0, r1
float CalcNewAmp(uint32_t V_curr, uint32_t V_etalon) {
 800099a:	b510      	push	{r4, lr}
	if (V_curr>V_etalon) {
 800099c:	d922      	bls.n	80009e4 <CalcNewAmp+0x4c>
		fRes=fRes+(float)((V_curr-V_etalon)*Amp_CoefPlus);
 800099e:	1a40      	subs	r0, r0, r1
 80009a0:	f7ff fc8a 	bl	80002b8 <__aeabi_ui2f>
 80009a4:	4912      	ldr	r1, [pc, #72]	; (80009f0 <CalcNewAmp+0x58>)
 80009a6:	f7ff fcdf 	bl	8000368 <__aeabi_fmul>
 80009aa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80009ae:	f7ff fbd3 	bl	8000158 <__addsf3>
	}
	if (V_curr<V_etalon) {
		fRes=fRes-(float)((V_etalon-V_curr)*Amp_CoefMinus);
	}

	if (fRes>Amp_max) {
 80009b2:	4910      	ldr	r1, [pc, #64]	; (80009f4 <CalcNewAmp+0x5c>)
		fRes=fRes-(float)((V_etalon-V_curr)*Amp_CoefMinus);
 80009b4:	4604      	mov	r4, r0
	if (fRes>Amp_max) {
 80009b6:	f7ff fe93 	bl	80006e0 <__aeabi_fcmpgt>
 80009ba:	b9b8      	cbnz	r0, 80009ec <CalcNewAmp+0x54>
		fRes=Amp_max;
	}
	if (fRes<Amp_min) {
 80009bc:	490e      	ldr	r1, [pc, #56]	; (80009f8 <CalcNewAmp+0x60>)
 80009be:	4620      	mov	r0, r4
 80009c0:	f7ff fe70 	bl	80006a4 <__aeabi_fcmplt>
 80009c4:	b100      	cbz	r0, 80009c8 <CalcNewAmp+0x30>
		fRes=Amp_min;
 80009c6:	4c0c      	ldr	r4, [pc, #48]	; (80009f8 <CalcNewAmp+0x60>)
	}

	return fRes;
}
 80009c8:	4620      	mov	r0, r4
 80009ca:	bd10      	pop	{r4, pc}
		fRes=fRes-(float)((V_etalon-V_curr)*Amp_CoefMinus);
 80009cc:	1a08      	subs	r0, r1, r0
 80009ce:	f7ff fc73 	bl	80002b8 <__aeabi_ui2f>
 80009d2:	4907      	ldr	r1, [pc, #28]	; (80009f0 <CalcNewAmp+0x58>)
 80009d4:	f7ff fcc8 	bl	8000368 <__aeabi_fmul>
 80009d8:	4601      	mov	r1, r0
 80009da:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80009de:	f7ff fbb9 	bl	8000154 <__aeabi_fsub>
 80009e2:	e7e6      	b.n	80009b2 <CalcNewAmp+0x1a>
	if (V_curr<V_etalon) {
 80009e4:	d3f2      	bcc.n	80009cc <CalcNewAmp+0x34>
	float fRes=1;
 80009e6:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 80009ea:	e7ed      	b.n	80009c8 <CalcNewAmp+0x30>
		fRes=Amp_max;
 80009ec:	4c01      	ldr	r4, [pc, #4]	; (80009f4 <CalcNewAmp+0x5c>)
 80009ee:	e7eb      	b.n	80009c8 <CalcNewAmp+0x30>
 80009f0:	3999999a 	.word	0x3999999a
 80009f4:	3fcccccd 	.word	0x3fcccccd
 80009f8:	3ecccccd 	.word	0x3ecccccd

080009fc <CalcNewAmpByStep>:

#ifdef AMP_CORRECTION_TYPE_STEP
float CalcNewAmpByStep(float CurrAmp, float TargetAmp) {
 80009fc:	b538      	push	{r3, r4, r5, lr}
 80009fe:	4605      	mov	r5, r0
 8000a00:	460c      	mov	r4, r1
	float fRes=CurrAmp;
	if (TargetAmp>CurrAmp) {
 8000a02:	f7ff fe4f 	bl	80006a4 <__aeabi_fcmplt>
 8000a06:	b160      	cbz	r0, 8000a22 <CalcNewAmpByStep+0x26>
		fRes=fRes+amp_correction_step;
 8000a08:	490e      	ldr	r1, [pc, #56]	; (8000a44 <CalcNewAmpByStep+0x48>)
 8000a0a:	4628      	mov	r0, r5
 8000a0c:	f7ff fba4 	bl	8000158 <__addsf3>
 8000a10:	4605      	mov	r5, r0
		if (fRes>=TargetAmp) {
 8000a12:	4601      	mov	r1, r0
 8000a14:	4620      	mov	r0, r4
 8000a16:	f7ff fe4f 	bl	80006b8 <__aeabi_fcmple>
		}
		return fRes;
	}
	if (TargetAmp<CurrAmp) {
		fRes=fRes-amp_correction_step;
		if (fRes<=TargetAmp) {
 8000a1a:	b900      	cbnz	r0, 8000a1e <CalcNewAmpByStep+0x22>
			fRes=TargetAmp;
		}
		return fRes;
	}
	return fRes;
 8000a1c:	462c      	mov	r4, r5
}
 8000a1e:	4620      	mov	r0, r4
 8000a20:	bd38      	pop	{r3, r4, r5, pc}
	if (TargetAmp<CurrAmp) {
 8000a22:	4621      	mov	r1, r4
 8000a24:	4628      	mov	r0, r5
 8000a26:	f7ff fe5b 	bl	80006e0 <__aeabi_fcmpgt>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	d0f6      	beq.n	8000a1c <CalcNewAmpByStep+0x20>
		fRes=fRes-amp_correction_step;
 8000a2e:	4905      	ldr	r1, [pc, #20]	; (8000a44 <CalcNewAmpByStep+0x48>)
 8000a30:	4628      	mov	r0, r5
 8000a32:	f7ff fb8f 	bl	8000154 <__aeabi_fsub>
 8000a36:	4605      	mov	r5, r0
		if (fRes<=TargetAmp) {
 8000a38:	4601      	mov	r1, r0
 8000a3a:	4620      	mov	r0, r4
 8000a3c:	f7ff fe46 	bl	80006cc <__aeabi_fcmpge>
 8000a40:	e7eb      	b.n	8000a1a <CalcNewAmpByStep+0x1e>
 8000a42:	bf00      	nop
 8000a44:	3bc49ba6 	.word	0x3bc49ba6

08000a48 <asqrt>:
  op = x;
  res = 0;

  /* "one" starts at the highest power of four <= than the argument. */

  one = 1 << 30;	/* second-to-top bit set */
 8000a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
uint16_t asqrt(uint32_t x) {
 8000a4c:	b530      	push	{r4, r5, lr}
  while (one > op) one >>= 2;
 8000a4e:	4283      	cmp	r3, r0
 8000a50:	dc05      	bgt.n	8000a5e <asqrt+0x16>
 8000a52:	2200      	movs	r2, #0
  while (one != 0) {
    if (op >= res + one) {
      op = op - (res + one);
      res = res +  2 * one;
    }
    res /= 2;
 8000a54:	2402      	movs	r4, #2
    one /= 4;
 8000a56:	2504      	movs	r5, #4
  while (one != 0) {
 8000a58:	b91b      	cbnz	r3, 8000a62 <asqrt+0x1a>
  }
  return (uint16_t) (res);
}
 8000a5a:	b290      	uxth	r0, r2
 8000a5c:	bd30      	pop	{r4, r5, pc}
  while (one > op) one >>= 2;
 8000a5e:	109b      	asrs	r3, r3, #2
 8000a60:	e7f5      	b.n	8000a4e <asqrt+0x6>
    if (op >= res + one) {
 8000a62:	18d1      	adds	r1, r2, r3
 8000a64:	4288      	cmp	r0, r1
      res = res +  2 * one;
 8000a66:	bfa4      	itt	ge
 8000a68:	185a      	addge	r2, r3, r1
      op = op - (res + one);
 8000a6a:	1a40      	subge	r0, r0, r1
    res /= 2;
 8000a6c:	fb92 f2f4 	sdiv	r2, r2, r4
    one /= 4;
 8000a70:	fb93 f3f5 	sdiv	r3, r3, r5
 8000a74:	e7f0      	b.n	8000a58 <asqrt+0x10>
	...

08000a78 <CalcAc_I_ByWave>:


void CalcAc_I_ByWave() {
 8000a78:	b538      	push	{r3, r4, r5, lr}
	// calc AC data for one wave form'
	#ifdef Detect_ZeroI_Point
		ZeroI_point=ADC_Data[1]; // Store last value of V_out via zero point
	#endif
	I_Out = (uint32_t) (I_Out_RawData_temp / I_Out_Cnt_temp);
 8000a7a:	4a0c      	ldr	r2, [pc, #48]	; (8000aac <CalcAc_I_ByWave+0x34>)
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <CalcAc_I_ByWave+0x38>)
 8000a7e:	4c0d      	ldr	r4, [pc, #52]	; (8000ab4 <CalcAc_I_ByWave+0x3c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	6812      	ldr	r2, [r2, #0]
 8000a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a88:	6023      	str	r3, [r4, #0]
	I_Out = asqrt(I_Out);
 8000a8a:	6820      	ldr	r0, [r4, #0]
 8000a8c:	f7ff ffdc 	bl	8000a48 <asqrt>
	I_Out = (uint32_t) (I_RATIO * I_Out);
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <CalcAc_I_ByWave+0x40>)
	I_Out = asqrt(I_Out);
 8000a92:	6020      	str	r0, [r4, #0]
	I_Out = (uint32_t) (I_RATIO * I_Out);
 8000a94:	6820      	ldr	r0, [r4, #0]
 8000a96:	681d      	ldr	r5, [r3, #0]
 8000a98:	f7ff fc0e 	bl	80002b8 <__aeabi_ui2f>
 8000a9c:	4629      	mov	r1, r5
 8000a9e:	f7ff fc63 	bl	8000368 <__aeabi_fmul>
 8000aa2:	f7ff fe27 	bl	80006f4 <__aeabi_f2uiz>
 8000aa6:	6020      	str	r0, [r4, #0]
 8000aa8:	bd38      	pop	{r3, r4, r5, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000015c 	.word	0x2000015c
 8000ab0:	20000160 	.word	0x20000160
 8000ab4:	20000110 	.word	0x20000110
 8000ab8:	20000004 	.word	0x20000004

08000abc <CalcAc_V_ByWave>:
}


void CalcAc_V_ByWave() {
 8000abc:	b538      	push	{r3, r4, r5, lr}
	// calc AC data for one wave form'
	#ifdef Detect_ZeroV_Point
		ZeroV_point=ADC_Data[0]; // Store last value of V_out via zero point
	#endif
	V_Out = (uint32_t) (V_Out_RawData_temp / V_Out_Cnt_temp);
 8000abe:	4a0c      	ldr	r2, [pc, #48]	; (8000af0 <CalcAc_V_ByWave+0x34>)
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <CalcAc_V_ByWave+0x38>)
 8000ac2:	4c0d      	ldr	r4, [pc, #52]	; (8000af8 <CalcAc_V_ByWave+0x3c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	6812      	ldr	r2, [r2, #0]
 8000ac8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000acc:	6023      	str	r3, [r4, #0]
	V_Out = asqrt(V_Out);
 8000ace:	6820      	ldr	r0, [r4, #0]
 8000ad0:	f7ff ffba 	bl	8000a48 <asqrt>
	V_Out = (uint32_t) (V_RATIO * V_Out);
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <CalcAc_V_ByWave+0x40>)
	V_Out = asqrt(V_Out);
 8000ad6:	6020      	str	r0, [r4, #0]
	V_Out = (uint32_t) (V_RATIO * V_Out);
 8000ad8:	6820      	ldr	r0, [r4, #0]
 8000ada:	681d      	ldr	r5, [r3, #0]
 8000adc:	f7ff fbec 	bl	80002b8 <__aeabi_ui2f>
 8000ae0:	4629      	mov	r1, r5
 8000ae2:	f7ff fc41 	bl	8000368 <__aeabi_fmul>
 8000ae6:	f7ff fe05 	bl	80006f4 <__aeabi_f2uiz>
 8000aea:	6020      	str	r0, [r4, #0]
 8000aec:	bd38      	pop	{r3, r4, r5, pc}
 8000aee:	bf00      	nop
 8000af0:	20000178 	.word	0x20000178
 8000af4:	2000017c 	.word	0x2000017c
 8000af8:	2000012c 	.word	0x2000012c
 8000afc:	2000003c 	.word	0x2000003c

08000b00 <CalcDC_Average>:
}

void CalcDC_Average() {
	#ifdef DC_PROTECTION
		 DC_DataAverage=(DC_Data_temp/DC_DataCnt_temp);
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <CalcDC_Average+0x14>)
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <CalcDC_Average+0x18>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	6812      	ldr	r2, [r2, #0]
 8000b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b0c:	4a03      	ldr	r2, [pc, #12]	; (8000b1c <CalcDC_Average+0x1c>)
 8000b0e:	6013      	str	r3, [r2, #0]
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000144 	.word	0x20000144
 8000b18:	20000140 	.word	0x20000140
 8000b1c:	200000fc 	.word	0x200000fc

08000b20 <ReadTempValue>:
	#endif
}

void ReadTempValue() {
		if (TempBuffer_Flag==1) {
 8000b20:	4a1f      	ldr	r2, [pc, #124]	; (8000ba0 <ReadTempValue+0x80>)
 8000b22:	8813      	ldrh	r3, [r2, #0]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d038      	beq.n	8000b9c <ReadTempValue+0x7c>
			return;
		}
		TempBuffer_Flag=1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	8013      	strh	r3, [r2, #0]
		V_1_temp=V_1;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <ReadTempValue+0x84>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <ReadTempValue+0x88>)
 8000b34:	601a      	str	r2, [r3, #0]
		V_2_temp=V_2;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <ReadTempValue+0x8c>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <ReadTempValue+0x90>)
 8000b3c:	601a      	str	r2, [r3, #0]
		V_3_temp=V_3;
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <ReadTempValue+0x94>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <ReadTempValue+0x98>)
 8000b44:	601a      	str	r2, [r3, #0]
		V_4_temp=V_4;
 8000b46:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <ReadTempValue+0x9c>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <ReadTempValue+0xa0>)
 8000b4c:	601a      	str	r2, [r3, #0]

		Vcnt_1_temp=V_Cnt[0];
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <ReadTempValue+0xa4>)
 8000b50:	4a1d      	ldr	r2, [pc, #116]	; (8000bc8 <ReadTempValue+0xa8>)
 8000b52:	6819      	ldr	r1, [r3, #0]
 8000b54:	6011      	str	r1, [r2, #0]
		Vcnt_2_temp=V_Cnt[1];
 8000b56:	6859      	ldr	r1, [r3, #4]
 8000b58:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <ReadTempValue+0xac>)
 8000b5a:	6011      	str	r1, [r2, #0]
		Vcnt_3_temp=V_Cnt[2];
 8000b5c:	6899      	ldr	r1, [r3, #8]
 8000b5e:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <ReadTempValue+0xb0>)
 8000b60:	6011      	str	r1, [r2, #0]
		Vcnt_4_temp=V_Cnt[3];
 8000b62:	68da      	ldr	r2, [r3, #12]
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <ReadTempValue+0xb4>)
 8000b66:	601a      	str	r2, [r3, #0]

		I_Out_RawData_temp=I_Out_RawData;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <ReadTempValue+0xb8>)
 8000b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <ReadTempValue+0xbc>)
 8000b70:	601a      	str	r2, [r3, #0]
		V_Out_RawData_temp=V_Out_RawData;
 8000b72:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <ReadTempValue+0xc0>)
 8000b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b78:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <ReadTempValue+0xc4>)
 8000b7a:	601a      	str	r2, [r3, #0]
		I_Out_Cnt_temp=I_Out_Cnt;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <ReadTempValue+0xc8>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <ReadTempValue+0xcc>)
 8000b82:	601a      	str	r2, [r3, #0]
		V_Out_Cnt_temp=V_Out_Cnt;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <ReadTempValue+0xd0>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <ReadTempValue+0xd4>)
 8000b8a:	601a      	str	r2, [r3, #0]

		#ifdef DC_PROTECTION
			DC_Data_temp=DC_Data;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <ReadTempValue+0xd8>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <ReadTempValue+0xdc>)
 8000b92:	601a      	str	r2, [r3, #0]
			DC_DataCnt_temp=DC_DataCnt;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <ReadTempValue+0xe0>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <ReadTempValue+0xe4>)
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	200000e4 	.word	0x200000e4
 8000ba4:	20000018 	.word	0x20000018
 8000ba8:	20000168 	.word	0x20000168
 8000bac:	2000001c 	.word	0x2000001c
 8000bb0:	2000016c 	.word	0x2000016c
 8000bb4:	20000020 	.word	0x20000020
 8000bb8:	20000170 	.word	0x20000170
 8000bbc:	20000024 	.word	0x20000024
 8000bc0:	20000174 	.word	0x20000174
 8000bc4:	20000028 	.word	0x20000028
 8000bc8:	20000180 	.word	0x20000180
 8000bcc:	20000184 	.word	0x20000184
 8000bd0:	20000188 	.word	0x20000188
 8000bd4:	2000018c 	.word	0x2000018c
 8000bd8:	20000118 	.word	0x20000118
 8000bdc:	20000160 	.word	0x20000160
 8000be0:	20000130 	.word	0x20000130
 8000be4:	2000017c 	.word	0x2000017c
 8000be8:	20000000 	.word	0x20000000
 8000bec:	2000015c 	.word	0x2000015c
 8000bf0:	20000038 	.word	0x20000038
 8000bf4:	20000178 	.word	0x20000178
 8000bf8:	200000f8 	.word	0x200000f8
 8000bfc:	20000144 	.word	0x20000144
 8000c00:	20000100 	.word	0x20000100
 8000c04:	20000140 	.word	0x20000140

08000c08 <UpdateAmplitudeByV>:
			V_5_temp=V_5;
			Vcnt_5_temp=V_Cnt[4];
	    #endif
}

void UpdateAmplitudeByV() {
 8000c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//store value in temp
	if (TempBuffer_Flag==0) {
 8000c0a:	4b6a      	ldr	r3, [pc, #424]	; (8000db4 <UpdateAmplitudeByV+0x1ac>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	b90b      	cbnz	r3, 8000c16 <UpdateAmplitudeByV+0xe>
		ReadTempValue();
 8000c12:	f7ff ff85 	bl	8000b20 <ReadTempValue>
	}
	//

	CalcAc_V_ByWave();
 8000c16:	f7ff ff51 	bl	8000abc <CalcAc_V_ByWave>
	CalcAc_I_ByWave();
 8000c1a:	f7ff ff2d 	bl	8000a78 <CalcAc_I_ByWave>
	CalcDC_Average();
 8000c1e:	f7ff ff6f 	bl	8000b00 <CalcDC_Average>

	#ifndef USE_VREF_FOR_ADC_CORRECTION
		V_1_temp=(uint32_t) (V_1_temp/Vcnt_1_temp);
 8000c22:	4b65      	ldr	r3, [pc, #404]	; (8000db8 <UpdateAmplitudeByV+0x1b0>)
 8000c24:	4965      	ldr	r1, [pc, #404]	; (8000dbc <UpdateAmplitudeByV+0x1b4>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	6809      	ldr	r1, [r1, #0]
		V_2_temp=(uint32_t) (V_2_temp/Vcnt_2_temp);
 8000c2a:	4c65      	ldr	r4, [pc, #404]	; (8000dc0 <UpdateAmplitudeByV+0x1b8>)
		V_1_temp=(uint32_t) (V_1_temp/Vcnt_1_temp);
 8000c2c:	fbb2 f2f1 	udiv	r2, r2, r1
		V_2_temp=(uint32_t) (V_2_temp/Vcnt_2_temp);
 8000c30:	4964      	ldr	r1, [pc, #400]	; (8000dc4 <UpdateAmplitudeByV+0x1bc>)
		V_1_temp=(uint32_t) (V_1_temp/Vcnt_1_temp);
 8000c32:	601a      	str	r2, [r3, #0]
		V_2_temp=(uint32_t) (V_2_temp/Vcnt_2_temp);
 8000c34:	6822      	ldr	r2, [r4, #0]
 8000c36:	6809      	ldr	r1, [r1, #0]
		V_3_temp=(uint32_t) (V_3_temp/Vcnt_3_temp);
 8000c38:	4d63      	ldr	r5, [pc, #396]	; (8000dc8 <UpdateAmplitudeByV+0x1c0>)
		V_2_temp=(uint32_t) (V_2_temp/Vcnt_2_temp);
 8000c3a:	fbb2 f2f1 	udiv	r2, r2, r1
		V_3_temp=(uint32_t) (V_3_temp/Vcnt_3_temp);
 8000c3e:	4963      	ldr	r1, [pc, #396]	; (8000dcc <UpdateAmplitudeByV+0x1c4>)
		V_2_temp=(uint32_t) (V_2_temp/Vcnt_2_temp);
 8000c40:	6022      	str	r2, [r4, #0]
		V_3_temp=(uint32_t) (V_3_temp/Vcnt_3_temp);
 8000c42:	682a      	ldr	r2, [r5, #0]
 8000c44:	6809      	ldr	r1, [r1, #0]
		V_4_temp=(uint32_t) (V_4_temp/Vcnt_4_temp);
 8000c46:	4e62      	ldr	r6, [pc, #392]	; (8000dd0 <UpdateAmplitudeByV+0x1c8>)
		V_3_temp=(uint32_t) (V_3_temp/Vcnt_3_temp);
 8000c48:	fbb2 f2f1 	udiv	r2, r2, r1
		V_4_temp=(uint32_t) (V_4_temp/Vcnt_4_temp);
 8000c4c:	4961      	ldr	r1, [pc, #388]	; (8000dd4 <UpdateAmplitudeByV+0x1cc>)
		V_3_temp=(uint32_t) (V_3_temp/Vcnt_3_temp);
 8000c4e:	602a      	str	r2, [r5, #0]
		V_4_temp=(uint32_t) (V_4_temp/Vcnt_4_temp);
 8000c50:	6832      	ldr	r2, [r6, #0]
 8000c52:	6809      	ldr	r1, [r1, #0]
		Sine_Amplitude_4=CalcNewAmp(V_4_temp,V4_etalon);
	#endif

	#ifdef AMP_CORRECTION_TYPE_STEP
		amp1_target=CalcNewAmp(V_1_temp,V1_etalon);
		Sine_Amplitude_1=CalcNewAmpByStep(Sine_Amplitude_1,amp1_target);
 8000c54:	4f60      	ldr	r7, [pc, #384]	; (8000dd8 <UpdateAmplitudeByV+0x1d0>)
		V_4_temp=(uint32_t) (V_4_temp/Vcnt_4_temp);
 8000c56:	fbb2 f2f1 	udiv	r2, r2, r1
 8000c5a:	6032      	str	r2, [r6, #0]
		amp1_target=CalcNewAmp(V_1_temp,V1_etalon);
 8000c5c:	6818      	ldr	r0, [r3, #0]
 8000c5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c62:	f7ff fe99 	bl	8000998 <CalcNewAmp>
 8000c66:	4b5d      	ldr	r3, [pc, #372]	; (8000ddc <UpdateAmplitudeByV+0x1d4>)
 8000c68:	4601      	mov	r1, r0
 8000c6a:	6018      	str	r0, [r3, #0]
		Sine_Amplitude_1=CalcNewAmpByStep(Sine_Amplitude_1,amp1_target);
 8000c6c:	6838      	ldr	r0, [r7, #0]
 8000c6e:	f7ff fec5 	bl	80009fc <CalcNewAmpByStep>
 8000c72:	6038      	str	r0, [r7, #0]

		amp2_target=CalcNewAmp(V_2_temp,V2_etalon);
 8000c74:	6820      	ldr	r0, [r4, #0]
 8000c76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c7a:	f7ff fe8d 	bl	8000998 <CalcNewAmp>
		Sine_Amplitude_2=CalcNewAmpByStep(Sine_Amplitude_2,amp2_target);
 8000c7e:	4c58      	ldr	r4, [pc, #352]	; (8000de0 <UpdateAmplitudeByV+0x1d8>)
		amp2_target=CalcNewAmp(V_2_temp,V2_etalon);
 8000c80:	4b58      	ldr	r3, [pc, #352]	; (8000de4 <UpdateAmplitudeByV+0x1dc>)
 8000c82:	4601      	mov	r1, r0
 8000c84:	6018      	str	r0, [r3, #0]
		Sine_Amplitude_2=CalcNewAmpByStep(Sine_Amplitude_2,amp2_target);
 8000c86:	6820      	ldr	r0, [r4, #0]
 8000c88:	f7ff feb8 	bl	80009fc <CalcNewAmpByStep>
 8000c8c:	6020      	str	r0, [r4, #0]

		amp3_target=CalcNewAmp(V_3_temp,V3_etalon);
 8000c8e:	6828      	ldr	r0, [r5, #0]
 8000c90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c94:	f7ff fe80 	bl	8000998 <CalcNewAmp>
		Sine_Amplitude_3=CalcNewAmpByStep(Sine_Amplitude_3,amp3_target);
 8000c98:	4d53      	ldr	r5, [pc, #332]	; (8000de8 <UpdateAmplitudeByV+0x1e0>)
		amp3_target=CalcNewAmp(V_3_temp,V3_etalon);
 8000c9a:	4b54      	ldr	r3, [pc, #336]	; (8000dec <UpdateAmplitudeByV+0x1e4>)
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	6018      	str	r0, [r3, #0]
		Sine_Amplitude_3=CalcNewAmpByStep(Sine_Amplitude_3,amp3_target);
 8000ca0:	6828      	ldr	r0, [r5, #0]
 8000ca2:	f7ff feab 	bl	80009fc <CalcNewAmpByStep>
 8000ca6:	6028      	str	r0, [r5, #0]

		amp4_target=CalcNewAmp(V_4_temp,V4_etalon);
 8000ca8:	6830      	ldr	r0, [r6, #0]
 8000caa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cae:	f7ff fe73 	bl	8000998 <CalcNewAmp>
		Sine_Amplitude_4=CalcNewAmpByStep(Sine_Amplitude_4,amp4_target);
 8000cb2:	4e4f      	ldr	r6, [pc, #316]	; (8000df0 <UpdateAmplitudeByV+0x1e8>)
		amp4_target=CalcNewAmp(V_4_temp,V4_etalon);
 8000cb4:	4b4f      	ldr	r3, [pc, #316]	; (8000df4 <UpdateAmplitudeByV+0x1ec>)
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	6018      	str	r0, [r3, #0]
		Sine_Amplitude_4=CalcNewAmpByStep(Sine_Amplitude_4,amp4_target);
 8000cba:	6830      	ldr	r0, [r6, #0]
 8000cbc:	f7ff fe9e 	bl	80009fc <CalcNewAmpByStep>
 8000cc0:	6030      	str	r0, [r6, #0]
	#endif

	#ifdef AMP_PROTECTION
		uint16_t AverageAmplitude=(uint16_t) (100*(float)(Sine_Amplitude_4+Sine_Amplitude_3+Sine_Amplitude_2+Sine_Amplitude_1));
 8000cc2:	6830      	ldr	r0, [r6, #0]
 8000cc4:	6829      	ldr	r1, [r5, #0]
 8000cc6:	6826      	ldr	r6, [r4, #0]
		if ((AMP_BLOCKED==0) && ((AverageAmplitude>=AMP_PROTECTION_MAX) || (AverageAmplitude<=AMP_PROTECTION_MIN))) {
 8000cc8:	4c4b      	ldr	r4, [pc, #300]	; (8000df8 <UpdateAmplitudeByV+0x1f0>)
		uint16_t AverageAmplitude=(uint16_t) (100*(float)(Sine_Amplitude_4+Sine_Amplitude_3+Sine_Amplitude_2+Sine_Amplitude_1));
 8000cca:	683d      	ldr	r5, [r7, #0]
		if ((AMP_BLOCKED==0) && ((AverageAmplitude>=AMP_PROTECTION_MAX) || (AverageAmplitude<=AMP_PROTECTION_MIN))) {
 8000ccc:	6823      	ldr	r3, [r4, #0]
 8000cce:	b9d3      	cbnz	r3, 8000d06 <UpdateAmplitudeByV+0xfe>
		uint16_t AverageAmplitude=(uint16_t) (100*(float)(Sine_Amplitude_4+Sine_Amplitude_3+Sine_Amplitude_2+Sine_Amplitude_1));
 8000cd0:	f7ff fa42 	bl	8000158 <__addsf3>
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	f7ff fa3f 	bl	8000158 <__addsf3>
 8000cda:	4629      	mov	r1, r5
 8000cdc:	f7ff fa3c 	bl	8000158 <__addsf3>
 8000ce0:	4946      	ldr	r1, [pc, #280]	; (8000dfc <UpdateAmplitudeByV+0x1f4>)
 8000ce2:	f7ff fb41 	bl	8000368 <__aeabi_fmul>
 8000ce6:	f7ff fd05 	bl	80006f4 <__aeabi_f2uiz>
		if ((AMP_BLOCKED==0) && ((AverageAmplitude>=AMP_PROTECTION_MAX) || (AverageAmplitude<=AMP_PROTECTION_MIN))) {
 8000cea:	38c9      	subs	r0, #201	; 0xc9
 8000cec:	b280      	uxth	r0, r0
 8000cee:	f5b0 7fc7 	cmp.w	r0, #398	; 0x18e
 8000cf2:	d908      	bls.n	8000d06 <UpdateAmplitudeByV+0xfe>
			AMP_PROTECTION_CNT++;
 8000cf4:	4a42      	ldr	r2, [pc, #264]	; (8000e00 <UpdateAmplitudeByV+0x1f8>)
 8000cf6:	6813      	ldr	r3, [r2, #0]
 8000cf8:	3301      	adds	r3, #1
			if (AMP_PROTECTION_CNT>AMP_PROTECTION_MINMAX_CNT) {
 8000cfa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
			AMP_PROTECTION_CNT++;
 8000cfe:	6013      	str	r3, [r2, #0]
				AMP_BLOCKED=1;
 8000d00:	bfc4      	itt	gt
 8000d02:	2301      	movgt	r3, #1
 8000d04:	6023      	strgt	r3, [r4, #0]

		}
	#endif

	#ifdef DC_PROTECTION
			 if ((DC_BLOCKED==0) && (DC_DataAverage>=DC_PROTECTION_MAX) ) {
 8000d06:	4a3f      	ldr	r2, [pc, #252]	; (8000e04 <UpdateAmplitudeByV+0x1fc>)
 8000d08:	6813      	ldr	r3, [r2, #0]
 8000d0a:	b973      	cbnz	r3, 8000d2a <UpdateAmplitudeByV+0x122>
 8000d0c:	4b3e      	ldr	r3, [pc, #248]	; (8000e08 <UpdateAmplitudeByV+0x200>)
 8000d0e:	6819      	ldr	r1, [r3, #0]
 8000d10:	f640 53ab 	movw	r3, #3499	; 0xdab
 8000d14:	4299      	cmp	r1, r3
 8000d16:	d908      	bls.n	8000d2a <UpdateAmplitudeByV+0x122>
				 DC_PROTECTION_CNT++;
 8000d18:	493c      	ldr	r1, [pc, #240]	; (8000e0c <UpdateAmplitudeByV+0x204>)
 8000d1a:	680b      	ldr	r3, [r1, #0]
 8000d1c:	3301      	adds	r3, #1
				 if (DC_PROTECTION_CNT>DC_PROTECTION_WAVE_CNT) {
 8000d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
				 DC_PROTECTION_CNT++;
 8000d22:	600b      	str	r3, [r1, #0]
				 	DC_BLOCKED=1;
 8000d24:	bfc4      	itt	gt
 8000d26:	2301      	movgt	r3, #1
 8000d28:	6013      	strgt	r3, [r2, #0]
				 }
			 }
	#endif

	#ifdef VOUT_PROTECTION
		if ((VOUT_BLOCKED==0) && ((V_Out>=VOUT_PROTECTION_MAX) || (V_Out<=VOUT_PROTECTION_MIN))) {
 8000d2a:	4b39      	ldr	r3, [pc, #228]	; (8000e10 <UpdateAmplitudeByV+0x208>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	b9da      	cbnz	r2, 8000d68 <UpdateAmplitudeByV+0x160>
 8000d30:	4a38      	ldr	r2, [pc, #224]	; (8000e14 <UpdateAmplitudeByV+0x20c>)
 8000d32:	6811      	ldr	r1, [r2, #0]
 8000d34:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 8000d38:	d202      	bcs.n	8000d40 <UpdateAmplitudeByV+0x138>
 8000d3a:	6811      	ldr	r1, [r2, #0]
 8000d3c:	2964      	cmp	r1, #100	; 0x64
 8000d3e:	d809      	bhi.n	8000d54 <UpdateAmplitudeByV+0x14c>
				VOUT_PROTECTION_CNT++;
 8000d40:	4835      	ldr	r0, [pc, #212]	; (8000e18 <UpdateAmplitudeByV+0x210>)
 8000d42:	6801      	ldr	r1, [r0, #0]
 8000d44:	3101      	adds	r1, #1
				if (VOUT_PROTECTION_CNT>VOUT_PROTECTION_MINMAX_CNT) {
 8000d46:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
				VOUT_PROTECTION_CNT++;
 8000d4a:	6001      	str	r1, [r0, #0]
				if (VOUT_PROTECTION_CNT>VOUT_PROTECTION_MINMAX_CNT) {
 8000d4c:	dd02      	ble.n	8000d54 <UpdateAmplitudeByV+0x14c>
				}
		}
		if ((VOUT_BLOCKED==0) && (V_Out>=VOUT_PROTECTION_ULTRA) ) {
						VOUT_PROTECTION_CNT++;
						if (VOUT_PROTECTION_CNT>VOUT_PROTECTION_MOMENTARY_CNT) {
							VOUT_BLOCKED=1;
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	e009      	b.n	8000d68 <UpdateAmplitudeByV+0x160>
		if ((VOUT_BLOCKED==0) && (V_Out>=VOUT_PROTECTION_ULTRA) ) {
 8000d54:	6812      	ldr	r2, [r2, #0]
 8000d56:	f5b2 7fbe 	cmp.w	r2, #380	; 0x17c
 8000d5a:	d305      	bcc.n	8000d68 <UpdateAmplitudeByV+0x160>
						VOUT_PROTECTION_CNT++;
 8000d5c:	492e      	ldr	r1, [pc, #184]	; (8000e18 <UpdateAmplitudeByV+0x210>)
 8000d5e:	680a      	ldr	r2, [r1, #0]
 8000d60:	3201      	adds	r2, #1
						if (VOUT_PROTECTION_CNT>VOUT_PROTECTION_MOMENTARY_CNT) {
 8000d62:	2a02      	cmp	r2, #2
						VOUT_PROTECTION_CNT++;
 8000d64:	600a      	str	r2, [r1, #0]
						if (VOUT_PROTECTION_CNT>VOUT_PROTECTION_MOMENTARY_CNT) {
 8000d66:	dcf2      	bgt.n	8000d4e <UpdateAmplitudeByV+0x146>
						}
				}
	#endif

	#ifdef IOUT_PROTECTION
		if ((IOUT_BLOCKED==0) && (I_Out>=IOUT_PROTECTION_MAX)) {
 8000d68:	492c      	ldr	r1, [pc, #176]	; (8000e1c <UpdateAmplitudeByV+0x214>)
 8000d6a:	680b      	ldr	r3, [r1, #0]
 8000d6c:	460c      	mov	r4, r1
 8000d6e:	b973      	cbnz	r3, 8000d8e <UpdateAmplitudeByV+0x186>
 8000d70:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d74:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <UpdateAmplitudeByV+0x218>)
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	4290      	cmp	r0, r2
 8000d7a:	d90c      	bls.n	8000d96 <UpdateAmplitudeByV+0x18e>
				IOUT_PROTECTION_CNT++;
 8000d7c:	4829      	ldr	r0, [pc, #164]	; (8000e24 <UpdateAmplitudeByV+0x21c>)
 8000d7e:	6802      	ldr	r2, [r0, #0]
 8000d80:	3201      	adds	r2, #1
				if (IOUT_PROTECTION_CNT>IOUT_PROTECTION_MINMAX_CNT) {
 8000d82:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
				IOUT_PROTECTION_CNT++;
 8000d86:	6002      	str	r2, [r0, #0]
				if (IOUT_PROTECTION_CNT>IOUT_PROTECTION_MINMAX_CNT) {
 8000d88:	dd05      	ble.n	8000d96 <UpdateAmplitudeByV+0x18e>
					IOUT_BLOCKED=1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	600b      	str	r3, [r1, #0]
						}
				}
	#endif

	ResetV_data();
}
 8000d8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ResetV_data();
 8000d92:	f7ff bd8d 	b.w	80008b0 <ResetV_data>
		if ((IOUT_BLOCKED==0) && (I_Out>=IOUT_PROTECTION_ULTRA) ) {
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	f242 3327 	movw	r3, #8999	; 0x2327
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d9f6      	bls.n	8000d8e <UpdateAmplitudeByV+0x186>
			IOUT_PROTECTION_CNT++;
 8000da0:	4a20      	ldr	r2, [pc, #128]	; (8000e24 <UpdateAmplitudeByV+0x21c>)
 8000da2:	6813      	ldr	r3, [r2, #0]
 8000da4:	3301      	adds	r3, #1
						if (IOUT_PROTECTION_CNT>IOUT_PROTECTION_MOMENTARY_CNT) {
 8000da6:	2b02      	cmp	r3, #2
			IOUT_PROTECTION_CNT++;
 8000da8:	6013      	str	r3, [r2, #0]
							IOUT_BLOCKED=1;
 8000daa:	bfc4      	itt	gt
 8000dac:	2301      	movgt	r3, #1
 8000dae:	6023      	strgt	r3, [r4, #0]
 8000db0:	e7ed      	b.n	8000d8e <UpdateAmplitudeByV+0x186>
 8000db2:	bf00      	nop
 8000db4:	200000e4 	.word	0x200000e4
 8000db8:	20000168 	.word	0x20000168
 8000dbc:	20000180 	.word	0x20000180
 8000dc0:	2000016c 	.word	0x2000016c
 8000dc4:	20000184 	.word	0x20000184
 8000dc8:	20000170 	.word	0x20000170
 8000dcc:	20000188 	.word	0x20000188
 8000dd0:	20000174 	.word	0x20000174
 8000dd4:	2000018c 	.word	0x2000018c
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000040 	.word	0x20000040
 8000de0:	2000000c 	.word	0x2000000c
 8000de4:	20000044 	.word	0x20000044
 8000de8:	20000010 	.word	0x20000010
 8000dec:	20000048 	.word	0x20000048
 8000df0:	20000014 	.word	0x20000014
 8000df4:	2000004c 	.word	0x2000004c
 8000df8:	200000e8 	.word	0x200000e8
 8000dfc:	42c80000 	.word	0x42c80000
 8000e00:	200000ec 	.word	0x200000ec
 8000e04:	200000f4 	.word	0x200000f4
 8000e08:	200000fc 	.word	0x200000fc
 8000e0c:	20000104 	.word	0x20000104
 8000e10:	20000120 	.word	0x20000120
 8000e14:	2000012c 	.word	0x2000012c
 8000e18:	20000124 	.word	0x20000124
 8000e1c:	20000108 	.word	0x20000108
 8000e20:	20000110 	.word	0x20000110
 8000e24:	2000010c 	.word	0x2000010c

08000e28 <TM_CRC_Calculate8>:
		volatile uint32_t DC_Data_temp=0;
		volatile uint32_t DC_DataCnt_temp=0;
	#endif


uint32_t TM_CRC_Calculate8(uint8_t* arr, uint32_t count, uint8_t reset) {
 8000e28:	b510      	push	{r4, lr}
	uint32_t cnt;

	/* Reset CRC data register if necessary */
	if (reset) {
 8000e2a:	b112      	cbz	r2, 8000e32 <TM_CRC_Calculate8+0xa>
		/* Reset generator */
		CRC->CR = CRC_CR_RESET;
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <TM_CRC_Calculate8+0x38>)
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	f021 0303 	bic.w	r3, r1, #3
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <TM_CRC_Calculate8+0x38>)
 8000e38:	4403      	add	r3, r0

	/* Calculate number of 32-bit blocks */
	cnt = count >> 2;

	/* Calculate */
	while (cnt--) {
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d107      	bne.n	8000e4e <TM_CRC_Calculate8+0x26>
		/* Increase by 4 */
		arr += 4;
	}

	/* Calculate remaining data as 8-bit */
	cnt = count % 4;
 8000e3e:	f001 0103 	and.w	r1, r1, #3

	/* Calculate */
	while (cnt--) {
		/* Set new value */
		*((uint8_t *)&CRC->DR) = *arr++;
 8000e42:	4807      	ldr	r0, [pc, #28]	; (8000e60 <TM_CRC_Calculate8+0x38>)
 8000e44:	4419      	add	r1, r3
	while (cnt--) {
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d105      	bne.n	8000e56 <TM_CRC_Calculate8+0x2e>
	}

	/* Return data */
	return CRC->DR;
 8000e4a:	6810      	ldr	r0, [r2, #0]
}
 8000e4c:	bd10      	pop	{r4, pc}
		CRC->DR = *(uint32_t *)arr;
 8000e4e:	f850 4b04 	ldr.w	r4, [r0], #4
 8000e52:	6014      	str	r4, [r2, #0]
 8000e54:	e7f1      	b.n	8000e3a <TM_CRC_Calculate8+0x12>
		*((uint8_t *)&CRC->DR) = *arr++;
 8000e56:	f813 4b01 	ldrb.w	r4, [r3], #1
 8000e5a:	7004      	strb	r4, [r0, #0]
 8000e5c:	e7f3      	b.n	8000e46 <TM_CRC_Calculate8+0x1e>
 8000e5e:	bf00      	nop
 8000e60:	40023000 	.word	0x40023000

08000e64 <TM_CRC_Calculate32>:

	/* Return data */
	return CRC->DR;
}

uint32_t TM_CRC_Calculate32(uint32_t* arr, uint32_t count, uint8_t reset) {
 8000e64:	b510      	push	{r4, lr}
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <TM_CRC_Calculate32+0x20>)
	/* Reset CRC data register if necessary */
	if (reset) {
 8000e68:	b10a      	cbz	r2, 8000e6e <TM_CRC_Calculate32+0xa>
		/* Reset generator */
		CRC->CR = CRC_CR_RESET;
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	609a      	str	r2, [r3, #8]
	}

	/* Calculate CRC */
	while (count--) {
		/* Set new value */
		CRC->DR = *arr++;
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <TM_CRC_Calculate32+0x20>)
	while (count--) {
 8000e70:	f111 31ff 	adds.w	r1, r1, #4294967295
 8000e74:	d201      	bcs.n	8000e7a <TM_CRC_Calculate32+0x16>
	}

	/* Return data */
	return CRC->DR;
 8000e76:	6818      	ldr	r0, [r3, #0]
}
 8000e78:	bd10      	pop	{r4, pc}
		CRC->DR = *arr++;
 8000e7a:	f850 4b04 	ldr.w	r4, [r0], #4
 8000e7e:	6014      	str	r4, [r2, #0]
 8000e80:	e7f6      	b.n	8000e70 <TM_CRC_Calculate32+0xc>
 8000e82:	bf00      	nop
 8000e84:	40023000 	.word	0x40023000

08000e88 <AddUART_CRC>:
void AddUART_Header() {
	ClearUART_Buff();
	strcat(uart_buff,"@data@");
}

void AddUART_CRC() {
 8000e88:	b538      	push	{r3, r4, r5, lr}
	memset(crc_buff, '\0', sizeof(crc_buff));
 8000e8a:	4c0b      	ldr	r4, [pc, #44]	; (8000eb8 <AddUART_CRC+0x30>)
	//uint32_t crc=Get_CRC((uint8_t *) &uart_buff, sizeof(uart_buff));
	uint32_t crc=TM_CRC_Calculate8((uint8_t *) &uart_buff, sizeof(uart_buff), 1);
 8000e8c:	4d0b      	ldr	r5, [pc, #44]	; (8000ebc <AddUART_CRC+0x34>)
	memset(crc_buff, '\0', sizeof(crc_buff));
 8000e8e:	2214      	movs	r2, #20
 8000e90:	2100      	movs	r1, #0
 8000e92:	4620      	mov	r0, r4
 8000e94:	f004 f882 	bl	8004f9c <memset>
	uint32_t crc=TM_CRC_Calculate8((uint8_t *) &uart_buff, sizeof(uart_buff), 1);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2164      	movs	r1, #100	; 0x64
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	f7ff ffc3 	bl	8000e28 <TM_CRC_Calculate8>
	sprintf(crc_buff, "@crc@%08X@\r\n",  (unsigned int) crc);
 8000ea2:	4907      	ldr	r1, [pc, #28]	; (8000ec0 <AddUART_CRC+0x38>)
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	f004 f880 	bl	8004fac <siprintf>
	strcat(uart_buff,crc_buff);
 8000eac:	4621      	mov	r1, r4
 8000eae:	4628      	mov	r0, r5

}
 8000eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	strcat(uart_buff,crc_buff);
 8000eb4:	f004 b89e 	b.w	8004ff4 <strcat>
 8000eb8:	200002e4 	.word	0x200002e4
 8000ebc:	20000264 	.word	0x20000264
 8000ec0:	08005874 	.word	0x08005874

08000ec4 <ClearUART_Buff>:
		WaitForUART_TX();
	}
}

void ClearUART_Buff() {
	memset(uart_buff, '\0', sizeof(uart_buff));
 8000ec4:	2264      	movs	r2, #100	; 0x64
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4801      	ldr	r0, [pc, #4]	; (8000ed0 <ClearUART_Buff+0xc>)
 8000eca:	f004 b867 	b.w	8004f9c <memset>
 8000ece:	bf00      	nop
 8000ed0:	20000264 	.word	0x20000264

08000ed4 <Get_ChipID>:
void Get_ChipID(void) {
 8000ed4:	b507      	push	{r0, r1, r2, lr}
	ClearUART_Buff();
 8000ed6:	f7ff fff5 	bl	8000ec4 <ClearUART_Buff>
	sprintf(uart_buff, "@id@%08X-%08X-%08X",   (unsigned int) TM_ID_GetUnique32(0),
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <Get_ChipID+0x28>)
 8000edc:	4908      	ldr	r1, [pc, #32]	; (8000f00 <Get_ChipID+0x2c>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6809      	ldr	r1, [r1, #0]
 8000ee6:	4807      	ldr	r0, [pc, #28]	; (8000f04 <Get_ChipID+0x30>)
 8000ee8:	9100      	str	r1, [sp, #0]
 8000eea:	4907      	ldr	r1, [pc, #28]	; (8000f08 <Get_ChipID+0x34>)
 8000eec:	f004 f85e 	bl	8004fac <siprintf>
}
 8000ef0:	b003      	add	sp, #12
 8000ef2:	f85d eb04 	ldr.w	lr, [sp], #4
	AddUART_CRC();
 8000ef6:	f7ff bfc7 	b.w	8000e88 <AddUART_CRC>
 8000efa:	bf00      	nop
 8000efc:	1ffff7ac 	.word	0x1ffff7ac
 8000f00:	1ffff7b4 	.word	0x1ffff7b4
 8000f04:	20000264 	.word	0x20000264
 8000f08:	08005881 	.word	0x08005881

08000f0c <Get_FlashSize>:
void Get_FlashSize(void) {
 8000f0c:	b508      	push	{r3, lr}
	ClearUART_Buff();
 8000f0e:	f7ff ffd9 	bl	8000ec4 <ClearUART_Buff>
    sprintf(uart_buff, "@flash_size@%02d", TM_ID_GetFlashSize());
 8000f12:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <Get_FlashSize+0x1c>)
 8000f14:	4905      	ldr	r1, [pc, #20]	; (8000f2c <Get_FlashSize+0x20>)
 8000f16:	881a      	ldrh	r2, [r3, #0]
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <Get_FlashSize+0x24>)
 8000f1a:	b292      	uxth	r2, r2
 8000f1c:	f004 f846 	bl	8004fac <siprintf>
}
 8000f20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    AddUART_CRC();
 8000f24:	f7ff bfb0 	b.w	8000e88 <AddUART_CRC>
 8000f28:	1ffff7cc 	.word	0x1ffff7cc
 8000f2c:	08005894 	.word	0x08005894
 8000f30:	20000264 	.word	0x20000264

08000f34 <Get_Version>:
void Get_Version(void) {
 8000f34:	b510      	push	{r4, lr}
	strcat(uart_buff,"@version@");
 8000f36:	4c07      	ldr	r4, [pc, #28]	; (8000f54 <Get_Version+0x20>)
	ClearUART_Buff();
 8000f38:	f7ff ffc4 	bl	8000ec4 <ClearUART_Buff>
	strcat(uart_buff,"@version@");
 8000f3c:	4906      	ldr	r1, [pc, #24]	; (8000f58 <Get_Version+0x24>)
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f004 f858 	bl	8004ff4 <strcat>
    strcat(uart_buff,__DATE__);
 8000f44:	4620      	mov	r0, r4
 8000f46:	4905      	ldr	r1, [pc, #20]	; (8000f5c <Get_Version+0x28>)
 8000f48:	f004 f854 	bl	8004ff4 <strcat>
}
 8000f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    AddUART_CRC();
 8000f50:	f7ff bf9a 	b.w	8000e88 <AddUART_CRC>
 8000f54:	20000264 	.word	0x20000264
 8000f58:	080058a5 	.word	0x080058a5
 8000f5c:	080058af 	.word	0x080058af

08000f60 <WaitForUART_TX>:
}

void WaitForUART_TX() {
	while (!huart1_finished_tx);
 8000f60:	4a02      	ldr	r2, [pc, #8]	; (8000f6c <WaitForUART_TX+0xc>)
 8000f62:	6813      	ldr	r3, [r2, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0fc      	beq.n	8000f62 <WaitForUART_TX+0x2>
}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000050 	.word	0x20000050

08000f70 <SerialPrintln>:
	huart1_finished_tx = 0;
 8000f70:	2200      	movs	r2, #0
void SerialPrintln(int WaitForTX) {
 8000f72:	b570      	push	{r4, r5, r6, lr}
 8000f74:	4604      	mov	r4, r0
	huart1_finished_tx = 0;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <SerialPrintln+0x28>)
	while (HAL_UART_Transmit_DMA(&huart1, (uint8_t*) uart_buff, sizeof(uart_buff)-1) == HAL_BUSY);
 8000f78:	4e08      	ldr	r6, [pc, #32]	; (8000f9c <SerialPrintln+0x2c>)
 8000f7a:	4d09      	ldr	r5, [pc, #36]	; (8000fa0 <SerialPrintln+0x30>)
	huart1_finished_tx = 0;
 8000f7c:	601a      	str	r2, [r3, #0]
	while (HAL_UART_Transmit_DMA(&huart1, (uint8_t*) uart_buff, sizeof(uart_buff)-1) == HAL_BUSY);
 8000f7e:	2263      	movs	r2, #99	; 0x63
 8000f80:	4631      	mov	r1, r6
 8000f82:	4628      	mov	r0, r5
 8000f84:	f003 fe5a 	bl	8004c3c <HAL_UART_Transmit_DMA>
 8000f88:	2802      	cmp	r0, #2
 8000f8a:	d0f8      	beq.n	8000f7e <SerialPrintln+0xe>
	if (WaitForTX) {
 8000f8c:	b11c      	cbz	r4, 8000f96 <SerialPrintln+0x26>
}
 8000f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		WaitForUART_TX();
 8000f92:	f7ff bfe5 	b.w	8000f60 <WaitForUART_TX>
 8000f96:	bd70      	pop	{r4, r5, r6, pc}
 8000f98:	20000050 	.word	0x20000050
 8000f9c:	20000264 	.word	0x20000264
 8000fa0:	2000049c 	.word	0x2000049c

08000fa4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == USART1)  // change USART instance
 8000fa4:	6802      	ldr	r2, [r0, #0]
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <HAL_UART_TxCpltCallback+0x14>)
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d104      	bne.n	8000fb6 <HAL_UART_TxCpltCallback+0x12>
    {
    	huart1_finished_tx = 1;
 8000fac:	2201      	movs	r2, #1
 8000fae:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_UART_TxCpltCallback+0x18>)
 8000fb0:	601a      	str	r2, [r3, #0]
    	ClearUART_Buff();
 8000fb2:	f7ff bf87 	b.w	8000ec4 <ClearUART_Buff>
 8000fb6:	4770      	bx	lr
 8000fb8:	40013800 	.word	0x40013800
 8000fbc:	20000050 	.word	0x20000050

08000fc0 <ResetWDG>:
    }
}

void ResetWDG() {
	 HAL_IWDG_Refresh(&hiwdg);
 8000fc0:	4801      	ldr	r0, [pc, #4]	; (8000fc8 <ResetWDG+0x8>)
 8000fc2:	f002 b90d 	b.w	80031e0 <HAL_IWDG_Refresh>
 8000fc6:	bf00      	nop
 8000fc8:	2000034c 	.word	0x2000034c

08000fcc <ResetEEPROM>:
	#endif
}

// EEPROM
void ResetEEPROM() {
	EEPROM_DATA[0]=0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4a03      	ldr	r2, [pc, #12]	; (8000fdc <ResetEEPROM+0x10>)
 8000fd0:	6013      	str	r3, [r2, #0]
	EEPROM_DATA[1]=0;
 8000fd2:	6053      	str	r3, [r2, #4]
	EEPROM_CRC=0;
 8000fd4:	4a02      	ldr	r2, [pc, #8]	; (8000fe0 <ResetEEPROM+0x14>)
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000150 	.word	0x20000150
 8000fe0:	2000014c 	.word	0x2000014c

08000fe4 <CALC_RATIO>:
}

void CALC_RATIO() {
 8000fe4:	b510      	push	{r4, lr}
	memcpy(&fVal, &EEPROM_DATA[1],sizeof(fVal));
	I_RATIO=(fVal*(3.3/4096));
	memcpy(&fVal, &EEPROM_DATA[0],sizeof(fVal));
	V_RATIO=(fVal*(3.3/4096));*/

	I_RATIO=(EEPROM_DATA[1]*IV_RATIO);
 8000fe6:	4c09      	ldr	r4, [pc, #36]	; (800100c <CALC_RATIO+0x28>)
 8000fe8:	6860      	ldr	r0, [r4, #4]
 8000fea:	f7ff f965 	bl	80002b8 <__aeabi_ui2f>
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <CALC_RATIO+0x2c>)
 8000ff0:	f7ff f9ba 	bl	8000368 <__aeabi_fmul>
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <CALC_RATIO+0x30>)
 8000ff6:	6018      	str	r0, [r3, #0]
	V_RATIO=(EEPROM_DATA[0]*IV_RATIO);
 8000ff8:	6820      	ldr	r0, [r4, #0]
 8000ffa:	f7ff f95d 	bl	80002b8 <__aeabi_ui2f>
 8000ffe:	4904      	ldr	r1, [pc, #16]	; (8001010 <CALC_RATIO+0x2c>)
 8001000:	f7ff f9b2 	bl	8000368 <__aeabi_fmul>
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <CALC_RATIO+0x34>)
 8001006:	6018      	str	r0, [r3, #0]
 8001008:	bd10      	pop	{r4, pc}
 800100a:	bf00      	nop
 800100c:	20000150 	.word	0x20000150
 8001010:	3a533333 	.word	0x3a533333
 8001014:	20000004 	.word	0x20000004
 8001018:	2000003c 	.word	0x2000003c

0800101c <USE_DEF_CALIB>:
	//memcpy(&EEPROM_DATA[0], &fVal,sizeof(uint32_t));

	//fVal=3636;
	//memcpy(&EEPROM_DATA[1], &fVal,sizeof(uint32_t));
	EEPROM_DATA[0]=132;
	EEPROM_DATA[1]=3636;
 800101c:	2184      	movs	r1, #132	; 0x84
 800101e:	f640 6234 	movw	r2, #3636	; 0xe34
	EEPROM_DATA[0]=132;
 8001022:	4b02      	ldr	r3, [pc, #8]	; (800102c <USE_DEF_CALIB+0x10>)
	EEPROM_DATA[1]=3636;
 8001024:	e883 0006 	stmia.w	r3, {r1, r2}
	CALC_RATIO();
 8001028:	f7ff bfdc 	b.w	8000fe4 <CALC_RATIO>
 800102c:	20000150 	.word	0x20000150

08001030 <USE_NEW_CALIB>:
}

void USE_NEW_CALIB() {
	if (EEPROM_CRC==0) {
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <USE_NEW_CALIB+0x10>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	b90b      	cbnz	r3, 800103a <USE_NEW_CALIB+0xa>
		USE_DEF_CALIB();
 8001036:	f7ff bff1 	b.w	800101c <USE_DEF_CALIB>
		return;
	}
	CALC_RATIO();
 800103a:	f7ff bfd3 	b.w	8000fe4 <CALC_RATIO>
 800103e:	bf00      	nop
 8001040:	2000014c 	.word	0x2000014c

08001044 <InitEEPROM>:
	EE_Write(2,EEPROM_DATA[1]);
	//
	EEPROM_FLAG=0;
}

int InitEEPROM() {
 8001044:	b570      	push	{r4, r5, r6, lr}
	EEPROM_FLAG=1;
 8001046:	2401      	movs	r4, #1
 8001048:	4e10      	ldr	r6, [pc, #64]	; (800108c <InitEEPROM+0x48>)
	//

	ResetEEPROM();
	EE_Read(0,&EEPROM_CRC);
 800104a:	4d11      	ldr	r5, [pc, #68]	; (8001090 <InitEEPROM+0x4c>)
	EEPROM_FLAG=1;
 800104c:	6034      	str	r4, [r6, #0]
	ResetEEPROM();
 800104e:	f7ff ffbd 	bl	8000fcc <ResetEEPROM>
	EE_Read(0,&EEPROM_CRC);
 8001052:	4629      	mov	r1, r5
 8001054:	2000      	movs	r0, #0
 8001056:	f000 f9fd 	bl	8001454 <EE_Read>
	EE_Read(1,&EEPROM_DATA[0]);
 800105a:	490e      	ldr	r1, [pc, #56]	; (8001094 <InitEEPROM+0x50>)
 800105c:	4620      	mov	r0, r4
 800105e:	f000 f9f9 	bl	8001454 <EE_Read>
	EE_Read(2,&EEPROM_DATA[1]);
 8001062:	490d      	ldr	r1, [pc, #52]	; (8001098 <InitEEPROM+0x54>)
 8001064:	2002      	movs	r0, #2
 8001066:	f000 f9f5 	bl	8001454 <EE_Read>

	uint32_t EEPROM_CRC_tmp=TM_CRC_Calculate32((uint32_t *) &EEPROM_DATA, sizeof(EEPROM_DATA), 1);
 800106a:	2108      	movs	r1, #8
 800106c:	4622      	mov	r2, r4
 800106e:	4809      	ldr	r0, [pc, #36]	; (8001094 <InitEEPROM+0x50>)
 8001070:	f7ff fef8 	bl	8000e64 <TM_CRC_Calculate32>
	EEPROM_FLAG=0;
 8001074:	2100      	movs	r1, #0

	if (EEPROM_CRC_tmp==EEPROM_CRC) {
 8001076:	682b      	ldr	r3, [r5, #0]
	EEPROM_FLAG=0;
 8001078:	6031      	str	r1, [r6, #0]
	if (EEPROM_CRC_tmp==EEPROM_CRC) {
 800107a:	4298      	cmp	r0, r3
 800107c:	d003      	beq.n	8001086 <InitEEPROM+0x42>
		return 1;
	} else {
		ResetEEPROM();
 800107e:	f7ff ffa5 	bl	8000fcc <ResetEEPROM>
		return 0;
 8001082:	4608      	mov	r0, r1
 8001084:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 8001086:	4620      	mov	r0, r4
	}
}
 8001088:	bd70      	pop	{r4, r5, r6, pc}
 800108a:	bf00      	nop
 800108c:	20000158 	.word	0x20000158
 8001090:	2000014c 	.word	0x2000014c
 8001094:	20000150 	.word	0x20000150
 8001098:	20000154 	.word	0x20000154

0800109c <Set50HzDeadTimeNS>:
//#define DeadTime64X 				1 //1331,2ns
//#define DeadTime128X 				1 //2662,4ns
void Set50HzDeadTimeNS(void) {

		// Tdts = Tck_int //
	    TIM1->CR1 &= ~TIM_CR1_CKD;
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <Set50HzDeadTimeNS+0x44>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80010a4:	601a      	str	r2, [r3, #0]
	    TIM1->BDTR &= ~TIM_BDTR_DTG;
 80010a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010a8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44

	    //TIM1->BDTR  |= TIM_BDTR_DTG_7;//128x //2662,4ns
	    TIM1->BDTR  |= TIM_BDTR_DTG_6;//64x //1331,2ns
 80010ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010b4:	645a      	str	r2, [r3, #68]	; 0x44
	    //TIM1->BDTR  |= TIM_BDTR_DTG_5;//32x //665,6ns
	    TIM1->BDTR  |= TIM_BDTR_DTG_4;//16x //332,8ns
 80010b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010b8:	f042 0210 	orr.w	r2, r2, #16
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
	    TIM1->BDTR  |= TIM_BDTR_DTG_3;//8x //166,4ns
 80010be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010c0:	f042 0208 	orr.w	r2, r2, #8
 80010c4:	645a      	str	r2, [r3, #68]	; 0x44
	    TIM1->BDTR  |= TIM_BDTR_DTG_2;//4x //83,2ns
 80010c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010c8:	f042 0204 	orr.w	r2, r2, #4
 80010cc:	645a      	str	r2, [r3, #68]	; 0x44
	    TIM1->BDTR  |= TIM_BDTR_DTG_1;//2x  //41,6ns
 80010ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010d0:	f042 0202 	orr.w	r2, r2, #2
 80010d4:	645a      	str	r2, [r3, #68]	; 0x44
	    TIM1->BDTR  |= TIM_BDTR_DTG_0;//1x // Dead time base value 1/Fosc=1/48000=20.8ns
 80010d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010d8:	f042 0201 	orr.w	r2, r2, #1
 80010dc:	645a      	str	r2, [r3, #68]	; 0x44
 80010de:	4770      	bx	lr
 80010e0:	40012c00 	.word	0x40012c00

080010e4 <SetNormalSignal>:
////////////////////// DEAD TIME - END //////////////////////


////////////////////// SIGNAL INVERSE - BEGIN //////////////////////
void SetNormalSignal(void) {
		TIM1->CCER |= TIM_CCER_CC3NP; // active high level: 0 - high, 1 - low
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SetNormalSignal+0x14>)
 80010e6:	6a1a      	ldr	r2, [r3, #32]
 80010e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010ec:	621a      	str	r2, [r3, #32]
		TIM1->CCER |= TIM_CCER_CC3P; // active high level: 0 - high, 1 - low
 80010ee:	6a1a      	ldr	r2, [r3, #32]
 80010f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010f4:	621a      	str	r2, [r3, #32]
 80010f6:	4770      	bx	lr
 80010f8:	40012c00 	.word	0x40012c00

080010fc <Idle_SET>:
////////////////////// SIGNAL INVERSE - END //////////////////////

////////////////////// IDLE STATE - BEGIN //////////////////////
void Idle_SET(void) {
	    /* output idle state HIGHT */
		TIM1->CR2 |= TIM_CR2_OIS3;
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <Idle_SET+0x14>)
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001104:	605a      	str	r2, [r3, #4]
		TIM1->CR2 |= TIM_CR2_OIS3N;
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	4770      	bx	lr
 8001110:	40012c00 	.word	0x40012c00

08001114 <PWM_50Hz_Init>:
	//GPIOB->CRH	&= ~GPIO_CRH_MODE15;
	//GPIOB->CRH	|= GPIO_CRH_MODE15; // gpio speed 50 MHz

	/************************** Config PWM channel ************************************/

	TIM1->PSC = 960-1; // div for clock: F = SYSCLK / [PSC + 1]
 8001114:	f240 32bf 	movw	r2, #959	; 0x3bf
void PWM_50Hz_Init (void) {
 8001118:	b508      	push	{r3, lr}
	TIM1->PSC = 960-1; // div for clock: F = SYSCLK / [PSC + 1]
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <PWM_50Hz_Init+0x50>)
 800111c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 1000; // count to 1000
 800111e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR3 = 500; // duty cycle 50%
 8001124:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001128:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CR1 &= ~TIM_CR1_DIR; // count up: 0 - up, 1 - down
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	f022 0210 	bic.w	r2, r2, #16
 8001130:	601a      	str	r2, [r3, #0]
    TIM1->CR1 &= ~TIM_CR1_CMS; // aligned on the front signal
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001138:	601a      	str	r2, [r3, #0]

    TIM1->CCMR2 &= ~TIM_CCMR2_OC3M;
 800113a:	69da      	ldr	r2, [r3, #28]
 800113c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001140:	61da      	str	r2, [r3, #28]
    TIM1->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1; // positiv PWM
 8001142:	69da      	ldr	r2, [r3, #28]
 8001144:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001148:	61da      	str	r2, [r3, #28]

	/* Enable channel outputs */
	TIM1->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE; // enable PWM complementary out
 800114a:	6a1a      	ldr	r2, [r3, #32]
 800114c:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8001150:	621a      	str	r2, [r3, #32]

	SetNormalSignal(); // NORMAL or INVERSE
 8001152:	f7ff ffc7 	bl	80010e4 <SetNormalSignal>
	Idle_SET(); // se idle state /* output idle state HIGHT */
 8001156:	f7ff ffd1 	bl	80010fc <Idle_SET>
	Set50HzDeadTimeNS(); // 1976 ns

	//ch50HZ_OUTEN(); // OUTPUT ENABLE
	//ch50HZ_START(); // start CNT

}
 800115a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Set50HzDeadTimeNS(); // 1976 ns
 800115e:	f7ff bf9d 	b.w	800109c <Set50HzDeadTimeNS>
 8001162:	bf00      	nop
 8001164:	40012c00 	.word	0x40012c00

08001168 <PWM_50Hz_START>:
////////////////////// INIT GENERATOR 50Hz - END //////////////////////


////////////////////// CONTROL 50Hz - BEGIN //////////////////////
void PWM_50Hz_START(void)
{
 8001168:	b508      	push	{r3, lr}
	//TIM1->CNT = 0;
	TIM1->CCR3=500;
 800116a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800116e:	490d      	ldr	r1, [pc, #52]	; (80011a4 <PWM_50Hz_START+0x3c>)
 8001170:	63cb      	str	r3, [r1, #60]	; 0x3c
	/* Enable channel outputs */
		TIM1->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE; // enable PWM complementary out
 8001172:	6a0b      	ldr	r3, [r1, #32]
 8001174:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8001178:	620b      	str	r3, [r1, #32]

		SetNormalSignal(); // NORMAL or INVERSE
 800117a:	f7ff ffb3 	bl	80010e4 <SetNormalSignal>
		Idle_SET(); // se idle state /* output idle state HIGHT */
 800117e:	f7ff ffbd 	bl	80010fc <Idle_SET>

		Set50HzDeadTimeNS(); // 1976 ns
 8001182:	f7ff ff8b 	bl	800109c <Set50HzDeadTimeNS>

	TIM1->DIER |= TIM_DIER_UIE;
 8001186:	68cb      	ldr	r3, [r1, #12]
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	60cb      	str	r3, [r1, #12]
	TIM1->CR1 |= TIM_CR1_CEN;
 800118e:	680b      	ldr	r3, [r1, #0]
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	600b      	str	r3, [r1, #0]

	ResetV_data();
 8001196:	f7ff fb8b 	bl	80008b0 <ResetV_data>
	UpdateAmplitudeByV();
}
 800119a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	UpdateAmplitudeByV();
 800119e:	f7ff bd33 	b.w	8000c08 <UpdateAmplitudeByV>
 80011a2:	bf00      	nop
 80011a4:	40012c00 	.word	0x40012c00

080011a8 <PWM_50Hz_STOP>:

void PWM_50Hz_STOP(void)
{
	//TIM1->CNT = 0;
	TIM1->SR&=~TIM_SR_UIF; // clear update flag
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <PWM_50Hz_STOP+0x44>)
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	f022 0201 	bic.w	r2, r2, #1
 80011b0:	611a      	str	r2, [r3, #16]

	TIM1->DIER &= ~TIM_DIER_UIE; // stop interrupt
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	f022 0201 	bic.w	r2, r2, #1
 80011b8:	60da      	str	r2, [r3, #12]
	TIM1->CR1 &= (uint16_t)~TIM_CR1_CEN; // stop cnt
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	f022 0201 	bic.w	r2, r2, #1
 80011c0:	0412      	lsls	r2, r2, #16
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	601a      	str	r2, [r3, #0]

	//TIM1->CR1 &= ~TIM_CR1_CKD; // off dead time
	//TIM1->BDTR &= ~TIM_BDTR_DTG;

	TIM1->CR2 |= TIM_CR2_OIS3N; // revert level
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011cc:	605a      	str	r2, [r3, #4]
	TIM1->CR2 &= ~TIM_CR2_OIS3;
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011d4:	605a      	str	r2, [r3, #4]

	TIM1->CCER |= TIM_CCER_CC3P; // active high level: 0 - high, 1 - low
 80011d6:	6a1a      	ldr	r2, [r3, #32]
 80011d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011dc:	621a      	str	r2, [r3, #32]
	TIM1->CCER &= ~TIM_CCER_CC3NP; // active high level: 0 - high, 1 - low
 80011de:	6a1a      	ldr	r2, [r3, #32]
 80011e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011e4:	621a      	str	r2, [r3, #32]

	TIM1->CCR3=0;
 80011e6:	2200      	movs	r2, #0
 80011e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80011ea:	4770      	bx	lr
 80011ec:	40012c00 	.word	0x40012c00

080011f0 <PWM_50Hz_OUTEN>:

}

void PWM_50Hz_OUTEN(void)
{
	TIM1->BDTR |= TIM_BDTR_MOE | TIM_BDTR_AOE; // enable generation output
 80011f0:	4a02      	ldr	r2, [pc, #8]	; (80011fc <PWM_50Hz_OUTEN+0xc>)
 80011f2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80011f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4770      	bx	lr
 80011fc:	40012c00 	.word	0x40012c00

08001200 <PWM_50Hz_OUTDIS>:
	//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
}

void PWM_50Hz_OUTDIS(void)
{
    TIM1->BDTR &= ~TIM_BDTR_MOE;
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <PWM_50Hz_OUTDIS+0x14>)
 8001202:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001204:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001208:	645a      	str	r2, [r3, #68]	; 0x44
    TIM1->BDTR &= ~TIM_BDTR_AOE;
 800120a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800120c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001210:	645a      	str	r2, [r3, #68]	; 0x44
 8001212:	4770      	bx	lr
 8001214:	40012c00 	.word	0x40012c00

08001218 <PWM_50Hz_ON>:
    //HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_3);
}

void PWM_50Hz_ON(void){
 8001218:	b508      	push	{r3, lr}
	PWM_50Hz_OUTEN(); // OUTPUT ENABLE
 800121a:	f7ff ffe9 	bl	80011f0 <PWM_50Hz_OUTEN>
	PWM_50Hz_START(); // start CNT
}
 800121e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	PWM_50Hz_START(); // start CNT
 8001222:	f7ff bfa1 	b.w	8001168 <PWM_50Hz_START>

08001226 <PWM_50Hz_OFF>:

void PWM_50Hz_OFF(void){
 8001226:	b508      	push	{r3, lr}
	PWM_50Hz_OUTDIS(); // OUTPUT ENABLE
 8001228:	f7ff ffea 	bl	8001200 <PWM_50Hz_OUTDIS>
	PWM_50Hz_STOP(); // start CNT
}
 800122c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	PWM_50Hz_STOP(); // start CNT
 8001230:	f7ff bfba 	b.w	80011a8 <PWM_50Hz_STOP>

08001234 <PWM_Sinus_START>:


////////////////////// INIT GENERATOR PWM LOW - BEGIN //////////////////////
void PWM_Sinus_START(void)
{
	sin_step=0;
 8001234:	2200      	movs	r2, #0
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <PWM_Sinus_START+0x20>)
 8001238:	801a      	strh	r2, [r3, #0]
	//TIM1->CNT = 0;
	TIM3->CCR1=0;
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <PWM_Sinus_START+0x24>)
 800123c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=0;
 800123e:	639a      	str	r2, [r3, #56]	; 0x38
	//TIM3->CCER |= TIM_CCER_CC1P;

	//TIM3->CCER |= TIM_CCER_CC2E; // enable PWM complementary out to PA9
	//TIM3->CCER |= TIM_CCER_CC2P;

	TIM3->DIER |= TIM_DIER_UIE;
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	f042 0201 	orr.w	r2, r2, #1
 8001246:	60da      	str	r2, [r3, #12]
	TIM3->CR1 |= TIM_CR1_CEN;
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	f042 0201 	orr.w	r2, r2, #1
 800124e:	601a      	str	r2, [r3, #0]

	ResetAmplitude();
 8001250:	f000 b8e2 	b.w	8001418 <ResetAmplitude>
 8001254:	20000138 	.word	0x20000138
 8001258:	40000400 	.word	0x40000400

0800125c <PWM_Sinus_STOP>:
}

void PWM_Sinus_STOP(void)
{
	//TIM1->CNT = 0;
	TIM3->SR&=~TIM_SR_UIF; // clear update flag
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <PWM_Sinus_STOP+0x28>)
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	f022 0201 	bic.w	r2, r2, #1
 8001264:	611a      	str	r2, [r3, #16]

	TIM3->DIER &= ~TIM_DIER_UIE; // stop interrupt
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	f022 0201 	bic.w	r2, r2, #1
 800126c:	60da      	str	r2, [r3, #12]
	TIM3->CR1 &= (uint16_t)~TIM_CR1_CEN; // stop cnt
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	f022 0201 	bic.w	r2, r2, #1
 8001274:	0412      	lsls	r2, r2, #16
 8001276:	0c12      	lsrs	r2, r2, #16
 8001278:	601a      	str	r2, [r3, #0]

	TIM3->CCR1=0;
 800127a:	2200      	movs	r2, #0
 800127c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=0;
 800127e:	639a      	str	r2, [r3, #56]	; 0x38
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40000400 	.word	0x40000400

08001288 <PWM_Sinus_OUTEN>:
}

void PWM_Sinus_OUTEN(void)
{
	TIM3->BDTR |= TIM_BDTR_MOE | TIM_BDTR_AOE; // enable generation output
 8001288:	4a02      	ldr	r2, [pc, #8]	; (8001294 <PWM_Sinus_OUTEN+0xc>)
 800128a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800128c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4770      	bx	lr
 8001294:	40000400 	.word	0x40000400

08001298 <PWM_Sinus_OUTDIS>:
	//HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
}

void PWM_Sinus_OUTDIS(void)
{
    TIM3->BDTR &= ~TIM_BDTR_MOE;
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <PWM_Sinus_OUTDIS+0x14>)
 800129a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800129c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012a0:	645a      	str	r2, [r3, #68]	; 0x44
    TIM3->BDTR &= ~TIM_BDTR_AOE;
 80012a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80012a8:	645a      	str	r2, [r3, #68]	; 0x44
 80012aa:	4770      	bx	lr
 80012ac:	40000400 	.word	0x40000400

080012b0 <PWM_Sinus_ON>:

    //HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
    //HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
}

void PWM_Sinus_ON(void) {
 80012b0:	b508      	push	{r3, lr}
	PWM_Sinus_OUTEN(); // OUTPUT ENABLE
 80012b2:	f7ff ffe9 	bl	8001288 <PWM_Sinus_OUTEN>
	PWM_Sinus_START(); // start CNT
}
 80012b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	PWM_Sinus_START(); // start CNT
 80012ba:	f7ff bfbb 	b.w	8001234 <PWM_Sinus_START>

080012be <PWM_Sinus_OFF>:

void PWM_Sinus_OFF(void){
 80012be:	b508      	push	{r3, lr}
	PWM_Sinus_OUTDIS(); // OUTPUT ENABLE
 80012c0:	f7ff ffea 	bl	8001298 <PWM_Sinus_OUTDIS>
	PWM_Sinus_STOP(); // start CNT
}
 80012c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	PWM_Sinus_STOP(); // start CNT
 80012c8:	f7ff bfc8 	b.w	800125c <PWM_Sinus_STOP>

080012cc <PWM_Sinus_Init>:

	//GPIOA->CRL	&= ~GPIO_CRL_MODE1;
	//GPIOA->CRL	|= GPIO_CRL_MODE1; // gpio speed 50 MHz

	/*************************** Config PWM channel ***********************************/
		TIM3->PSC = SinResPSC; // div for clock: F = SYSCLK / [PSC + 1]
 80012cc:	2200      	movs	r2, #0
		TIM3->ARR = 1000; // count to 1000
 80012ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
		TIM3->PSC = SinResPSC; // div for clock: F = SYSCLK / [PSC + 1]
 80012d2:	4b19      	ldr	r3, [pc, #100]	; (8001338 <PWM_Sinus_Init+0x6c>)
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
		TIM3->ARR = 1000; // count to 1000
 80012d6:	62d9      	str	r1, [r3, #44]	; 0x2c
		TIM3->CCR1 = 0; // duty cycle 0%
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0; // duty cycle 0%
 80012da:	639a      	str	r2, [r3, #56]	; 0x38

			TIM3->CCER |= TIM_CCER_CC1E; // enable PWM out to PA8
 80012dc:	6a1a      	ldr	r2, [r3, #32]
 80012de:	f042 0201 	orr.w	r2, r2, #1
 80012e2:	621a      	str	r2, [r3, #32]
			//TIM3->CCER &= ~TIM_CCER_CC1P; // active high level: 0 - high, 1 - low
			TIM3->CCER |= TIM_CCER_CC1P;
 80012e4:	6a1a      	ldr	r2, [r3, #32]
 80012e6:	f042 0202 	orr.w	r2, r2, #2
 80012ea:	621a      	str	r2, [r3, #32]

			TIM3->CCER |= TIM_CCER_CC2E; // enable PWM complementary out to PA9
 80012ec:	6a1a      	ldr	r2, [r3, #32]
 80012ee:	f042 0210 	orr.w	r2, r2, #16
 80012f2:	621a      	str	r2, [r3, #32]
			//TIM3->CCER &= ~TIM_CCER_CC2P; // active high level: 0 - high, 1 - low
			TIM3->CCER |= TIM_CCER_CC2P;
 80012f4:	6a1a      	ldr	r2, [r3, #32]
 80012f6:	f042 0220 	orr.w	r2, r2, #32
 80012fa:	621a      	str	r2, [r3, #32]

		// se idle state
		TIM3->CR2 |= TIM_CR2_OIS1;
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001302:	605a      	str	r2, [r3, #4]
		TIM3->CR2 |= TIM_CR2_OIS2;
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800130a:	605a      	str	r2, [r3, #4]

		TIM3->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 800130c:	699a      	ldr	r2, [r3, #24]
 800130e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001312:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001316:	619a      	str	r2, [r3, #24]
		TIM3->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 |
 8001318:	699a      	ldr	r2, [r3, #24]
 800131a:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800131e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001322:	619a      	str	r2, [r3, #24]
		 TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1; // positiv PWM1_CH1 and PWM1_CH2

		/*******************************************************************************/

		TIM3->CR1 &= ~TIM_CR1_DIR; // count up: 0 - up, 1 - down
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	f022 0210 	bic.w	r2, r2, #16
 800132a:	601a      	str	r2, [r3, #0]
		TIM3->CR1 &= ~TIM_CR1_CMS; // aligned on the front signal: 00 - front; 01, 10, 11 - center
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40000400 	.word	0x40000400

0800133c <DigiTOS_IWDG_Init>:
	
	/* Check if the system has resumed from IWDG reset */
#if defined(STM32F4xx)
	if (RCC->CSR & RCC_CSR_WDGRSTF) {
#else
	if (RCC->CSR & RCC_CSR_IWDGRSTF) {	
 800133c:	4a2a      	ldr	r2, [pc, #168]	; (80013e8 <DigiTOS_IWDG_Init+0xac>)
uint8_t DigiTOS_IWDG_Init(DigiTOS_IWDG_Timeout_t timeout) {
 800133e:	4603      	mov	r3, r0
	if (RCC->CSR & RCC_CSR_IWDGRSTF) {	
 8001340:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8001342:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
#endif
		/* Reset by IWDG */
		result = 1;
		
		/* Clear reset flags */
		RCC->CSR |= RCC_CSR_RMVF;
 8001346:	bf1f      	itttt	ne
 8001348:	6a51      	ldrne	r1, [r2, #36]	; 0x24
		result = 1;
 800134a:	2001      	movne	r0, #1
		RCC->CSR |= RCC_CSR_RMVF;
 800134c:	f041 7180 	orrne.w	r1, r1, #16777216	; 0x1000000
 8001350:	6251      	strne	r1, [r2, #36]	; 0x24
	}

	/* Enable write access to IWDG_PR and IWDG_RLR registers */
	IWDG->KR = 0x5555;
 8001352:	f245 5155 	movw	r1, #21845	; 0x5555
 8001356:	4a25      	ldr	r2, [pc, #148]	; (80013ec <DigiTOS_IWDG_Init+0xb0>)

	/* Set proper clock depending on timeout user select */
	if (timeout >= DigiTOS_IWDG_Timeout_8s) {
 8001358:	2b0a      	cmp	r3, #10
	IWDG->KR = 0x5555;
 800135a:	6011      	str	r1, [r2, #0]
	if (timeout >= DigiTOS_IWDG_Timeout_8s) {
 800135c:	d925      	bls.n	80013aa <DigiTOS_IWDG_Init+0x6e>
		/* IWDG counter clock: LSI/256 = 128Hz */
		IWDG->PR = 0x07;
 800135e:	2107      	movs	r1, #7
 8001360:	6051      	str	r1, [r2, #4]
	/* Set counter reload value */
	if (timeout == DigiTOS_IWDG_Timeout_5ms) {
		reload = 5; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_10ms) {
		reload = 10; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_15ms) {
 8001362:	2b02      	cmp	r3, #2
 8001364:	d02a      	beq.n	80013bc <DigiTOS_IWDG_Init+0x80>
		reload = 15; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_30ms) {
 8001366:	2b03      	cmp	r3, #3
 8001368:	d02a      	beq.n	80013c0 <DigiTOS_IWDG_Init+0x84>
		reload = 31; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_60ms) {
 800136a:	2b04      	cmp	r3, #4
 800136c:	d02a      	beq.n	80013c4 <DigiTOS_IWDG_Init+0x88>
		reload = 61; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_120ms) {
 800136e:	2b05      	cmp	r3, #5
 8001370:	d02a      	beq.n	80013c8 <DigiTOS_IWDG_Init+0x8c>
		reload = 123; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_250ms) {
 8001372:	2b06      	cmp	r3, #6
 8001374:	d02a      	beq.n	80013cc <DigiTOS_IWDG_Init+0x90>
		reload = 255; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_500ms) {
 8001376:	2b07      	cmp	r3, #7
 8001378:	d02a      	beq.n	80013d0 <DigiTOS_IWDG_Init+0x94>
		reload = 511; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_1s) {
 800137a:	2b08      	cmp	r3, #8
 800137c:	d02e      	beq.n	80013dc <DigiTOS_IWDG_Init+0xa0>
		reload = 1023; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_2s) {
 800137e:	2b09      	cmp	r3, #9
 8001380:	d02f      	beq.n	80013e2 <DigiTOS_IWDG_Init+0xa6>
		reload = 2047; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_4s) {
 8001382:	2b0a      	cmp	r3, #10
 8001384:	d027      	beq.n	80013d6 <DigiTOS_IWDG_Init+0x9a>
		reload = 4095; /* 1024 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_8s) {
 8001386:	2b0b      	cmp	r3, #11
 8001388:	d028      	beq.n	80013dc <DigiTOS_IWDG_Init+0xa0>
		reload = 1023; /* 128 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_16s) {
 800138a:	2b0c      	cmp	r3, #12
 800138c:	d029      	beq.n	80013e2 <DigiTOS_IWDG_Init+0xa6>
		reload = 2047; /* 128 Hz IWDG ticking */
	} else if (timeout == DigiTOS_IWDG_Timeout_32s) {
 800138e:	2b0d      	cmp	r3, #13
		reload = 4095; /* 128 Hz IWDG ticking */
 8001390:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001394:	bf18      	it	ne
 8001396:	2300      	movne	r3, #0
	}
	
	/* Set reload */
	IWDG->RLR = reload;
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <DigiTOS_IWDG_Init+0xb0>)
 800139a:	6093      	str	r3, [r2, #8]

	/* Reload IWDG counter */
	IWDG->KR = 0xAAAA;
 800139c:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80013a0:	6013      	str	r3, [r2, #0]

	/* Enable IWDG (the LSI oscillator will be enabled by hardware) */
	IWDG->KR = 0xCCCC;
 80013a2:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 80013a6:	6013      	str	r3, [r2, #0]
	
	/* Return status */
	return result;
}
 80013a8:	4770      	bx	lr
		IWDG->PR = 0x03;
 80013aa:	2103      	movs	r1, #3
 80013ac:	6051      	str	r1, [r2, #4]
	if (timeout == DigiTOS_IWDG_Timeout_5ms) {
 80013ae:	b11b      	cbz	r3, 80013b8 <DigiTOS_IWDG_Init+0x7c>
	} else if (timeout == DigiTOS_IWDG_Timeout_10ms) {
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d1d6      	bne.n	8001362 <DigiTOS_IWDG_Init+0x26>
		reload = 10; /* 1024 Hz IWDG ticking */
 80013b4:	230a      	movs	r3, #10
 80013b6:	e7ef      	b.n	8001398 <DigiTOS_IWDG_Init+0x5c>
		reload = 5; /* 1024 Hz IWDG ticking */
 80013b8:	2305      	movs	r3, #5
 80013ba:	e7ed      	b.n	8001398 <DigiTOS_IWDG_Init+0x5c>
		reload = 15; /* 1024 Hz IWDG ticking */
 80013bc:	230f      	movs	r3, #15
 80013be:	e7eb      	b.n	8001398 <DigiTOS_IWDG_Init+0x5c>
		reload = 31; /* 1024 Hz IWDG ticking */
 80013c0:	231f      	movs	r3, #31
 80013c2:	e7e9      	b.n	8001398 <DigiTOS_IWDG_Init+0x5c>
		reload = 61; /* 1024 Hz IWDG ticking */
 80013c4:	233d      	movs	r3, #61	; 0x3d
 80013c6:	e7e7      	b.n	8001398 <DigiTOS_IWDG_Init+0x5c>
		reload = 123; /* 1024 Hz IWDG ticking */
 80013c8:	237b      	movs	r3, #123	; 0x7b
 80013ca:	e7e5      	b.n	8001398 <DigiTOS_IWDG_Init+0x5c>
		reload = 255; /* 1024 Hz IWDG ticking */
 80013cc:	23ff      	movs	r3, #255	; 0xff
 80013ce:	e7e3      	b.n	8001398 <DigiTOS_IWDG_Init+0x5c>
		reload = 511; /* 1024 Hz IWDG ticking */
 80013d0:	f240 13ff 	movw	r3, #511	; 0x1ff
 80013d4:	e7e0      	b.n	8001398 <DigiTOS_IWDG_Init+0x5c>
		reload = 4095; /* 1024 Hz IWDG ticking */
 80013d6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80013da:	e7dd      	b.n	8001398 <DigiTOS_IWDG_Init+0x5c>
		reload = 1023; /* 1024 Hz IWDG ticking */
 80013dc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80013e0:	e7da      	b.n	8001398 <DigiTOS_IWDG_Init+0x5c>
		reload = 2047; /* 1024 Hz IWDG ticking */
 80013e2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80013e6:	e7d7      	b.n	8001398 <DigiTOS_IWDG_Init+0x5c>
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40003000 	.word	0x40003000

080013f0 <SetSoftstart>:
#include "digiTOS-Sinus.h"

#ifdef AMP_CORRECTION_TYPE_STEP
void SetSoftstart() {
		#ifdef USE_SOFT_START
			Sine_Amplitude_4=SOFT_START_FROM;
 80013f0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <SetSoftstart+0x18>)
 80013f6:	6013      	str	r3, [r2, #0]
			Sine_Amplitude_3=SOFT_START_FROM;
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <SetSoftstart+0x1c>)
 80013fa:	6013      	str	r3, [r2, #0]
			Sine_Amplitude_2=SOFT_START_FROM;
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <SetSoftstart+0x20>)
 80013fe:	6013      	str	r3, [r2, #0]
			Sine_Amplitude_1=SOFT_START_FROM;
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <SetSoftstart+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000014 	.word	0x20000014
 800140c:	20000010 	.word	0x20000010
 8001410:	2000000c 	.word	0x2000000c
 8001414:	20000008 	.word	0x20000008

08001418 <ResetAmplitude>:
			Sine_Amplitude_1=1;
		#endif
}
#endif

void ResetAmplitude() {
 8001418:	b508      	push	{r3, lr}
		Sine_Amplitude_2=1;
		Sine_Amplitude_1=1;
	#endif

	#ifdef AMP_CORRECTION_TYPE_STEP
		SetSoftstart();
 800141a:	f7ff ffe9 	bl	80013f0 <SetSoftstart>
	#endif

	#ifdef AMP_PROTECTION
			AMP_BLOCKED=0;
 800141e:	2300      	movs	r3, #0
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <ResetAmplitude+0x24>)
 8001422:	6013      	str	r3, [r2, #0]
			AMP_PROTECTION_CNT_BEFORESTART=0;
 8001424:	4a06      	ldr	r2, [pc, #24]	; (8001440 <ResetAmplitude+0x28>)
 8001426:	6013      	str	r3, [r2, #0]
			AMP_PROTECTION_CNT=0;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <ResetAmplitude+0x2c>)
 800142a:	6013      	str	r3, [r2, #0]
	#endif

	#ifdef VOUT_PROTECTION
		VOUT_PROTECTION_CNT=0;
 800142c:	4a06      	ldr	r2, [pc, #24]	; (8001448 <ResetAmplitude+0x30>)
 800142e:	6013      	str	r3, [r2, #0]
		VOUT_PROTECTION_CNT_BEFORESTART=0;
 8001430:	4a06      	ldr	r2, [pc, #24]	; (800144c <ResetAmplitude+0x34>)
 8001432:	6013      	str	r3, [r2, #0]
		VOUT_BLOCKED=0;
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <ResetAmplitude+0x38>)
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	bd08      	pop	{r3, pc}
 800143a:	bf00      	nop
 800143c:	200000e8 	.word	0x200000e8
 8001440:	200000f0 	.word	0x200000f0
 8001444:	200000ec 	.word	0x200000ec
 8001448:	20000124 	.word	0x20000124
 800144c:	20000128 	.word	0x20000128
 8001450:	20000120 	.word	0x20000120

08001454 <EE_Read>:
	return false;	
}
//##########################################################################################################
bool EE_Read(uint16_t VirtualAddress, uint32_t* Data)
{
	if(VirtualAddress >=	(_EEPROM_SIZE))
 8001454:	2809      	cmp	r0, #9
		return false;
	*Data =  (*(__IO uint32_t*)((VirtualAddress*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 8001456:	bf9f      	itttt	ls
 8001458:	0080      	lslls	r0, r0, #2
 800145a:	f100 6000 	addls.w	r0, r0, #134217728	; 0x8000000
 800145e:	f500 407c 	addls.w	r0, r0, #64512	; 0xfc00
 8001462:	6803      	ldrls	r3, [r0, #0]
	return true;
 8001464:	bf9a      	itte	ls
 8001466:	2001      	movls	r0, #1
	*Data =  (*(__IO uint32_t*)((VirtualAddress*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 8001468:	600b      	strls	r3, [r1, #0]
		return false;
 800146a:	2000      	movhi	r0, #0
}
 800146c:	4770      	bx	lr

0800146e <buttonInit>:
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		}	
		HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
	#endif
	
	button_struct->GPIO_Pin = GPIO_Pin;
 800146e:	6002      	str	r2, [r0, #0]
	button_struct->GPIO_Port = GPIO_Port;
	button_struct->debounce_time = debounce_time;
 8001470:	9a00      	ldr	r2, [sp, #0]
	button_struct->long_press_time = long_press_time;
	button_struct->active_state = active_state;
 8001472:	7203      	strb	r3, [r0, #8]
	button_struct->debounce_time = debounce_time;
 8001474:	60c2      	str	r2, [r0, #12]
	button_struct->long_press_time = long_press_time;
 8001476:	9a01      	ldr	r2, [sp, #4]
	
	button_struct->short_press_handled = 0;
 8001478:	2300      	movs	r3, #0
	button_struct->long_press_time = long_press_time;
 800147a:	6102      	str	r2, [r0, #16]
	button_struct->long_press_handled = 0;
	button_struct->_on_press_time = 0;
	button_struct->_previous_state = button_off;
 800147c:	2201      	movs	r2, #1
	button_struct->GPIO_Port = GPIO_Port;
 800147e:	6041      	str	r1, [r0, #4]
	button_struct->short_press_handled = 0;
 8001480:	7503      	strb	r3, [r0, #20]
	button_struct->long_press_handled = 0;
 8001482:	7543      	strb	r3, [r0, #21]
	button_struct->_on_press_time = 0;
 8001484:	6183      	str	r3, [r0, #24]
	button_struct->_previous_state = button_off;
 8001486:	75c2      	strb	r2, [r0, #23]
	button_struct->_state_changed = 0;
 8001488:	7583      	strb	r3, [r0, #22]
	button_struct->_state = noEvent;
 800148a:	7243      	strb	r3, [r0, #9]
 800148c:	4770      	bx	lr

0800148e <_button_state>:
/*	PRIVATE FUNCTIONS */
/**********************************************************/
/* Low level GPIO read routine.
button_on - button is currently read as pressed
*/
_phy_state_t _button_state(button_struct_t *button_struct){
 800148e:	b510      	push	{r4, lr}
 8001490:	4604      	mov	r4, r0
	if(HAL_GPIO_ReadPin(button_struct->GPIO_Port, button_struct->GPIO_Pin) == button_struct->active_state){
 8001492:	8801      	ldrh	r1, [r0, #0]
 8001494:	6840      	ldr	r0, [r0, #4]
 8001496:	f001 fe39 	bl	800310c <HAL_GPIO_ReadPin>
 800149a:	7a23      	ldrb	r3, [r4, #8]
		return button_on;
	}
	else{
		return button_off;
	}
}
 800149c:	1a18      	subs	r0, r3, r0
 800149e:	bf18      	it	ne
 80014a0:	2001      	movne	r0, #1
 80014a2:	bd10      	pop	{r4, pc}

080014a4 <buttonUpdate>:
button_state_t buttonUpdate(button_struct_t *button_struct){
 80014a4:	b570      	push	{r4, r5, r6, lr}
 80014a6:	4604      	mov	r4, r0
	_phy_state_t state = _button_state(button_struct);	// get button state
 80014a8:	f7ff fff1 	bl	800148e <_button_state>
	if(state != button_struct->_previous_state){	// state is	different
 80014ac:	7de6      	ldrb	r6, [r4, #23]
	_phy_state_t state = _button_state(button_struct);	// get button state
 80014ae:	4605      	mov	r5, r0
	if(state != button_struct->_previous_state){	// state is	different
 80014b0:	4286      	cmp	r6, r0
 80014b2:	d01a      	beq.n	80014ea <buttonUpdate+0x46>
		if(state == button_on){	
 80014b4:	b938      	cbnz	r0, 80014c6 <buttonUpdate+0x22>
			button_struct->_on_press_time = HAL_GetTick(); // get current time
 80014b6:	f000 fe29 	bl	800210c <HAL_GetTick>
			button_struct->_state_changed = 1;	// state is changed
 80014ba:	2301      	movs	r3, #1
			button_struct->_on_press_time = HAL_GetTick(); // get current time
 80014bc:	61a0      	str	r0, [r4, #24]
			button_struct->_state_changed = 1;	// state is changed
 80014be:	75a3      	strb	r3, [r4, #22]
			button_struct->_previous_state = button_on;
 80014c0:	75e5      	strb	r5, [r4, #23]
			return_status = noEvent;
 80014c2:	2000      	movs	r0, #0
 80014c4:	bd70      	pop	{r4, r5, r6, pc}
			if(HAL_GetTick() >= (button_struct->_on_press_time + button_struct->debounce_time)){	
 80014c6:	f000 fe21 	bl	800210c <HAL_GetTick>
 80014ca:	69a3      	ldr	r3, [r4, #24]
 80014cc:	68e2      	ldr	r2, [r4, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	4298      	cmp	r0, r3
				button_struct->_state = isReleased;
 80014d2:	bf28      	it	cs
 80014d4:	2304      	movcs	r3, #4
 80014d6:	f04f 0001 	mov.w	r0, #1
 80014da:	bf22      	ittt	cs
 80014dc:	7263      	strbcs	r3, [r4, #9]
				button_struct->_previous_state = button_off;
 80014de:	75e0      	strbcs	r0, [r4, #23]
				return_status = button_struct->_state;
 80014e0:	4618      	movcs	r0, r3
			button_struct->long_press_handled = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	7563      	strb	r3, [r4, #21]
			button_struct->short_press_handled = 0;
 80014e6:	7523      	strb	r3, [r4, #20]
 80014e8:	bd70      	pop	{r4, r5, r6, pc}
		if(state == button_on){	// state = button_on, prevous state = button_on
 80014ea:	2e00      	cmp	r6, #0
 80014ec:	d1e9      	bne.n	80014c2 <buttonUpdate+0x1e>
			if(HAL_GetTick() >= (button_struct->_on_press_time + button_struct->long_press_time)){	
 80014ee:	f000 fe0d 	bl	800210c <HAL_GetTick>
 80014f2:	69a3      	ldr	r3, [r4, #24]
 80014f4:	6922      	ldr	r2, [r4, #16]
 80014f6:	4413      	add	r3, r2
 80014f8:	4298      	cmp	r0, r3
 80014fa:	d308      	bcc.n	800150e <buttonUpdate+0x6a>
				if(button_struct->long_press_handled == 1){	//was button handled yet?
 80014fc:	7d63      	ldrb	r3, [r4, #21]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d102      	bne.n	8001508 <buttonUpdate+0x64>
						button_struct->_state = noEvent;
 8001502:	7266      	strb	r6, [r4, #9]
					return_status = button_struct->_state;
 8001504:	7a60      	ldrb	r0, [r4, #9]
}
 8001506:	bd70      	pop	{r4, r5, r6, pc}
					button_struct->_state = isPressedLong;
 8001508:	2303      	movs	r3, #3
						button_struct->_state = isPressed;
 800150a:	7263      	strb	r3, [r4, #9]
 800150c:	e7fa      	b.n	8001504 <buttonUpdate+0x60>
				if(HAL_GetTick() >= (button_struct->_on_press_time + button_struct->debounce_time)){	
 800150e:	f000 fdfd 	bl	800210c <HAL_GetTick>
 8001512:	69a3      	ldr	r3, [r4, #24]
 8001514:	68e2      	ldr	r2, [r4, #12]
 8001516:	4413      	add	r3, r2
 8001518:	4298      	cmp	r0, r3
 800151a:	d3d2      	bcc.n	80014c2 <buttonUpdate+0x1e>
					if(button_struct->short_press_handled == 1){	//was button handled yet?
 800151c:	7d23      	ldrb	r3, [r4, #20]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d0ef      	beq.n	8001502 <buttonUpdate+0x5e>
						button_struct->_state = isPressed;
 8001522:	2302      	movs	r3, #2
 8001524:	e7f1      	b.n	800150a <buttonUpdate+0x66>
	...

08001528 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_DMA_Init+0x3c>)
{
 800152a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800152c:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800152e:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001530:	f042 0201 	orr.w	r2, r2, #1
 8001534:	615a      	str	r2, [r3, #20]
 8001536:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001538:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001540:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001542:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001544:	f001 f964 	bl	8002810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001548:	200b      	movs	r0, #11
 800154a:	f001 f9a3 	bl	8002894 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2103      	movs	r1, #3
 8001552:	200e      	movs	r0, #14
 8001554:	f001 f95c 	bl	8002810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001558:	200e      	movs	r0, #14
 800155a:	f001 f99b 	bl	8002894 <HAL_NVIC_EnableIRQ>

}
 800155e:	b003      	add	sp, #12
 8001560:	f85d fb04 	ldr.w	pc, [sp], #4
 8001564:	40021000 	.word	0x40021000

08001568 <MX_GPIO_Init>:
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	2210      	movs	r2, #16
{
 800156a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156e:	eb0d 0002 	add.w	r0, sp, r2
 8001572:	2100      	movs	r1, #0
 8001574:	f003 fd12 	bl	8004f9c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001578:	4b32      	ldr	r3, [pc, #200]	; (8001644 <MX_GPIO_Init+0xdc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
 800157a:	4d33      	ldr	r5, [pc, #204]	; (8001648 <MX_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
 800157e:	4628      	mov	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001580:	f042 0210 	orr.w	r2, r2, #16
 8001584:	619a      	str	r2, [r3, #24]
 8001586:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
 8001588:	f247 0121 	movw	r1, #28705	; 0x7021
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158c:	f002 0210 	and.w	r2, r2, #16
 8001590:	9200      	str	r2, [sp, #0]
 8001592:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001594:	699a      	ldr	r2, [r3, #24]
                          |RST_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001596:	2603      	movs	r6, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001598:	f042 0220 	orr.w	r2, r2, #32
 800159c:	619a      	str	r2, [r3, #24]
 800159e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA0 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	4f2a      	ldr	r7, [pc, #168]	; (800164c <MX_GPIO_Init+0xe4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a2:	f002 0220 	and.w	r2, r2, #32
 80015a6:	9201      	str	r2, [sp, #4]
 80015a8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
                          |RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	f042 0204 	orr.w	r2, r2, #4
 80015b2:	619a      	str	r2, [r3, #24]
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	f002 0204 	and.w	r2, r2, #4
 80015ba:	9202      	str	r2, [sp, #8]
 80015bc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	699a      	ldr	r2, [r3, #24]
 80015c0:	f042 0208 	orr.w	r2, r2, #8
 80015c4:	619a      	str	r2, [r3, #24]
 80015c6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
 80015c8:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	9303      	str	r3, [sp, #12]
 80015d0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
 80015d2:	f001 fdad 	bl	8003130 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015da:	a904      	add	r1, sp, #16
 80015dc:	481c      	ldr	r0, [pc, #112]	; (8001650 <MX_GPIO_Init+0xe8>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015de:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e0:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e2:	f001 fc27 	bl	8002e34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_9;
 80015e6:	f240 2301 	movw	r3, #513	; 0x201
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	a904      	add	r1, sp, #16
 80015ec:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_9;
 80015ee:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f0:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f001 fc1f 	bl	8002e34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin 
 80015f6:	f247 0321 	movw	r3, #28705	; 0x7021
 80015fa:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fe:	a904      	add	r1, sp, #16
 8001600:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001606:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f001 fc14 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEV_MODE2_Pin|FAULT_FEEDBACK_Pin|CALIB_MODE_Pin;
 800160c:	f248 4304 	movw	r3, #33796	; 0x8404
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001610:	a904      	add	r1, sp, #16
 8001612:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = DEV_MODE2_Pin|FAULT_FEEDBACK_Pin|CALIB_MODE_Pin;
 8001614:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001616:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f001 fc0b 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB4 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9;
 800161e:	f44f 6331 	mov.w	r3, #2832	; 0xb10
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001622:	a904      	add	r1, sp, #16
 8001624:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9;
 8001626:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001628:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162a:	f001 fc03 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DEV_MODE1_Pin|CALIB_V_Pin|CALIB_I_Pin;
 800162e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	a904      	add	r1, sp, #16
 8001634:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = DEV_MODE1_Pin|CALIB_V_Pin|CALIB_I_Pin;
 8001636:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001638:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f001 fbfa 	bl	8002e34 <HAL_GPIO_Init>

}
 8001640:	b009      	add	sp, #36	; 0x24
 8001642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001644:	40021000 	.word	0x40021000
 8001648:	40010c00 	.word	0x40010c00
 800164c:	40010800 	.word	0x40010800
 8001650:	40011000 	.word	0x40011000

08001654 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001654:	b508      	push	{r3, lr}

  hiwdg.Instance = IWDG;
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
  hiwdg.Init.Reload = 4095;
 8001656:	2206      	movs	r2, #6
 8001658:	f640 73ff 	movw	r3, #4095	; 0xfff
  hiwdg.Instance = IWDG;
 800165c:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_IWDG_Init+0x20>)
  hiwdg.Init.Reload = 4095;
 800165e:	4906      	ldr	r1, [pc, #24]	; (8001678 <MX_IWDG_Init+0x24>)
 8001660:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001664:	f001 fd7e 	bl	8003164 <HAL_IWDG_Init>
 8001668:	b118      	cbz	r0, 8001672 <MX_IWDG_Init+0x1e>
  {
    Error_Handler();
  }

}
 800166a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800166e:	f000 b9d1 	b.w	8001a14 <Error_Handler>
 8001672:	bd08      	pop	{r3, pc}
 8001674:	2000034c 	.word	0x2000034c
 8001678:	40003000 	.word	0x40003000

0800167c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167c:	2228      	movs	r2, #40	; 0x28
{
 800167e:	b510      	push	{r4, lr}
 8001680:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001682:	eb0d 0002 	add.w	r0, sp, r2
 8001686:	2100      	movs	r1, #0
 8001688:	f003 fc88 	bl	8004f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	2214      	movs	r2, #20
 800168e:	2100      	movs	r1, #0
 8001690:	eb0d 0002 	add.w	r0, sp, r2
 8001694:	f003 fc82 	bl	8004f9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001698:	2100      	movs	r1, #0
 800169a:	2210      	movs	r2, #16
 800169c:	a801      	add	r0, sp, #4
 800169e:	f003 fc7d 	bl	8004f9c <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80016a2:	2309      	movs	r3, #9
 80016a4:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016aa:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ac:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ae:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b8:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016ba:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016bc:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016be:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c0:	f001 fda4 	bl	800320c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ca:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016cc:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ce:	4621      	mov	r1, r4
 80016d0:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d2:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d4:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d8:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016da:	f001 ffd5 	bl	8003688 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80016de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016e4:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80016e6:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e8:	f002 f8fe 	bl	80038e8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80016ec:	b014      	add	sp, #80	; 0x50
 80016ee:	bd10      	pop	{r4, pc}

080016f0 <main>:
				DBGMCU->CR |=DBGMCU_CR_DBG_STOP;
 80016f0:	4bb0      	ldr	r3, [pc, #704]	; (80019b4 <main+0x2c4>)
{
 80016f2:	b583      	push	{r0, r1, r7, lr}
				DBGMCU->CR |=DBGMCU_CR_DBG_STOP;
 80016f4:	685a      	ldr	r2, [r3, #4]
    BoardStatus=sBoot;
 80016f6:	2400      	movs	r4, #0
				DBGMCU->CR |=DBGMCU_CR_DBG_STOP;
 80016f8:	f042 0202 	orr.w	r2, r2, #2
 80016fc:	605a      	str	r2, [r3, #4]
		__HAL_DBGMCU_FREEZE_IWDG();
 80016fe:	685a      	ldr	r2, [r3, #4]
      buttonInit(&CALIB_V, CALIB_V_GPIO_Port, CALIB_V_Pin, GPIO_PIN_RESET, 4000, 10000);
 8001700:	f44f 667a 	mov.w	r6, #4000	; 0xfa0
		__HAL_DBGMCU_FREEZE_IWDG();
 8001704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001708:	605a      	str	r2, [r3, #4]
  HAL_Init();
 800170a:	f000 fce1 	bl	80020d0 <HAL_Init>
  SystemClock_Config();
 800170e:	f7ff ffb5 	bl	800167c <SystemClock_Config>
  MX_GPIO_Init();
 8001712:	f7ff ff29 	bl	8001568 <MX_GPIO_Init>
  MX_DMA_Init();
 8001716:	f7ff ff07 	bl	8001528 <MX_DMA_Init>
  MX_CRC_Init();
 800171a:	f7ff f89b 	bl	8000854 <MX_CRC_Init>
  MX_IWDG_Init();
 800171e:	f7ff ff99 	bl	8001654 <MX_IWDG_Init>
  MX_TIM1_Init();
 8001722:	f000 fb67 	bl	8001df4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001726:	f000 fbd5 	bl	8001ed4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800172a:	f000 fa55 	bl	8001bd8 <MX_TIM4_Init>
  MX_TIM2_Init();
 800172e:	f000 fa1d 	bl	8001b6c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001732:	f000 fc27 	bl	8001f84 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001736:	f7fe fffd 	bl	8000734 <MX_ADC1_Init>
    DigiTOS_IWDG_Init(DigiTOS_IWDG_Timeout_16s);
 800173a:	200c      	movs	r0, #12
 800173c:	f7ff fdfe 	bl	800133c <DigiTOS_IWDG_Init>
    ResetWDG();
 8001740:	f7ff fc3e 	bl	8000fc0 <ResetWDG>
    StartADC();
 8001744:	f7ff f8aa 	bl	800089c <StartADC>
    SinWave=swNOP;
 8001748:	2203      	movs	r2, #3
 800174a:	4b9b      	ldr	r3, [pc, #620]	; (80019b8 <main+0x2c8>)
      buttonInit(&CALIB_V, CALIB_V_GPIO_Port, CALIB_V_Pin, GPIO_PIN_RESET, 4000, 10000);
 800174c:	f242 7710 	movw	r7, #10000	; 0x2710
    SinWave=swNOP;
 8001750:	701a      	strb	r2, [r3, #0]
    PWM_50Hz_Init();
 8001752:	f7ff fcdf 	bl	8001114 <PWM_50Hz_Init>
    PWM_50Hz_ON();
 8001756:	f7ff fd5f 	bl	8001218 <PWM_50Hz_ON>
    PWM_50Hz_OFF();
 800175a:	f7ff fd64 	bl	8001226 <PWM_50Hz_OFF>
    PWM_Sinus_Init();
 800175e:	f7ff fdb5 	bl	80012cc <PWM_Sinus_Init>
    PWM_Sinus_ON();
 8001762:	f7ff fda5 	bl	80012b0 <PWM_Sinus_ON>
    PWM_Sinus_OFF();
 8001766:	f7ff fdaa 	bl	80012be <PWM_Sinus_OFF>
    ResetWDG();
 800176a:	f7ff fc29 	bl	8000fc0 <ResetWDG>
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_SET);
 800176e:	2201      	movs	r2, #1
 8001770:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001774:	4891      	ldr	r0, [pc, #580]	; (80019bc <main+0x2cc>)
 8001776:	f001 fcdb 	bl	8003130 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,GPIO_PIN_SET);
 800177a:	2201      	movs	r2, #1
 800177c:	488f      	ldr	r0, [pc, #572]	; (80019bc <main+0x2cc>)
 800177e:	4611      	mov	r1, r2
 8001780:	f001 fcd6 	bl	8003130 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,GPIO_PIN_SET);
 8001784:	2201      	movs	r2, #1
 8001786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178a:	488c      	ldr	r0, [pc, #560]	; (80019bc <main+0x2cc>)
 800178c:	f001 fcd0 	bl	8003130 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,GPIO_PIN_SET);
 8001790:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001794:	2201      	movs	r2, #1
 8001796:	4889      	ldr	r0, [pc, #548]	; (80019bc <main+0x2cc>)
 8001798:	f001 fcca 	bl	8003130 <HAL_GPIO_WritePin>
    HAL_TIM_Base_Start(&htim4);
 800179c:	4888      	ldr	r0, [pc, #544]	; (80019c0 <main+0x2d0>)
 800179e:	f002 fa0d 	bl	8003bbc <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start_IT(&htim4);
 80017a2:	4887      	ldr	r0, [pc, #540]	; (80019c0 <main+0x2d0>)
 80017a4:	f002 fa32 	bl	8003c0c <HAL_TIM_Base_Start_IT>
    TIM2->ARR=sBoot_Delay;
 80017a8:	2264      	movs	r2, #100	; 0x64
 80017aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    BoardStatus=sBoot;
 80017ae:	4d85      	ldr	r5, [pc, #532]	; (80019c4 <main+0x2d4>)
 80017b0:	702c      	strb	r4, [r5, #0]
    TIM2->ARR=sBoot_Delay;
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
      ResetWDG();
 80017b4:	f7ff fc04 	bl	8000fc0 <ResetWDG>
      buttonInit(&CALIB_V, CALIB_V_GPIO_Port, CALIB_V_Pin, GPIO_PIN_RESET, 4000, 10000);
 80017b8:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80017bc:	4623      	mov	r3, r4
 80017be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017c2:	4981      	ldr	r1, [pc, #516]	; (80019c8 <main+0x2d8>)
 80017c4:	4881      	ldr	r0, [pc, #516]	; (80019cc <main+0x2dc>)
 80017c6:	f7ff fe52 	bl	800146e <buttonInit>
      buttonInit(&CALIB_I, CALIB_I_GPIO_Port, CALIB_I_Pin, GPIO_PIN_RESET, 4000, 10000);
 80017ca:	e88d 00c0 	stmia.w	sp, {r6, r7}
      buttonInit(&CALIB_MODE, CALIB_MODE_GPIO_Port, CALIB_MODE_Pin, GPIO_PIN_RESET, 30, 2000);
 80017ce:	261e      	movs	r6, #30
 80017d0:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
      buttonInit(&CALIB_I, CALIB_I_GPIO_Port, CALIB_I_Pin, GPIO_PIN_RESET, 4000, 10000);
 80017d4:	4623      	mov	r3, r4
 80017d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017da:	497b      	ldr	r1, [pc, #492]	; (80019c8 <main+0x2d8>)
 80017dc:	487c      	ldr	r0, [pc, #496]	; (80019d0 <main+0x2e0>)
 80017de:	f7ff fe46 	bl	800146e <buttonInit>
      buttonInit(&CALIB_MODE, CALIB_MODE_GPIO_Port, CALIB_MODE_Pin, GPIO_PIN_RESET, 30, 2000);
 80017e2:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80017e6:	4623      	mov	r3, r4
 80017e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017ec:	4973      	ldr	r1, [pc, #460]	; (80019bc <main+0x2cc>)
 80017ee:	4879      	ldr	r0, [pc, #484]	; (80019d4 <main+0x2e4>)
 80017f0:	f7ff fe3d 	bl	800146e <buttonInit>
      buttonInit(&DevModeKey, DEV_MODE1_GPIO_Port, DEV_MODE1_Pin, GPIO_PIN_RESET, 30, 2000);
 80017f4:	e88d 00c0 	stmia.w	sp, {r6, r7}
      buttonInit(&DevModeKey2, DEV_MODE2_GPIO_Port, DEV_MODE2_Pin, GPIO_PIN_RESET, 30, 1000);
 80017f8:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
      buttonInit(&DevModeKey, DEV_MODE1_GPIO_Port, DEV_MODE1_Pin, GPIO_PIN_RESET, 30, 2000);
 80017fc:	4623      	mov	r3, r4
 80017fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001802:	4971      	ldr	r1, [pc, #452]	; (80019c8 <main+0x2d8>)
 8001804:	4874      	ldr	r0, [pc, #464]	; (80019d8 <main+0x2e8>)
 8001806:	f7ff fe32 	bl	800146e <buttonInit>
      buttonInit(&DevModeKey2, DEV_MODE2_GPIO_Port, DEV_MODE2_Pin, GPIO_PIN_RESET, 30, 1000);
 800180a:	4623      	mov	r3, r4
 800180c:	2204      	movs	r2, #4
 800180e:	496b      	ldr	r1, [pc, #428]	; (80019bc <main+0x2cc>)
 8001810:	4872      	ldr	r0, [pc, #456]	; (80019dc <main+0x2ec>)
 8001812:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8001816:	f7ff fe2a 	bl	800146e <buttonInit>
      buttonInit(&FaultFlag, FAULT_FEEDBACK_GPIO_Port, FAULT_FEEDBACK_Pin, GPIO_PIN_RESET, 30, 1000);
 800181a:	4623      	mov	r3, r4
 800181c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001820:	4966      	ldr	r1, [pc, #408]	; (80019bc <main+0x2cc>)
 8001822:	486f      	ldr	r0, [pc, #444]	; (80019e0 <main+0x2f0>)
 8001824:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8001828:	f7ff fe21 	bl	800146e <buttonInit>
      buttonUpdate(&DevModeKey);
 800182c:	486a      	ldr	r0, [pc, #424]	; (80019d8 <main+0x2e8>)
 800182e:	f7ff fe39 	bl	80014a4 <buttonUpdate>
      buttonUpdate(&DevModeKey2);
 8001832:	486a      	ldr	r0, [pc, #424]	; (80019dc <main+0x2ec>)
 8001834:	f7ff fe36 	bl	80014a4 <buttonUpdate>
      buttonUpdate(&FaultFlag);
 8001838:	4869      	ldr	r0, [pc, #420]	; (80019e0 <main+0x2f0>)
 800183a:	f7ff fe33 	bl	80014a4 <buttonUpdate>
      buttonUpdate(&CALIB_V);
 800183e:	4863      	ldr	r0, [pc, #396]	; (80019cc <main+0x2dc>)
 8001840:	f7ff fe30 	bl	80014a4 <buttonUpdate>
      buttonUpdate(&CALIB_I);
 8001844:	4862      	ldr	r0, [pc, #392]	; (80019d0 <main+0x2e0>)
 8001846:	f7ff fe2d 	bl	80014a4 <buttonUpdate>
      buttonUpdate(&CALIB_MODE);
 800184a:	4862      	ldr	r0, [pc, #392]	; (80019d4 <main+0x2e4>)
 800184c:	f7ff fe2a 	bl	80014a4 <buttonUpdate>
      HAL_Delay(500);
 8001850:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001854:	f000 fc60 	bl	8002118 <HAL_Delay>
                 if (InitEEPROM()==0) {
 8001858:	f7ff fbf4 	bl	8001044 <InitEEPROM>
 800185c:	2800      	cmp	r0, #0
 800185e:	f040 80a0 	bne.w	80019a2 <main+0x2b2>
               	  strcpy(uart_buff,"NO EEPROM\r\n");
 8001862:	4960      	ldr	r1, [pc, #384]	; (80019e4 <main+0x2f4>)
 8001864:	4860      	ldr	r0, [pc, #384]	; (80019e8 <main+0x2f8>)
 8001866:	f003 fbd4 	bl	8005012 <strcpy>
               	  USE_DEF_CALIB();
 800186a:	f7ff fbd7 	bl	800101c <USE_DEF_CALIB>
               	  SerialPrintln(1);
 800186e:	2001      	movs	r0, #1
 8001870:	f7ff fb7e 	bl	8000f70 <SerialPrintln>
      Get_Version();
 8001874:	f7ff fb5e 	bl	8000f34 <Get_Version>
      SerialPrintln(1);
 8001878:	2001      	movs	r0, #1
 800187a:	f7ff fb79 	bl	8000f70 <SerialPrintln>
      Get_ChipID();
 800187e:	f7ff fb29 	bl	8000ed4 <Get_ChipID>
      SerialPrintln(1);
 8001882:	2001      	movs	r0, #1
 8001884:	f7ff fb74 	bl	8000f70 <SerialPrintln>
      Get_FlashSize();
 8001888:	f7ff fb40 	bl	8000f0c <Get_FlashSize>
      SerialPrintln(1);
 800188c:	2001      	movs	r0, #1
 800188e:	f7ff fb6f 	bl	8000f70 <SerialPrintln>
      ClearUART_Buff();
 8001892:	f7ff fb17 	bl	8000ec4 <ClearUART_Buff>
      if(buttonUpdate(&CALIB_MODE) == isPressed){
 8001896:	484f      	ldr	r0, [pc, #316]	; (80019d4 <main+0x2e4>)
 8001898:	f7ff fe04 	bl	80014a4 <buttonUpdate>
 800189c:	2802      	cmp	r0, #2
 800189e:	4c53      	ldr	r4, [pc, #332]	; (80019ec <main+0x2fc>)
 80018a0:	f040 8086 	bne.w	80019b0 <main+0x2c0>
    	  strcpy(uart_buff,"CALIB MODE ENABLED\r\n");
 80018a4:	4952      	ldr	r1, [pc, #328]	; (80019f0 <main+0x300>)
 80018a6:	4850      	ldr	r0, [pc, #320]	; (80019e8 <main+0x2f8>)
 80018a8:	f003 fbb3 	bl	8005012 <strcpy>
    	  SerialPrintln(1);
 80018ac:	2001      	movs	r0, #1
 80018ae:	f7ff fb5f 	bl	8000f70 <SerialPrintln>
    	  CalibMode=1;
 80018b2:	2301      	movs	r3, #1
      buttonUpdate(&FaultFlag);
 80018b4:	484a      	ldr	r0, [pc, #296]	; (80019e0 <main+0x2f0>)
    	  CalibMode=0;
 80018b6:	6023      	str	r3, [r4, #0]
      buttonUpdate(&FaultFlag);
 80018b8:	f7ff fdf4 	bl	80014a4 <buttonUpdate>
      if(buttonUpdate(&DevModeKey) == isPressed){
 80018bc:	4846      	ldr	r0, [pc, #280]	; (80019d8 <main+0x2e8>)
 80018be:	f7ff fdf1 	bl	80014a4 <buttonUpdate>
 80018c2:	2802      	cmp	r0, #2
 80018c4:	d11b      	bne.n	80018fe <main+0x20e>
    	strcpy(uart_buff,"DEV MODE - wait\r\n");
 80018c6:	494b      	ldr	r1, [pc, #300]	; (80019f4 <main+0x304>)
 80018c8:	4847      	ldr	r0, [pc, #284]	; (80019e8 <main+0x2f8>)
 80018ca:	f003 fba2 	bl	8005012 <strcpy>
    	SerialPrintln(1);
 80018ce:	2001      	movs	r0, #1
 80018d0:	f7ff fb4e 	bl	8000f70 <SerialPrintln>
    	ResetWDG();
 80018d4:	f7ff fb74 	bl	8000fc0 <ResetWDG>
        HAL_Delay(500);
 80018d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018dc:	f000 fc1c 	bl	8002118 <HAL_Delay>
    	if(buttonUpdate(&DevModeKey) == isPressed){
 80018e0:	483d      	ldr	r0, [pc, #244]	; (80019d8 <main+0x2e8>)
 80018e2:	f7ff fddf 	bl	80014a4 <buttonUpdate>
 80018e6:	2802      	cmp	r0, #2
 80018e8:	d109      	bne.n	80018fe <main+0x20e>
    		strcpy(uart_buff,"DEV MODE - confirmed\r\n");
 80018ea:	4943      	ldr	r1, [pc, #268]	; (80019f8 <main+0x308>)
 80018ec:	483e      	ldr	r0, [pc, #248]	; (80019e8 <main+0x2f8>)
 80018ee:	f003 fb90 	bl	8005012 <strcpy>
    	    SerialPrintln(1);
 80018f2:	2001      	movs	r0, #1
 80018f4:	f7ff fb3c 	bl	8000f70 <SerialPrintln>
    		DevMode1=1;
 80018f8:	2201      	movs	r2, #1
 80018fa:	4b40      	ldr	r3, [pc, #256]	; (80019fc <main+0x30c>)
 80018fc:	601a      	str	r2, [r3, #0]
        strcpy(uart_buff,"Start Loop\r\n");
 80018fe:	4940      	ldr	r1, [pc, #256]	; (8001a00 <main+0x310>)
 8001900:	4839      	ldr	r0, [pc, #228]	; (80019e8 <main+0x2f8>)
 8001902:	f003 fb86 	bl	8005012 <strcpy>
        SerialPrintln(1);
 8001906:	2001      	movs	r0, #1
 8001908:	f7ff fb32 	bl	8000f70 <SerialPrintln>
      	BoardStatus=sGEN;
 800190c:	2401      	movs	r4, #1
      	TIM2->ARR=sDEF_Delay;
 800190e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001912:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
      	BoardStatus=sGEN;
 8001916:	702c      	strb	r4, [r5, #0]
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_RESET);
 8001918:	f44f 4180 	mov.w	r1, #16384	; 0x4000
      	TIM2->ARR=sDEF_Delay;
 800191c:	62da      	str	r2, [r3, #44]	; 0x2c
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_RESET);
 800191e:	4827      	ldr	r0, [pc, #156]	; (80019bc <main+0x2cc>)
 8001920:	2200      	movs	r2, #0
 8001922:	f001 fc05 	bl	8003130 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	4621      	mov	r1, r4
 800192a:	4824      	ldr	r0, [pc, #144]	; (80019bc <main+0x2cc>)
 800192c:	f001 fc00 	bl	8003130 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001936:	4821      	ldr	r0, [pc, #132]	; (80019bc <main+0x2cc>)
 8001938:	f001 fbfa 	bl	8003130 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001942:	481e      	ldr	r0, [pc, #120]	; (80019bc <main+0x2cc>)
 8001944:	f001 fbf4 	bl	8003130 <HAL_GPIO_WritePin>
           buttonUpdate(&FaultFlag);
 8001948:	4825      	ldr	r0, [pc, #148]	; (80019e0 <main+0x2f0>)
 800194a:	f7ff fdab 	bl	80014a4 <buttonUpdate>
           buttonUpdate(&DevModeKey2);
 800194e:	4823      	ldr	r0, [pc, #140]	; (80019dc <main+0x2ec>)
 8001950:	f7ff fda8 	bl	80014a4 <buttonUpdate>
           HAL_Delay(500);
 8001954:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001958:	f000 fbde 	bl	8002118 <HAL_Delay>
           if(buttonUpdate(&DevModeKey2) == isPressedLong){
 800195c:	481f      	ldr	r0, [pc, #124]	; (80019dc <main+0x2ec>)
 800195e:	f7ff fda1 	bl	80014a4 <buttonUpdate>
 8001962:	2803      	cmp	r0, #3
 8001964:	d106      	bne.n	8001974 <main+0x284>
        	   strcpy(uart_buff,"Start GENERATOR\r\n");
 8001966:	4927      	ldr	r1, [pc, #156]	; (8001a04 <main+0x314>)
 8001968:	481f      	ldr	r0, [pc, #124]	; (80019e8 <main+0x2f8>)
 800196a:	f003 fb52 	bl	8005012 <strcpy>
        	   SerialPrintln(1);
 800196e:	4620      	mov	r0, r4
 8001970:	f7ff fafe 	bl	8000f70 <SerialPrintln>
           TIM4->PSC=SinResPSC;
 8001974:	2400      	movs	r4, #0
           buttonUpdate(&FaultFlag);
 8001976:	481a      	ldr	r0, [pc, #104]	; (80019e0 <main+0x2f0>)
 8001978:	f7ff fd94 	bl	80014a4 <buttonUpdate>
           TIM4->PSC=SinResPSC;
 800197c:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <main+0x318>)
           HAL_TIM_Base_Start(&htim4);
 800197e:	4810      	ldr	r0, [pc, #64]	; (80019c0 <main+0x2d0>)
           TIM4->PSC=SinResPSC;
 8001980:	629c      	str	r4, [r3, #40]	; 0x28
           HAL_TIM_Base_Start(&htim4);
 8001982:	f002 f91b 	bl	8003bbc <HAL_TIM_Base_Start>
           HAL_TIM_Base_Start_IT(&htim4);
 8001986:	480e      	ldr	r0, [pc, #56]	; (80019c0 <main+0x2d0>)
 8001988:	f002 f940 	bl	8003c0c <HAL_TIM_Base_Start_IT>
	  			UpdateAmp_FLAG=2;//busy Flag
 800198c:	2602      	movs	r6, #2
	  if (UpdateAmp_FLAG==1) {
 800198e:	4d1f      	ldr	r5, [pc, #124]	; (8001a0c <main+0x31c>)
 8001990:	882b      	ldrh	r3, [r5, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	2b01      	cmp	r3, #1
 8001996:	d1fb      	bne.n	8001990 <main+0x2a0>
	  			UpdateAmp_FLAG=2;//busy Flag
 8001998:	802e      	strh	r6, [r5, #0]
	  			UpdateAmplitudeByV();
 800199a:	f7ff f935 	bl	8000c08 <UpdateAmplitudeByV>
	  			UpdateAmp_FLAG=0; // clear Flag
 800199e:	802c      	strh	r4, [r5, #0]
 80019a0:	e7f6      	b.n	8001990 <main+0x2a0>
              	  USE_NEW_CALIB();
 80019a2:	f7ff fb45 	bl	8001030 <USE_NEW_CALIB>
               	  strcpy(uart_buff,"OK EEPROM\r\n");
 80019a6:	491a      	ldr	r1, [pc, #104]	; (8001a10 <main+0x320>)
 80019a8:	480f      	ldr	r0, [pc, #60]	; (80019e8 <main+0x2f8>)
 80019aa:	f003 fb32 	bl	8005012 <strcpy>
 80019ae:	e75e      	b.n	800186e <main+0x17e>
    	  CalibMode=0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	e77f      	b.n	80018b4 <main+0x1c4>
 80019b4:	e0042000 	.word	0xe0042000
 80019b8:	20000164 	.word	0x20000164
 80019bc:	40010c00 	.word	0x40010c00
 80019c0:	20000358 	.word	0x20000358
 80019c4:	2000013a 	.word	0x2000013a
 80019c8:	40010800 	.word	0x40010800
 80019cc:	2000022c 	.word	0x2000022c
 80019d0:	20000248 	.word	0x20000248
 80019d4:	200002f8 	.word	0x200002f8
 80019d8:	200002c8 	.word	0x200002c8
 80019dc:	20000330 	.word	0x20000330
 80019e0:	20000314 	.word	0x20000314
 80019e4:	080058bb 	.word	0x080058bb
 80019e8:	20000264 	.word	0x20000264
 80019ec:	2000013c 	.word	0x2000013c
 80019f0:	080058d3 	.word	0x080058d3
 80019f4:	080058e8 	.word	0x080058e8
 80019f8:	080058fa 	.word	0x080058fa
 80019fc:	20000148 	.word	0x20000148
 8001a00:	08005911 	.word	0x08005911
 8001a04:	0800591e 	.word	0x0800591e
 8001a08:	40000800 	.word	0x40000800
 8001a0c:	20000166 	.word	0x20000166
 8001a10:	080058c7 	.word	0x080058c7

08001a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a14:	4770      	bx	lr

08001a16 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001a16:	4770      	bx	lr

08001a18 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a18:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <HAL_MspInit+0x74>)
{
 8001a1a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a1c:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001a1e:	2005      	movs	r0, #5
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a20:	f042 0201 	orr.w	r2, r2, #1
 8001a24:	619a      	str	r2, [r3, #24]
 8001a26:	699a      	ldr	r2, [r3, #24]
 8001a28:	f002 0201 	and.w	r2, r2, #1
 8001a2c:	9200      	str	r2, [sp, #0]
 8001a2e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a30:	69da      	ldr	r2, [r3, #28]
 8001a32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a36:	61da      	str	r2, [r3, #28]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001a42:	f000 fec7 	bl	80027d4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2001      	movs	r0, #1
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	f000 fee0 	bl	8002810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001a50:	2001      	movs	r0, #1
 8001a52:	f000 ff1f 	bl	8002894 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2004      	movs	r0, #4
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	f000 fed8 	bl	8002810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001a60:	2004      	movs	r0, #4
 8001a62:	f000 ff17 	bl	8002894 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2005      	movs	r0, #5
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	f000 fed0 	bl	8002810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001a70:	2005      	movs	r0, #5
 8001a72:	f000 ff0f 	bl	8002894 <HAL_NVIC_EnableIRQ>

  /**NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST 
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8001a76:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <HAL_MspInit+0x78>)
 8001a78:	6853      	ldr	r3, [r2, #4]
 8001a7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a82:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a84:	b003      	add	sp, #12
 8001a86:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010000 	.word	0x40010000

08001a94 <NMI_Handler>:
 8001a94:	4770      	bx	lr

08001a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a96:	e7fe      	b.n	8001a96 <HardFault_Handler>

08001a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a98:	e7fe      	b.n	8001a98 <MemManage_Handler>

08001a9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9a:	e7fe      	b.n	8001a9a <BusFault_Handler>

08001a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a9c:	e7fe      	b.n	8001a9c <UsageFault_Handler>

08001a9e <SVC_Handler>:
 8001a9e:	4770      	bx	lr

08001aa0 <DebugMon_Handler>:
 8001aa0:	4770      	bx	lr

08001aa2 <PendSV_Handler>:
 8001aa2:	4770      	bx	lr

08001aa4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa4:	f000 bb26 	b.w	80020f4 <HAL_IncTick>

08001aa8 <PVD_IRQHandler>:
void PVD_IRQHandler(void)
{
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001aa8:	f001 bba2 	b.w	80031f0 <HAL_PWR_PVD_IRQHandler>

08001aac <FLASH_IRQHandler>:
void FLASH_IRQHandler(void)
{
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001aac:	f001 b926 	b.w	8002cfc <HAL_FLASH_IRQHandler>

08001ab0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001ab0:	4770      	bx	lr
	...

08001ab4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ab4:	4801      	ldr	r0, [pc, #4]	; (8001abc <DMA1_Channel1_IRQHandler+0x8>)
 8001ab6:	f001 b863 	b.w	8002b80 <HAL_DMA_IRQHandler>
 8001aba:	bf00      	nop
 8001abc:	200001cc 	.word	0x200001cc

08001ac0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ac0:	4801      	ldr	r0, [pc, #4]	; (8001ac8 <DMA1_Channel4_IRQHandler+0x8>)
 8001ac2:	f001 b85d 	b.w	8002b80 <HAL_DMA_IRQHandler>
 8001ac6:	bf00      	nop
 8001ac8:	20000458 	.word	0x20000458

08001acc <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001acc:	4801      	ldr	r0, [pc, #4]	; (8001ad4 <ADC1_2_IRQHandler+0x8>)
 8001ace:	f000 bb65 	b.w	800219c <HAL_ADC_IRQHandler>
 8001ad2:	bf00      	nop
 8001ad4:	2000019c 	.word	0x2000019c

08001ad8 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ad8:	4801      	ldr	r0, [pc, #4]	; (8001ae0 <TIM1_CC_IRQHandler+0x8>)
 8001ada:	f002 bae4 	b.w	80040a6 <HAL_TIM_IRQHandler>
 8001ade:	bf00      	nop
 8001ae0:	200003d8 	.word	0x200003d8

08001ae4 <TIM1_TRG_COM_IRQHandler>:
 8001ae4:	f7ff bff8 	b.w	8001ad8 <TIM1_CC_IRQHandler>

08001ae8 <TIM1_UP_IRQHandler>:
 8001ae8:	f7ff bff6 	b.w	8001ad8 <TIM1_CC_IRQHandler>

08001aec <TIM1_BRK_IRQHandler>:
 8001aec:	f7ff bff4 	b.w	8001ad8 <TIM1_CC_IRQHandler>

08001af0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001af0:	4801      	ldr	r0, [pc, #4]	; (8001af8 <TIM2_IRQHandler+0x8>)
 8001af2:	f002 bad8 	b.w	80040a6 <HAL_TIM_IRQHandler>
 8001af6:	bf00      	nop
 8001af8:	20000418 	.word	0x20000418

08001afc <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001afc:	4801      	ldr	r0, [pc, #4]	; (8001b04 <TIM3_IRQHandler+0x8>)
 8001afe:	f002 bad2 	b.w	80040a6 <HAL_TIM_IRQHandler>
 8001b02:	bf00      	nop
 8001b04:	20000398 	.word	0x20000398

08001b08 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b08:	4801      	ldr	r0, [pc, #4]	; (8001b10 <TIM4_IRQHandler+0x8>)
 8001b0a:	f002 bacc 	b.w	80040a6 <HAL_TIM_IRQHandler>
 8001b0e:	bf00      	nop
 8001b10:	20000358 	.word	0x20000358

08001b14 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b14:	4801      	ldr	r0, [pc, #4]	; (8001b1c <USART1_IRQHandler+0x8>)
 8001b16:	f003 b94f 	b.w	8004db8 <HAL_UART_IRQHandler>
 8001b1a:	bf00      	nop
 8001b1c:	2000049c 	.word	0x2000049c

08001b20 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <SystemInit+0x40>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	f042 0201 	orr.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <SystemInit+0x44>)
 8001b2e:	400a      	ands	r2, r1
 8001b30:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001b38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b3c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b44:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001b4c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b4e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b52:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <SystemInit+0x48>)
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	f8ff0000 	.word	0xf8ff0000
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6e:	2210      	movs	r2, #16
 8001b70:	2100      	movs	r1, #0
 8001b72:	a802      	add	r0, sp, #8
 8001b74:	f003 fa12 	bl	8004f9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	2300      	movs	r3, #0

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 35999;
 8001b7a:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001b7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8001b82:	4814      	ldr	r0, [pc, #80]	; (8001bd4 <MX_TIM2_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	9301      	str	r3, [sp, #4]
  htim2.Init.Prescaler = 35999;
 8001b88:	e880 0006 	stmia.w	r0, {r1, r2}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1000;
 8001b8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b92:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b94:	2380      	movs	r3, #128	; 0x80
  htim2.Init.Period = 1000;
 8001b96:	60c2      	str	r2, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b98:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b9a:	f002 fb5f 	bl	800425c <HAL_TIM_Base_Init>
 8001b9e:	b108      	cbz	r0, 8001ba4 <MX_TIM2_Init+0x38>
  {
    Error_Handler();
 8001ba0:	f7ff ff38 	bl	8001a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ba8:	a902      	add	r1, sp, #8
 8001baa:	480a      	ldr	r0, [pc, #40]	; (8001bd4 <MX_TIM2_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bac:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bae:	f002 f855 	bl	8003c5c <HAL_TIM_ConfigClockSource>
 8001bb2:	b108      	cbz	r0, 8001bb8 <MX_TIM2_Init+0x4c>
  {
    Error_Handler();
 8001bb4:	f7ff ff2e 	bl	8001a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb8:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bba:	4669      	mov	r1, sp
 8001bbc:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_TIM2_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbe:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc0:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bc2:	f002 fea3 	bl	800490c <HAL_TIMEx_MasterConfigSynchronization>
 8001bc6:	b108      	cbz	r0, 8001bcc <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8001bc8:	f7ff ff24 	bl	8001a14 <Error_Handler>
  }

}
 8001bcc:	b007      	add	sp, #28
 8001bce:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bd2:	bf00      	nop
 8001bd4:	20000418 	.word	0x20000418

08001bd8 <MX_TIM4_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001bd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	2210      	movs	r2, #16
 8001bdc:	2100      	movs	r1, #0
 8001bde:	a802      	add	r0, sp, #8
 8001be0:	f003 f9dc 	bl	8004f9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be4:	2300      	movs	r3, #0

  htim4.Instance = TIM4;
 8001be6:	4814      	ldr	r0, [pc, #80]	; (8001c38 <MX_TIM4_Init+0x60>)
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <MX_TIM4_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bea:	9300      	str	r3, [sp, #0]
  htim4.Init.Prescaler = 0;
 8001bec:	e880 000c 	stmia.w	r0, {r2, r3}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf0:	9301      	str	r3, [sp, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf2:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 1000;
 8001bf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf8:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bfa:	2380      	movs	r3, #128	; 0x80
  htim4.Init.Period = 1000;
 8001bfc:	60c2      	str	r2, [r0, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bfe:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c00:	f002 fb2c 	bl	800425c <HAL_TIM_Base_Init>
 8001c04:	b108      	cbz	r0, 8001c0a <MX_TIM4_Init+0x32>
  {
    Error_Handler();
 8001c06:	f7ff ff05 	bl	8001a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c0e:	a902      	add	r1, sp, #8
 8001c10:	4809      	ldr	r0, [pc, #36]	; (8001c38 <MX_TIM4_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c12:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c14:	f002 f822 	bl	8003c5c <HAL_TIM_ConfigClockSource>
 8001c18:	b108      	cbz	r0, 8001c1e <MX_TIM4_Init+0x46>
  {
    Error_Handler();
 8001c1a:	f7ff fefb 	bl	8001a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c20:	4669      	mov	r1, sp
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_TIM4_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c24:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c26:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c28:	f002 fe70 	bl	800490c <HAL_TIMEx_MasterConfigSynchronization>
 8001c2c:	b108      	cbz	r0, 8001c32 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001c2e:	f7ff fef1 	bl	8001a14 <Error_Handler>
  }

}
 8001c32:	b007      	add	sp, #28
 8001c34:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c38:	20000358 	.word	0x20000358
 8001c3c:	40000800 	.word	0x40000800

08001c40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM1)
 8001c42:	6803      	ldr	r3, [r0, #0]
 8001c44:	4a36      	ldr	r2, [pc, #216]	; (8001d20 <HAL_TIM_Base_MspInit+0xe0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d12c      	bne.n	8001ca4 <HAL_TIM_Base_MspInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c4a:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <HAL_TIM_Base_MspInit+0xe4>)

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001c4c:	2018      	movs	r0, #24
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c4e:	699a      	ldr	r2, [r3, #24]
 8001c50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c54:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001c56:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c58:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001c5a:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001c64:	f000 fdd4 	bl	8002810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001c68:	2018      	movs	r0, #24
 8001c6a:	f000 fe13 	bl	8002894 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2019      	movs	r0, #25
 8001c72:	4611      	mov	r1, r2
 8001c74:	f000 fdcc 	bl	8002810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001c78:	2019      	movs	r0, #25
 8001c7a:	f000 fe0b 	bl	8002894 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	201a      	movs	r0, #26
 8001c82:	4611      	mov	r1, r2
 8001c84:	f000 fdc4 	bl	8002810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001c88:	201a      	movs	r0, #26
 8001c8a:	f000 fe03 	bl	8002894 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	201b      	movs	r0, #27
 8001c92:	4611      	mov	r1, r2
 8001c94:	f000 fdbc 	bl	8002810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c98:	201b      	movs	r0, #27
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c9a:	f000 fdfb 	bl	8002894 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c9e:	b005      	add	sp, #20
 8001ca0:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM2)
 8001ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca8:	d111      	bne.n	8001cce <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001caa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001cae:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 3);
 8001cb0:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	61da      	str	r2, [r3, #28]
 8001cb8:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 3);
 8001cba:	2203      	movs	r2, #3
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 3);
 8001cc2:	2101      	movs	r1, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cc4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 3);
 8001cc6:	f000 fda3 	bl	8002810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cca:	201c      	movs	r0, #28
 8001ccc:	e7e5      	b.n	8001c9a <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM3)
 8001cce:	4a16      	ldr	r2, [pc, #88]	; (8001d28 <HAL_TIM_Base_MspInit+0xe8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d110      	bne.n	8001cf6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_TIM_Base_MspInit+0xe4>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cd6:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cd8:	69da      	ldr	r2, [r3, #28]
 8001cda:	f042 0202 	orr.w	r2, r2, #2
 8001cde:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ce0:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ce2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ce4:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	9302      	str	r3, [sp, #8]
 8001cec:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cee:	f000 fd8f 	bl	8002810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cf2:	201d      	movs	r0, #29
 8001cf4:	e7d1      	b.n	8001c9a <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM4)
 8001cf6:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <HAL_TIM_Base_MspInit+0xec>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d1d0      	bne.n	8001c9e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_TIM_Base_MspInit+0xe4>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001cfe:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d00:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001d02:	2101      	movs	r1, #1
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d04:	f042 0204 	orr.w	r2, r2, #4
 8001d08:	61da      	str	r2, [r3, #28]
 8001d0a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001d0c:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	9303      	str	r3, [sp, #12]
 8001d14:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001d16:	f000 fd7b 	bl	8002810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d1a:	201e      	movs	r0, #30
 8001d1c:	e7bd      	b.n	8001c9a <HAL_TIM_Base_MspInit+0x5a>
 8001d1e:	bf00      	nop
 8001d20:	40012c00 	.word	0x40012c00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	40000800 	.word	0x40000800

08001d30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	2210      	movs	r2, #16
{
 8001d32:	b530      	push	{r4, r5, lr}
 8001d34:	4604      	mov	r4, r0
 8001d36:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	eb0d 0002 	add.w	r0, sp, r2
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	f003 f92d 	bl	8004f9c <memset>
  if(timHandle->Instance==TIM1)
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	4a25      	ldr	r2, [pc, #148]	; (8001ddc <HAL_TIM_MspPostInit+0xac>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d12f      	bne.n	8001daa <HAL_TIM_MspPostInit+0x7a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM1 GPIO Configuration    
    PB1     ------> TIM1_CH3N
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = CH4_Pin;
 8001d4a:	2402      	movs	r4, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4c:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <HAL_TIM_MspPostInit+0xb0>)
    HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8001d50:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d52:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8001d54:	4823      	ldr	r0, [pc, #140]	; (8001de4 <HAL_TIM_MspPostInit+0xb4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d56:	f042 0208 	orr.w	r2, r2, #8
 8001d5a:	619a      	str	r2, [r3, #24]
 8001d5c:	699a      	ldr	r2, [r3, #24]
 8001d5e:	f002 0208 	and.w	r2, r2, #8
 8001d62:	9201      	str	r2, [sp, #4]
 8001d64:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	699a      	ldr	r2, [r3, #24]
 8001d68:	f042 0204 	orr.w	r2, r2, #4
 8001d6c:	619a      	str	r2, [r3, #24]
 8001d6e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = CH4_Pin;
 8001d70:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	9302      	str	r3, [sp, #8]
 8001d78:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d7c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	f001 f859 	bl	8002e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CH3_Pin;
 8001d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8001d86:	a904      	add	r1, sp, #16
 8001d88:	4817      	ldr	r0, [pc, #92]	; (8001de8 <HAL_TIM_MspPostInit+0xb8>)
    GPIO_InitStruct.Pin = CH3_Pin;
 8001d8a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8001d90:	f001 f850 	bl	8002e34 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8001d94:	4a15      	ldr	r2, [pc, #84]	; (8001dec <HAL_TIM_MspPostInit+0xbc>)
 8001d96:	6853      	ldr	r3, [r2, #4]
 8001d98:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001d9c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001da4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001da6:	b009      	add	sp, #36	; 0x24
 8001da8:	bd30      	pop	{r4, r5, pc}
  else if(timHandle->Instance==TIM3)
 8001daa:	4a11      	ldr	r2, [pc, #68]	; (8001df0 <HAL_TIM_MspPostInit+0xc0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d1fa      	bne.n	8001da6 <HAL_TIM_MspPostInit+0x76>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_TIM_MspPostInit+0xb0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db2:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db4:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	480c      	ldr	r0, [pc, #48]	; (8001de8 <HAL_TIM_MspPostInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db8:	f042 0204 	orr.w	r2, r2, #4
 8001dbc:	619a      	str	r2, [r3, #24]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	9303      	str	r3, [sp, #12]
 8001dc6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = CH1_Pin|CH2_Pin;
 8001dc8:	23c0      	movs	r3, #192	; 0xc0
 8001dca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	f001 f82e 	bl	8002e34 <HAL_GPIO_Init>
}
 8001dd8:	e7e5      	b.n	8001da6 <HAL_TIM_MspPostInit+0x76>
 8001dda:	bf00      	nop
 8001ddc:	40012c00 	.word	0x40012c00
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40010c00 	.word	0x40010c00
 8001de8:	40010800 	.word	0x40010800
 8001dec:	40010000 	.word	0x40010000
 8001df0:	40000400 	.word	0x40000400

08001df4 <MX_TIM1_Init>:
{
 8001df4:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df6:	2400      	movs	r4, #0
{
 8001df8:	b094      	sub	sp, #80	; 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfa:	2210      	movs	r2, #16
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	a802      	add	r0, sp, #8
 8001e00:	f003 f8cc 	bl	8004f9c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e04:	221c      	movs	r2, #28
 8001e06:	4621      	mov	r1, r4
 8001e08:	a806      	add	r0, sp, #24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0a:	9400      	str	r4, [sp, #0]
 8001e0c:	9401      	str	r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e0e:	f003 f8c5 	bl	8004f9c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e12:	221c      	movs	r2, #28
 8001e14:	4621      	mov	r1, r4
 8001e16:	a80d      	add	r0, sp, #52	; 0x34
 8001e18:	f003 f8c0 	bl	8004f9c <memset>
  htim1.Init.Prescaler = 1439;
 8001e1c:	f240 539f 	movw	r3, #1439	; 0x59f
  htim1.Instance = TIM1;
 8001e20:	482a      	ldr	r0, [pc, #168]	; (8001ecc <MX_TIM1_Init+0xd8>)
  htim1.Init.Prescaler = 1439;
 8001e22:	4a2b      	ldr	r2, [pc, #172]	; (8001ed0 <MX_TIM1_Init+0xdc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	6084      	str	r4, [r0, #8]
  htim1.Init.Prescaler = 1439;
 8001e26:	e880 000c 	stmia.w	r0, {r2, r3}
  htim1.Init.Period = 1000;
 8001e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2e:	60c3      	str	r3, [r0, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e30:	2380      	movs	r3, #128	; 0x80
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e32:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e34:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e36:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e38:	f002 fa10 	bl	800425c <HAL_TIM_Base_Init>
 8001e3c:	b108      	cbz	r0, 8001e42 <MX_TIM1_Init+0x4e>
    Error_Handler();
 8001e3e:	f7ff fde9 	bl	8001a14 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e46:	a902      	add	r1, sp, #8
 8001e48:	4820      	ldr	r0, [pc, #128]	; (8001ecc <MX_TIM1_Init+0xd8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e4a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e4c:	f001 ff06 	bl	8003c5c <HAL_TIM_ConfigClockSource>
 8001e50:	b108      	cbz	r0, 8001e56 <MX_TIM1_Init+0x62>
    Error_Handler();
 8001e52:	f7ff fddf 	bl	8001a14 <Error_Handler>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001e56:	481d      	ldr	r0, [pc, #116]	; (8001ecc <MX_TIM1_Init+0xd8>)
 8001e58:	f002 fa54 	bl	8004304 <HAL_TIM_OC_Init>
 8001e5c:	b108      	cbz	r0, 8001e62 <MX_TIM1_Init+0x6e>
    Error_Handler();
 8001e5e:	f7ff fdd9 	bl	8001a14 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e62:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e64:	4669      	mov	r1, sp
 8001e66:	4819      	ldr	r0, [pc, #100]	; (8001ecc <MX_TIM1_Init+0xd8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e68:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6a:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e6c:	f002 fd4e 	bl	800490c <HAL_TIMEx_MasterConfigSynchronization>
 8001e70:	b108      	cbz	r0, 8001e76 <MX_TIM1_Init+0x82>
    Error_Handler();
 8001e72:	f7ff fdcf 	bl	8001a14 <Error_Handler>
  sConfigOC.Pulse = 500;
 8001e76:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e7a:	9307      	str	r3, [sp, #28]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e80:	2208      	movs	r2, #8
 8001e82:	a906      	add	r1, sp, #24
 8001e84:	4811      	ldr	r0, [pc, #68]	; (8001ecc <MX_TIM1_Init+0xd8>)
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e86:	9406      	str	r4, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e88:	9408      	str	r4, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e8a:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e8c:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001e8e:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCIDLESTATE_SET;
 8001e90:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e92:	f002 fb35 	bl	8004500 <HAL_TIM_OC_ConfigChannel>
 8001e96:	b108      	cbz	r0, 8001e9c <MX_TIM1_Init+0xa8>
    Error_Handler();
 8001e98:	f7ff fdbc 	bl	8001a14 <Error_Handler>
  sBreakDeadTimeConfig.DeadTime = 0b01011111;
 8001e9c:	225f      	movs	r2, #95	; 0x5f
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e9e:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.DeadTime = 0b01011111;
 8001ea0:	9210      	str	r2, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ea6:	a90d      	add	r1, sp, #52	; 0x34
 8001ea8:	4808      	ldr	r0, [pc, #32]	; (8001ecc <MX_TIM1_Init+0xd8>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eaa:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eac:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eae:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eb0:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eb2:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001eb4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001eb6:	f002 fcb5 	bl	8004824 <HAL_TIMEx_ConfigBreakDeadTime>
 8001eba:	b108      	cbz	r0, 8001ec0 <MX_TIM1_Init+0xcc>
    Error_Handler();
 8001ebc:	f7ff fdaa 	bl	8001a14 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <MX_TIM1_Init+0xd8>)
 8001ec2:	f7ff ff35 	bl	8001d30 <HAL_TIM_MspPostInit>
}
 8001ec6:	b014      	add	sp, #80	; 0x50
 8001ec8:	bd10      	pop	{r4, pc}
 8001eca:	bf00      	nop
 8001ecc:	200003d8 	.word	0x200003d8
 8001ed0:	40012c00 	.word	0x40012c00

08001ed4 <MX_TIM3_Init>:
{
 8001ed4:	b510      	push	{r4, lr}
 8001ed6:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed8:	2210      	movs	r2, #16
 8001eda:	2100      	movs	r1, #0
 8001edc:	a803      	add	r0, sp, #12
 8001ede:	f003 f85d 	bl	8004f9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee2:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee4:	221c      	movs	r2, #28
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	9401      	str	r4, [sp, #4]
 8001eee:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef0:	f003 f854 	bl	8004f9c <memset>
  htim3.Instance = TIM3;
 8001ef4:	4821      	ldr	r0, [pc, #132]	; (8001f7c <MX_TIM3_Init+0xa8>)
 8001ef6:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <MX_TIM3_Init+0xac>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef8:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 0;
 8001efa:	e880 0018 	stmia.w	r0, {r3, r4}
  htim3.Init.Period = 1000;
 8001efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f02:	60c3      	str	r3, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f04:	2380      	movs	r3, #128	; 0x80
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f06:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f08:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f0a:	f002 f9a7 	bl	800425c <HAL_TIM_Base_Init>
 8001f0e:	b108      	cbz	r0, 8001f14 <MX_TIM3_Init+0x40>
    Error_Handler();
 8001f10:	f7ff fd80 	bl	8001a14 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f18:	a903      	add	r1, sp, #12
 8001f1a:	4818      	ldr	r0, [pc, #96]	; (8001f7c <MX_TIM3_Init+0xa8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f1c:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f1e:	f001 fe9d 	bl	8003c5c <HAL_TIM_ConfigClockSource>
 8001f22:	b108      	cbz	r0, 8001f28 <MX_TIM3_Init+0x54>
    Error_Handler();
 8001f24:	f7ff fd76 	bl	8001a14 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f28:	4814      	ldr	r0, [pc, #80]	; (8001f7c <MX_TIM3_Init+0xa8>)
 8001f2a:	f002 fa43 	bl	80043b4 <HAL_TIM_PWM_Init>
 8001f2e:	b108      	cbz	r0, 8001f34 <MX_TIM3_Init+0x60>
    Error_Handler();
 8001f30:	f7ff fd70 	bl	8001a14 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f34:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f36:	a901      	add	r1, sp, #4
 8001f38:	4810      	ldr	r0, [pc, #64]	; (8001f7c <MX_TIM3_Init+0xa8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3a:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3c:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f3e:	f002 fce5 	bl	800490c <HAL_TIMEx_MasterConfigSynchronization>
 8001f42:	b108      	cbz	r0, 8001f48 <MX_TIM3_Init+0x74>
    Error_Handler();
 8001f44:	f7ff fd66 	bl	8001a14 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f48:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	a907      	add	r1, sp, #28
 8001f4e:	480b      	ldr	r0, [pc, #44]	; (8001f7c <MX_TIM3_Init+0xa8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f50:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8001f52:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f54:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f56:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f58:	f002 fb7c 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8001f5c:	b108      	cbz	r0, 8001f62 <MX_TIM3_Init+0x8e>
    Error_Handler();
 8001f5e:	f7ff fd59 	bl	8001a14 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f62:	2204      	movs	r2, #4
 8001f64:	a907      	add	r1, sp, #28
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_TIM3_Init+0xa8>)
 8001f68:	f002 fb74 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8001f6c:	b108      	cbz	r0, 8001f72 <MX_TIM3_Init+0x9e>
    Error_Handler();
 8001f6e:	f7ff fd51 	bl	8001a14 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8001f72:	4802      	ldr	r0, [pc, #8]	; (8001f7c <MX_TIM3_Init+0xa8>)
 8001f74:	f7ff fedc 	bl	8001d30 <HAL_TIM_MspPostInit>
}
 8001f78:	b00e      	add	sp, #56	; 0x38
 8001f7a:	bd10      	pop	{r4, pc}
 8001f7c:	20000398 	.word	0x20000398
 8001f80:	40000400 	.word	0x40000400

08001f84 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f84:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8001f86:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001f8a:	480a      	ldr	r0, [pc, #40]	; (8001fb4 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f8e:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8001f90:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f94:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f96:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f98:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f9a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f9c:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fa2:	f002 fde3 	bl	8004b6c <HAL_UART_Init>
 8001fa6:	b118      	cbz	r0, 8001fb0 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001fa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001fac:	f7ff bd32 	b.w	8001a14 <Error_Handler>
 8001fb0:	bd08      	pop	{r3, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000049c 	.word	0x2000049c
 8001fb8:	40013800 	.word	0x40013800

08001fbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	2710      	movs	r7, #16
{
 8001fc2:	4606      	mov	r6, r0
 8001fc4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc6:	463a      	mov	r2, r7
 8001fc8:	2100      	movs	r1, #0
 8001fca:	a802      	add	r0, sp, #8
 8001fcc:	f002 ffe6 	bl	8004f9c <memset>
  if(uartHandle->Instance==USART1)
 8001fd0:	6832      	ldr	r2, [r6, #0]
 8001fd2:	4b28      	ldr	r3, [pc, #160]	; (8002074 <HAL_UART_MspInit+0xb8>)
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d14a      	bne.n	800206e <HAL_UART_MspInit+0xb2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fd8:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001fdc:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fde:	2500      	movs	r5, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fe0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fe4:	619a      	str	r2, [r3, #24]
 8001fe6:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = RX_Pin;
 8001fe8:	f04f 0880 	mov.w	r8, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fec:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001ff0:	9200      	str	r2, [sp, #0]
 8001ff2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff4:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8001ff6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff8:	f042 0208 	orr.w	r2, r2, #8
 8001ffc:	619a      	str	r2, [r3, #24]
 8001ffe:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8002000:	481d      	ldr	r0, [pc, #116]	; (8002078 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = TX_Pin;
 800200a:	2340      	movs	r3, #64	; 0x40
 800200c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002012:	2303      	movs	r3, #3
 8002014:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8002016:	f000 ff0d 	bl	8002e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 800201a:	4817      	ldr	r0, [pc, #92]	; (8002078 <HAL_UART_MspInit+0xbc>)
 800201c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = RX_Pin;
 800201e:	f8cd 8008 	str.w	r8, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002022:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8002026:	f000 ff05 	bl	8002e34 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800202a:	4a14      	ldr	r2, [pc, #80]	; (800207c <HAL_UART_MspInit+0xc0>)

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800202c:	4c14      	ldr	r4, [pc, #80]	; (8002080 <HAL_UART_MspInit+0xc4>)
    __HAL_AFIO_REMAP_USART1_ENABLE();
 800202e:	6853      	ldr	r3, [r2, #4]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002030:	4620      	mov	r0, r4
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002032:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	6053      	str	r3, [r2, #4]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <HAL_UART_MspInit+0xc8>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800203e:	60a5      	str	r5, [r4, #8]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002040:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002044:	f8c4 800c 	str.w	r8, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002048:	6125      	str	r5, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800204a:	6165      	str	r5, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800204c:	61a5      	str	r5, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800204e:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002050:	f000 fc6a 	bl	8002928 <HAL_DMA_Init>
 8002054:	b108      	cbz	r0, 800205a <HAL_UART_MspInit+0x9e>
    {
      Error_Handler();
 8002056:	f7ff fcdd 	bl	8001a14 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 2);
 800205a:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800205c:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 2);
 800205e:	2202      	movs	r2, #2
 8002060:	2103      	movs	r1, #3
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002062:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 2);
 8002064:	f000 fbd4 	bl	8002810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002068:	2025      	movs	r0, #37	; 0x25
 800206a:	f000 fc13 	bl	8002894 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800206e:	b006      	add	sp, #24
 8002070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002074:	40013800 	.word	0x40013800
 8002078:	40010c00 	.word	0x40010c00
 800207c:	40010000 	.word	0x40010000
 8002080:	20000458 	.word	0x20000458
 8002084:	40020044 	.word	0x40020044

08002088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_InitTick+0x3c>)
{
 800208c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800208e:	7818      	ldrb	r0, [r3, #0]
 8002090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002094:	fbb3 f3f0 	udiv	r3, r3, r0
 8002098:	4a0b      	ldr	r2, [pc, #44]	; (80020c8 <HAL_InitTick+0x40>)
 800209a:	6810      	ldr	r0, [r2, #0]
 800209c:	fbb0 f0f3 	udiv	r0, r0, r3
 80020a0:	f000 fc0e 	bl	80028c0 <HAL_SYSTICK_Config>
 80020a4:	4604      	mov	r4, r0
 80020a6:	b958      	cbnz	r0, 80020c0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a8:	2d0f      	cmp	r5, #15
 80020aa:	d809      	bhi.n	80020c0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ac:	4602      	mov	r2, r0
 80020ae:	4629      	mov	r1, r5
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f000 fbac 	bl	8002810 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <HAL_InitTick+0x44>)
 80020ba:	4620      	mov	r0, r4
 80020bc:	601d      	str	r5, [r3, #0]
 80020be:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80020c0:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80020c2:	bd38      	pop	{r3, r4, r5, pc}
 80020c4:	20000058 	.word	0x20000058
 80020c8:	20000054 	.word	0x20000054
 80020cc:	2000005c 	.word	0x2000005c

080020d0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d0:	4a07      	ldr	r2, [pc, #28]	; (80020f0 <HAL_Init+0x20>)
{
 80020d2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d8:	f043 0310 	orr.w	r3, r3, #16
 80020dc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020de:	f000 fb79 	bl	80027d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7ff ffd0 	bl	8002088 <HAL_InitTick>
  HAL_MspInit();
 80020e8:	f7ff fc96 	bl	8001a18 <HAL_MspInit>
}
 80020ec:	2000      	movs	r0, #0
 80020ee:	bd08      	pop	{r3, pc}
 80020f0:	40022000 	.word	0x40022000

080020f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80020f4:	4a03      	ldr	r2, [pc, #12]	; (8002104 <HAL_IncTick+0x10>)
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <HAL_IncTick+0x14>)
 80020f8:	6811      	ldr	r1, [r2, #0]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	440b      	add	r3, r1
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	200004dc 	.word	0x200004dc
 8002108:	20000058 	.word	0x20000058

0800210c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800210c:	4b01      	ldr	r3, [pc, #4]	; (8002114 <HAL_GetTick+0x8>)
 800210e:	6818      	ldr	r0, [r3, #0]
}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	200004dc 	.word	0x200004dc

08002118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002118:	b538      	push	{r3, r4, r5, lr}
 800211a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7ff fff6 	bl	800210c <HAL_GetTick>
 8002120:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002122:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002124:	bf1e      	ittt	ne
 8002126:	4b04      	ldrne	r3, [pc, #16]	; (8002138 <HAL_Delay+0x20>)
 8002128:	781b      	ldrbne	r3, [r3, #0]
 800212a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800212c:	f7ff ffee 	bl	800210c <HAL_GetTick>
 8002130:	1b40      	subs	r0, r0, r5
 8002132:	4284      	cmp	r4, r0
 8002134:	d8fa      	bhi.n	800212c <HAL_Delay+0x14>
  {
  }
}
 8002136:	bd38      	pop	{r3, r4, r5, pc}
 8002138:	20000058 	.word	0x20000058

0800213c <HAL_ADC_ConvCpltCallback>:
 800213c:	4770      	bx	lr

0800213e <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800213e:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002140:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002142:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002144:	f012 0f50 	tst.w	r2, #80	; 0x50
 8002148:	d11b      	bne.n	8002182 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800214a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800214c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002150:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	6892      	ldr	r2, [r2, #8]
 8002156:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800215a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800215e:	d10c      	bne.n	800217a <ADC_DMAConvCplt+0x3c>
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	b952      	cbnz	r2, 800217a <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002166:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800216a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800216c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800216e:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002170:	bf5e      	ittt	pl
 8002172:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8002174:	f042 0201 	orrpl.w	r2, r2, #1
 8002178:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ffde 	bl	800213c <HAL_ADC_ConvCpltCallback>
 8002180:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002182:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8002184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4718      	bx	r3

0800218c <HAL_ADC_ConvHalfCpltCallback>:
 800218c:	4770      	bx	lr

0800218e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800218e:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002190:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002192:	f7ff fffb 	bl	800218c <HAL_ADC_ConvHalfCpltCallback>
 8002196:	bd08      	pop	{r3, pc}

08002198 <HAL_ADC_LevelOutOfWindowCallback>:
 8002198:	4770      	bx	lr
	...

0800219c <HAL_ADC_IRQHandler>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800219c:	6803      	ldr	r3, [r0, #0]
 800219e:	4a49      	ldr	r2, [pc, #292]	; (80022c4 <HAL_ADC_IRQHandler+0x128>)
{
 80021a0:	b510      	push	{r4, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80021a2:	4293      	cmp	r3, r2
{
 80021a4:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80021a6:	d008      	beq.n	80021ba <HAL_ADC_IRQHandler+0x1e>
 80021a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d004      	beq.n	80021ba <HAL_ADC_IRQHandler+0x1e>
 80021b0:	f240 51d9 	movw	r1, #1497	; 0x5d9
 80021b4:	4844      	ldr	r0, [pc, #272]	; (80022c8 <HAL_ADC_IRQHandler+0x12c>)
 80021b6:	f7ff fc2e 	bl	8001a16 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80021ba:	68e3      	ldr	r3, [r4, #12]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d904      	bls.n	80021ca <HAL_ADC_IRQHandler+0x2e>
 80021c0:	f240 51da 	movw	r1, #1498	; 0x5da
 80021c4:	4840      	ldr	r0, [pc, #256]	; (80022c8 <HAL_ADC_IRQHandler+0x12c>)
 80021c6:	f7ff fc26 	bl	8001a16 <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80021ca:	6923      	ldr	r3, [r4, #16]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	2b0f      	cmp	r3, #15
 80021d0:	d904      	bls.n	80021dc <HAL_ADC_IRQHandler+0x40>
 80021d2:	f240 51db 	movw	r1, #1499	; 0x5db
 80021d6:	483c      	ldr	r0, [pc, #240]	; (80022c8 <HAL_ADC_IRQHandler+0x12c>)
 80021d8:	f7ff fc1d 	bl	8001a16 <assert_failed>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	0690      	lsls	r0, r2, #26
 80021e2:	d527      	bpl.n	8002234 <HAL_ADC_IRQHandler+0x98>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	0791      	lsls	r1, r2, #30
 80021e8:	d524      	bpl.n	8002234 <HAL_ADC_IRQHandler+0x98>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80021ec:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021ee:	bf5e      	ittt	pl
 80021f0:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80021f2:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80021f6:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80021fe:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002202:	d110      	bne.n	8002226 <HAL_ADC_IRQHandler+0x8a>
 8002204:	68e2      	ldr	r2, [r4, #12]
 8002206:	b972      	cbnz	r2, 8002226 <HAL_ADC_IRQHandler+0x8a>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	f022 0220 	bic.w	r2, r2, #32
 800220e:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002210:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002212:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002216:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002218:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800221a:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800221c:	bf5e      	ittt	pl
 800221e:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8002220:	f043 0301 	orrpl.w	r3, r3, #1
 8002224:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8002226:	4620      	mov	r0, r4
 8002228:	f7ff ff88 	bl	800213c <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800222c:	f06f 0212 	mvn.w	r2, #18
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	0610      	lsls	r0, r2, #24
 800223a:	d530      	bpl.n	800229e <HAL_ADC_IRQHandler+0x102>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	0751      	lsls	r1, r2, #29
 8002240:	d52d      	bpl.n	800229e <HAL_ADC_IRQHandler+0x102>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002242:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002244:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002246:	bf5e      	ittt	pl
 8002248:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 800224a:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800224e:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8002256:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 800225a:	d00a      	beq.n	8002272 <HAL_ADC_IRQHandler+0xd6>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800225c:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800225e:	0550      	lsls	r0, r2, #21
 8002260:	d416      	bmi.n	8002290 <HAL_ADC_IRQHandler+0xf4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002268:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800226c:	d110      	bne.n	8002290 <HAL_ADC_IRQHandler+0xf4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800226e:	68e2      	ldr	r2, [r4, #12]
 8002270:	b972      	cbnz	r2, 8002290 <HAL_ADC_IRQHandler+0xf4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002278:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800227a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800227c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002280:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002282:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002284:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002286:	bf5e      	ittt	pl
 8002288:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800228a:	f043 0301 	orrpl.w	r3, r3, #1
 800228e:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002290:	4620      	mov	r0, r4
 8002292:	f000 fa9d 	bl	80027d0 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002296:	f06f 020c 	mvn.w	r2, #12
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800229e:	6823      	ldr	r3, [r4, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	0652      	lsls	r2, r2, #25
 80022a4:	d50d      	bpl.n	80022c2 <HAL_ADC_IRQHandler+0x126>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	07db      	lsls	r3, r3, #31
 80022aa:	d50a      	bpl.n	80022c2 <HAL_ADC_IRQHandler+0x126>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022ae:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b4:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022b6:	f7ff ff6f 	bl	8002198 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022ba:	f06f 0201 	mvn.w	r2, #1
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	bd10      	pop	{r4, pc}
 80022c4:	40012400 	.word	0x40012400
 80022c8:	08005948 	.word	0x08005948

080022cc <HAL_ADC_ErrorCallback>:
{
 80022cc:	4770      	bx	lr

080022ce <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022ce:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80022d0:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80022d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022d8:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 80022e2:	f7ff fff3 	bl	80022cc <HAL_ADC_ErrorCallback>
 80022e6:	bd08      	pop	{r3, pc}

080022e8 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 80022e8:	2300      	movs	r3, #0
{ 
 80022ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80022ec:	4a51      	ldr	r2, [pc, #324]	; (8002434 <HAL_ADC_ConfigChannel+0x14c>)
  __IO uint32_t wait_loop_index = 0U;
 80022ee:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80022f0:	6803      	ldr	r3, [r0, #0]
{ 
 80022f2:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80022f4:	4293      	cmp	r3, r2
{ 
 80022f6:	460d      	mov	r5, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80022f8:	d008      	beq.n	800230c <HAL_ADC_ConfigChannel+0x24>
 80022fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022fe:	4293      	cmp	r3, r2
 8002300:	d004      	beq.n	800230c <HAL_ADC_ConfigChannel+0x24>
 8002302:	f240 61aa 	movw	r1, #1706	; 0x6aa
 8002306:	484c      	ldr	r0, [pc, #304]	; (8002438 <HAL_ADC_ConfigChannel+0x150>)
 8002308:	f7ff fb85 	bl	8001a16 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800230c:	682b      	ldr	r3, [r5, #0]
 800230e:	2b11      	cmp	r3, #17
 8002310:	d904      	bls.n	800231c <HAL_ADC_ConfigChannel+0x34>
 8002312:	f240 61ab 	movw	r1, #1707	; 0x6ab
 8002316:	4848      	ldr	r0, [pc, #288]	; (8002438 <HAL_ADC_ConfigChannel+0x150>)
 8002318:	f7ff fb7d 	bl	8001a16 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800231c:	686b      	ldr	r3, [r5, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	2b0f      	cmp	r3, #15
 8002322:	d904      	bls.n	800232e <HAL_ADC_ConfigChannel+0x46>
 8002324:	f240 61ac 	movw	r1, #1708	; 0x6ac
 8002328:	4843      	ldr	r0, [pc, #268]	; (8002438 <HAL_ADC_ConfigChannel+0x150>)
 800232a:	f7ff fb74 	bl	8001a16 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800232e:	68ab      	ldr	r3, [r5, #8]
 8002330:	2b07      	cmp	r3, #7
 8002332:	d904      	bls.n	800233e <HAL_ADC_ConfigChannel+0x56>
 8002334:	f240 61ad 	movw	r1, #1709	; 0x6ad
 8002338:	483f      	ldr	r0, [pc, #252]	; (8002438 <HAL_ADC_ConfigChannel+0x150>)
 800233a:	f7ff fb6c 	bl	8001a16 <assert_failed>
  __HAL_LOCK(hadc);
 800233e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002342:	2b01      	cmp	r3, #1
 8002344:	d073      	beq.n	800242e <HAL_ADC_ConfigChannel+0x146>
 8002346:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8002348:	6868      	ldr	r0, [r5, #4]
  __HAL_LOCK(hadc);
 800234a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800234e:	2806      	cmp	r0, #6
 8002350:	6822      	ldr	r2, [r4, #0]
 8002352:	6829      	ldr	r1, [r5, #0]
 8002354:	ea4f 0380 	mov.w	r3, r0, lsl #2
 8002358:	d824      	bhi.n	80023a4 <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800235a:	4403      	add	r3, r0
 800235c:	201f      	movs	r0, #31
 800235e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8002360:	3b05      	subs	r3, #5
 8002362:	4098      	lsls	r0, r3
 8002364:	ea26 0000 	bic.w	r0, r6, r0
 8002368:	fa01 f303 	lsl.w	r3, r1, r3
 800236c:	4303      	orrs	r3, r0
 800236e:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002370:	2909      	cmp	r1, #9
 8002372:	68ad      	ldr	r5, [r5, #8]
 8002374:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8002378:	d92e      	bls.n	80023d8 <HAL_ADC_ConfigChannel+0xf0>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800237a:	2607      	movs	r6, #7
 800237c:	440b      	add	r3, r1
 800237e:	68d0      	ldr	r0, [r2, #12]
 8002380:	3b1e      	subs	r3, #30
 8002382:	409e      	lsls	r6, r3
 8002384:	ea20 0006 	bic.w	r0, r0, r6
 8002388:	fa05 f303 	lsl.w	r3, r5, r3
 800238c:	4303      	orrs	r3, r0
 800238e:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002390:	f1a1 0310 	sub.w	r3, r1, #16
 8002394:	2b01      	cmp	r3, #1
 8002396:	d92a      	bls.n	80023ee <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002398:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800239a:	2300      	movs	r3, #0
 800239c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80023a0:	b002      	add	sp, #8
 80023a2:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80023a4:	280c      	cmp	r0, #12
 80023a6:	d80b      	bhi.n	80023c0 <HAL_ADC_ConfigChannel+0xd8>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023a8:	4403      	add	r3, r0
 80023aa:	201f      	movs	r0, #31
 80023ac:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80023ae:	3b23      	subs	r3, #35	; 0x23
 80023b0:	4098      	lsls	r0, r3
 80023b2:	ea26 0000 	bic.w	r0, r6, r0
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	4303      	orrs	r3, r0
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	e7d7      	b.n	8002370 <HAL_ADC_ConfigChannel+0x88>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80023c0:	4403      	add	r3, r0
 80023c2:	201f      	movs	r0, #31
 80023c4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80023c6:	3b41      	subs	r3, #65	; 0x41
 80023c8:	4098      	lsls	r0, r3
 80023ca:	ea26 0000 	bic.w	r0, r6, r0
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	4303      	orrs	r3, r0
 80023d4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80023d6:	e7cb      	b.n	8002370 <HAL_ADC_ConfigChannel+0x88>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023d8:	2607      	movs	r6, #7
 80023da:	6910      	ldr	r0, [r2, #16]
 80023dc:	440b      	add	r3, r1
 80023de:	409e      	lsls	r6, r3
 80023e0:	ea20 0006 	bic.w	r0, r0, r6
 80023e4:	fa05 f303 	lsl.w	r3, r5, r3
 80023e8:	4303      	orrs	r3, r0
 80023ea:	6113      	str	r3, [r2, #16]
 80023ec:	e7d0      	b.n	8002390 <HAL_ADC_ConfigChannel+0xa8>
    if (hadc->Instance == ADC1)
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <HAL_ADC_ConfigChannel+0x14c>)
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d116      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x13a>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023f4:	6893      	ldr	r3, [r2, #8]
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	d4ce      	bmi.n	8002398 <HAL_ADC_ConfigChannel+0xb0>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023fa:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80023fc:	2910      	cmp	r1, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002402:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002404:	d1c8      	bne.n	8002398 <HAL_ADC_ConfigChannel+0xb0>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <HAL_ADC_ConfigChannel+0x154>)
 8002408:	4a0d      	ldr	r2, [pc, #52]	; (8002440 <HAL_ADC_ConfigChannel+0x158>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002410:	230a      	movs	r3, #10
 8002412:	4353      	muls	r3, r2
            wait_loop_index--;
 8002414:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002416:	9b01      	ldr	r3, [sp, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0bd      	beq.n	8002398 <HAL_ADC_ConfigChannel+0xb0>
            wait_loop_index--;
 800241c:	9b01      	ldr	r3, [sp, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	e7f8      	b.n	8002414 <HAL_ADC_ConfigChannel+0x12c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002422:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002424:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002426:	f043 0320 	orr.w	r3, r3, #32
 800242a:	62a3      	str	r3, [r4, #40]	; 0x28
 800242c:	e7b5      	b.n	800239a <HAL_ADC_ConfigChannel+0xb2>
  __HAL_LOCK(hadc);
 800242e:	2002      	movs	r0, #2
 8002430:	e7b6      	b.n	80023a0 <HAL_ADC_ConfigChannel+0xb8>
 8002432:	bf00      	nop
 8002434:	40012400 	.word	0x40012400
 8002438:	08005948 	.word	0x08005948
 800243c:	20000054 	.word	0x20000054
 8002440:	000f4240 	.word	0x000f4240

08002444 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8002444:	2300      	movs	r3, #0
{
 8002446:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002448:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800244a:	6803      	ldr	r3, [r0, #0]
{
 800244c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	07d2      	lsls	r2, r2, #31
 8002452:	d502      	bpl.n	800245a <ADC_Enable+0x16>
  return HAL_OK;
 8002454:	2000      	movs	r0, #0
}
 8002456:	b002      	add	sp, #8
 8002458:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <ADC_Enable+0x68>)
 8002464:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <ADC_Enable+0x6c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800246c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800246e:	9b01      	ldr	r3, [sp, #4]
 8002470:	b9c3      	cbnz	r3, 80024a4 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8002472:	f7ff fe4b 	bl	800210c <HAL_GetTick>
 8002476:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002478:	6823      	ldr	r3, [r4, #0]
 800247a:	689d      	ldr	r5, [r3, #8]
 800247c:	f015 0501 	ands.w	r5, r5, #1
 8002480:	d1e8      	bne.n	8002454 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002482:	f7ff fe43 	bl	800210c <HAL_GetTick>
 8002486:	1b80      	subs	r0, r0, r6
 8002488:	2802      	cmp	r0, #2
 800248a:	d9f5      	bls.n	8002478 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800248c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800248e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002492:	f043 0310 	orr.w	r3, r3, #16
 8002496:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002498:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800249a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80024a2:	e7d8      	b.n	8002456 <ADC_Enable+0x12>
      wait_loop_index--;
 80024a4:	9b01      	ldr	r3, [sp, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	e7e0      	b.n	800246c <ADC_Enable+0x28>
 80024aa:	bf00      	nop
 80024ac:	20000054 	.word	0x20000054
 80024b0:	000f4240 	.word	0x000f4240

080024b4 <HAL_ADC_Start_DMA>:
{
 80024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b6:	4617      	mov	r7, r2
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
 80024b8:	4d40      	ldr	r5, [pc, #256]	; (80025bc <HAL_ADC_Start_DMA+0x108>)
 80024ba:	6802      	ldr	r2, [r0, #0]
{
 80024bc:	4604      	mov	r4, r0
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
 80024be:	42aa      	cmp	r2, r5
{
 80024c0:	460e      	mov	r6, r1
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
 80024c2:	d004      	beq.n	80024ce <HAL_ADC_Start_DMA+0x1a>
 80024c4:	f240 41fc 	movw	r1, #1276	; 0x4fc
 80024c8:	483d      	ldr	r0, [pc, #244]	; (80025c0 <HAL_ADC_Start_DMA+0x10c>)
 80024ca:	f7ff faa4 	bl	8001a16 <assert_failed>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80024ce:	6823      	ldr	r3, [r4, #0]
 80024d0:	42ab      	cmp	r3, r5
 80024d2:	d002      	beq.n	80024da <HAL_ADC_Start_DMA+0x26>
 80024d4:	4a3b      	ldr	r2, [pc, #236]	; (80025c4 <HAL_ADC_Start_DMA+0x110>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d104      	bne.n	80024e4 <HAL_ADC_Start_DMA+0x30>
 80024da:	4b38      	ldr	r3, [pc, #224]	; (80025bc <HAL_ADC_Start_DMA+0x108>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80024e2:	d167      	bne.n	80025b4 <HAL_ADC_Start_DMA+0x100>
    __HAL_LOCK(hadc);
 80024e4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d065      	beq.n	80025b8 <HAL_ADC_Start_DMA+0x104>
 80024ec:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80024ee:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80024f0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80024f4:	f7ff ffa6 	bl	8002444 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80024f8:	4605      	mov	r5, r0
 80024fa:	2800      	cmp	r0, #0
 80024fc:	d156      	bne.n	80025ac <HAL_ADC_Start_DMA+0xf8>
      ADC_STATE_CLR_SET(hadc->State,
 80024fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002500:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8002502:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002506:	f023 0301 	bic.w	r3, r3, #1
 800250a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002510:	4b2c      	ldr	r3, [pc, #176]	; (80025c4 <HAL_ADC_Start_DMA+0x110>)
 8002512:	4299      	cmp	r1, r3
 8002514:	d104      	bne.n	8002520 <HAL_ADC_Start_DMA+0x6c>
 8002516:	4a29      	ldr	r2, [pc, #164]	; (80025bc <HAL_ADC_Start_DMA+0x108>)
 8002518:	6853      	ldr	r3, [r2, #4]
 800251a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800251e:	d13f      	bne.n	80025a0 <HAL_ADC_Start_DMA+0xec>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002520:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002522:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002526:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002528:	684b      	ldr	r3, [r1, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800252a:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800252c:	bf48      	it	mi
 800252e:	6aa3      	ldrmi	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002530:	6a20      	ldr	r0, [r4, #32]
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002532:	bf42      	ittt	mi
 8002534:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 8002538:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 800253c:	62a3      	strmi	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800253e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002540:	4632      	mov	r2, r6
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002542:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002546:	bf18      	it	ne
 8002548:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800254a:	f101 014c 	add.w	r1, r1, #76	; 0x4c
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800254e:	bf18      	it	ne
 8002550:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8002554:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8002556:	2300      	movs	r3, #0
 8002558:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800255c:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <HAL_ADC_Start_DMA+0x114>)
 800255e:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002560:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <HAL_ADC_Start_DMA+0x118>)
 8002562:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002564:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <HAL_ADC_Start_DMA+0x11c>)
 8002566:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002568:	f06f 0302 	mvn.w	r3, #2
 800256c:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002570:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8002574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002578:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800257c:	463b      	mov	r3, r7
 800257e:	f000 fa63 	bl	8002a48 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002582:	6823      	ldr	r3, [r4, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800258a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	bf0c      	ite	eq
 8002592:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002596:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 800259a:	609a      	str	r2, [r3, #8]
}
 800259c:	4628      	mov	r0, r5
 800259e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025a6:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025a8:	6853      	ldr	r3, [r2, #4]
 80025aa:	e7be      	b.n	800252a <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80025ac:	2300      	movs	r3, #0
 80025ae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80025b2:	e7f3      	b.n	800259c <HAL_ADC_Start_DMA+0xe8>
    tmp_hal_status = HAL_ERROR;
 80025b4:	2501      	movs	r5, #1
 80025b6:	e7f1      	b.n	800259c <HAL_ADC_Start_DMA+0xe8>
    __HAL_LOCK(hadc);
 80025b8:	2502      	movs	r5, #2
 80025ba:	e7ef      	b.n	800259c <HAL_ADC_Start_DMA+0xe8>
 80025bc:	40012400 	.word	0x40012400
 80025c0:	08005948 	.word	0x08005948
 80025c4:	40012800 	.word	0x40012800
 80025c8:	0800213f 	.word	0x0800213f
 80025cc:	0800218f 	.word	0x0800218f
 80025d0:	080022cf 	.word	0x080022cf

080025d4 <ADC_ConversionStop_Disable>:
{
 80025d4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025d6:	6803      	ldr	r3, [r0, #0]
{
 80025d8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	07d2      	lsls	r2, r2, #31
 80025de:	d401      	bmi.n	80025e4 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80025e0:	2000      	movs	r0, #0
 80025e2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80025ec:	f7ff fd8e 	bl	800210c <HAL_GetTick>
 80025f0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	07db      	lsls	r3, r3, #31
 80025f8:	d5f2      	bpl.n	80025e0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025fa:	f7ff fd87 	bl	800210c <HAL_GetTick>
 80025fe:	1b40      	subs	r0, r0, r5
 8002600:	2802      	cmp	r0, #2
 8002602:	d9f6      	bls.n	80025f2 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002604:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002606:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002608:	f043 0310 	orr.w	r3, r3, #16
 800260c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002616:	bd38      	pop	{r3, r4, r5, pc}

08002618 <HAL_ADC_Init>:
{
 8002618:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800261a:	4604      	mov	r4, r0
 800261c:	2800      	cmp	r0, #0
 800261e:	f000 80c9 	beq.w	80027b4 <HAL_ADC_Init+0x19c>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002622:	6803      	ldr	r3, [r0, #0]
 8002624:	4a66      	ldr	r2, [pc, #408]	; (80027c0 <HAL_ADC_Init+0x1a8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d008      	beq.n	800263c <HAL_ADC_Init+0x24>
 800262a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800262e:	4293      	cmp	r3, r2
 8002630:	d004      	beq.n	800263c <HAL_ADC_Init+0x24>
 8002632:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8002636:	4863      	ldr	r0, [pc, #396]	; (80027c4 <HAL_ADC_Init+0x1ac>)
 8002638:	f7ff f9ed 	bl	8001a16 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800263c:	6863      	ldr	r3, [r4, #4]
 800263e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8002642:	d004      	beq.n	800264e <HAL_ADC_Init+0x36>
 8002644:	f240 1183 	movw	r1, #387	; 0x183
 8002648:	485e      	ldr	r0, [pc, #376]	; (80027c4 <HAL_ADC_Init+0x1ac>)
 800264a:	f7ff f9e4 	bl	8001a16 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800264e:	68a3      	ldr	r3, [r4, #8]
 8002650:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8002654:	d004      	beq.n	8002660 <HAL_ADC_Init+0x48>
 8002656:	f44f 71c2 	mov.w	r1, #388	; 0x184
 800265a:	485a      	ldr	r0, [pc, #360]	; (80027c4 <HAL_ADC_Init+0x1ac>)
 800265c:	f7ff f9db 	bl	8001a16 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002660:	68e3      	ldr	r3, [r4, #12]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d904      	bls.n	8002670 <HAL_ADC_Init+0x58>
 8002666:	f240 1185 	movw	r1, #389	; 0x185
 800266a:	4856      	ldr	r0, [pc, #344]	; (80027c4 <HAL_ADC_Init+0x1ac>)
 800266c:	f7ff f9d3 	bl	8001a16 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002670:	69e3      	ldr	r3, [r4, #28]
 8002672:	f433 2220 	bics.w	r2, r3, #655360	; 0xa0000
 8002676:	d00c      	beq.n	8002692 <HAL_ADC_Init+0x7a>
 8002678:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800267c:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
 8002680:	d007      	beq.n	8002692 <HAL_ADC_Init+0x7a>
 8002682:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002686:	d004      	beq.n	8002692 <HAL_ADC_Init+0x7a>
 8002688:	f44f 71c3 	mov.w	r1, #390	; 0x186
 800268c:	484d      	ldr	r0, [pc, #308]	; (80027c4 <HAL_ADC_Init+0x1ac>)
 800268e:	f7ff f9c2 	bl	8001a16 <assert_failed>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002692:	68a3      	ldr	r3, [r4, #8]
 8002694:	b1db      	cbz	r3, 80026ce <HAL_ADC_Init+0xb6>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002696:	6923      	ldr	r3, [r4, #16]
 8002698:	3b01      	subs	r3, #1
 800269a:	2b0f      	cmp	r3, #15
 800269c:	d904      	bls.n	80026a8 <HAL_ADC_Init+0x90>
 800269e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80026a2:	4848      	ldr	r0, [pc, #288]	; (80027c4 <HAL_ADC_Init+0x1ac>)
 80026a4:	f7ff f9b7 	bl	8001a16 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80026a8:	6963      	ldr	r3, [r4, #20]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d904      	bls.n	80026b8 <HAL_ADC_Init+0xa0>
 80026ae:	f240 118b 	movw	r1, #395	; 0x18b
 80026b2:	4844      	ldr	r0, [pc, #272]	; (80027c4 <HAL_ADC_Init+0x1ac>)
 80026b4:	f7ff f9af 	bl	8001a16 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026b8:	6963      	ldr	r3, [r4, #20]
 80026ba:	b143      	cbz	r3, 80026ce <HAL_ADC_Init+0xb6>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80026bc:	69a3      	ldr	r3, [r4, #24]
 80026be:	3b01      	subs	r3, #1
 80026c0:	2b07      	cmp	r3, #7
 80026c2:	d904      	bls.n	80026ce <HAL_ADC_Init+0xb6>
 80026c4:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 80026c8:	483e      	ldr	r0, [pc, #248]	; (80027c4 <HAL_ADC_Init+0x1ac>)
 80026ca:	f7ff f9a4 	bl	8001a16 <assert_failed>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026d0:	b92b      	cbnz	r3, 80026de <HAL_ADC_Init+0xc6>
    ADC_CLEAR_ERRORCODE(hadc);
 80026d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80026d4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80026d8:	4620      	mov	r0, r4
 80026da:	f7fe f865 	bl	80007a8 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026de:	4620      	mov	r0, r4
 80026e0:	f7ff ff78 	bl	80025d4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026e6:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80026ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026ec:	d164      	bne.n	80027b8 <HAL_ADC_Init+0x1a0>
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d162      	bne.n	80027b8 <HAL_ADC_Init+0x1a0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80026f2:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80026f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80026f8:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80026fa:	f023 0302 	bic.w	r3, r3, #2
 80026fe:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8002702:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002704:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8002706:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8002708:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800270a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800270e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002712:	d038      	beq.n	8002786 <HAL_ADC_Init+0x16e>
 8002714:	2901      	cmp	r1, #1
 8002716:	bf14      	ite	ne
 8002718:	4606      	movne	r6, r0
 800271a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800271e:	6965      	ldr	r5, [r4, #20]
 8002720:	2d01      	cmp	r5, #1
 8002722:	d107      	bne.n	8002734 <HAL_ADC_Init+0x11c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002724:	2b00      	cmp	r3, #0
 8002726:	d130      	bne.n	800278a <HAL_ADC_Init+0x172>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002728:	69a3      	ldr	r3, [r4, #24]
 800272a:	3b01      	subs	r3, #1
 800272c:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8002730:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8002734:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002736:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800273a:	685d      	ldr	r5, [r3, #4]
 800273c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8002740:	ea45 0506 	orr.w	r5, r5, r6
 8002744:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002746:	689e      	ldr	r6, [r3, #8]
 8002748:	4d1f      	ldr	r5, [pc, #124]	; (80027c8 <HAL_ADC_Init+0x1b0>)
 800274a:	ea05 0506 	and.w	r5, r5, r6
 800274e:	ea45 0502 	orr.w	r5, r5, r2
 8002752:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002754:	d001      	beq.n	800275a <HAL_ADC_Init+0x142>
 8002756:	2901      	cmp	r1, #1
 8002758:	d120      	bne.n	800279c <HAL_ADC_Init+0x184>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800275a:	6921      	ldr	r1, [r4, #16]
 800275c:	3901      	subs	r1, #1
 800275e:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8002760:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8002762:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8002766:	4329      	orrs	r1, r5
 8002768:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800276a:	6899      	ldr	r1, [r3, #8]
 800276c:	4b17      	ldr	r3, [pc, #92]	; (80027cc <HAL_ADC_Init+0x1b4>)
 800276e:	400b      	ands	r3, r1
 8002770:	429a      	cmp	r2, r3
 8002772:	d115      	bne.n	80027a0 <HAL_ADC_Init+0x188>
      ADC_CLEAR_ERRORCODE(hadc);
 8002774:	2300      	movs	r3, #0
 8002776:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002778:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800277a:	f023 0303 	bic.w	r3, r3, #3
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	62a3      	str	r3, [r4, #40]	; 0x28
 8002784:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002786:	460e      	mov	r6, r1
 8002788:	e7c9      	b.n	800271e <HAL_ADC_Init+0x106>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800278a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800278c:	f043 0320 	orr.w	r3, r3, #32
 8002790:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002792:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	62e3      	str	r3, [r4, #44]	; 0x2c
 800279a:	e7cb      	b.n	8002734 <HAL_ADC_Init+0x11c>
  uint32_t tmp_sqr1 = 0U;
 800279c:	2100      	movs	r1, #0
 800279e:	e7df      	b.n	8002760 <HAL_ADC_Init+0x148>
      ADC_STATE_CLR_SET(hadc->State,
 80027a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027a2:	f023 0312 	bic.w	r3, r3, #18
 80027a6:	f043 0310 	orr.w	r3, r3, #16
 80027aa:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80027b4:	2001      	movs	r0, #1
}
 80027b6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b8:	f043 0310 	orr.w	r3, r3, #16
 80027bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80027be:	e7f9      	b.n	80027b4 <HAL_ADC_Init+0x19c>
 80027c0:	40012400 	.word	0x40012400
 80027c4:	08005948 	.word	0x08005948
 80027c8:	ffe1f7fd 	.word	0xffe1f7fd
 80027cc:	ff1f0efe 	.word	0xff1f0efe

080027d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027d0:	4770      	bx	lr
	...

080027d4 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80027d4:	1ec3      	subs	r3, r0, #3
 80027d6:	2b04      	cmp	r3, #4
{
 80027d8:	b510      	push	{r4, lr}
 80027da:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80027dc:	d903      	bls.n	80027e6 <HAL_NVIC_SetPriorityGrouping+0x12>
 80027de:	21a2      	movs	r1, #162	; 0xa2
 80027e0:	4809      	ldr	r0, [pc, #36]	; (8002808 <HAL_NVIC_SetPriorityGrouping+0x34>)
 80027e2:	f7ff f918 	bl	8001a16 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e6:	4a09      	ldr	r2, [pc, #36]	; (800280c <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80027e8:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ea:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80027ec:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027f4:	041b      	lsls	r3, r3, #16
 80027f6:	0c1b      	lsrs	r3, r3, #16
 80027f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002800:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8002802:	60d4      	str	r4, [r2, #12]
 8002804:	bd10      	pop	{r4, pc}
 8002806:	bf00      	nop
 8002808:	08005980 	.word	0x08005980
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002810:	2a0f      	cmp	r2, #15
{ 
 8002812:	b570      	push	{r4, r5, r6, lr}
 8002814:	4604      	mov	r4, r0
 8002816:	460e      	mov	r6, r1
 8002818:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800281a:	d903      	bls.n	8002824 <HAL_NVIC_SetPriority+0x14>
 800281c:	21ba      	movs	r1, #186	; 0xba
 800281e:	481a      	ldr	r0, [pc, #104]	; (8002888 <HAL_NVIC_SetPriority+0x78>)
 8002820:	f7ff f8f9 	bl	8001a16 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002824:	2e0f      	cmp	r6, #15
 8002826:	d903      	bls.n	8002830 <HAL_NVIC_SetPriority+0x20>
 8002828:	21bb      	movs	r1, #187	; 0xbb
 800282a:	4817      	ldr	r0, [pc, #92]	; (8002888 <HAL_NVIC_SetPriority+0x78>)
 800282c:	f7ff f8f3 	bl	8001a16 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002830:	4b16      	ldr	r3, [pc, #88]	; (800288c <HAL_NVIC_SetPriority+0x7c>)

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002832:	2001      	movs	r0, #1
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002834:	68d9      	ldr	r1, [r3, #12]
 8002836:	f3c1 2102 	ubfx	r1, r1, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800283a:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283e:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002840:	2b04      	cmp	r3, #4
 8002842:	bf28      	it	cs
 8002844:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002846:	2a06      	cmp	r2, #6
 8002848:	bf94      	ite	ls
 800284a:	2100      	movls	r1, #0
 800284c:	3903      	subhi	r1, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284e:	fa00 f203 	lsl.w	r2, r0, r3
 8002852:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002854:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002856:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002858:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285a:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800285c:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) < 0)
 800285e:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	ea42 0205 	orr.w	r2, r2, r5
 8002864:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002868:	bfaf      	iteee	ge
 800286a:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286e:	4b08      	ldrlt	r3, [pc, #32]	; (8002890 <HAL_NVIC_SetPriority+0x80>)
 8002870:	f004 040f 	andlt.w	r4, r4, #15
 8002874:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002876:	bfa5      	ittet	ge
 8002878:	b2d2      	uxtbge	r2, r2
 800287a:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287e:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002880:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 8002884:	bd70      	pop	{r4, r5, r6, pc}
 8002886:	bf00      	nop
 8002888:	08005980 	.word	0x08005980
 800288c:	e000ed00 	.word	0xe000ed00
 8002890:	e000ed14 	.word	0xe000ed14

08002894 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002894:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002896:	1e04      	subs	r4, r0, #0
 8002898:	da03      	bge.n	80028a2 <HAL_NVIC_EnableIRQ+0xe>
 800289a:	21ce      	movs	r1, #206	; 0xce
 800289c:	4806      	ldr	r0, [pc, #24]	; (80028b8 <HAL_NVIC_EnableIRQ+0x24>)
 800289e:	f7ff f8ba 	bl	8001a16 <assert_failed>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80028a2:	2301      	movs	r3, #1
 80028a4:	0962      	lsrs	r2, r4, #5
 80028a6:	f004 041f 	and.w	r4, r4, #31
 80028aa:	fa03 f404 	lsl.w	r4, r3, r4
 80028ae:	4b03      	ldr	r3, [pc, #12]	; (80028bc <HAL_NVIC_EnableIRQ+0x28>)
 80028b0:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80028b4:	bd10      	pop	{r4, pc}
 80028b6:	bf00      	nop
 80028b8:	08005980 	.word	0x08005980
 80028bc:	e000e100 	.word	0xe000e100

080028c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c0:	3801      	subs	r0, #1
 80028c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80028c6:	d20a      	bcs.n	80028de <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028cc:	4a06      	ldr	r2, [pc, #24]	; (80028e8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ce:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028d6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80028de:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000e010 	.word	0xe000e010
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <HAL_CRC_Init>:
  * @param  hcrc: pointer to a CRC_HandleTypeDef structure that contains
  *         the configuration information for CRC
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80028ec:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80028ee:	4604      	mov	r4, r0
 80028f0:	b198      	cbz	r0, 800291a <HAL_CRC_Init+0x2e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80028f2:	6802      	ldr	r2, [r0, #0]
 80028f4:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <HAL_CRC_Init+0x34>)
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d003      	beq.n	8002902 <HAL_CRC_Init+0x16>
 80028fa:	2177      	movs	r1, #119	; 0x77
 80028fc:	4809      	ldr	r0, [pc, #36]	; (8002924 <HAL_CRC_Init+0x38>)
 80028fe:	f7ff f88a 	bl	8001a16 <assert_failed>

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8002902:	7963      	ldrb	r3, [r4, #5]
 8002904:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002908:	b91b      	cbnz	r3, 8002912 <HAL_CRC_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800290a:	7122      	strb	r2, [r4, #4]
    
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800290c:	4620      	mov	r0, r4
 800290e:	f7fd ffb1 	bl	8000874 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002912:	2301      	movs	r3, #1
  
  /* Return function status */
  return HAL_OK;
 8002914:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8002916:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 8002918:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800291a:	2001      	movs	r0, #1
}
 800291c:	bd10      	pop	{r4, pc}
 800291e:	bf00      	nop
 8002920:	40023000 	.word	0x40023000
 8002924:	080059bb 	.word	0x080059bb

08002928 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002928:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800292a:	4604      	mov	r4, r0
 800292c:	2800      	cmp	r0, #0
 800292e:	f000 8081 	beq.w	8002a34 <HAL_DMA_Init+0x10c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002932:	6803      	ldr	r3, [r0, #0]
 8002934:	4a40      	ldr	r2, [pc, #256]	; (8002a38 <HAL_DMA_Init+0x110>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d015      	beq.n	8002966 <HAL_DMA_Init+0x3e>
 800293a:	3214      	adds	r2, #20
 800293c:	4293      	cmp	r3, r2
 800293e:	d012      	beq.n	8002966 <HAL_DMA_Init+0x3e>
 8002940:	3214      	adds	r2, #20
 8002942:	4293      	cmp	r3, r2
 8002944:	d00f      	beq.n	8002966 <HAL_DMA_Init+0x3e>
 8002946:	3214      	adds	r2, #20
 8002948:	4293      	cmp	r3, r2
 800294a:	d00c      	beq.n	8002966 <HAL_DMA_Init+0x3e>
 800294c:	3214      	adds	r2, #20
 800294e:	4293      	cmp	r3, r2
 8002950:	d009      	beq.n	8002966 <HAL_DMA_Init+0x3e>
 8002952:	3214      	adds	r2, #20
 8002954:	4293      	cmp	r3, r2
 8002956:	d006      	beq.n	8002966 <HAL_DMA_Init+0x3e>
 8002958:	3214      	adds	r2, #20
 800295a:	4293      	cmp	r3, r2
 800295c:	d003      	beq.n	8002966 <HAL_DMA_Init+0x3e>
 800295e:	21aa      	movs	r1, #170	; 0xaa
 8002960:	4836      	ldr	r0, [pc, #216]	; (8002a3c <HAL_DMA_Init+0x114>)
 8002962:	f7ff f858 	bl	8001a16 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002966:	6863      	ldr	r3, [r4, #4]
 8002968:	f033 0210 	bics.w	r2, r3, #16
 800296c:	d006      	beq.n	800297c <HAL_DMA_Init+0x54>
 800296e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002972:	d003      	beq.n	800297c <HAL_DMA_Init+0x54>
 8002974:	21ab      	movs	r1, #171	; 0xab
 8002976:	4831      	ldr	r0, [pc, #196]	; (8002a3c <HAL_DMA_Init+0x114>)
 8002978:	f7ff f84d 	bl	8001a16 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800297c:	68a3      	ldr	r3, [r4, #8]
 800297e:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8002982:	d003      	beq.n	800298c <HAL_DMA_Init+0x64>
 8002984:	21ac      	movs	r1, #172	; 0xac
 8002986:	482d      	ldr	r0, [pc, #180]	; (8002a3c <HAL_DMA_Init+0x114>)
 8002988:	f7ff f845 	bl	8001a16 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800298c:	68e3      	ldr	r3, [r4, #12]
 800298e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8002992:	d003      	beq.n	800299c <HAL_DMA_Init+0x74>
 8002994:	21ad      	movs	r1, #173	; 0xad
 8002996:	4829      	ldr	r0, [pc, #164]	; (8002a3c <HAL_DMA_Init+0x114>)
 8002998:	f7ff f83d 	bl	8001a16 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800299c:	6923      	ldr	r3, [r4, #16]
 800299e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80029a2:	d006      	beq.n	80029b2 <HAL_DMA_Init+0x8a>
 80029a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029a8:	d003      	beq.n	80029b2 <HAL_DMA_Init+0x8a>
 80029aa:	21ae      	movs	r1, #174	; 0xae
 80029ac:	4823      	ldr	r0, [pc, #140]	; (8002a3c <HAL_DMA_Init+0x114>)
 80029ae:	f7ff f832 	bl	8001a16 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80029b2:	6963      	ldr	r3, [r4, #20]
 80029b4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80029b8:	d006      	beq.n	80029c8 <HAL_DMA_Init+0xa0>
 80029ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029be:	d003      	beq.n	80029c8 <HAL_DMA_Init+0xa0>
 80029c0:	21af      	movs	r1, #175	; 0xaf
 80029c2:	481e      	ldr	r0, [pc, #120]	; (8002a3c <HAL_DMA_Init+0x114>)
 80029c4:	f7ff f827 	bl	8001a16 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80029c8:	69a3      	ldr	r3, [r4, #24]
 80029ca:	f033 0320 	bics.w	r3, r3, #32
 80029ce:	d003      	beq.n	80029d8 <HAL_DMA_Init+0xb0>
 80029d0:	21b0      	movs	r1, #176	; 0xb0
 80029d2:	481a      	ldr	r0, [pc, #104]	; (8002a3c <HAL_DMA_Init+0x114>)
 80029d4:	f7ff f81f 	bl	8001a16 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80029d8:	69e3      	ldr	r3, [r4, #28]
 80029da:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80029de:	d003      	beq.n	80029e8 <HAL_DMA_Init+0xc0>
 80029e0:	21b1      	movs	r1, #177	; 0xb1
 80029e2:	4816      	ldr	r0, [pc, #88]	; (8002a3c <HAL_DMA_Init+0x114>)
 80029e4:	f7ff f817 	bl	8001a16 <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029e8:	2214      	movs	r2, #20
 80029ea:	6821      	ldr	r1, [r4, #0]
 80029ec:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <HAL_DMA_Init+0x118>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029ee:	68a0      	ldr	r0, [r4, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029f0:	440b      	add	r3, r1
 80029f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80029fa:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_DMA_Init+0x11c>)
  tmp = hdma->Instance->CCR;
 80029fc:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80029fe:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8002a00:	6863      	ldr	r3, [r4, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a02:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8002a06:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a08:	68e0      	ldr	r0, [r4, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a0a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a0e:	4303      	orrs	r3, r0
 8002a10:	6920      	ldr	r0, [r4, #16]
 8002a12:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a14:	6960      	ldr	r0, [r4, #20]
 8002a16:	4303      	orrs	r3, r0
 8002a18:	69a0      	ldr	r0, [r4, #24]
 8002a1a:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a1c:	69e0      	ldr	r0, [r4, #28]
 8002a1e:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8002a20:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a22:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a24:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a26:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a28:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002a2a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a2e:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
 8002a32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a34:	2001      	movs	r0, #1
}
 8002a36:	bd10      	pop	{r4, pc}
 8002a38:	40020008 	.word	0x40020008
 8002a3c:	080059f3 	.word	0x080059f3
 8002a40:	bffdfff8 	.word	0xbffdfff8
 8002a44:	40020000 	.word	0x40020000

08002a48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a4c:	4617      	mov	r7, r2
 8002a4e:	4698      	mov	r8, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002a50:	1e5a      	subs	r2, r3, #1
 8002a52:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002a56:	429a      	cmp	r2, r3
{
 8002a58:	4604      	mov	r4, r0
 8002a5a:	460e      	mov	r6, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002a5c:	d904      	bls.n	8002a68 <HAL_DMA_Start_IT+0x20>
 8002a5e:	f240 117f 	movw	r1, #383	; 0x17f
 8002a62:	4822      	ldr	r0, [pc, #136]	; (8002aec <HAL_DMA_Start_IT+0xa4>)
 8002a64:	f7fe ffd7 	bl	8001a16 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a68:	f894 3020 	ldrb.w	r3, [r4, #32]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d039      	beq.n	8002ae4 <HAL_DMA_Start_IT+0x9c>
 8002a70:	2301      	movs	r3, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a72:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 8002a76:	f884 3020 	strb.w	r3, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a7a:	429d      	cmp	r5, r3
 8002a7c:	f04f 0002 	mov.w	r0, #2
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	d12a      	bne.n	8002adc <HAL_DMA_Start_IT+0x94>
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a86:	6821      	ldr	r1, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a88:	63a3      	str	r3, [r4, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a8a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8002a90:	6808      	ldr	r0, [r1, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a94:	4095      	lsls	r5, r2
    __HAL_DMA_DISABLE(hdma);
 8002a96:	f020 0001 	bic.w	r0, r0, #1
 8002a9a:	6008      	str	r0, [r1, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a9c:	605d      	str	r5, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a9e:	6863      	ldr	r3, [r4, #4]
  hdma->Instance->CNDTR = DataLength;
 8002aa0:	f8c1 8004 	str.w	r8, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aa4:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8002aa6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002aa8:	6822      	ldr	r2, [r4, #0]
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002aaa:	bf0b      	itete	eq
 8002aac:	608f      	streq	r7, [r1, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002aae:	608e      	strne	r6, [r1, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002ab0:	60ce      	streq	r6, [r1, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002ab2:	60cf      	strne	r7, [r1, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002ab4:	b153      	cbz	r3, 8002acc <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ab6:	680b      	ldr	r3, [r1, #0]
 8002ab8:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002abc:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma);
 8002abe:	6813      	ldr	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002acc:	680b      	ldr	r3, [r1, #0]
 8002ace:	f023 0304 	bic.w	r3, r3, #4
 8002ad2:	600b      	str	r3, [r1, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ad4:	680b      	ldr	r3, [r1, #0]
 8002ad6:	f043 030a 	orr.w	r3, r3, #10
 8002ada:	e7ef      	b.n	8002abc <HAL_DMA_Start_IT+0x74>
    __HAL_UNLOCK(hdma); 
 8002adc:	f884 3020 	strb.w	r3, [r4, #32]
 8002ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdma);
 8002ae4:	2002      	movs	r0, #2
}
 8002ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002aea:	bf00      	nop
 8002aec:	080059f3 	.word	0x080059f3

08002af0 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002af0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8002af4:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d003      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002afa:	2304      	movs	r3, #4
 8002afc:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002afe:	2001      	movs	r0, #1
 8002b00:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b02:	6803      	ldr	r3, [r0, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	f022 020e 	bic.w	r2, r2, #14
 8002b0a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	f022 0201 	bic.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b14:	4a18      	ldr	r2, [pc, #96]	; (8002b78 <HAL_DMA_Abort_IT+0x88>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01f      	beq.n	8002b5a <HAL_DMA_Abort_IT+0x6a>
 8002b1a:	3214      	adds	r2, #20
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d01e      	beq.n	8002b5e <HAL_DMA_Abort_IT+0x6e>
 8002b20:	3214      	adds	r2, #20
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01d      	beq.n	8002b62 <HAL_DMA_Abort_IT+0x72>
 8002b26:	3214      	adds	r2, #20
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d01d      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x78>
 8002b2c:	3214      	adds	r2, #20
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d01d      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x7e>
 8002b32:	3214      	adds	r2, #20
 8002b34:	4293      	cmp	r3, r2
 8002b36:	bf0c      	ite	eq
 8002b38:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002b3c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002b40:	4a0e      	ldr	r2, [pc, #56]	; (8002b7c <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8002b42:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b44:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8002b4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002b4e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002b52:	b17b      	cbz	r3, 8002b74 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8002b54:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002b56:	4620      	mov	r0, r4
 8002b58:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e7f0      	b.n	8002b40 <HAL_DMA_Abort_IT+0x50>
 8002b5e:	2310      	movs	r3, #16
 8002b60:	e7ee      	b.n	8002b40 <HAL_DMA_Abort_IT+0x50>
 8002b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b66:	e7eb      	b.n	8002b40 <HAL_DMA_Abort_IT+0x50>
 8002b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b6c:	e7e8      	b.n	8002b40 <HAL_DMA_Abort_IT+0x50>
 8002b6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b72:	e7e5      	b.n	8002b40 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002b74:	4618      	mov	r0, r3
}
 8002b76:	bd10      	pop	{r4, pc}
 8002b78:	40020008 	.word	0x40020008
 8002b7c:	40020000 	.word	0x40020000

08002b80 <HAL_DMA_IRQHandler>:
{
 8002b80:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b82:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b84:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b86:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b88:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002b8a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b8c:	4095      	lsls	r5, r2
 8002b8e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002b90:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b92:	d032      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x7a>
 8002b94:	074d      	lsls	r5, r1, #29
 8002b96:	d530      	bpl.n	8002bfa <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b9c:	bf5e      	ittt	pl
 8002b9e:	681a      	ldrpl	r2, [r3, #0]
 8002ba0:	f022 0204 	bicpl.w	r2, r2, #4
 8002ba4:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ba6:	4a3e      	ldr	r2, [pc, #248]	; (8002ca0 <HAL_DMA_IRQHandler+0x120>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d019      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x60>
 8002bac:	3214      	adds	r2, #20
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d018      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x64>
 8002bb2:	3214      	adds	r2, #20
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d017      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x68>
 8002bb8:	3214      	adds	r2, #20
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d017      	beq.n	8002bee <HAL_DMA_IRQHandler+0x6e>
 8002bbe:	3214      	adds	r2, #20
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d017      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x74>
 8002bc4:	3214      	adds	r2, #20
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	bf0c      	ite	eq
 8002bca:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8002bce:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002bd2:	4a34      	ldr	r2, [pc, #208]	; (8002ca4 <HAL_DMA_IRQHandler+0x124>)
 8002bd4:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002bd6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d05e      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x11a>
}
 8002bdc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002bde:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002be0:	2304      	movs	r3, #4
 8002be2:	e7f6      	b.n	8002bd2 <HAL_DMA_IRQHandler+0x52>
 8002be4:	2340      	movs	r3, #64	; 0x40
 8002be6:	e7f4      	b.n	8002bd2 <HAL_DMA_IRQHandler+0x52>
 8002be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bec:	e7f1      	b.n	8002bd2 <HAL_DMA_IRQHandler+0x52>
 8002bee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bf2:	e7ee      	b.n	8002bd2 <HAL_DMA_IRQHandler+0x52>
 8002bf4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bf8:	e7eb      	b.n	8002bd2 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002bfa:	2502      	movs	r5, #2
 8002bfc:	4095      	lsls	r5, r2
 8002bfe:	4225      	tst	r5, r4
 8002c00:	d035      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xee>
 8002c02:	078d      	lsls	r5, r1, #30
 8002c04:	d533      	bpl.n	8002c6e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	0694      	lsls	r4, r2, #26
 8002c0a:	d406      	bmi.n	8002c1a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	f022 020a 	bic.w	r2, r2, #10
 8002c12:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002c14:	2201      	movs	r2, #1
 8002c16:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c1a:	4a21      	ldr	r2, [pc, #132]	; (8002ca0 <HAL_DMA_IRQHandler+0x120>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d019      	beq.n	8002c54 <HAL_DMA_IRQHandler+0xd4>
 8002c20:	3214      	adds	r2, #20
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d018      	beq.n	8002c58 <HAL_DMA_IRQHandler+0xd8>
 8002c26:	3214      	adds	r2, #20
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d017      	beq.n	8002c5c <HAL_DMA_IRQHandler+0xdc>
 8002c2c:	3214      	adds	r2, #20
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d017      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xe2>
 8002c32:	3214      	adds	r2, #20
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d017      	beq.n	8002c68 <HAL_DMA_IRQHandler+0xe8>
 8002c38:	3214      	adds	r2, #20
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	bf0c      	ite	eq
 8002c3e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002c42:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002c46:	4a17      	ldr	r2, [pc, #92]	; (8002ca4 <HAL_DMA_IRQHandler+0x124>)
 8002c48:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002c50:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002c52:	e7c1      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c54:	2302      	movs	r3, #2
 8002c56:	e7f6      	b.n	8002c46 <HAL_DMA_IRQHandler+0xc6>
 8002c58:	2320      	movs	r3, #32
 8002c5a:	e7f4      	b.n	8002c46 <HAL_DMA_IRQHandler+0xc6>
 8002c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c60:	e7f1      	b.n	8002c46 <HAL_DMA_IRQHandler+0xc6>
 8002c62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c66:	e7ee      	b.n	8002c46 <HAL_DMA_IRQHandler+0xc6>
 8002c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c6c:	e7eb      	b.n	8002c46 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c6e:	2508      	movs	r5, #8
 8002c70:	4095      	lsls	r5, r2
 8002c72:	4225      	tst	r5, r4
 8002c74:	d011      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x11a>
 8002c76:	0709      	lsls	r1, r1, #28
 8002c78:	d50f      	bpl.n	8002c9a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c7a:	6819      	ldr	r1, [r3, #0]
 8002c7c:	f021 010e 	bic.w	r1, r1, #14
 8002c80:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c82:	2301      	movs	r3, #1
 8002c84:	fa03 f202 	lsl.w	r2, r3, r2
 8002c88:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c8a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002c8c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002c90:	2300      	movs	r3, #0
 8002c92:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002c96:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002c98:	e79e      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x58>
}
 8002c9a:	bc70      	pop	{r4, r5, r6}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40020008 	.word	0x40020008
 8002ca4:	40020000 	.word	0x40020000

08002ca8 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002ca8:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <FLASH_SetErrorCode+0x48>)
 8002caa:	68d3      	ldr	r3, [r2, #12]
 8002cac:	f013 0310 	ands.w	r3, r3, #16
 8002cb0:	d005      	beq.n	8002cbe <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002cb2:	4910      	ldr	r1, [pc, #64]	; (8002cf4 <FLASH_SetErrorCode+0x4c>)
 8002cb4:	69cb      	ldr	r3, [r1, #28]
 8002cb6:	f043 0302 	orr.w	r3, r3, #2
 8002cba:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002cbc:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002cbe:	68d2      	ldr	r2, [r2, #12]
 8002cc0:	0750      	lsls	r0, r2, #29
 8002cc2:	d506      	bpl.n	8002cd2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002cc4:	490b      	ldr	r1, [pc, #44]	; (8002cf4 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002cc6:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002cca:	69ca      	ldr	r2, [r1, #28]
 8002ccc:	f042 0201 	orr.w	r2, r2, #1
 8002cd0:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002cd2:	4a07      	ldr	r2, [pc, #28]	; (8002cf0 <FLASH_SetErrorCode+0x48>)
 8002cd4:	69d1      	ldr	r1, [r2, #28]
 8002cd6:	07c9      	lsls	r1, r1, #31
 8002cd8:	d508      	bpl.n	8002cec <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002cda:	4806      	ldr	r0, [pc, #24]	; (8002cf4 <FLASH_SetErrorCode+0x4c>)
 8002cdc:	69c1      	ldr	r1, [r0, #28]
 8002cde:	f041 0104 	orr.w	r1, r1, #4
 8002ce2:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002ce4:	69d1      	ldr	r1, [r2, #28]
 8002ce6:	f021 0101 	bic.w	r1, r1, #1
 8002cea:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002cec:	60d3      	str	r3, [r2, #12]
 8002cee:	4770      	bx	lr
 8002cf0:	40022000 	.word	0x40022000
 8002cf4:	200004e0 	.word	0x200004e0

08002cf8 <HAL_FLASH_EndOfOperationCallback>:
 8002cf8:	4770      	bx	lr

08002cfa <HAL_FLASH_OperationErrorCallback>:
{
 8002cfa:	4770      	bx	lr

08002cfc <HAL_FLASH_IRQHandler>:
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002cfc:	4b42      	ldr	r3, [pc, #264]	; (8002e08 <HAL_FLASH_IRQHandler+0x10c>)
{
 8002cfe:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	4c42      	ldr	r4, [pc, #264]	; (8002e0c <HAL_FLASH_IRQHandler+0x110>)
 8002d04:	f012 0f10 	tst.w	r2, #16
 8002d08:	d102      	bne.n	8002d10 <HAL_FLASH_IRQHandler+0x14>
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	075a      	lsls	r2, r3, #29
 8002d0e:	d50a      	bpl.n	8002d26 <HAL_FLASH_IRQHandler+0x2a>
    pFlash.Address = 0xFFFFFFFFU;
 8002d10:	f04f 33ff 	mov.w	r3, #4294967295
    addresstmp = pFlash.Address;
 8002d14:	68a5      	ldr	r5, [r4, #8]
    pFlash.Address = 0xFFFFFFFFU;
 8002d16:	60a3      	str	r3, [r4, #8]
    FLASH_SetErrorCode();
 8002d18:	f7ff ffc6 	bl	8002ca8 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	f7ff ffec 	bl	8002cfa <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	7023      	strb	r3, [r4, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002d26:	4d38      	ldr	r5, [pc, #224]	; (8002e08 <HAL_FLASH_IRQHandler+0x10c>)
 8002d28:	68eb      	ldr	r3, [r5, #12]
 8002d2a:	069b      	lsls	r3, r3, #26
 8002d2c:	d518      	bpl.n	8002d60 <HAL_FLASH_IRQHandler+0x64>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002d2e:	2320      	movs	r3, #32
 8002d30:	60eb      	str	r3, [r5, #12]
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002d32:	7823      	ldrb	r3, [r4, #0]
 8002d34:	b1a3      	cbz	r3, 8002d60 <HAL_FLASH_IRQHandler+0x64>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002d36:	7823      	ldrb	r3, [r4, #0]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d127      	bne.n	8002d8c <HAL_FLASH_IRQHandler+0x90>
        pFlash.DataRemaining--;
 8002d3c:	6863      	ldr	r3, [r4, #4]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 8002d42:	6863      	ldr	r3, [r4, #4]
 8002d44:	b1db      	cbz	r3, 8002d7e <HAL_FLASH_IRQHandler+0x82>
          addresstmp = pFlash.Address;
 8002d46:	68a0      	ldr	r0, [r4, #8]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002d48:	f7ff ffd6 	bl	8002cf8 <HAL_FLASH_EndOfOperationCallback>
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8002d4c:	68a0      	ldr	r0, [r4, #8]
 8002d4e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
          pFlash.Address = addresstmp;
 8002d52:	60a0      	str	r0, [r4, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002d54:	692b      	ldr	r3, [r5, #16]
 8002d56:	f023 0302 	bic.w	r3, r3, #2
 8002d5a:	612b      	str	r3, [r5, #16]
          FLASH_PageErase(addresstmp);
 8002d5c:	f000 f858 	bl	8002e10 <FLASH_PageErase>
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002d60:	7823      	ldrb	r3, [r4, #0]
 8002d62:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8002d66:	b94b      	cbnz	r3, 8002d7c <HAL_FLASH_IRQHandler+0x80>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002d68:	4b27      	ldr	r3, [pc, #156]	; (8002e08 <HAL_FLASH_IRQHandler+0x10c>)
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	f022 0207 	bic.w	r2, r2, #7
 8002d70:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	f422 52a0 	bic.w	r2, r2, #5120	; 0x1400
 8002d78:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 8002d7a:	7621      	strb	r1, [r4, #24]
 8002d7c:	bd70      	pop	{r4, r5, r6, pc}
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d82:	60a0      	str	r0, [r4, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002d84:	7023      	strb	r3, [r4, #0]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002d86:	f7ff ffb7 	bl	8002cf8 <HAL_FLASH_EndOfOperationCallback>
 8002d8a:	e7e9      	b.n	8002d60 <HAL_FLASH_IRQHandler+0x64>
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002d8c:	7823      	ldrb	r3, [r4, #0]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d109      	bne.n	8002da6 <HAL_FLASH_IRQHandler+0xaa>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002d92:	692b      	ldr	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0U);
 8002d94:	2000      	movs	r0, #0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002d96:	f023 0304 	bic.w	r3, r3, #4
 8002d9a:	612b      	str	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0U);
 8002d9c:	f7ff ffac 	bl	8002cf8 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002da0:	2300      	movs	r3, #0
 8002da2:	7023      	strb	r3, [r4, #0]
 8002da4:	e7dc      	b.n	8002d60 <HAL_FLASH_IRQHandler+0x64>
        pFlash.DataRemaining--;
 8002da6:	6863      	ldr	r3, [r4, #4]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 8002dac:	6863      	ldr	r3, [r4, #4]
 8002dae:	b1d3      	cbz	r3, 8002de6 <HAL_FLASH_IRQHandler+0xea>
          pFlash.Address += 2U;
 8002db0:	68a3      	ldr	r3, [r4, #8]
 8002db2:	3302      	adds	r3, #2
 8002db4:	60a3      	str	r3, [r4, #8]
          addresstmp = pFlash.Address;
 8002db6:	68a6      	ldr	r6, [r4, #8]
          pFlash.Data = (pFlash.Data >> 16U);
 8002db8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8002dbc:	0c02      	lsrs	r2, r0, #16
 8002dbe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002dc2:	0c0b      	lsrs	r3, r1, #16
 8002dc4:	e9c4 2304 	strd	r2, r3, [r4, #16]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002dc8:	692b      	ldr	r3, [r5, #16]
 8002dca:	f023 0301 	bic.w	r3, r3, #1
 8002dce:	612b      	str	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8002dd0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61e3      	str	r3, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002dd8:	692b      	ldr	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8002dda:	b292      	uxth	r2, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	612b      	str	r3, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 8002de2:	8032      	strh	r2, [r6, #0]
 8002de4:	e7bc      	b.n	8002d60 <HAL_FLASH_IRQHandler+0x64>
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8002de6:	7823      	ldrb	r3, [r4, #0]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d106      	bne.n	8002dfa <HAL_FLASH_IRQHandler+0xfe>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002dec:	68a0      	ldr	r0, [r4, #8]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002dee:	f7ff ff83 	bl	8002cf8 <HAL_FLASH_EndOfOperationCallback>
          pFlash.Address = 0xFFFFFFFFU;
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295
 8002df6:	60a3      	str	r3, [r4, #8]
 8002df8:	e7d2      	b.n	8002da0 <HAL_FLASH_IRQHandler+0xa4>
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8002dfa:	7823      	ldrb	r3, [r4, #0]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8002dfc:	68a0      	ldr	r0, [r4, #8]
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8002dfe:	2b04      	cmp	r3, #4
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8002e00:	bf0c      	ite	eq
 8002e02:	3802      	subeq	r0, #2
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002e04:	3806      	subne	r0, #6
 8002e06:	e7f2      	b.n	8002dee <HAL_FLASH_IRQHandler+0xf2>
 8002e08:	40022000 	.word	0x40022000
 8002e0c:	200004e0 	.word	0x200004e0

08002e10 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e10:	2200      	movs	r2, #0
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <FLASH_PageErase+0x1c>)
 8002e14:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <FLASH_PageErase+0x20>)
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	f042 0202 	orr.w	r2, r2, #2
 8002e1e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002e20:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e28:	611a      	str	r2, [r3, #16]
 8002e2a:	4770      	bx	lr
 8002e2c:	200004e0 	.word	0x200004e0
 8002e30:	40022000 	.word	0x40022000

08002e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00U;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002e38:	4aaa      	ldr	r2, [pc, #680]	; (80030e4 <HAL_GPIO_Init+0x2b0>)
{
 8002e3a:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002e3c:	4290      	cmp	r0, r2
{
 8002e3e:	4604      	mov	r4, r0
 8002e40:	468b      	mov	fp, r1
 8002e42:	9201      	str	r2, [sp, #4]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002e44:	d013      	beq.n	8002e6e <HAL_GPIO_Init+0x3a>
 8002e46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e4a:	4290      	cmp	r0, r2
 8002e4c:	d00f      	beq.n	8002e6e <HAL_GPIO_Init+0x3a>
 8002e4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e52:	4290      	cmp	r0, r2
 8002e54:	d00b      	beq.n	8002e6e <HAL_GPIO_Init+0x3a>
 8002e56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e5a:	4290      	cmp	r0, r2
 8002e5c:	d007      	beq.n	8002e6e <HAL_GPIO_Init+0x3a>
 8002e5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e62:	4290      	cmp	r0, r2
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_Init+0x3a>
 8002e66:	21cd      	movs	r1, #205	; 0xcd
 8002e68:	489f      	ldr	r0, [pc, #636]	; (80030e8 <HAL_GPIO_Init+0x2b4>)
 8002e6a:	f7fe fdd4 	bl	8001a16 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002e6e:	f8db 2000 	ldr.w	r2, [fp]
 8002e72:	b291      	uxth	r1, r2
 8002e74:	b111      	cbz	r1, 8002e7c <HAL_GPIO_Init+0x48>
 8002e76:	0c12      	lsrs	r2, r2, #16
 8002e78:	0412      	lsls	r2, r2, #16
 8002e7a:	b11a      	cbz	r2, 8002e84 <HAL_GPIO_Init+0x50>
 8002e7c:	21ce      	movs	r1, #206	; 0xce
 8002e7e:	489a      	ldr	r0, [pc, #616]	; (80030e8 <HAL_GPIO_Init+0x2b4>)
 8002e80:	f7fe fdc9 	bl	8001a16 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002e84:	f8db 2004 	ldr.w	r2, [fp, #4]
 8002e88:	2a03      	cmp	r2, #3
 8002e8a:	d917      	bls.n	8002ebc <HAL_GPIO_Init+0x88>
 8002e8c:	f1a2 0111 	sub.w	r1, r2, #17
 8002e90:	2901      	cmp	r1, #1
 8002e92:	d913      	bls.n	8002ebc <HAL_GPIO_Init+0x88>
 8002e94:	4895      	ldr	r0, [pc, #596]	; (80030ec <HAL_GPIO_Init+0x2b8>)
 8002e96:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 8002e9a:	4281      	cmp	r1, r0
 8002e9c:	d00e      	beq.n	8002ebc <HAL_GPIO_Init+0x88>
 8002e9e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8002ea2:	4282      	cmp	r2, r0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_GPIO_Init+0x88>
 8002ea6:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 8002eaa:	4281      	cmp	r1, r0
 8002eac:	d006      	beq.n	8002ebc <HAL_GPIO_Init+0x88>
 8002eae:	4990      	ldr	r1, [pc, #576]	; (80030f0 <HAL_GPIO_Init+0x2bc>)
 8002eb0:	428a      	cmp	r2, r1
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_Init+0x88>
 8002eb4:	21cf      	movs	r1, #207	; 0xcf
 8002eb6:	488c      	ldr	r0, [pc, #560]	; (80030e8 <HAL_GPIO_Init+0x2b4>)
 8002eb8:	f7fe fdad 	bl	8001a16 <assert_failed>
{
 8002ebc:	2500      	movs	r5, #0
 8002ebe:	46a8      	mov	r8, r5
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ec0:	f8df a244 	ldr.w	sl, [pc, #580]	; 8003108 <HAL_GPIO_Init+0x2d4>
 8002ec4:	4e8b      	ldr	r6, [pc, #556]	; (80030f4 <HAL_GPIO_Init+0x2c0>)
    ioposition = (0x01U << position);
 8002ec6:	2201      	movs	r2, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ec8:	f8db 7000 	ldr.w	r7, [fp]
    ioposition = (0x01U << position);
 8002ecc:	fa02 f908 	lsl.w	r9, r2, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ed0:	ea09 0707 	and.w	r7, r9, r7
    if (iocurrent == ioposition)
 8002ed4:	45b9      	cmp	r9, r7
 8002ed6:	f040 808f 	bne.w	8002ff8 <HAL_GPIO_Init+0x1c4>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002eda:	9b01      	ldr	r3, [sp, #4]
 8002edc:	429c      	cmp	r4, r3
 8002ede:	d011      	beq.n	8002f04 <HAL_GPIO_Init+0xd0>
 8002ee0:	4985      	ldr	r1, [pc, #532]	; (80030f8 <HAL_GPIO_Init+0x2c4>)
 8002ee2:	428c      	cmp	r4, r1
 8002ee4:	d00e      	beq.n	8002f04 <HAL_GPIO_Init+0xd0>
 8002ee6:	4b85      	ldr	r3, [pc, #532]	; (80030fc <HAL_GPIO_Init+0x2c8>)
 8002ee8:	429c      	cmp	r4, r3
 8002eea:	d00b      	beq.n	8002f04 <HAL_GPIO_Init+0xd0>
 8002eec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ef0:	428c      	cmp	r4, r1
 8002ef2:	d007      	beq.n	8002f04 <HAL_GPIO_Init+0xd0>
 8002ef4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002ef8:	428c      	cmp	r4, r1
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0xd0>
 8002efc:	21dd      	movs	r1, #221	; 0xdd
 8002efe:	487a      	ldr	r0, [pc, #488]	; (80030e8 <HAL_GPIO_Init+0x2b4>)
 8002f00:	f7fe fd89 	bl	8001a16 <assert_failed>
      switch (GPIO_Init->Mode)
 8002f04:	f8db 1004 	ldr.w	r1, [fp, #4]
 8002f08:	2912      	cmp	r1, #18
 8002f0a:	f000 80d3 	beq.w	80030b4 <HAL_GPIO_Init+0x280>
 8002f0e:	f200 808d 	bhi.w	800302c <HAL_GPIO_Init+0x1f8>
 8002f12:	2902      	cmp	r1, #2
 8002f14:	f000 80c1 	beq.w	800309a <HAL_GPIO_Init+0x266>
 8002f18:	d877      	bhi.n	800300a <HAL_GPIO_Init+0x1d6>
 8002f1a:	2900      	cmp	r1, #0
 8002f1c:	f000 8093 	beq.w	8003046 <HAL_GPIO_Init+0x212>
 8002f20:	2901      	cmp	r1, #1
 8002f22:	f000 80ae 	beq.w	8003082 <HAL_GPIO_Init+0x24e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f26:	2fff      	cmp	r7, #255	; 0xff
 8002f28:	bf82      	ittt	hi
 8002f2a:	f108 4e80 	addhi.w	lr, r8, #1073741824	; 0x40000000
 8002f2e:	f1ae 0e08 	subhi.w	lr, lr, #8
 8002f32:	ea4f 018e 	movhi.w	r1, lr, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f36:	f04f 0e0f 	mov.w	lr, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f3a:	bf9d      	ittte	ls
 8002f3c:	4620      	movls	r0, r4
 8002f3e:	6822      	ldrls	r2, [r4, #0]
 8002f40:	ea4f 0188 	movls.w	r1, r8, lsl #2
 8002f44:	6862      	ldrhi	r2, [r4, #4]
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f46:	fa0e fc01 	lsl.w	ip, lr, r1
 8002f4a:	ea22 020c 	bic.w	r2, r2, ip
 8002f4e:	fa05 f101 	lsl.w	r1, r5, r1
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f52:	bf88      	it	hi
 8002f54:	1d20      	addhi	r0, r4, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f56:	4311      	orrs	r1, r2
 8002f58:	6001      	str	r1, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f5a:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002f5e:	00c3      	lsls	r3, r0, #3
 8002f60:	d54a      	bpl.n	8002ff8 <HAL_GPIO_Init+0x1c4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f62:	f8da 2018 	ldr.w	r2, [sl, #24]
 8002f66:	f028 0103 	bic.w	r1, r8, #3
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	f8ca 2018 	str.w	r2, [sl, #24]
 8002f72:	f8da 2018 	ldr.w	r2, [sl, #24]
 8002f76:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002f7a:	f002 0201 	and.w	r2, r2, #1
 8002f7e:	9203      	str	r2, [sp, #12]
 8002f80:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002f84:	f008 0c03 	and.w	ip, r8, #3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f88:	9b01      	ldr	r3, [sp, #4]
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f8a:	9a03      	ldr	r2, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002f8c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8002f90:	688a      	ldr	r2, [r1, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002f92:	fa0e fe0c 	lsl.w	lr, lr, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f96:	429c      	cmp	r4, r3
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002f98:	ea22 0e0e 	bic.w	lr, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f9c:	f000 809b 	beq.w	80030d6 <HAL_GPIO_Init+0x2a2>
 8002fa0:	4a55      	ldr	r2, [pc, #340]	; (80030f8 <HAL_GPIO_Init+0x2c4>)
 8002fa2:	4294      	cmp	r4, r2
 8002fa4:	f000 8099 	beq.w	80030da <HAL_GPIO_Init+0x2a6>
 8002fa8:	4b54      	ldr	r3, [pc, #336]	; (80030fc <HAL_GPIO_Init+0x2c8>)
 8002faa:	429c      	cmp	r4, r3
 8002fac:	f000 8097 	beq.w	80030de <HAL_GPIO_Init+0x2aa>
 8002fb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fb4:	4294      	cmp	r4, r2
 8002fb6:	bf14      	ite	ne
 8002fb8:	2204      	movne	r2, #4
 8002fba:	2203      	moveq	r2, #3
 8002fbc:	fa02 f20c 	lsl.w	r2, r2, ip
 8002fc0:	ea42 020e 	orr.w	r2, r2, lr
        AFIO->EXTICR[position >> 2U] = temp;
 8002fc4:	608a      	str	r2, [r1, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fc6:	6832      	ldr	r2, [r6, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fc8:	03c1      	lsls	r1, r0, #15
          SET_BIT(EXTI->IMR, iocurrent);
 8002fca:	bf4c      	ite	mi
 8002fcc:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fce:	43ba      	bicpl	r2, r7
 8002fd0:	6032      	str	r2, [r6, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fd2:	6872      	ldr	r2, [r6, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fd4:	0383      	lsls	r3, r0, #14
          SET_BIT(EXTI->EMR, iocurrent);
 8002fd6:	bf4c      	ite	mi
 8002fd8:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fda:	43ba      	bicpl	r2, r7
 8002fdc:	6072      	str	r2, [r6, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fde:	68b2      	ldr	r2, [r6, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fe0:	02c1      	lsls	r1, r0, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fe2:	bf4c      	ite	mi
 8002fe4:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fe6:	43ba      	bicpl	r2, r7
 8002fe8:	60b2      	str	r2, [r6, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fea:	68f2      	ldr	r2, [r6, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fec:	0283      	lsls	r3, r0, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fee:	bf4c      	ite	mi
 8002ff0:	4317      	orrmi	r7, r2
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ff2:	ea22 0707 	bicpl.w	r7, r2, r7
 8002ff6:	60f7      	str	r7, [r6, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002ff8:	f108 0801 	add.w	r8, r8, #1
 8002ffc:	f1b8 0f10 	cmp.w	r8, #16
 8003000:	f47f af61 	bne.w	8002ec6 <HAL_GPIO_Init+0x92>
        }
      }
    }
  }
}
 8003004:	b005      	add	sp, #20
 8003006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800300a:	2903      	cmp	r1, #3
 800300c:	d05f      	beq.n	80030ce <HAL_GPIO_Init+0x29a>
 800300e:	2911      	cmp	r1, #17
 8003010:	d189      	bne.n	8002f26 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003012:	f8db 200c 	ldr.w	r2, [fp, #12]
 8003016:	3a01      	subs	r2, #1
 8003018:	2a02      	cmp	r2, #2
 800301a:	d903      	bls.n	8003024 <HAL_GPIO_Init+0x1f0>
 800301c:	21ec      	movs	r1, #236	; 0xec
 800301e:	4832      	ldr	r0, [pc, #200]	; (80030e8 <HAL_GPIO_Init+0x2b4>)
 8003020:	f7fe fcf9 	bl	8001a16 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003024:	f8db 500c 	ldr.w	r5, [fp, #12]
 8003028:	3504      	adds	r5, #4
          break;
 800302a:	e77c      	b.n	8002f26 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800302c:	4834      	ldr	r0, [pc, #208]	; (8003100 <HAL_GPIO_Init+0x2cc>)
 800302e:	4281      	cmp	r1, r0
 8003030:	d009      	beq.n	8003046 <HAL_GPIO_Init+0x212>
 8003032:	d81c      	bhi.n	800306e <HAL_GPIO_Init+0x23a>
 8003034:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8003038:	4281      	cmp	r1, r0
 800303a:	d004      	beq.n	8003046 <HAL_GPIO_Init+0x212>
 800303c:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8003040:	4281      	cmp	r1, r0
 8003042:	f47f af70 	bne.w	8002f26 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003046:	f8db 1008 	ldr.w	r1, [fp, #8]
 800304a:	2902      	cmp	r1, #2
 800304c:	d904      	bls.n	8003058 <HAL_GPIO_Init+0x224>
 800304e:	f240 1107 	movw	r1, #263	; 0x107
 8003052:	4825      	ldr	r0, [pc, #148]	; (80030e8 <HAL_GPIO_Init+0x2b4>)
 8003054:	f7fe fcdf 	bl	8001a16 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003058:	f8db 1008 	ldr.w	r1, [fp, #8]
 800305c:	b3c9      	cbz	r1, 80030d2 <HAL_GPIO_Init+0x29e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800305e:	2901      	cmp	r1, #1
            GPIOx->BSRR = ioposition;
 8003060:	bf0c      	ite	eq
 8003062:	f8c4 9010 	streq.w	r9, [r4, #16]
            GPIOx->BRR = ioposition;
 8003066:	f8c4 9014 	strne.w	r9, [r4, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800306a:	2508      	movs	r5, #8
 800306c:	e75b      	b.n	8002f26 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800306e:	4825      	ldr	r0, [pc, #148]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 8003070:	4281      	cmp	r1, r0
 8003072:	d0e8      	beq.n	8003046 <HAL_GPIO_Init+0x212>
 8003074:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8003078:	4281      	cmp	r1, r0
 800307a:	d0e4      	beq.n	8003046 <HAL_GPIO_Init+0x212>
 800307c:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8003080:	e7de      	b.n	8003040 <HAL_GPIO_Init+0x20c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003082:	f8db 200c 	ldr.w	r2, [fp, #12]
 8003086:	3a01      	subs	r2, #1
 8003088:	2a02      	cmp	r2, #2
 800308a:	d903      	bls.n	8003094 <HAL_GPIO_Init+0x260>
 800308c:	21e5      	movs	r1, #229	; 0xe5
 800308e:	4816      	ldr	r0, [pc, #88]	; (80030e8 <HAL_GPIO_Init+0x2b4>)
 8003090:	f7fe fcc1 	bl	8001a16 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003094:	f8db 500c 	ldr.w	r5, [fp, #12]
          break;
 8003098:	e745      	b.n	8002f26 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800309a:	f8db 200c 	ldr.w	r2, [fp, #12]
 800309e:	3a01      	subs	r2, #1
 80030a0:	2a02      	cmp	r2, #2
 80030a2:	d903      	bls.n	80030ac <HAL_GPIO_Init+0x278>
 80030a4:	21f3      	movs	r1, #243	; 0xf3
 80030a6:	4810      	ldr	r0, [pc, #64]	; (80030e8 <HAL_GPIO_Init+0x2b4>)
 80030a8:	f7fe fcb5 	bl	8001a16 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030ac:	f8db 500c 	ldr.w	r5, [fp, #12]
 80030b0:	3508      	adds	r5, #8
          break;
 80030b2:	e738      	b.n	8002f26 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80030b4:	f8db 200c 	ldr.w	r2, [fp, #12]
 80030b8:	3a01      	subs	r2, #1
 80030ba:	2a02      	cmp	r2, #2
 80030bc:	d903      	bls.n	80030c6 <HAL_GPIO_Init+0x292>
 80030be:	21fa      	movs	r1, #250	; 0xfa
 80030c0:	4809      	ldr	r0, [pc, #36]	; (80030e8 <HAL_GPIO_Init+0x2b4>)
 80030c2:	f7fe fca8 	bl	8001a16 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030c6:	f8db 500c 	ldr.w	r5, [fp, #12]
 80030ca:	350c      	adds	r5, #12
          break;
 80030cc:	e72b      	b.n	8002f26 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030ce:	2500      	movs	r5, #0
 80030d0:	e729      	b.n	8002f26 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030d2:	2504      	movs	r5, #4
 80030d4:	e727      	b.n	8002f26 <HAL_GPIO_Init+0xf2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030d6:	2200      	movs	r2, #0
 80030d8:	e770      	b.n	8002fbc <HAL_GPIO_Init+0x188>
 80030da:	2201      	movs	r2, #1
 80030dc:	e76e      	b.n	8002fbc <HAL_GPIO_Init+0x188>
 80030de:	2202      	movs	r2, #2
 80030e0:	e76c      	b.n	8002fbc <HAL_GPIO_Init+0x188>
 80030e2:	bf00      	nop
 80030e4:	40010800 	.word	0x40010800
 80030e8:	08005a2b 	.word	0x08005a2b
 80030ec:	10110000 	.word	0x10110000
 80030f0:	10220000 	.word	0x10220000
 80030f4:	40010400 	.word	0x40010400
 80030f8:	40010c00 	.word	0x40010c00
 80030fc:	40011000 	.word	0x40011000
 8003100:	10210000 	.word	0x10210000
 8003104:	10310000 	.word	0x10310000
 8003108:	40021000 	.word	0x40021000

0800310c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800310c:	b538      	push	{r3, r4, r5, lr}
 800310e:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003110:	460c      	mov	r4, r1
 8003112:	b921      	cbnz	r1, 800311e <HAL_GPIO_ReadPin+0x12>
 8003114:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003118:	4804      	ldr	r0, [pc, #16]	; (800312c <HAL_GPIO_ReadPin+0x20>)
 800311a:	f7fe fc7c 	bl	8001a16 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800311e:	68ab      	ldr	r3, [r5, #8]
 8003120:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003122:	bf14      	ite	ne
 8003124:	2001      	movne	r0, #1
 8003126:	2000      	moveq	r0, #0
 8003128:	bd38      	pop	{r3, r4, r5, pc}
 800312a:	bf00      	nop
 800312c:	08005a2b 	.word	0x08005a2b

08003130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003130:	b570      	push	{r4, r5, r6, lr}
 8003132:	4605      	mov	r5, r0
 8003134:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003136:	460c      	mov	r4, r1
 8003138:	b921      	cbnz	r1, 8003144 <HAL_GPIO_WritePin+0x14>
 800313a:	f240 11e3 	movw	r1, #483	; 0x1e3
 800313e:	4808      	ldr	r0, [pc, #32]	; (8003160 <HAL_GPIO_WritePin+0x30>)
 8003140:	f7fe fc69 	bl	8001a16 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003144:	2e01      	cmp	r6, #1
 8003146:	d906      	bls.n	8003156 <HAL_GPIO_WritePin+0x26>
 8003148:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 800314c:	4804      	ldr	r0, [pc, #16]	; (8003160 <HAL_GPIO_WritePin+0x30>)
 800314e:	f7fe fc62 	bl	8001a16 <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003152:	612c      	str	r4, [r5, #16]
 8003154:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
 8003156:	2e00      	cmp	r6, #0
 8003158:	d1fb      	bne.n	8003152 <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800315a:	0424      	lsls	r4, r4, #16
 800315c:	e7f9      	b.n	8003152 <HAL_GPIO_WritePin+0x22>
 800315e:	bf00      	nop
 8003160:	08005a2b 	.word	0x08005a2b

08003164 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003164:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003166:	4604      	mov	r4, r0
 8003168:	2800      	cmp	r0, #0
 800316a:	d032      	beq.n	80031d2 <HAL_IWDG_Init+0x6e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800316c:	6802      	ldr	r2, [r0, #0]
 800316e:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <HAL_IWDG_Init+0x74>)
 8003170:	429a      	cmp	r2, r3
 8003172:	d003      	beq.n	800317c <HAL_IWDG_Init+0x18>
 8003174:	21ad      	movs	r1, #173	; 0xad
 8003176:	4819      	ldr	r0, [pc, #100]	; (80031dc <HAL_IWDG_Init+0x78>)
 8003178:	f7fe fc4d 	bl	8001a16 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800317c:	6863      	ldr	r3, [r4, #4]
 800317e:	2b06      	cmp	r3, #6
 8003180:	d903      	bls.n	800318a <HAL_IWDG_Init+0x26>
 8003182:	21ae      	movs	r1, #174	; 0xae
 8003184:	4815      	ldr	r0, [pc, #84]	; (80031dc <HAL_IWDG_Init+0x78>)
 8003186:	f7fe fc46 	bl	8001a16 <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800318a:	68a3      	ldr	r3, [r4, #8]
 800318c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003190:	d303      	bcc.n	800319a <HAL_IWDG_Init+0x36>
 8003192:	21af      	movs	r1, #175	; 0xaf
 8003194:	4811      	ldr	r0, [pc, #68]	; (80031dc <HAL_IWDG_Init+0x78>)
 8003196:	f7fe fc3e 	bl	8001a16 <assert_failed>

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800319a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80031a2:	f245 5255 	movw	r2, #21845	; 0x5555
 80031a6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80031a8:	6862      	ldr	r2, [r4, #4]
 80031aa:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80031ac:	68a2      	ldr	r2, [r4, #8]
 80031ae:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80031b0:	f7fe ffac 	bl	800210c <HAL_GetTick>
 80031b4:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != RESET)
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	68d8      	ldr	r0, [r3, #12]
 80031ba:	b918      	cbnz	r0, 80031c4 <HAL_IWDG_Init+0x60>
      return HAL_TIMEOUT;
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80031bc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80031c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80031c2:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80031c4:	f7fe ffa2 	bl	800210c <HAL_GetTick>
 80031c8:	1b40      	subs	r0, r0, r5
 80031ca:	2830      	cmp	r0, #48	; 0x30
 80031cc:	d9f3      	bls.n	80031b6 <HAL_IWDG_Init+0x52>
      return HAL_TIMEOUT;
 80031ce:	2003      	movs	r0, #3
}
 80031d0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80031d2:	2001      	movs	r0, #1
 80031d4:	bd38      	pop	{r3, r4, r5, pc}
 80031d6:	bf00      	nop
 80031d8:	40003000 	.word	0x40003000
 80031dc:	08005a64 	.word	0x08005a64

080031e0 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80031e0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80031e4:	6803      	ldr	r3, [r0, #0]

  /* Return function status */
  return HAL_OK;
}
 80031e6:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80031e8:	601a      	str	r2, [r3, #0]
}
 80031ea:	4770      	bx	lr

080031ec <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80031ec:	4770      	bx	lr
	...

080031f0 <HAL_PWR_PVD_IRQHandler>:
{
 80031f0:	b510      	push	{r4, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80031f2:	4c05      	ldr	r4, [pc, #20]	; (8003208 <HAL_PWR_PVD_IRQHandler+0x18>)
 80031f4:	6963      	ldr	r3, [r4, #20]
 80031f6:	03db      	lsls	r3, r3, #15
 80031f8:	d504      	bpl.n	8003204 <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 80031fa:	f7ff fff7 	bl	80031ec <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80031fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003202:	6163      	str	r3, [r4, #20]
 8003204:	bd10      	pop	{r4, pc}
 8003206:	bf00      	nop
 8003208:	40010400 	.word	0x40010400

0800320c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800320c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   uint32_t tickstart = 0U;
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 8003210:	4604      	mov	r4, r0
 8003212:	b920      	cbnz	r0, 800321e <HAL_RCC_OscConfig+0x12>
 8003214:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8003218:	48a5      	ldr	r0, [pc, #660]	; (80034b0 <HAL_RCC_OscConfig+0x2a4>)
 800321a:	f7fe fbfc 	bl	8001a16 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800321e:	6823      	ldr	r3, [r4, #0]
 8003220:	b133      	cbz	r3, 8003230 <HAL_RCC_OscConfig+0x24>
 8003222:	071a      	lsls	r2, r3, #28
 8003224:	d104      	bne.n	8003230 <HAL_RCC_OscConfig+0x24>
 8003226:	f240 1171 	movw	r1, #369	; 0x171
 800322a:	48a1      	ldr	r0, [pc, #644]	; (80034b0 <HAL_RCC_OscConfig+0x2a4>)
 800322c:	f7fe fbf3 	bl	8001a16 <assert_failed>
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	07db      	lsls	r3, r3, #31
 8003234:	d418      	bmi.n	8003268 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	079f      	lsls	r7, r3, #30
 800323a:	d472      	bmi.n	8003322 <HAL_RCC_OscConfig+0x116>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	0719      	lsls	r1, r3, #28
 8003240:	f100 80b9 	bmi.w	80033b6 <HAL_RCC_OscConfig+0x1aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	075a      	lsls	r2, r3, #29
 8003248:	f100 80eb 	bmi.w	8003422 <HAL_RCC_OscConfig+0x216>
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800324c:	69e3      	ldr	r3, [r4, #28]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d904      	bls.n	800325c <HAL_RCC_OscConfig+0x50>
 8003252:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003256:	4896      	ldr	r0, [pc, #600]	; (80034b0 <HAL_RCC_OscConfig+0x2a4>)
 8003258:	f7fe fbdd 	bl	8001a16 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800325c:	69e2      	ldr	r2, [r4, #28]
 800325e:	2a00      	cmp	r2, #0
 8003260:	f040 815e 	bne.w	8003520 <HAL_RCC_OscConfig+0x314>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8003264:	2000      	movs	r0, #0
 8003266:	e020      	b.n	80032aa <HAL_RCC_OscConfig+0x9e>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003268:	6863      	ldr	r3, [r4, #4]
 800326a:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800326e:	d007      	beq.n	8003280 <HAL_RCC_OscConfig+0x74>
 8003270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003274:	d004      	beq.n	8003280 <HAL_RCC_OscConfig+0x74>
 8003276:	f240 1177 	movw	r1, #375	; 0x177
 800327a:	488d      	ldr	r0, [pc, #564]	; (80034b0 <HAL_RCC_OscConfig+0x2a4>)
 800327c:	f7fe fbcb 	bl	8001a16 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003280:	4d8c      	ldr	r5, [pc, #560]	; (80034b4 <HAL_RCC_OscConfig+0x2a8>)
 8003282:	686b      	ldr	r3, [r5, #4]
 8003284:	f003 030c 	and.w	r3, r3, #12
 8003288:	2b04      	cmp	r3, #4
 800328a:	d007      	beq.n	800329c <HAL_RCC_OscConfig+0x90>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800328c:	686b      	ldr	r3, [r5, #4]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	2b08      	cmp	r3, #8
 8003294:	d10c      	bne.n	80032b0 <HAL_RCC_OscConfig+0xa4>
 8003296:	686b      	ldr	r3, [r5, #4]
 8003298:	03de      	lsls	r6, r3, #15
 800329a:	d509      	bpl.n	80032b0 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	682b      	ldr	r3, [r5, #0]
 800329e:	039d      	lsls	r5, r3, #14
 80032a0:	d5c9      	bpl.n	8003236 <HAL_RCC_OscConfig+0x2a>
 80032a2:	6863      	ldr	r3, [r4, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1c6      	bne.n	8003236 <HAL_RCC_OscConfig+0x2a>
        return HAL_ERROR;
 80032a8:	2001      	movs	r0, #1
}
 80032aa:	b002      	add	sp, #8
 80032ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b0:	6863      	ldr	r3, [r4, #4]
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b6:	d110      	bne.n	80032da <HAL_RCC_OscConfig+0xce>
 80032b8:	682b      	ldr	r3, [r5, #0]
 80032ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032be:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80032c0:	f7fe ff24 	bl	800210c <HAL_GetTick>
 80032c4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c6:	682b      	ldr	r3, [r5, #0]
 80032c8:	0398      	lsls	r0, r3, #14
 80032ca:	d4b4      	bmi.n	8003236 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fe ff1e 	bl	800210c <HAL_GetTick>
 80032d0:	1b80      	subs	r0, r0, r6
 80032d2:	2864      	cmp	r0, #100	; 0x64
 80032d4:	d9f7      	bls.n	80032c6 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 80032d6:	2003      	movs	r0, #3
 80032d8:	e7e7      	b.n	80032aa <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032da:	b99b      	cbnz	r3, 8003304 <HAL_RCC_OscConfig+0xf8>
 80032dc:	682b      	ldr	r3, [r5, #0]
 80032de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e2:	602b      	str	r3, [r5, #0]
 80032e4:	682b      	ldr	r3, [r5, #0]
 80032e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80032ec:	f7fe ff0e 	bl	800210c <HAL_GetTick>
 80032f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f2:	682b      	ldr	r3, [r5, #0]
 80032f4:	0399      	lsls	r1, r3, #14
 80032f6:	d59e      	bpl.n	8003236 <HAL_RCC_OscConfig+0x2a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f8:	f7fe ff08 	bl	800210c <HAL_GetTick>
 80032fc:	1b80      	subs	r0, r0, r6
 80032fe:	2864      	cmp	r0, #100	; 0x64
 8003300:	d9f7      	bls.n	80032f2 <HAL_RCC_OscConfig+0xe6>
 8003302:	e7e8      	b.n	80032d6 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003308:	682b      	ldr	r3, [r5, #0]
 800330a:	d103      	bne.n	8003314 <HAL_RCC_OscConfig+0x108>
 800330c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003310:	602b      	str	r3, [r5, #0]
 8003312:	e7d1      	b.n	80032b8 <HAL_RCC_OscConfig+0xac>
 8003314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003318:	602b      	str	r3, [r5, #0]
 800331a:	682b      	ldr	r3, [r5, #0]
 800331c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003320:	e7cd      	b.n	80032be <HAL_RCC_OscConfig+0xb2>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003322:	6923      	ldr	r3, [r4, #16]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d904      	bls.n	8003332 <HAL_RCC_OscConfig+0x126>
 8003328:	f240 11ab 	movw	r1, #427	; 0x1ab
 800332c:	4860      	ldr	r0, [pc, #384]	; (80034b0 <HAL_RCC_OscConfig+0x2a4>)
 800332e:	f7fe fb72 	bl	8001a16 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003332:	6963      	ldr	r3, [r4, #20]
 8003334:	2b1f      	cmp	r3, #31
 8003336:	d904      	bls.n	8003342 <HAL_RCC_OscConfig+0x136>
 8003338:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800333c:	485c      	ldr	r0, [pc, #368]	; (80034b0 <HAL_RCC_OscConfig+0x2a4>)
 800333e:	f7fe fb6a 	bl	8001a16 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003342:	4d5c      	ldr	r5, [pc, #368]	; (80034b4 <HAL_RCC_OscConfig+0x2a8>)
 8003344:	686b      	ldr	r3, [r5, #4]
 8003346:	f013 0f0c 	tst.w	r3, #12
 800334a:	d007      	beq.n	800335c <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800334c:	686b      	ldr	r3, [r5, #4]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b08      	cmp	r3, #8
 8003354:	d110      	bne.n	8003378 <HAL_RCC_OscConfig+0x16c>
 8003356:	686b      	ldr	r3, [r5, #4]
 8003358:	03da      	lsls	r2, r3, #15
 800335a:	d40d      	bmi.n	8003378 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800335c:	682b      	ldr	r3, [r5, #0]
 800335e:	079b      	lsls	r3, r3, #30
 8003360:	d502      	bpl.n	8003368 <HAL_RCC_OscConfig+0x15c>
 8003362:	6923      	ldr	r3, [r4, #16]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d19f      	bne.n	80032a8 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003368:	682b      	ldr	r3, [r5, #0]
 800336a:	6962      	ldr	r2, [r4, #20]
 800336c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003370:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003374:	602b      	str	r3, [r5, #0]
 8003376:	e761      	b.n	800323c <HAL_RCC_OscConfig+0x30>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003378:	6922      	ldr	r2, [r4, #16]
 800337a:	4b4f      	ldr	r3, [pc, #316]	; (80034b8 <HAL_RCC_OscConfig+0x2ac>)
 800337c:	b16a      	cbz	r2, 800339a <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_ENABLE();
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003382:	f7fe fec3 	bl	800210c <HAL_GetTick>
 8003386:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003388:	682b      	ldr	r3, [r5, #0]
 800338a:	079f      	lsls	r7, r3, #30
 800338c:	d4ec      	bmi.n	8003368 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800338e:	f7fe febd 	bl	800210c <HAL_GetTick>
 8003392:	1b80      	subs	r0, r0, r6
 8003394:	2802      	cmp	r0, #2
 8003396:	d9f7      	bls.n	8003388 <HAL_RCC_OscConfig+0x17c>
 8003398:	e79d      	b.n	80032d6 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_DISABLE();
 800339a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800339c:	f7fe feb6 	bl	800210c <HAL_GetTick>
 80033a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a2:	682b      	ldr	r3, [r5, #0]
 80033a4:	0798      	lsls	r0, r3, #30
 80033a6:	f57f af49 	bpl.w	800323c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033aa:	f7fe feaf 	bl	800210c <HAL_GetTick>
 80033ae:	1b80      	subs	r0, r0, r6
 80033b0:	2802      	cmp	r0, #2
 80033b2:	d9f6      	bls.n	80033a2 <HAL_RCC_OscConfig+0x196>
 80033b4:	e78f      	b.n	80032d6 <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80033b6:	69a3      	ldr	r3, [r4, #24]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d904      	bls.n	80033c6 <HAL_RCC_OscConfig+0x1ba>
 80033bc:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 80033c0:	483b      	ldr	r0, [pc, #236]	; (80034b0 <HAL_RCC_OscConfig+0x2a4>)
 80033c2:	f7fe fb28 	bl	8001a16 <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033c6:	69a2      	ldr	r2, [r4, #24]
 80033c8:	4d3a      	ldr	r5, [pc, #232]	; (80034b4 <HAL_RCC_OscConfig+0x2a8>)
 80033ca:	4b3c      	ldr	r3, [pc, #240]	; (80034bc <HAL_RCC_OscConfig+0x2b0>)
 80033cc:	b1da      	cbz	r2, 8003406 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80033d2:	f7fe fe9b 	bl	800210c <HAL_GetTick>
 80033d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80033da:	079b      	lsls	r3, r3, #30
 80033dc:	d50d      	bpl.n	80033fa <HAL_RCC_OscConfig+0x1ee>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033de:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80033e2:	4b37      	ldr	r3, [pc, #220]	; (80034c0 <HAL_RCC_OscConfig+0x2b4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80033ea:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80033ec:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80033ee:	9b01      	ldr	r3, [sp, #4]
 80033f0:	1e5a      	subs	r2, r3, #1
 80033f2:	9201      	str	r2, [sp, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1f9      	bne.n	80033ec <HAL_RCC_OscConfig+0x1e0>
 80033f8:	e724      	b.n	8003244 <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033fa:	f7fe fe87 	bl	800210c <HAL_GetTick>
 80033fe:	1b80      	subs	r0, r0, r6
 8003400:	2802      	cmp	r0, #2
 8003402:	d9e9      	bls.n	80033d8 <HAL_RCC_OscConfig+0x1cc>
 8003404:	e767      	b.n	80032d6 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_LSI_DISABLE();
 8003406:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003408:	f7fe fe80 	bl	800210c <HAL_GetTick>
 800340c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003410:	079f      	lsls	r7, r3, #30
 8003412:	f57f af17 	bpl.w	8003244 <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003416:	f7fe fe79 	bl	800210c <HAL_GetTick>
 800341a:	1b80      	subs	r0, r0, r6
 800341c:	2802      	cmp	r0, #2
 800341e:	d9f6      	bls.n	800340e <HAL_RCC_OscConfig+0x202>
 8003420:	e759      	b.n	80032d6 <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003422:	68e3      	ldr	r3, [r4, #12]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d906      	bls.n	8003436 <HAL_RCC_OscConfig+0x22a>
 8003428:	2b05      	cmp	r3, #5
 800342a:	d004      	beq.n	8003436 <HAL_RCC_OscConfig+0x22a>
 800342c:	f240 211b 	movw	r1, #539	; 0x21b
 8003430:	481f      	ldr	r0, [pc, #124]	; (80034b0 <HAL_RCC_OscConfig+0x2a4>)
 8003432:	f7fe faf0 	bl	8001a16 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003436:	4d1f      	ldr	r5, [pc, #124]	; (80034b4 <HAL_RCC_OscConfig+0x2a8>)
 8003438:	69eb      	ldr	r3, [r5, #28]
 800343a:	00d8      	lsls	r0, r3, #3
 800343c:	d424      	bmi.n	8003488 <HAL_RCC_OscConfig+0x27c>
      pwrclkchanged = SET;
 800343e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003440:	69eb      	ldr	r3, [r5, #28]
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003446:	61eb      	str	r3, [r5, #28]
 8003448:	69eb      	ldr	r3, [r5, #28]
 800344a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003452:	4e1c      	ldr	r6, [pc, #112]	; (80034c4 <HAL_RCC_OscConfig+0x2b8>)
 8003454:	6833      	ldr	r3, [r6, #0]
 8003456:	05d9      	lsls	r1, r3, #23
 8003458:	d518      	bpl.n	800348c <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800345a:	68e3      	ldr	r3, [r4, #12]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d133      	bne.n	80034c8 <HAL_RCC_OscConfig+0x2bc>
 8003460:	6a2b      	ldr	r3, [r5, #32]
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003468:	f7fe fe50 	bl	800210c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003470:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003472:	6a2b      	ldr	r3, [r5, #32]
 8003474:	079b      	lsls	r3, r3, #30
 8003476:	d54c      	bpl.n	8003512 <HAL_RCC_OscConfig+0x306>
    if(pwrclkchanged == SET)
 8003478:	2f00      	cmp	r7, #0
 800347a:	f43f aee7 	beq.w	800324c <HAL_RCC_OscConfig+0x40>
      __HAL_RCC_PWR_CLK_DISABLE();
 800347e:	69eb      	ldr	r3, [r5, #28]
 8003480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003484:	61eb      	str	r3, [r5, #28]
 8003486:	e6e1      	b.n	800324c <HAL_RCC_OscConfig+0x40>
    FlagStatus       pwrclkchanged = RESET;
 8003488:	2700      	movs	r7, #0
 800348a:	e7e2      	b.n	8003452 <HAL_RCC_OscConfig+0x246>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800348c:	6833      	ldr	r3, [r6, #0]
 800348e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003492:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003494:	f7fe fe3a 	bl	800210c <HAL_GetTick>
 8003498:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	6833      	ldr	r3, [r6, #0]
 800349c:	05da      	lsls	r2, r3, #23
 800349e:	d4dc      	bmi.n	800345a <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a0:	f7fe fe34 	bl	800210c <HAL_GetTick>
 80034a4:	eba0 0008 	sub.w	r0, r0, r8
 80034a8:	2864      	cmp	r0, #100	; 0x64
 80034aa:	d9f6      	bls.n	800349a <HAL_RCC_OscConfig+0x28e>
 80034ac:	e713      	b.n	80032d6 <HAL_RCC_OscConfig+0xca>
 80034ae:	bf00      	nop
 80034b0:	08005a9d 	.word	0x08005a9d
 80034b4:	40021000 	.word	0x40021000
 80034b8:	42420000 	.word	0x42420000
 80034bc:	42420480 	.word	0x42420480
 80034c0:	20000054 	.word	0x20000054
 80034c4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c8:	b9ab      	cbnz	r3, 80034f6 <HAL_RCC_OscConfig+0x2ea>
 80034ca:	6a2b      	ldr	r3, [r5, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034cc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	622b      	str	r3, [r5, #32]
 80034d6:	6a2b      	ldr	r3, [r5, #32]
 80034d8:	f023 0304 	bic.w	r3, r3, #4
 80034dc:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80034de:	f7fe fe15 	bl	800210c <HAL_GetTick>
 80034e2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e4:	6a2b      	ldr	r3, [r5, #32]
 80034e6:	0798      	lsls	r0, r3, #30
 80034e8:	d5c6      	bpl.n	8003478 <HAL_RCC_OscConfig+0x26c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ea:	f7fe fe0f 	bl	800210c <HAL_GetTick>
 80034ee:	1b80      	subs	r0, r0, r6
 80034f0:	4540      	cmp	r0, r8
 80034f2:	d9f7      	bls.n	80034e4 <HAL_RCC_OscConfig+0x2d8>
 80034f4:	e6ef      	b.n	80032d6 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f6:	2b05      	cmp	r3, #5
 80034f8:	6a2b      	ldr	r3, [r5, #32]
 80034fa:	d103      	bne.n	8003504 <HAL_RCC_OscConfig+0x2f8>
 80034fc:	f043 0304 	orr.w	r3, r3, #4
 8003500:	622b      	str	r3, [r5, #32]
 8003502:	e7ad      	b.n	8003460 <HAL_RCC_OscConfig+0x254>
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	622b      	str	r3, [r5, #32]
 800350a:	6a2b      	ldr	r3, [r5, #32]
 800350c:	f023 0304 	bic.w	r3, r3, #4
 8003510:	e7a9      	b.n	8003466 <HAL_RCC_OscConfig+0x25a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003512:	f7fe fdfb 	bl	800210c <HAL_GetTick>
 8003516:	eba0 0008 	sub.w	r0, r0, r8
 800351a:	42b0      	cmp	r0, r6
 800351c:	d9a9      	bls.n	8003472 <HAL_RCC_OscConfig+0x266>
 800351e:	e6da      	b.n	80032d6 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003520:	4d38      	ldr	r5, [pc, #224]	; (8003604 <HAL_RCC_OscConfig+0x3f8>)
 8003522:	686b      	ldr	r3, [r5, #4]
 8003524:	f003 030c 	and.w	r3, r3, #12
 8003528:	2b08      	cmp	r3, #8
 800352a:	f43f aebd 	beq.w	80032a8 <HAL_RCC_OscConfig+0x9c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800352e:	2a02      	cmp	r2, #2
 8003530:	4e35      	ldr	r6, [pc, #212]	; (8003608 <HAL_RCC_OscConfig+0x3fc>)
 8003532:	d157      	bne.n	80035e4 <HAL_RCC_OscConfig+0x3d8>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003534:	6a23      	ldr	r3, [r4, #32]
 8003536:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800353a:	d004      	beq.n	8003546 <HAL_RCC_OscConfig+0x33a>
 800353c:	f240 21c2 	movw	r1, #706	; 0x2c2
 8003540:	4832      	ldr	r0, [pc, #200]	; (800360c <HAL_RCC_OscConfig+0x400>)
 8003542:	f7fe fa68 	bl	8001a16 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003548:	f433 2240 	bics.w	r2, r3, #786432	; 0xc0000
 800354c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003550:	d010      	beq.n	8003574 <HAL_RCC_OscConfig+0x368>
 8003552:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003556:	d00d      	beq.n	8003574 <HAL_RCC_OscConfig+0x368>
 8003558:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800355c:	d00a      	beq.n	8003574 <HAL_RCC_OscConfig+0x368>
 800355e:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8003562:	d007      	beq.n	8003574 <HAL_RCC_OscConfig+0x368>
 8003564:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003568:	d004      	beq.n	8003574 <HAL_RCC_OscConfig+0x368>
 800356a:	f240 21c3 	movw	r1, #707	; 0x2c3
 800356e:	4827      	ldr	r0, [pc, #156]	; (800360c <HAL_RCC_OscConfig+0x400>)
 8003570:	f7fe fa51 	bl	8001a16 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8003574:	2300      	movs	r3, #0
 8003576:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003578:	f7fe fdc8 	bl	800210c <HAL_GetTick>
 800357c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800357e:	682b      	ldr	r3, [r5, #0]
 8003580:	0199      	lsls	r1, r3, #6
 8003582:	d429      	bmi.n	80035d8 <HAL_RCC_OscConfig+0x3cc>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003584:	6a23      	ldr	r3, [r4, #32]
 8003586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358a:	d10e      	bne.n	80035aa <HAL_RCC_OscConfig+0x39e>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800358c:	68a3      	ldr	r3, [r4, #8]
 800358e:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8003592:	d004      	beq.n	800359e <HAL_RCC_OscConfig+0x392>
 8003594:	f240 21d9 	movw	r1, #729	; 0x2d9
 8003598:	481c      	ldr	r0, [pc, #112]	; (800360c <HAL_RCC_OscConfig+0x400>)
 800359a:	f7fe fa3c 	bl	8001a16 <assert_failed>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800359e:	686b      	ldr	r3, [r5, #4]
 80035a0:	68a2      	ldr	r2, [r4, #8]
 80035a2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80035a6:	4313      	orrs	r3, r2
 80035a8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035aa:	6a23      	ldr	r3, [r4, #32]
 80035ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80035ae:	686a      	ldr	r2, [r5, #4]
 80035b0:	430b      	orrs	r3, r1
 80035b2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80035b6:	4313      	orrs	r3, r2
 80035b8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80035ba:	2301      	movs	r3, #1
 80035bc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80035be:	f7fe fda5 	bl	800210c <HAL_GetTick>
 80035c2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035c4:	682b      	ldr	r3, [r5, #0]
 80035c6:	019a      	lsls	r2, r3, #6
 80035c8:	f53f ae4c 	bmi.w	8003264 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fe fd9e 	bl	800210c <HAL_GetTick>
 80035d0:	1b00      	subs	r0, r0, r4
 80035d2:	2802      	cmp	r0, #2
 80035d4:	d9f6      	bls.n	80035c4 <HAL_RCC_OscConfig+0x3b8>
 80035d6:	e67e      	b.n	80032d6 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d8:	f7fe fd98 	bl	800210c <HAL_GetTick>
 80035dc:	1bc0      	subs	r0, r0, r7
 80035de:	2802      	cmp	r0, #2
 80035e0:	d9cd      	bls.n	800357e <HAL_RCC_OscConfig+0x372>
 80035e2:	e678      	b.n	80032d6 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_PLL_DISABLE();
 80035e4:	2300      	movs	r3, #0
 80035e6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80035e8:	f7fe fd90 	bl	800210c <HAL_GetTick>
 80035ec:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ee:	682b      	ldr	r3, [r5, #0]
 80035f0:	019b      	lsls	r3, r3, #6
 80035f2:	f57f ae37 	bpl.w	8003264 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f6:	f7fe fd89 	bl	800210c <HAL_GetTick>
 80035fa:	1b00      	subs	r0, r0, r4
 80035fc:	2802      	cmp	r0, #2
 80035fe:	d9f6      	bls.n	80035ee <HAL_RCC_OscConfig+0x3e2>
 8003600:	e669      	b.n	80032d6 <HAL_RCC_OscConfig+0xca>
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000
 8003608:	42420060 	.word	0x42420060
 800360c:	08005a9d 	.word	0x08005a9d

08003610 <HAL_RCC_GetSysClockFreq>:
{
 8003610:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003612:	4b19      	ldr	r3, [pc, #100]	; (8003678 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8003614:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003616:	ac02      	add	r4, sp, #8
 8003618:	f103 0510 	add.w	r5, r3, #16
 800361c:	4622      	mov	r2, r4
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	3308      	adds	r3, #8
 8003624:	c203      	stmia	r2!, {r0, r1}
 8003626:	42ab      	cmp	r3, r5
 8003628:	4614      	mov	r4, r2
 800362a:	d1f7      	bne.n	800361c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800362c:	2301      	movs	r3, #1
 800362e:	f88d 3004 	strb.w	r3, [sp, #4]
 8003632:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8003634:	4911      	ldr	r1, [pc, #68]	; (800367c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003636:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800363a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800363c:	f003 020c 	and.w	r2, r3, #12
 8003640:	2a08      	cmp	r2, #8
 8003642:	d117      	bne.n	8003674 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003644:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003648:	a806      	add	r0, sp, #24
 800364a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800364c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800364e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003652:	d50c      	bpl.n	800366e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003654:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003656:	480a      	ldr	r0, [pc, #40]	; (8003680 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003658:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800365c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800365e:	aa06      	add	r2, sp, #24
 8003660:	4413      	add	r3, r2
 8003662:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003666:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800366a:	b007      	add	sp, #28
 800366c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800366e:	4805      	ldr	r0, [pc, #20]	; (8003684 <HAL_RCC_GetSysClockFreq+0x74>)
 8003670:	4350      	muls	r0, r2
 8003672:	e7fa      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8003674:	4802      	ldr	r0, [pc, #8]	; (8003680 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8003676:	e7f8      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x5a>
 8003678:	08005864 	.word	0x08005864
 800367c:	40021000 	.word	0x40021000
 8003680:	007a1200 	.word	0x007a1200
 8003684:	003d0900 	.word	0x003d0900

08003688 <HAL_RCC_ClockConfig>:
{
 8003688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800368c:	460e      	mov	r6, r1
  assert_param(RCC_ClkInitStruct != NULL);
 800368e:	4604      	mov	r4, r0
 8003690:	b920      	cbnz	r0, 800369c <HAL_RCC_ClockConfig+0x14>
 8003692:	f240 312e 	movw	r1, #814	; 0x32e
 8003696:	487f      	ldr	r0, [pc, #508]	; (8003894 <HAL_RCC_ClockConfig+0x20c>)
 8003698:	f7fe f9bd 	bl	8001a16 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	071d      	lsls	r5, r3, #28
 80036a0:	d104      	bne.n	80036ac <HAL_RCC_ClockConfig+0x24>
 80036a2:	f240 312f 	movw	r1, #815	; 0x32f
 80036a6:	487b      	ldr	r0, [pc, #492]	; (8003894 <HAL_RCC_ClockConfig+0x20c>)
 80036a8:	f7fe f9b5 	bl	8001a16 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80036ac:	2e02      	cmp	r6, #2
 80036ae:	d904      	bls.n	80036ba <HAL_RCC_ClockConfig+0x32>
 80036b0:	f44f 714c 	mov.w	r1, #816	; 0x330
 80036b4:	4877      	ldr	r0, [pc, #476]	; (8003894 <HAL_RCC_ClockConfig+0x20c>)
 80036b6:	f7fe f9ae 	bl	8001a16 <assert_failed>
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80036ba:	4a77      	ldr	r2, [pc, #476]	; (8003898 <HAL_RCC_ClockConfig+0x210>)
 80036bc:	6813      	ldr	r3, [r2, #0]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	429e      	cmp	r6, r3
 80036c4:	d83d      	bhi.n	8003742 <HAL_RCC_ClockConfig+0xba>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	0798      	lsls	r0, r3, #30
 80036ca:	d447      	bmi.n	800375c <HAL_RCC_ClockConfig+0xd4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	07da      	lsls	r2, r3, #31
 80036d0:	d470      	bmi.n	80037b4 <HAL_RCC_ClockConfig+0x12c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80036d2:	4a71      	ldr	r2, [pc, #452]	; (8003898 <HAL_RCC_ClockConfig+0x210>)
 80036d4:	6813      	ldr	r3, [r2, #0]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	429e      	cmp	r6, r3
 80036dc:	f0c0 80b5 	bcc.w	800384a <HAL_RCC_ClockConfig+0x1c2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	4d6e      	ldr	r5, [pc, #440]	; (800389c <HAL_RCC_ClockConfig+0x214>)
 80036e4:	f013 0f04 	tst.w	r3, #4
 80036e8:	f040 80bb 	bne.w	8003862 <HAL_RCC_ClockConfig+0x1da>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	071b      	lsls	r3, r3, #28
 80036f0:	d517      	bpl.n	8003722 <HAL_RCC_ClockConfig+0x9a>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80036f2:	6923      	ldr	r3, [r4, #16]
 80036f4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80036f8:	d00c      	beq.n	8003714 <HAL_RCC_ClockConfig+0x8c>
 80036fa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80036fe:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8003702:	d007      	beq.n	8003714 <HAL_RCC_ClockConfig+0x8c>
 8003704:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003708:	d004      	beq.n	8003714 <HAL_RCC_ClockConfig+0x8c>
 800370a:	f44f 716e 	mov.w	r1, #952	; 0x3b8
 800370e:	4861      	ldr	r0, [pc, #388]	; (8003894 <HAL_RCC_ClockConfig+0x20c>)
 8003710:	f7fe f981 	bl	8001a16 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003714:	686b      	ldr	r3, [r5, #4]
 8003716:	6922      	ldr	r2, [r4, #16]
 8003718:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800371c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003720:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003722:	f7ff ff75 	bl	8003610 <HAL_RCC_GetSysClockFreq>
 8003726:	686b      	ldr	r3, [r5, #4]
 8003728:	4a5d      	ldr	r2, [pc, #372]	; (80038a0 <HAL_RCC_ClockConfig+0x218>)
 800372a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800372e:	5cd3      	ldrb	r3, [r2, r3]
 8003730:	40d8      	lsrs	r0, r3
 8003732:	4b5c      	ldr	r3, [pc, #368]	; (80038a4 <HAL_RCC_ClockConfig+0x21c>)
 8003734:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003736:	2000      	movs	r0, #0
 8003738:	f7fe fca6 	bl	8002088 <HAL_InitTick>
  return HAL_OK;
 800373c:	2000      	movs	r0, #0
}
 800373e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	6813      	ldr	r3, [r2, #0]
 8003744:	f023 0307 	bic.w	r3, r3, #7
 8003748:	4333      	orrs	r3, r6
 800374a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800374c:	6813      	ldr	r3, [r2, #0]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	429e      	cmp	r6, r3
 8003754:	d0b7      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
 8003756:	2001      	movs	r0, #1
 8003758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800375c:	4d4f      	ldr	r5, [pc, #316]	; (800389c <HAL_RCC_ClockConfig+0x214>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375e:	f013 0f04 	tst.w	r3, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003762:	bf1e      	ittt	ne
 8003764:	686a      	ldrne	r2, [r5, #4]
 8003766:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800376a:	606a      	strne	r2, [r5, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376c:	0719      	lsls	r1, r3, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800376e:	bf42      	ittt	mi
 8003770:	686b      	ldrmi	r3, [r5, #4]
 8003772:	f443 5360 	orrmi.w	r3, r3, #14336	; 0x3800
 8003776:	606b      	strmi	r3, [r5, #4]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003778:	68a3      	ldr	r3, [r4, #8]
 800377a:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 800377e:	d012      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x11e>
 8003780:	f023 0220 	bic.w	r2, r3, #32
 8003784:	2a90      	cmp	r2, #144	; 0x90
 8003786:	d00e      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x11e>
 8003788:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800378c:	2aa0      	cmp	r2, #160	; 0xa0
 800378e:	d00a      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x11e>
 8003790:	f023 0210 	bic.w	r2, r3, #16
 8003794:	2ac0      	cmp	r2, #192	; 0xc0
 8003796:	d006      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x11e>
 8003798:	2bf0      	cmp	r3, #240	; 0xf0
 800379a:	d004      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x11e>
 800379c:	f240 3156 	movw	r1, #854	; 0x356
 80037a0:	483c      	ldr	r0, [pc, #240]	; (8003894 <HAL_RCC_ClockConfig+0x20c>)
 80037a2:	f7fe f938 	bl	8001a16 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a6:	686b      	ldr	r3, [r5, #4]
 80037a8:	68a2      	ldr	r2, [r4, #8]
 80037aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ae:	4313      	orrs	r3, r2
 80037b0:	606b      	str	r3, [r5, #4]
 80037b2:	e78b      	b.n	80036cc <HAL_RCC_ClockConfig+0x44>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80037b4:	6863      	ldr	r3, [r4, #4]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d904      	bls.n	80037c4 <HAL_RCC_ClockConfig+0x13c>
 80037ba:	f240 315d 	movw	r1, #861	; 0x35d
 80037be:	4835      	ldr	r0, [pc, #212]	; (8003894 <HAL_RCC_ClockConfig+0x20c>)
 80037c0:	f7fe f929 	bl	8001a16 <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c4:	6862      	ldr	r2, [r4, #4]
 80037c6:	4d35      	ldr	r5, [pc, #212]	; (800389c <HAL_RCC_ClockConfig+0x214>)
 80037c8:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ca:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037cc:	d11d      	bne.n	800380a <HAL_RCC_ClockConfig+0x182>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d2:	d0c0      	beq.n	8003756 <HAL_RCC_ClockConfig+0xce>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d4:	686b      	ldr	r3, [r5, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037da:	f023 0303 	bic.w	r3, r3, #3
 80037de:	4313      	orrs	r3, r2
 80037e0:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80037e2:	f7fe fc93 	bl	800210c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e6:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80037e8:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d115      	bne.n	800381a <HAL_RCC_ClockConfig+0x192>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037ee:	686b      	ldr	r3, [r5, #4]
 80037f0:	f003 030c 	and.w	r3, r3, #12
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	f43f af6c 	beq.w	80036d2 <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037fa:	f7fe fc87 	bl	800210c <HAL_GetTick>
 80037fe:	1bc0      	subs	r0, r0, r7
 8003800:	4540      	cmp	r0, r8
 8003802:	d9f4      	bls.n	80037ee <HAL_RCC_ClockConfig+0x166>
          return HAL_TIMEOUT;
 8003804:	2003      	movs	r0, #3
 8003806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800380a:	2a02      	cmp	r2, #2
 800380c:	d102      	bne.n	8003814 <HAL_RCC_ClockConfig+0x18c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003812:	e7de      	b.n	80037d2 <HAL_RCC_ClockConfig+0x14a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003814:	f013 0f02 	tst.w	r3, #2
 8003818:	e7db      	b.n	80037d2 <HAL_RCC_ClockConfig+0x14a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800381a:	2b02      	cmp	r3, #2
 800381c:	d110      	bne.n	8003840 <HAL_RCC_ClockConfig+0x1b8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800381e:	686b      	ldr	r3, [r5, #4]
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	2b08      	cmp	r3, #8
 8003826:	f43f af54 	beq.w	80036d2 <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382a:	f7fe fc6f 	bl	800210c <HAL_GetTick>
 800382e:	1bc0      	subs	r0, r0, r7
 8003830:	4540      	cmp	r0, r8
 8003832:	d9f4      	bls.n	800381e <HAL_RCC_ClockConfig+0x196>
 8003834:	e7e6      	b.n	8003804 <HAL_RCC_ClockConfig+0x17c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003836:	f7fe fc69 	bl	800210c <HAL_GetTick>
 800383a:	1bc0      	subs	r0, r0, r7
 800383c:	4540      	cmp	r0, r8
 800383e:	d8e1      	bhi.n	8003804 <HAL_RCC_ClockConfig+0x17c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003840:	686b      	ldr	r3, [r5, #4]
 8003842:	f013 0f0c 	tst.w	r3, #12
 8003846:	d1f6      	bne.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
 8003848:	e743      	b.n	80036d2 <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384a:	6813      	ldr	r3, [r2, #0]
 800384c:	f023 0307 	bic.w	r3, r3, #7
 8003850:	4333      	orrs	r3, r6
 8003852:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003854:	6813      	ldr	r3, [r2, #0]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	429e      	cmp	r6, r3
 800385c:	f47f af7b 	bne.w	8003756 <HAL_RCC_ClockConfig+0xce>
 8003860:	e73e      	b.n	80036e0 <HAL_RCC_ClockConfig+0x58>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003862:	68e3      	ldr	r3, [r4, #12]
 8003864:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8003868:	d00c      	beq.n	8003884 <HAL_RCC_ClockConfig+0x1fc>
 800386a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800386e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8003872:	d007      	beq.n	8003884 <HAL_RCC_ClockConfig+0x1fc>
 8003874:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003878:	d004      	beq.n	8003884 <HAL_RCC_ClockConfig+0x1fc>
 800387a:	f240 31b1 	movw	r1, #945	; 0x3b1
 800387e:	4805      	ldr	r0, [pc, #20]	; (8003894 <HAL_RCC_ClockConfig+0x20c>)
 8003880:	f7fe f8c9 	bl	8001a16 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003884:	686b      	ldr	r3, [r5, #4]
 8003886:	68e2      	ldr	r2, [r4, #12]
 8003888:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800388c:	4313      	orrs	r3, r2
 800388e:	606b      	str	r3, [r5, #4]
 8003890:	e72c      	b.n	80036ec <HAL_RCC_ClockConfig+0x64>
 8003892:	bf00      	nop
 8003894:	08005a9d 	.word	0x08005a9d
 8003898:	40022000 	.word	0x40022000
 800389c:	40021000 	.word	0x40021000
 80038a0:	08005930 	.word	0x08005930
 80038a4:	20000054 	.word	0x20000054

080038a8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038a8:	4b04      	ldr	r3, [pc, #16]	; (80038bc <HAL_RCC_GetPCLK1Freq+0x14>)
 80038aa:	4a05      	ldr	r2, [pc, #20]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80038b2:	5cd3      	ldrb	r3, [r2, r3]
 80038b4:	4a03      	ldr	r2, [pc, #12]	; (80038c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80038b6:	6810      	ldr	r0, [r2, #0]
}    
 80038b8:	40d8      	lsrs	r0, r3
 80038ba:	4770      	bx	lr
 80038bc:	40021000 	.word	0x40021000
 80038c0:	08005940 	.word	0x08005940
 80038c4:	20000054 	.word	0x20000054

080038c8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <HAL_RCC_GetPCLK2Freq+0x14>)
 80038ca:	4a05      	ldr	r2, [pc, #20]	; (80038e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80038d2:	5cd3      	ldrb	r3, [r2, r3]
 80038d4:	4a03      	ldr	r2, [pc, #12]	; (80038e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80038d6:	6810      	ldr	r0, [r2, #0]
} 
 80038d8:	40d8      	lsrs	r0, r3
 80038da:	4770      	bx	lr
 80038dc:	40021000 	.word	0x40021000
 80038e0:	08005940 	.word	0x08005940
 80038e4:	20000054 	.word	0x20000054

080038e8 <HAL_RCCEx_PeriphCLKConfig>:
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80038e8:	6803      	ldr	r3, [r0, #0]
{
 80038ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80038ee:	f013 0f13 	tst.w	r3, #19
{
 80038f2:	4605      	mov	r5, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80038f4:	d103      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x16>
 80038f6:	217c      	movs	r1, #124	; 0x7c
 80038f8:	4845      	ldr	r0, [pc, #276]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80038fa:	f7fe f88c 	bl	8001a16 <assert_failed>
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038fe:	682b      	ldr	r3, [r5, #0]
 8003900:	07d9      	lsls	r1, r3, #31
 8003902:	d528      	bpl.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003904:	686b      	ldr	r3, [r5, #4]
 8003906:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800390a:	d003      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 800390c:	2182      	movs	r1, #130	; 0x82
 800390e:	4840      	ldr	r0, [pc, #256]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003910:	f7fe f881 	bl	8001a16 <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003914:	4c3f      	ldr	r4, [pc, #252]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8003916:	69e3      	ldr	r3, [r4, #28]
 8003918:	00da      	lsls	r2, r3, #3
 800391a:	d444      	bmi.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800391c:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800391e:	69e3      	ldr	r3, [r4, #28]
 8003920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003924:	61e3      	str	r3, [r4, #28]
 8003926:	69e3      	ldr	r3, [r4, #28]
 8003928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003930:	4e39      	ldr	r6, [pc, #228]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003932:	6833      	ldr	r3, [r6, #0]
 8003934:	05db      	lsls	r3, r3, #23
 8003936:	d538      	bpl.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003938:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800393a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800393e:	d148      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003940:	6a23      	ldr	r3, [r4, #32]
 8003942:	686a      	ldr	r2, [r5, #4]
 8003944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003948:	4313      	orrs	r3, r2
 800394a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800394c:	b11f      	cbz	r7, 8003956 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800394e:	69e3      	ldr	r3, [r4, #28]
 8003950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003954:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003956:	682b      	ldr	r3, [r5, #0]
 8003958:	079b      	lsls	r3, r3, #30
 800395a:	d50e      	bpl.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 800395c:	68ab      	ldr	r3, [r5, #8]
 800395e:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8003962:	d003      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x84>
 8003964:	21c9      	movs	r1, #201	; 0xc9
 8003966:	482a      	ldr	r0, [pc, #168]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003968:	f7fe f855 	bl	8001a16 <assert_failed>
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800396c:	4a29      	ldr	r2, [pc, #164]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800396e:	68a9      	ldr	r1, [r5, #8]
 8003970:	6853      	ldr	r3, [r2, #4]
 8003972:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003976:	430b      	orrs	r3, r1
 8003978:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800397a:	6828      	ldr	r0, [r5, #0]
 800397c:	f010 0010 	ands.w	r0, r0, #16
 8003980:	d024      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8003982:	68eb      	ldr	r3, [r5, #12]
 8003984:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8003988:	d004      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800398a:	f240 1125 	movw	r1, #293	; 0x125
 800398e:	4820      	ldr	r0, [pc, #128]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003990:	f7fe f841 	bl	8001a16 <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003994:	4a1f      	ldr	r2, [pc, #124]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8003996:	68e9      	ldr	r1, [r5, #12]
 8003998:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800399a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800399c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6053      	str	r3, [r2, #4]
 80039a4:	e012      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    FlagStatus       pwrclkchanged = RESET;
 80039a6:	2700      	movs	r7, #0
 80039a8:	e7c2      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x48>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039aa:	6833      	ldr	r3, [r6, #0]
 80039ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80039b2:	f7fe fbab 	bl	800210c <HAL_GetTick>
 80039b6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b8:	6833      	ldr	r3, [r6, #0]
 80039ba:	05d8      	lsls	r0, r3, #23
 80039bc:	d4bc      	bmi.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x50>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039be:	f7fe fba5 	bl	800210c <HAL_GetTick>
 80039c2:	eba0 0008 	sub.w	r0, r0, r8
 80039c6:	2864      	cmp	r0, #100	; 0x64
 80039c8:	d9f6      	bls.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
          return HAL_TIMEOUT;
 80039ca:	2003      	movs	r0, #3
}
 80039cc:	b002      	add	sp, #8
 80039ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039d2:	686a      	ldr	r2, [r5, #4]
 80039d4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80039d8:	4293      	cmp	r3, r2
 80039da:	d0b1      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 80039dc:	2001      	movs	r0, #1
 80039de:	4a0f      	ldr	r2, [pc, #60]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039e0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80039e2:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039e4:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039ea:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80039ec:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039ee:	07d9      	lsls	r1, r3, #31
 80039f0:	d5a6      	bpl.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 80039f2:	f7fe fb8b 	bl	800210c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80039fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fc:	6a23      	ldr	r3, [r4, #32]
 80039fe:	079a      	lsls	r2, r3, #30
 8003a00:	d49e      	bmi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x58>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a02:	f7fe fb83 	bl	800210c <HAL_GetTick>
 8003a06:	1b80      	subs	r0, r0, r6
 8003a08:	4540      	cmp	r0, r8
 8003a0a:	d9f7      	bls.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003a0c:	e7dd      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a0e:	bf00      	nop
 8003a10:	08005ad5 	.word	0x08005ad5
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40007000 	.word	0x40007000
 8003a1c:	42420440 	.word	0x42420440

08003a20 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a20:	6a03      	ldr	r3, [r0, #32]
{
 8003a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2c:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a2e:	f8d0 8004 	ldr.w	r8, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a32:	6986      	ldr	r6, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a34:	680b      	ldr	r3, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a36:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003a3a:	431e      	orrs	r6, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a3c:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003a3e:	f024 0402 	bic.w	r4, r4, #2
  tmpccer |= OC_Config->OCPolarity;
 8003a42:	431c      	orrs	r4, r3

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a44:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <TIM_OC1_SetConfig+0x90>)
{
 8003a46:	4605      	mov	r5, r0
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a48:	4298      	cmp	r0, r3
{
 8003a4a:	460f      	mov	r7, r1
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a4c:	d127      	bne.n	8003a9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8003a4e:	68cb      	ldr	r3, [r1, #12]
 8003a50:	f033 0308 	bics.w	r3, r3, #8
 8003a54:	d004      	beq.n	8003a60 <TIM_OC1_SetConfig+0x40>
 8003a56:	f241 213f 	movw	r1, #4671	; 0x123f
 8003a5a:	4816      	ldr	r0, [pc, #88]	; (8003ab4 <TIM_OC1_SetConfig+0x94>)
 8003a5c:	f7fd ffdb 	bl	8001a16 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a60:	68fb      	ldr	r3, [r7, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a62:	f024 0408 	bic.w	r4, r4, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003a66:	431c      	orrs	r4, r3
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8003a68:	69bb      	ldr	r3, [r7, #24]
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a6a:	f024 0404 	bic.w	r4, r4, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8003a6e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8003a72:	d004      	beq.n	8003a7e <TIM_OC1_SetConfig+0x5e>
 8003a74:	f241 214c 	movw	r1, #4684	; 0x124c
 8003a78:	480e      	ldr	r0, [pc, #56]	; (8003ab4 <TIM_OC1_SetConfig+0x94>)
 8003a7a:	f7fd ffcc 	bl	8001a16 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8003a84:	d004      	beq.n	8003a90 <TIM_OC1_SetConfig+0x70>
 8003a86:	f241 214d 	movw	r1, #4685	; 0x124d
 8003a8a:	480a      	ldr	r0, [pc, #40]	; (8003ab4 <TIM_OC1_SetConfig+0x94>)
 8003a8c:	f7fd ffc3 	bl	8001a16 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a94:	f428 7840 	bic.w	r8, r8, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	ea43 0808 	orr.w	r8, r3, r8

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a9e:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 8003aa0:	f8c5 8004 	str.w	r8, [r5, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003aa4:	61ae      	str	r6, [r5, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003aa6:	636b      	str	r3, [r5, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa8:	622c      	str	r4, [r5, #32]
 8003aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aae:	bf00      	nop
 8003ab0:	40012c00 	.word	0x40012c00
 8003ab4:	08005b10 	.word	0x08005b10

08003ab8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ab8:	6a03      	ldr	r3, [r0, #32]
{
 8003aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003abe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac4:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac6:	f8d0 8004 	ldr.w	r8, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aca:	69c6      	ldr	r6, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003acc:	680b      	ldr	r3, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ace:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003ad2:	431e      	orrs	r6, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ad4:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003ad6:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ada:	ea44 2403 	orr.w	r4, r4, r3, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ade:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <TIM_OC3_SetConfig+0x94>)
{
 8003ae0:	4605      	mov	r5, r0
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ae2:	4298      	cmp	r0, r3
{
 8003ae4:	460f      	mov	r7, r1
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ae6:	d128      	bne.n	8003b3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8003ae8:	68cb      	ldr	r3, [r1, #12]
 8003aea:	f033 0308 	bics.w	r3, r3, #8
 8003aee:	d004      	beq.n	8003afa <TIM_OC3_SetConfig+0x42>
 8003af0:	f241 21d4 	movw	r1, #4820	; 0x12d4
 8003af4:	4816      	ldr	r0, [pc, #88]	; (8003b50 <TIM_OC3_SetConfig+0x98>)
 8003af6:	f7fd ff8e 	bl	8001a16 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003afa:	68fb      	ldr	r3, [r7, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003afc:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b00:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8003b04:	69bb      	ldr	r3, [r7, #24]
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b06:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8003b0a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8003b0e:	d004      	beq.n	8003b1a <TIM_OC3_SetConfig+0x62>
 8003b10:	f241 21e1 	movw	r1, #4833	; 0x12e1
 8003b14:	480e      	ldr	r0, [pc, #56]	; (8003b50 <TIM_OC3_SetConfig+0x98>)
 8003b16:	f7fd ff7e 	bl	8001a16 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8003b20:	d004      	beq.n	8003b2c <TIM_OC3_SetConfig+0x74>
 8003b22:	f241 21e2 	movw	r1, #4834	; 0x12e2
 8003b26:	480a      	ldr	r0, [pc, #40]	; (8003b50 <TIM_OC3_SetConfig+0x98>)
 8003b28:	f7fd ff75 	bl	8001a16 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b2c:	697b      	ldr	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b2e:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b30:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b34:	4313      	orrs	r3, r2
 8003b36:	ea48 1803 	orr.w	r8, r8, r3, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b3a:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 8003b3c:	f8c5 8004 	str.w	r8, [r5, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003b40:	61ee      	str	r6, [r5, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003b42:	63eb      	str	r3, [r5, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b44:	622c      	str	r4, [r5, #32]
 8003b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	08005b10 	.word	0x08005b10

08003b54 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b54:	6a03      	ldr	r3, [r0, #32]
{
 8003b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b5e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b60:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b62:	f8d0 8004 	ldr.w	r8, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b66:	69c7      	ldr	r7, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b68:	680b      	ldr	r3, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b6a:	f427 47e6 	bic.w	r7, r7, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b6e:	ea47 2703 	orr.w	r7, r7, r3, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b72:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003b74:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b78:	ea45 3503 	orr.w	r5, r5, r3, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7c:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <TIM_OC4_SetConfig+0x60>)
{
 8003b7e:	4604      	mov	r4, r0
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003b80:	4298      	cmp	r0, r3
{
 8003b82:	460e      	mov	r6, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003b84:	d10d      	bne.n	8003ba2 <TIM_OC4_SetConfig+0x4e>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8003b86:	694b      	ldr	r3, [r1, #20]
 8003b88:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8003b8c:	d004      	beq.n	8003b98 <TIM_OC4_SetConfig+0x44>
 8003b8e:	f241 311f 	movw	r1, #4895	; 0x131f
 8003b92:	4809      	ldr	r0, [pc, #36]	; (8003bb8 <TIM_OC4_SetConfig+0x64>)
 8003b94:	f7fd ff3f 	bl	8001a16 <assert_failed>

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003b98:	6973      	ldr	r3, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b9a:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003b9e:	ea48 1883 	orr.w	r8, r8, r3, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ba2:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 8003ba4:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003ba8:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003baa:	6423      	str	r3, [r4, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bac:	6225      	str	r5, [r4, #32]
 8003bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	08005b10 	.word	0x08005b10

08003bbc <HAL_TIM_Base_Start>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003bbc:	6803      	ldr	r3, [r0, #0]
 8003bbe:	4a11      	ldr	r2, [pc, #68]	; (8003c04 <HAL_TIM_Base_Start+0x48>)
{
 8003bc0:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003bc2:	4293      	cmp	r3, r2
{
 8003bc4:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003bc6:	d00f      	beq.n	8003be8 <HAL_TIM_Base_Start+0x2c>
 8003bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bcc:	d00c      	beq.n	8003be8 <HAL_TIM_Base_Start+0x2c>
 8003bce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d008      	beq.n	8003be8 <HAL_TIM_Base_Start+0x2c>
 8003bd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_TIM_Base_Start+0x2c>
 8003bde:	f240 1133 	movw	r1, #307	; 0x133
 8003be2:	4809      	ldr	r0, [pc, #36]	; (8003c08 <HAL_TIM_Base_Start+0x4c>)
 8003be4:	f7fd ff17 	bl	8001a16 <assert_failed>
  htim->State= HAL_TIM_STATE_BUSY;
 8003be8:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8003bea:	6822      	ldr	r2, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003bec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8003bf0:	6813      	ldr	r3, [r2, #0]
}
 8003bf2:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003c00:	bd10      	pop	{r4, pc}
 8003c02:	bf00      	nop
 8003c04:	40012c00 	.word	0x40012c00
 8003c08:	08005b10 	.word	0x08005b10

08003c0c <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003c0c:	6803      	ldr	r3, [r0, #0]
 8003c0e:	4a10      	ldr	r2, [pc, #64]	; (8003c50 <HAL_TIM_Base_Start_IT+0x44>)
{
 8003c10:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003c12:	4293      	cmp	r3, r2
{
 8003c14:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003c16:	d00f      	beq.n	8003c38 <HAL_TIM_Base_Start_IT+0x2c>
 8003c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1c:	d00c      	beq.n	8003c38 <HAL_TIM_Base_Start_IT+0x2c>
 8003c1e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d008      	beq.n	8003c38 <HAL_TIM_Base_Start_IT+0x2c>
 8003c26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d004      	beq.n	8003c38 <HAL_TIM_Base_Start_IT+0x2c>
 8003c2e:	f240 1161 	movw	r1, #353	; 0x161
 8003c32:	4808      	ldr	r0, [pc, #32]	; (8003c54 <HAL_TIM_Base_Start_IT+0x48>)
 8003c34:	f7fd feef 	bl	8001a16 <assert_failed>
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c38:	6823      	ldr	r3, [r4, #0]
}
 8003c3a:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	f042 0201 	orr.w	r2, r2, #1
 8003c42:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]
}
 8003c4c:	bd10      	pop	{r4, pc}
 8003c4e:	bf00      	nop
 8003c50:	40012c00 	.word	0x40012c00
 8003c54:	08005b10 	.word	0x08005b10

08003c58 <HAL_TIM_OC_MspInit>:
 8003c58:	4770      	bx	lr

08003c5a <HAL_TIM_PWM_MspInit>:
 8003c5a:	4770      	bx	lr

08003c5c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003c5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003c60:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003c62:	2b01      	cmp	r3, #1
{
 8003c64:	4605      	mov	r5, r0
 8003c66:	460c      	mov	r4, r1
 8003c68:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003c6c:	d02e      	beq.n	8003ccc <HAL_TIM_ConfigClockSource+0x70>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8003c74:	680b      	ldr	r3, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003c76:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7e:	d00c      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x3e>
 8003c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c84:	d009      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x3e>
 8003c86:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8003c8a:	d006      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x3e>
 8003c8c:	2b40      	cmp	r3, #64	; 0x40
 8003c8e:	d004      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x3e>
 8003c90:	f640 7171 	movw	r1, #3953	; 0xf71
 8003c94:	48b5      	ldr	r0, [pc, #724]	; (8003f6c <HAL_TIM_ConfigClockSource+0x310>)
 8003c96:	f7fd febe 	bl	8001a16 <assert_failed>
  tmpsmcr = htim->Instance->SMCR;
 8003c9a:	682b      	ldr	r3, [r5, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c9e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003ca2:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003ca6:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8003ca8:	6822      	ldr	r2, [r4, #0]
 8003caa:	2a40      	cmp	r2, #64	; 0x40
 8003cac:	f000 8162 	beq.w	8003f74 <HAL_TIM_ConfigClockSource+0x318>
 8003cb0:	d82c      	bhi.n	8003d0c <HAL_TIM_ConfigClockSource+0xb0>
 8003cb2:	2a10      	cmp	r2, #16
 8003cb4:	f000 81b9 	beq.w	800402a <HAL_TIM_ConfigClockSource+0x3ce>
 8003cb8:	d809      	bhi.n	8003cce <HAL_TIM_ConfigClockSource+0x72>
 8003cba:	2a00      	cmp	r2, #0
 8003cbc:	f000 819b 	beq.w	8003ff6 <HAL_TIM_ConfigClockSource+0x39a>
  htim->State = HAL_TIM_STATE_READY;
 8003cc0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003cc2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003cc4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003cc8:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
}
 8003ccc:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003cce:	2a20      	cmp	r2, #32
 8003cd0:	f000 81c5 	beq.w	800405e <HAL_TIM_ConfigClockSource+0x402>
 8003cd4:	2a30      	cmp	r2, #48	; 0x30
 8003cd6:	d1f3      	bne.n	8003cc0 <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8003cd8:	4aa5      	ldr	r2, [pc, #660]	; (8003f70 <HAL_TIM_ConfigClockSource+0x314>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00f      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0xa2>
 8003cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce2:	d00c      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0xa2>
 8003ce4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d008      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0xa2>
 8003cec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d004      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0xa2>
 8003cf4:	f640 71f9 	movw	r1, #4089	; 0xff9
 8003cf8:	489c      	ldr	r0, [pc, #624]	; (8003f6c <HAL_TIM_ConfigClockSource+0x310>)
 8003cfa:	f7fd fe8c 	bl	8001a16 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8003cfe:	682a      	ldr	r2, [r5, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8003d00:	6893      	ldr	r3, [r2, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8003d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003d06:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8003d0a:	e0a9      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x204>
  switch (sClockSourceConfig->ClockSource)
 8003d0c:	2a70      	cmp	r2, #112	; 0x70
 8003d0e:	f000 80a9 	beq.w	8003e64 <HAL_TIM_ConfigClockSource+0x208>
 8003d12:	d846      	bhi.n	8003da2 <HAL_TIM_ConfigClockSource+0x146>
 8003d14:	2a50      	cmp	r2, #80	; 0x50
 8003d16:	f000 80e7 	beq.w	8003ee8 <HAL_TIM_ConfigClockSource+0x28c>
 8003d1a:	2a60      	cmp	r2, #96	; 0x60
 8003d1c:	d1d0      	bne.n	8003cc0 <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003d1e:	4a94      	ldr	r2, [pc, #592]	; (8003f70 <HAL_TIM_ConfigClockSource+0x314>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00f      	beq.n	8003d44 <HAL_TIM_ConfigClockSource+0xe8>
 8003d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d28:	d00c      	beq.n	8003d44 <HAL_TIM_ConfigClockSource+0xe8>
 8003d2a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d008      	beq.n	8003d44 <HAL_TIM_ConfigClockSource+0xe8>
 8003d32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d004      	beq.n	8003d44 <HAL_TIM_ConfigClockSource+0xe8>
 8003d3a:	f640 71c3 	movw	r1, #4035	; 0xfc3
 8003d3e:	488b      	ldr	r0, [pc, #556]	; (8003f6c <HAL_TIM_ConfigClockSource+0x310>)
 8003d40:	f7fd fe69 	bl	8001a16 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003d44:	6863      	ldr	r3, [r4, #4]
 8003d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d4a:	d009      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0x104>
 8003d4c:	f033 0202 	bics.w	r2, r3, #2
 8003d50:	d006      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0x104>
 8003d52:	2b0a      	cmp	r3, #10
 8003d54:	d004      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0x104>
 8003d56:	f640 71c6 	movw	r1, #4038	; 0xfc6
 8003d5a:	4884      	ldr	r0, [pc, #528]	; (8003f6c <HAL_TIM_ConfigClockSource+0x310>)
 8003d5c:	f7fd fe5b 	bl	8001a16 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003d60:	68e3      	ldr	r3, [r4, #12]
 8003d62:	2b0f      	cmp	r3, #15
 8003d64:	d904      	bls.n	8003d70 <HAL_TIM_ConfigClockSource+0x114>
 8003d66:	f640 71c7 	movw	r1, #4039	; 0xfc7
 8003d6a:	4880      	ldr	r0, [pc, #512]	; (8003f6c <HAL_TIM_ConfigClockSource+0x310>)
 8003d6c:	f7fd fe53 	bl	8001a16 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	6866      	ldr	r6, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d74:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d76:	68e4      	ldr	r4, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d78:	f020 0010 	bic.w	r0, r0, #16
 8003d7c:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d7e:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003d80:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d82:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d8a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d8e:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003d92:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d94:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003d96:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003d98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003d9c:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8003da0:	e0e2      	b.n	8003f68 <HAL_TIM_ConfigClockSource+0x30c>
  switch (sClockSourceConfig->ClockSource)
 8003da2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003da6:	d044      	beq.n	8003e32 <HAL_TIM_ConfigClockSource+0x1d6>
 8003da8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003dac:	d188      	bne.n	8003cc0 <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8003dae:	4a70      	ldr	r2, [pc, #448]	; (8003f70 <HAL_TIM_ConfigClockSource+0x314>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00f      	beq.n	8003dd4 <HAL_TIM_ConfigClockSource+0x178>
 8003db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db8:	d00c      	beq.n	8003dd4 <HAL_TIM_ConfigClockSource+0x178>
 8003dba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d008      	beq.n	8003dd4 <HAL_TIM_ConfigClockSource+0x178>
 8003dc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d004      	beq.n	8003dd4 <HAL_TIM_ConfigClockSource+0x178>
 8003dca:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8003dce:	4867      	ldr	r0, [pc, #412]	; (8003f6c <HAL_TIM_ConfigClockSource+0x310>)
 8003dd0:	f7fd fe21 	bl	8001a16 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8003dd4:	68a3      	ldr	r3, [r4, #8]
 8003dd6:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8003dda:	d004      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x18a>
 8003ddc:	f640 71a3 	movw	r1, #4003	; 0xfa3
 8003de0:	4862      	ldr	r0, [pc, #392]	; (8003f6c <HAL_TIM_ConfigClockSource+0x310>)
 8003de2:	f7fd fe18 	bl	8001a16 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003de6:	6863      	ldr	r3, [r4, #4]
 8003de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dec:	d009      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x1a6>
 8003dee:	f033 0202 	bics.w	r2, r3, #2
 8003df2:	d006      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x1a6>
 8003df4:	2b0a      	cmp	r3, #10
 8003df6:	d004      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x1a6>
 8003df8:	f640 71a4 	movw	r1, #4004	; 0xfa4
 8003dfc:	485b      	ldr	r0, [pc, #364]	; (8003f6c <HAL_TIM_ConfigClockSource+0x310>)
 8003dfe:	f7fd fe0a 	bl	8001a16 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003e02:	68e3      	ldr	r3, [r4, #12]
 8003e04:	2b0f      	cmp	r3, #15
 8003e06:	d904      	bls.n	8003e12 <HAL_TIM_ConfigClockSource+0x1b6>
 8003e08:	f640 71a5 	movw	r1, #4005	; 0xfa5
 8003e0c:	4857      	ldr	r0, [pc, #348]	; (8003f6c <HAL_TIM_ConfigClockSource+0x310>)
 8003e0e:	f7fd fe02 	bl	8001a16 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8003e12:	682a      	ldr	r2, [r5, #0]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e14:	6860      	ldr	r0, [r4, #4]
 8003e16:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr = TIMx->SMCR;
 8003e18:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e1a:	4303      	orrs	r3, r0
 8003e1c:	68e0      	ldr	r0, [r4, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e1e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e22:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003e26:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e28:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e2a:	6893      	ldr	r3, [r2, #8]
 8003e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e30:	e016      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003e32:	4a4f      	ldr	r2, [pc, #316]	; (8003f70 <HAL_TIM_ConfigClockSource+0x314>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00f      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x1fc>
 8003e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3c:	d00c      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x1fc>
 8003e3e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d008      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x1fc>
 8003e46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x1fc>
 8003e4e:	f640 717d 	movw	r1, #3965	; 0xf7d
 8003e52:	4846      	ldr	r0, [pc, #280]	; (8003f6c <HAL_TIM_ConfigClockSource+0x310>)
 8003e54:	f7fd fddf 	bl	8001a16 <assert_failed>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003e58:	682a      	ldr	r2, [r5, #0]
 8003e5a:	6893      	ldr	r3, [r2, #8]
 8003e5c:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8003e60:	6093      	str	r3, [r2, #8]
 8003e62:	e72d      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8003e64:	4a42      	ldr	r2, [pc, #264]	; (8003f70 <HAL_TIM_ConfigClockSource+0x314>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00f      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x22e>
 8003e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6e:	d00c      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x22e>
 8003e70:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d008      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x22e>
 8003e78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x22e>
 8003e80:	f640 7186 	movw	r1, #3974	; 0xf86
 8003e84:	4839      	ldr	r0, [pc, #228]	; (8003f6c <HAL_TIM_ConfigClockSource+0x310>)
 8003e86:	f7fd fdc6 	bl	8001a16 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8003e8a:	68a3      	ldr	r3, [r4, #8]
 8003e8c:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8003e90:	d004      	beq.n	8003e9c <HAL_TIM_ConfigClockSource+0x240>
 8003e92:	f640 7189 	movw	r1, #3977	; 0xf89
 8003e96:	4835      	ldr	r0, [pc, #212]	; (8003f6c <HAL_TIM_ConfigClockSource+0x310>)
 8003e98:	f7fd fdbd 	bl	8001a16 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003e9c:	6863      	ldr	r3, [r4, #4]
 8003e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea2:	d009      	beq.n	8003eb8 <HAL_TIM_ConfigClockSource+0x25c>
 8003ea4:	f033 0202 	bics.w	r2, r3, #2
 8003ea8:	d006      	beq.n	8003eb8 <HAL_TIM_ConfigClockSource+0x25c>
 8003eaa:	2b0a      	cmp	r3, #10
 8003eac:	d004      	beq.n	8003eb8 <HAL_TIM_ConfigClockSource+0x25c>
 8003eae:	f640 718a 	movw	r1, #3978	; 0xf8a
 8003eb2:	482e      	ldr	r0, [pc, #184]	; (8003f6c <HAL_TIM_ConfigClockSource+0x310>)
 8003eb4:	f7fd fdaf 	bl	8001a16 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003eb8:	68e3      	ldr	r3, [r4, #12]
 8003eba:	2b0f      	cmp	r3, #15
 8003ebc:	d904      	bls.n	8003ec8 <HAL_TIM_ConfigClockSource+0x26c>
 8003ebe:	f640 718b 	movw	r1, #3979	; 0xf8b
 8003ec2:	482a      	ldr	r0, [pc, #168]	; (8003f6c <HAL_TIM_ConfigClockSource+0x310>)
 8003ec4:	f7fd fda7 	bl	8001a16 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8003ec8:	682a      	ldr	r2, [r5, #0]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eca:	6860      	ldr	r0, [r4, #4]
 8003ecc:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr = TIMx->SMCR;
 8003ece:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ed0:	4303      	orrs	r3, r0
 8003ed2:	68e0      	ldr	r0, [r4, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ed8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003edc:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003ede:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003ee0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ee2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ee6:	e7bb      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003ee8:	4a21      	ldr	r2, [pc, #132]	; (8003f70 <HAL_TIM_ConfigClockSource+0x314>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00f      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x2b2>
 8003eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef2:	d00c      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x2b2>
 8003ef4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d008      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x2b2>
 8003efc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d004      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x2b2>
 8003f04:	f640 71b4 	movw	r1, #4020	; 0xfb4
 8003f08:	4818      	ldr	r0, [pc, #96]	; (8003f6c <HAL_TIM_ConfigClockSource+0x310>)
 8003f0a:	f7fd fd84 	bl	8001a16 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003f0e:	6863      	ldr	r3, [r4, #4]
 8003f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f14:	d009      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x2ce>
 8003f16:	f033 0202 	bics.w	r2, r3, #2
 8003f1a:	d006      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x2ce>
 8003f1c:	2b0a      	cmp	r3, #10
 8003f1e:	d004      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x2ce>
 8003f20:	f640 71b7 	movw	r1, #4023	; 0xfb7
 8003f24:	4811      	ldr	r0, [pc, #68]	; (8003f6c <HAL_TIM_ConfigClockSource+0x310>)
 8003f26:	f7fd fd76 	bl	8001a16 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003f2a:	68e3      	ldr	r3, [r4, #12]
 8003f2c:	2b0f      	cmp	r3, #15
 8003f2e:	d904      	bls.n	8003f3a <HAL_TIM_ConfigClockSource+0x2de>
 8003f30:	f640 71b8 	movw	r1, #4024	; 0xfb8
 8003f34:	480d      	ldr	r0, [pc, #52]	; (8003f6c <HAL_TIM_ConfigClockSource+0x310>)
 8003f36:	f7fd fd6e 	bl	8001a16 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3a:	682b      	ldr	r3, [r5, #0]
 8003f3c:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 8003f3e:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f40:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f42:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f44:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f48:	f024 0401 	bic.w	r4, r4, #1
 8003f4c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f4e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8003f50:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f52:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f56:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f5c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003f5e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003f60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003f64:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8003f68:	609a      	str	r2, [r3, #8]
 8003f6a:	e6a9      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x64>
 8003f6c:	08005b10 	.word	0x08005b10
 8003f70:	40012c00 	.word	0x40012c00
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003f74:	4a47      	ldr	r2, [pc, #284]	; (8004094 <HAL_TIM_ConfigClockSource+0x438>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00f      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x33e>
 8003f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7e:	d00c      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x33e>
 8003f80:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d008      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x33e>
 8003f88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d004      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x33e>
 8003f90:	f640 71d2 	movw	r1, #4050	; 0xfd2
 8003f94:	4840      	ldr	r0, [pc, #256]	; (8004098 <HAL_TIM_ConfigClockSource+0x43c>)
 8003f96:	f7fd fd3e 	bl	8001a16 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003f9a:	6863      	ldr	r3, [r4, #4]
 8003f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa0:	d009      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0x35a>
 8003fa2:	f033 0202 	bics.w	r2, r3, #2
 8003fa6:	d006      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0x35a>
 8003fa8:	2b0a      	cmp	r3, #10
 8003faa:	d004      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0x35a>
 8003fac:	f640 71d5 	movw	r1, #4053	; 0xfd5
 8003fb0:	4839      	ldr	r0, [pc, #228]	; (8004098 <HAL_TIM_ConfigClockSource+0x43c>)
 8003fb2:	f7fd fd30 	bl	8001a16 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003fb6:	68e3      	ldr	r3, [r4, #12]
 8003fb8:	2b0f      	cmp	r3, #15
 8003fba:	d904      	bls.n	8003fc6 <HAL_TIM_ConfigClockSource+0x36a>
 8003fbc:	f640 71d6 	movw	r1, #4054	; 0xfd6
 8003fc0:	4835      	ldr	r0, [pc, #212]	; (8004098 <HAL_TIM_ConfigClockSource+0x43c>)
 8003fc2:	f7fd fd28 	bl	8001a16 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc6:	682b      	ldr	r3, [r5, #0]
 8003fc8:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 8003fca:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fcc:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fce:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fd0:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fd4:	f024 0401 	bic.w	r4, r4, #1
 8003fd8:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fda:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8003fdc:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fde:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fe2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003fea:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003fec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003ff0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8003ff4:	e7b8      	b.n	8003f68 <HAL_TIM_ConfigClockSource+0x30c>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8003ff6:	4a27      	ldr	r2, [pc, #156]	; (8004094 <HAL_TIM_ConfigClockSource+0x438>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00f      	beq.n	800401c <HAL_TIM_ConfigClockSource+0x3c0>
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d00c      	beq.n	800401c <HAL_TIM_ConfigClockSource+0x3c0>
 8004002:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004006:	4293      	cmp	r3, r2
 8004008:	d008      	beq.n	800401c <HAL_TIM_ConfigClockSource+0x3c0>
 800400a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <HAL_TIM_ConfigClockSource+0x3c0>
 8004012:	f640 71e1 	movw	r1, #4065	; 0xfe1
 8004016:	4820      	ldr	r0, [pc, #128]	; (8004098 <HAL_TIM_ConfigClockSource+0x43c>)
 8004018:	f7fd fcfd 	bl	8001a16 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800401c:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 800401e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004024:	f043 0307 	orr.w	r3, r3, #7
 8004028:	e71a      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800402a:	4a1a      	ldr	r2, [pc, #104]	; (8004094 <HAL_TIM_ConfigClockSource+0x438>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00f      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0x3f4>
 8004030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004034:	d00c      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0x3f4>
 8004036:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800403a:	4293      	cmp	r3, r2
 800403c:	d008      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0x3f4>
 800403e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004042:	4293      	cmp	r3, r2
 8004044:	d004      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0x3f4>
 8004046:	f640 71e9 	movw	r1, #4073	; 0xfe9
 800404a:	4813      	ldr	r0, [pc, #76]	; (8004098 <HAL_TIM_ConfigClockSource+0x43c>)
 800404c:	f7fd fce3 	bl	8001a16 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8004050:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 8004052:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004058:	f043 0317 	orr.w	r3, r3, #23
 800405c:	e700      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800405e:	4a0d      	ldr	r2, [pc, #52]	; (8004094 <HAL_TIM_ConfigClockSource+0x438>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00f      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0x428>
 8004064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004068:	d00c      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0x428>
 800406a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800406e:	4293      	cmp	r3, r2
 8004070:	d008      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0x428>
 8004072:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0x428>
 800407a:	f640 71f1 	movw	r1, #4081	; 0xff1
 800407e:	4806      	ldr	r0, [pc, #24]	; (8004098 <HAL_TIM_ConfigClockSource+0x43c>)
 8004080:	f7fd fcc9 	bl	8001a16 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8004084:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 8004086:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800408c:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8004090:	e6e6      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x204>
 8004092:	bf00      	nop
 8004094:	40012c00 	.word	0x40012c00
 8004098:	08005b10 	.word	0x08005b10

0800409c <HAL_TIM_PeriodElapsedCallback>:
 800409c:	4770      	bx	lr

0800409e <HAL_TIM_OC_DelayElapsedCallback>:
 800409e:	4770      	bx	lr

080040a0 <HAL_TIM_IC_CaptureCallback>:
 80040a0:	4770      	bx	lr

080040a2 <HAL_TIM_PWM_PulseFinishedCallback>:
 80040a2:	4770      	bx	lr

080040a4 <HAL_TIM_TriggerCallback>:
 80040a4:	4770      	bx	lr

080040a6 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040a6:	6803      	ldr	r3, [r0, #0]
{
 80040a8:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040aa:	691a      	ldr	r2, [r3, #16]
{
 80040ac:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040ae:	0791      	lsls	r1, r2, #30
 80040b0:	d50e      	bpl.n	80040d0 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	0792      	lsls	r2, r2, #30
 80040b6:	d50b      	bpl.n	80040d0 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040b8:	f06f 0202 	mvn.w	r2, #2
 80040bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040be:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040c0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040c2:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040c4:	079b      	lsls	r3, r3, #30
 80040c6:	d077      	beq.n	80041b8 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80040c8:	f7ff ffea 	bl	80040a0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040cc:	2300      	movs	r3, #0
 80040ce:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	0750      	lsls	r0, r2, #29
 80040d6:	d510      	bpl.n	80040fa <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	0751      	lsls	r1, r2, #29
 80040dc:	d50d      	bpl.n	80040fa <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040de:	f06f 0204 	mvn.w	r2, #4
 80040e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040e4:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040e6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040e8:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040ea:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80040ee:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040f0:	d068      	beq.n	80041c4 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80040f2:	f7ff ffd5 	bl	80040a0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f6:	2300      	movs	r3, #0
 80040f8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	0712      	lsls	r2, r2, #28
 8004100:	d50f      	bpl.n	8004122 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	0710      	lsls	r0, r2, #28
 8004106:	d50c      	bpl.n	8004122 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004108:	f06f 0208 	mvn.w	r2, #8
 800410c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800410e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004110:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004112:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004114:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004116:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004118:	d05a      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800411a:	f7ff ffc1 	bl	80040a0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411e:	2300      	movs	r3, #0
 8004120:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	06d2      	lsls	r2, r2, #27
 8004128:	d510      	bpl.n	800414c <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	06d0      	lsls	r0, r2, #27
 800412e:	d50d      	bpl.n	800414c <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004130:	f06f 0210 	mvn.w	r2, #16
 8004134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004136:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004138:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800413a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800413c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004140:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004142:	d04b      	beq.n	80041dc <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8004144:	f7ff ffac 	bl	80040a0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004148:	2300      	movs	r3, #0
 800414a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	07d1      	lsls	r1, r2, #31
 8004152:	d508      	bpl.n	8004166 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	07d2      	lsls	r2, r2, #31
 8004158:	d505      	bpl.n	8004166 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800415a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800415e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004160:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004162:	f7ff ff9b 	bl	800409c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	0610      	lsls	r0, r2, #24
 800416c:	d508      	bpl.n	8004180 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	0611      	lsls	r1, r2, #24
 8004172:	d505      	bpl.n	8004180 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004174:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004178:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800417a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800417c:	f000 fc15 	bl	80049aa <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	0652      	lsls	r2, r2, #25
 8004186:	d508      	bpl.n	800419a <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	0650      	lsls	r0, r2, #25
 800418c:	d505      	bpl.n	800419a <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800418e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8004192:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004194:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004196:	f7ff ff85 	bl	80040a4 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	0691      	lsls	r1, r2, #26
 80041a0:	d522      	bpl.n	80041e8 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	0692      	lsls	r2, r2, #26
 80041a6:	d51f      	bpl.n	80041e8 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041a8:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80041ac:	4620      	mov	r0, r4
}
 80041ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80041b4:	f000 bbf8 	b.w	80049a8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b8:	f7ff ff71 	bl	800409e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041bc:	4620      	mov	r0, r4
 80041be:	f7ff ff70 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
 80041c2:	e783      	b.n	80040cc <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c4:	f7ff ff6b 	bl	800409e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c8:	4620      	mov	r0, r4
 80041ca:	f7ff ff6a 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
 80041ce:	e792      	b.n	80040f6 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d0:	f7ff ff65 	bl	800409e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d4:	4620      	mov	r0, r4
 80041d6:	f7ff ff64 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
 80041da:	e7a0      	b.n	800411e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041dc:	f7ff ff5f 	bl	800409e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e0:	4620      	mov	r0, r4
 80041e2:	f7ff ff5e 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
 80041e6:	e7af      	b.n	8004148 <HAL_TIM_IRQHandler+0xa2>
 80041e8:	bd10      	pop	{r4, pc}
	...

080041ec <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041ec:	4a1a      	ldr	r2, [pc, #104]	; (8004258 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80041ee:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f0:	4290      	cmp	r0, r2
 80041f2:	d00a      	beq.n	800420a <TIM_Base_SetConfig+0x1e>
 80041f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80041f8:	d007      	beq.n	800420a <TIM_Base_SetConfig+0x1e>
 80041fa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80041fe:	4290      	cmp	r0, r2
 8004200:	d003      	beq.n	800420a <TIM_Base_SetConfig+0x1e>
 8004202:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004206:	4290      	cmp	r0, r2
 8004208:	d115      	bne.n	8004236 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800420a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800420c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004210:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004212:	4a11      	ldr	r2, [pc, #68]	; (8004258 <TIM_Base_SetConfig+0x6c>)
 8004214:	4290      	cmp	r0, r2
 8004216:	d00a      	beq.n	800422e <TIM_Base_SetConfig+0x42>
 8004218:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800421c:	d007      	beq.n	800422e <TIM_Base_SetConfig+0x42>
 800421e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004222:	4290      	cmp	r0, r2
 8004224:	d003      	beq.n	800422e <TIM_Base_SetConfig+0x42>
 8004226:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800422a:	4290      	cmp	r0, r2
 800422c:	d103      	bne.n	8004236 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800422e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004234:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8004236:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8004238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800423c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800423e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004240:	688b      	ldr	r3, [r1, #8]
 8004242:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004244:	680b      	ldr	r3, [r1, #0]
 8004246:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004248:	4b03      	ldr	r3, [pc, #12]	; (8004258 <TIM_Base_SetConfig+0x6c>)
 800424a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800424c:	bf04      	itt	eq
 800424e:	690b      	ldreq	r3, [r1, #16]
 8004250:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004252:	2301      	movs	r3, #1
 8004254:	6143      	str	r3, [r0, #20]
 8004256:	4770      	bx	lr
 8004258:	40012c00 	.word	0x40012c00

0800425c <HAL_TIM_Base_Init>:
{
 800425c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800425e:	4604      	mov	r4, r0
 8004260:	2800      	cmp	r0, #0
 8004262:	d049      	beq.n	80042f8 <HAL_TIM_Base_Init+0x9c>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004264:	6803      	ldr	r3, [r0, #0]
 8004266:	4a25      	ldr	r2, [pc, #148]	; (80042fc <HAL_TIM_Base_Init+0xa0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00e      	beq.n	800428a <HAL_TIM_Base_Init+0x2e>
 800426c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004270:	d00b      	beq.n	800428a <HAL_TIM_Base_Init+0x2e>
 8004272:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004276:	4293      	cmp	r3, r2
 8004278:	d007      	beq.n	800428a <HAL_TIM_Base_Init+0x2e>
 800427a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <HAL_TIM_Base_Init+0x2e>
 8004282:	21d9      	movs	r1, #217	; 0xd9
 8004284:	481e      	ldr	r0, [pc, #120]	; (8004300 <HAL_TIM_Base_Init+0xa4>)
 8004286:	f7fd fbc6 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800428a:	68a3      	ldr	r3, [r4, #8]
 800428c:	f033 0210 	bics.w	r2, r3, #16
 8004290:	d009      	beq.n	80042a6 <HAL_TIM_Base_Init+0x4a>
 8004292:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004296:	2a20      	cmp	r2, #32
 8004298:	d005      	beq.n	80042a6 <HAL_TIM_Base_Init+0x4a>
 800429a:	2b40      	cmp	r3, #64	; 0x40
 800429c:	d003      	beq.n	80042a6 <HAL_TIM_Base_Init+0x4a>
 800429e:	21da      	movs	r1, #218	; 0xda
 80042a0:	4817      	ldr	r0, [pc, #92]	; (8004300 <HAL_TIM_Base_Init+0xa4>)
 80042a2:	f7fd fbb8 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80042a6:	6923      	ldr	r3, [r4, #16]
 80042a8:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80042ac:	d006      	beq.n	80042bc <HAL_TIM_Base_Init+0x60>
 80042ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042b2:	d003      	beq.n	80042bc <HAL_TIM_Base_Init+0x60>
 80042b4:	21db      	movs	r1, #219	; 0xdb
 80042b6:	4812      	ldr	r0, [pc, #72]	; (8004300 <HAL_TIM_Base_Init+0xa4>)
 80042b8:	f7fd fbad 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80042bc:	69a3      	ldr	r3, [r4, #24]
 80042be:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80042c2:	d003      	beq.n	80042cc <HAL_TIM_Base_Init+0x70>
 80042c4:	21dc      	movs	r1, #220	; 0xdc
 80042c6:	480e      	ldr	r0, [pc, #56]	; (8004300 <HAL_TIM_Base_Init+0xa4>)
 80042c8:	f7fd fba5 	bl	8001a16 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80042cc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80042d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80042d4:	b923      	cbnz	r3, 80042e0 <HAL_TIM_Base_Init+0x84>
    htim->Lock = HAL_UNLOCKED;
 80042d6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80042da:	4620      	mov	r0, r4
 80042dc:	f7fd fcb0 	bl	8001c40 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80042e0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80042e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e8:	1d21      	adds	r1, r4, #4
 80042ea:	f7ff ff7f 	bl	80041ec <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80042ee:	2301      	movs	r3, #1
  return HAL_OK;
 80042f0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80042f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80042f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80042f8:	2001      	movs	r0, #1
}
 80042fa:	bd10      	pop	{r4, pc}
 80042fc:	40012c00 	.word	0x40012c00
 8004300:	08005b10 	.word	0x08005b10

08004304 <HAL_TIM_OC_Init>:
{
 8004304:	b510      	push	{r4, lr}
  if(htim == NULL)
 8004306:	4604      	mov	r4, r0
 8004308:	2800      	cmp	r0, #0
 800430a:	d04d      	beq.n	80043a8 <HAL_TIM_OC_Init+0xa4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800430c:	6803      	ldr	r3, [r0, #0]
 800430e:	4a27      	ldr	r2, [pc, #156]	; (80043ac <HAL_TIM_OC_Init+0xa8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00f      	beq.n	8004334 <HAL_TIM_OC_Init+0x30>
 8004314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004318:	d00c      	beq.n	8004334 <HAL_TIM_OC_Init+0x30>
 800431a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800431e:	4293      	cmp	r3, r2
 8004320:	d008      	beq.n	8004334 <HAL_TIM_OC_Init+0x30>
 8004322:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <HAL_TIM_OC_Init+0x30>
 800432a:	f240 11f1 	movw	r1, #497	; 0x1f1
 800432e:	4820      	ldr	r0, [pc, #128]	; (80043b0 <HAL_TIM_OC_Init+0xac>)
 8004330:	f7fd fb71 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004334:	68a3      	ldr	r3, [r4, #8]
 8004336:	f033 0210 	bics.w	r2, r3, #16
 800433a:	d00a      	beq.n	8004352 <HAL_TIM_OC_Init+0x4e>
 800433c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004340:	2a20      	cmp	r2, #32
 8004342:	d006      	beq.n	8004352 <HAL_TIM_OC_Init+0x4e>
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	d004      	beq.n	8004352 <HAL_TIM_OC_Init+0x4e>
 8004348:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800434c:	4818      	ldr	r0, [pc, #96]	; (80043b0 <HAL_TIM_OC_Init+0xac>)
 800434e:	f7fd fb62 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004352:	6923      	ldr	r3, [r4, #16]
 8004354:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8004358:	d007      	beq.n	800436a <HAL_TIM_OC_Init+0x66>
 800435a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800435e:	d004      	beq.n	800436a <HAL_TIM_OC_Init+0x66>
 8004360:	f240 11f3 	movw	r1, #499	; 0x1f3
 8004364:	4812      	ldr	r0, [pc, #72]	; (80043b0 <HAL_TIM_OC_Init+0xac>)
 8004366:	f7fd fb56 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800436a:	69a3      	ldr	r3, [r4, #24]
 800436c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8004370:	d004      	beq.n	800437c <HAL_TIM_OC_Init+0x78>
 8004372:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004376:	480e      	ldr	r0, [pc, #56]	; (80043b0 <HAL_TIM_OC_Init+0xac>)
 8004378:	f7fd fb4d 	bl	8001a16 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 800437c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004380:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004384:	b923      	cbnz	r3, 8004390 <HAL_TIM_OC_Init+0x8c>
    htim->Lock = HAL_UNLOCKED;
 8004386:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800438a:	4620      	mov	r0, r4
 800438c:	f7ff fc64 	bl	8003c58 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8004390:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004392:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8004394:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004398:	1d21      	adds	r1, r4, #4
 800439a:	f7ff ff27 	bl	80041ec <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800439e:	2301      	movs	r3, #1
  return HAL_OK;
 80043a0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80043a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80043a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80043a8:	2001      	movs	r0, #1
}
 80043aa:	bd10      	pop	{r4, pc}
 80043ac:	40012c00 	.word	0x40012c00
 80043b0:	08005b10 	.word	0x08005b10

080043b4 <HAL_TIM_PWM_Init>:
{
 80043b4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80043b6:	4604      	mov	r4, r0
 80043b8:	2800      	cmp	r0, #0
 80043ba:	d04d      	beq.n	8004458 <HAL_TIM_PWM_Init+0xa4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80043bc:	6803      	ldr	r3, [r0, #0]
 80043be:	4a27      	ldr	r2, [pc, #156]	; (800445c <HAL_TIM_PWM_Init+0xa8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00f      	beq.n	80043e4 <HAL_TIM_PWM_Init+0x30>
 80043c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c8:	d00c      	beq.n	80043e4 <HAL_TIM_PWM_Init+0x30>
 80043ca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d008      	beq.n	80043e4 <HAL_TIM_PWM_Init+0x30>
 80043d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d004      	beq.n	80043e4 <HAL_TIM_PWM_Init+0x30>
 80043da:	f240 31ee 	movw	r1, #1006	; 0x3ee
 80043de:	4820      	ldr	r0, [pc, #128]	; (8004460 <HAL_TIM_PWM_Init+0xac>)
 80043e0:	f7fd fb19 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80043e4:	68a3      	ldr	r3, [r4, #8]
 80043e6:	f033 0210 	bics.w	r2, r3, #16
 80043ea:	d00a      	beq.n	8004402 <HAL_TIM_PWM_Init+0x4e>
 80043ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80043f0:	2a20      	cmp	r2, #32
 80043f2:	d006      	beq.n	8004402 <HAL_TIM_PWM_Init+0x4e>
 80043f4:	2b40      	cmp	r3, #64	; 0x40
 80043f6:	d004      	beq.n	8004402 <HAL_TIM_PWM_Init+0x4e>
 80043f8:	f240 31ef 	movw	r1, #1007	; 0x3ef
 80043fc:	4818      	ldr	r0, [pc, #96]	; (8004460 <HAL_TIM_PWM_Init+0xac>)
 80043fe:	f7fd fb0a 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004402:	6923      	ldr	r3, [r4, #16]
 8004404:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8004408:	d007      	beq.n	800441a <HAL_TIM_PWM_Init+0x66>
 800440a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800440e:	d004      	beq.n	800441a <HAL_TIM_PWM_Init+0x66>
 8004410:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8004414:	4812      	ldr	r0, [pc, #72]	; (8004460 <HAL_TIM_PWM_Init+0xac>)
 8004416:	f7fd fafe 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800441a:	69a3      	ldr	r3, [r4, #24]
 800441c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8004420:	d004      	beq.n	800442c <HAL_TIM_PWM_Init+0x78>
 8004422:	f240 31f1 	movw	r1, #1009	; 0x3f1
 8004426:	480e      	ldr	r0, [pc, #56]	; (8004460 <HAL_TIM_PWM_Init+0xac>)
 8004428:	f7fd faf5 	bl	8001a16 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 800442c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004430:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004434:	b923      	cbnz	r3, 8004440 <HAL_TIM_PWM_Init+0x8c>
    htim->Lock = HAL_UNLOCKED;
 8004436:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800443a:	4620      	mov	r0, r4
 800443c:	f7ff fc0d 	bl	8003c5a <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8004440:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004442:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8004444:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004448:	1d21      	adds	r1, r4, #4
 800444a:	f7ff fecf 	bl	80041ec <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800444e:	2301      	movs	r3, #1
  return HAL_OK;
 8004450:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8004452:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004456:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004458:	2001      	movs	r0, #1
}
 800445a:	bd10      	pop	{r4, pc}
 800445c:	40012c00 	.word	0x40012c00
 8004460:	08005b10 	.word	0x08005b10

08004464 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004464:	6a03      	ldr	r3, [r0, #32]
{
 8004466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800446a:	f023 0310 	bic.w	r3, r3, #16
 800446e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004470:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004472:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004476:	6986      	ldr	r6, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004478:	680b      	ldr	r3, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800447a:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800447e:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004482:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004484:	f024 0420 	bic.w	r4, r4, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004488:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800448c:	4b1a      	ldr	r3, [pc, #104]	; (80044f8 <TIM_OC2_SetConfig+0x94>)
{
 800448e:	4605      	mov	r5, r0
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004490:	4298      	cmp	r0, r3
{
 8004492:	460f      	mov	r7, r1
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004494:	d128      	bne.n	80044e8 <TIM_OC2_SetConfig+0x84>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004496:	68cb      	ldr	r3, [r1, #12]
 8004498:	f033 0308 	bics.w	r3, r3, #8
 800449c:	d004      	beq.n	80044a8 <TIM_OC2_SetConfig+0x44>
 800449e:	f241 2189 	movw	r1, #4745	; 0x1289
 80044a2:	4816      	ldr	r0, [pc, #88]	; (80044fc <TIM_OC2_SetConfig+0x98>)
 80044a4:	f7fd fab7 	bl	8001a16 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044a8:	68fb      	ldr	r3, [r7, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80044aa:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044ae:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80044b2:	69bb      	ldr	r3, [r7, #24]
    tmpccer &= ~TIM_CCER_CC2NE;
 80044b4:	f024 0440 	bic.w	r4, r4, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80044b8:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80044bc:	d004      	beq.n	80044c8 <TIM_OC2_SetConfig+0x64>
 80044be:	f241 2197 	movw	r1, #4759	; 0x1297
 80044c2:	480e      	ldr	r0, [pc, #56]	; (80044fc <TIM_OC2_SetConfig+0x98>)
 80044c4:	f7fd faa7 	bl	8001a16 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 80044ce:	d004      	beq.n	80044da <TIM_OC2_SetConfig+0x76>
 80044d0:	f241 2198 	movw	r1, #4760	; 0x1298
 80044d4:	4809      	ldr	r0, [pc, #36]	; (80044fc <TIM_OC2_SetConfig+0x98>)
 80044d6:	f7fd fa9e 	bl	8001a16 <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80044da:	697b      	ldr	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80044dc:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044de:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80044e2:	4313      	orrs	r3, r2
 80044e4:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80044e8:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 80044ea:	f8c5 8004 	str.w	r8, [r5, #4]
  TIMx->CCMR1 = tmpccmrx;
 80044ee:	61ae      	str	r6, [r5, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80044f0:	63ab      	str	r3, [r5, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80044f2:	622c      	str	r4, [r5, #32]
 80044f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044f8:	40012c00 	.word	0x40012c00
 80044fc:	08005b10 	.word	0x08005b10

08004500 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8004500:	2a18      	cmp	r2, #24
{
 8004502:	b570      	push	{r4, r5, r6, lr}
 8004504:	4604      	mov	r4, r0
 8004506:	460d      	mov	r5, r1
 8004508:	4616      	mov	r6, r2
  assert_param(IS_TIM_CHANNELS(Channel));
 800450a:	d803      	bhi.n	8004514 <HAL_TIM_OC_ConfigChannel+0x14>
 800450c:	4b4e      	ldr	r3, [pc, #312]	; (8004648 <HAL_TIM_OC_ConfigChannel+0x148>)
 800450e:	40d3      	lsrs	r3, r2
 8004510:	07db      	lsls	r3, r3, #31
 8004512:	d404      	bmi.n	800451e <HAL_TIM_OC_ConfigChannel+0x1e>
 8004514:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 8004518:	484c      	ldr	r0, [pc, #304]	; (800464c <HAL_TIM_OC_ConfigChannel+0x14c>)
 800451a:	f7fd fa7c 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800451e:	682b      	ldr	r3, [r5, #0]
 8004520:	f023 0210 	bic.w	r2, r3, #16
 8004524:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8004528:	d006      	beq.n	8004538 <HAL_TIM_OC_ConfigChannel+0x38>
 800452a:	2a40      	cmp	r2, #64	; 0x40
 800452c:	d004      	beq.n	8004538 <HAL_TIM_OC_ConfigChannel+0x38>
 800452e:	f640 3191 	movw	r1, #2961	; 0xb91
 8004532:	4846      	ldr	r0, [pc, #280]	; (800464c <HAL_TIM_OC_ConfigChannel+0x14c>)
 8004534:	f7fd fa6f 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8004538:	68ab      	ldr	r3, [r5, #8]
 800453a:	f033 0302 	bics.w	r3, r3, #2
 800453e:	d004      	beq.n	800454a <HAL_TIM_OC_ConfigChannel+0x4a>
 8004540:	f640 3192 	movw	r1, #2962	; 0xb92
 8004544:	4841      	ldr	r0, [pc, #260]	; (800464c <HAL_TIM_OC_ConfigChannel+0x14c>)
 8004546:	f7fd fa66 	bl	8001a16 <assert_failed>
  __HAL_LOCK(htim);
 800454a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800454e:	2002      	movs	r0, #2
 8004550:	2b01      	cmp	r3, #1
 8004552:	d02d      	beq.n	80045b0 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004554:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800455a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800455e:	2e0c      	cmp	r6, #12
 8004560:	d820      	bhi.n	80045a4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8004562:	e8df f006 	tbb	[pc, r6]
 8004566:	1f07      	.short	0x1f07
 8004568:	1f261f1f 	.word	0x1f261f1f
 800456c:	1f3f1f1f 	.word	0x1f3f1f1f
 8004570:	1f1f      	.short	0x1f1f
 8004572:	58          	.byte	0x58
 8004573:	00          	.byte	0x00
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	4a36      	ldr	r2, [pc, #216]	; (8004650 <HAL_TIM_OC_ConfigChannel+0x150>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00f      	beq.n	800459c <HAL_TIM_OC_ConfigChannel+0x9c>
 800457c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004580:	d00c      	beq.n	800459c <HAL_TIM_OC_ConfigChannel+0x9c>
 8004582:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004586:	4293      	cmp	r3, r2
 8004588:	d008      	beq.n	800459c <HAL_TIM_OC_ConfigChannel+0x9c>
 800458a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800458e:	4293      	cmp	r3, r2
 8004590:	d004      	beq.n	800459c <HAL_TIM_OC_ConfigChannel+0x9c>
 8004592:	f640 319d 	movw	r1, #2973	; 0xb9d
 8004596:	482d      	ldr	r0, [pc, #180]	; (800464c <HAL_TIM_OC_ConfigChannel+0x14c>)
 8004598:	f7fd fa3d 	bl	8001a16 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800459c:	4629      	mov	r1, r5
 800459e:	6820      	ldr	r0, [r4, #0]
 80045a0:	f7ff fa3e 	bl	8003a20 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80045a6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80045ac:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80045b0:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	4a26      	ldr	r2, [pc, #152]	; (8004650 <HAL_TIM_OC_ConfigChannel+0x150>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00f      	beq.n	80045da <HAL_TIM_OC_ConfigChannel+0xda>
 80045ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045be:	d00c      	beq.n	80045da <HAL_TIM_OC_ConfigChannel+0xda>
 80045c0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d008      	beq.n	80045da <HAL_TIM_OC_ConfigChannel+0xda>
 80045c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <HAL_TIM_OC_ConfigChannel+0xda>
 80045d0:	f640 31a5 	movw	r1, #2981	; 0xba5
 80045d4:	481d      	ldr	r0, [pc, #116]	; (800464c <HAL_TIM_OC_ConfigChannel+0x14c>)
 80045d6:	f7fd fa1e 	bl	8001a16 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045da:	4629      	mov	r1, r5
 80045dc:	6820      	ldr	r0, [r4, #0]
 80045de:	f7ff ff41 	bl	8004464 <TIM_OC2_SetConfig>
    break;
 80045e2:	e7df      	b.n	80045a4 <HAL_TIM_OC_ConfigChannel+0xa4>
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	4a1a      	ldr	r2, [pc, #104]	; (8004650 <HAL_TIM_OC_ConfigChannel+0x150>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00f      	beq.n	800460c <HAL_TIM_OC_ConfigChannel+0x10c>
 80045ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f0:	d00c      	beq.n	800460c <HAL_TIM_OC_ConfigChannel+0x10c>
 80045f2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d008      	beq.n	800460c <HAL_TIM_OC_ConfigChannel+0x10c>
 80045fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045fe:	4293      	cmp	r3, r2
 8004600:	d004      	beq.n	800460c <HAL_TIM_OC_ConfigChannel+0x10c>
 8004602:	f640 31ad 	movw	r1, #2989	; 0xbad
 8004606:	4811      	ldr	r0, [pc, #68]	; (800464c <HAL_TIM_OC_ConfigChannel+0x14c>)
 8004608:	f7fd fa05 	bl	8001a16 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800460c:	4629      	mov	r1, r5
 800460e:	6820      	ldr	r0, [r4, #0]
 8004610:	f7ff fa52 	bl	8003ab8 <TIM_OC3_SetConfig>
    break;
 8004614:	e7c6      	b.n	80045a4 <HAL_TIM_OC_ConfigChannel+0xa4>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	4a0d      	ldr	r2, [pc, #52]	; (8004650 <HAL_TIM_OC_ConfigChannel+0x150>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d00f      	beq.n	800463e <HAL_TIM_OC_ConfigChannel+0x13e>
 800461e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004622:	d00c      	beq.n	800463e <HAL_TIM_OC_ConfigChannel+0x13e>
 8004624:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004628:	4293      	cmp	r3, r2
 800462a:	d008      	beq.n	800463e <HAL_TIM_OC_ConfigChannel+0x13e>
 800462c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004630:	4293      	cmp	r3, r2
 8004632:	d004      	beq.n	800463e <HAL_TIM_OC_ConfigChannel+0x13e>
 8004634:	f640 31b5 	movw	r1, #2997	; 0xbb5
 8004638:	4804      	ldr	r0, [pc, #16]	; (800464c <HAL_TIM_OC_ConfigChannel+0x14c>)
 800463a:	f7fd f9ec 	bl	8001a16 <assert_failed>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 800463e:	4629      	mov	r1, r5
 8004640:	6820      	ldr	r0, [r4, #0]
 8004642:	f7ff fa87 	bl	8003b54 <TIM_OC4_SetConfig>
    break;
 8004646:	e7ad      	b.n	80045a4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8004648:	01001111 	.word	0x01001111
 800464c:	08005b10 	.word	0x08005b10
 8004650:	40012c00 	.word	0x40012c00

08004654 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004654:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004658:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800465a:	2b01      	cmp	r3, #1
{
 800465c:	4604      	mov	r4, r0
 800465e:	460d      	mov	r5, r1
 8004660:	4616      	mov	r6, r2
  __HAL_LOCK(htim);
 8004662:	f000 80d6 	beq.w	8004812 <HAL_TIM_PWM_ConfigChannel+0x1be>
 8004666:	2301      	movs	r3, #1
  assert_param(IS_TIM_CHANNELS(Channel));
 8004668:	2a18      	cmp	r2, #24
  __HAL_LOCK(htim);
 800466a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
 800466e:	d803      	bhi.n	8004678 <HAL_TIM_PWM_ConfigChannel+0x24>
 8004670:	4b69      	ldr	r3, [pc, #420]	; (8004818 <HAL_TIM_PWM_ConfigChannel+0x1c4>)
 8004672:	40d3      	lsrs	r3, r2
 8004674:	07db      	lsls	r3, r3, #31
 8004676:	d404      	bmi.n	8004682 <HAL_TIM_PWM_ConfigChannel+0x2e>
 8004678:	f640 4137 	movw	r1, #3127	; 0xc37
 800467c:	4867      	ldr	r0, [pc, #412]	; (800481c <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 800467e:	f7fd f9ca 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8004682:	682b      	ldr	r3, [r5, #0]
 8004684:	f023 0310 	bic.w	r3, r3, #16
 8004688:	2b60      	cmp	r3, #96	; 0x60
 800468a:	d004      	beq.n	8004696 <HAL_TIM_PWM_ConfigChannel+0x42>
 800468c:	f640 4138 	movw	r1, #3128	; 0xc38
 8004690:	4862      	ldr	r0, [pc, #392]	; (800481c <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8004692:	f7fd f9c0 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8004696:	68ab      	ldr	r3, [r5, #8]
 8004698:	f033 0302 	bics.w	r3, r3, #2
 800469c:	d004      	beq.n	80046a8 <HAL_TIM_PWM_ConfigChannel+0x54>
 800469e:	f640 4139 	movw	r1, #3129	; 0xc39
 80046a2:	485e      	ldr	r0, [pc, #376]	; (800481c <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 80046a4:	f7fd f9b7 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80046a8:	692b      	ldr	r3, [r5, #16]
 80046aa:	f033 0304 	bics.w	r3, r3, #4
 80046ae:	d004      	beq.n	80046ba <HAL_TIM_PWM_ConfigChannel+0x66>
 80046b0:	f640 413a 	movw	r1, #3130	; 0xc3a
 80046b4:	4859      	ldr	r0, [pc, #356]	; (800481c <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 80046b6:	f7fd f9ae 	bl	8001a16 <assert_failed>
  htim->State = HAL_TIM_STATE_BUSY;
 80046ba:	2302      	movs	r3, #2
 80046bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 80046c0:	2e0c      	cmp	r6, #12
 80046c2:	d82d      	bhi.n	8004720 <HAL_TIM_PWM_ConfigChannel+0xcc>
 80046c4:	e8df f006 	tbb	[pc, r6]
 80046c8:	2c2c2c07 	.word	0x2c2c2c07
 80046cc:	2c2c2c33 	.word	0x2c2c2c33
 80046d0:	2c2c2c59 	.word	0x2c2c2c59
 80046d4:	7f          	.byte	0x7f
 80046d5:	00          	.byte	0x00
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	4a51      	ldr	r2, [pc, #324]	; (8004820 <HAL_TIM_PWM_ConfigChannel+0x1cc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00f      	beq.n	80046fe <HAL_TIM_PWM_ConfigChannel+0xaa>
 80046de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e2:	d00c      	beq.n	80046fe <HAL_TIM_PWM_ConfigChannel+0xaa>
 80046e4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d008      	beq.n	80046fe <HAL_TIM_PWM_ConfigChannel+0xaa>
 80046ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d004      	beq.n	80046fe <HAL_TIM_PWM_ConfigChannel+0xaa>
 80046f4:	f640 4142 	movw	r1, #3138	; 0xc42
 80046f8:	4848      	ldr	r0, [pc, #288]	; (800481c <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 80046fa:	f7fd f98c 	bl	8001a16 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046fe:	4629      	mov	r1, r5
 8004700:	6820      	ldr	r0, [r4, #0]
 8004702:	f7ff f98d 	bl	8003a20 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004706:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004708:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800470a:	699a      	ldr	r2, [r3, #24]
 800470c:	f042 0208 	orr.w	r2, r2, #8
 8004710:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004712:	699a      	ldr	r2, [r3, #24]
 8004714:	f022 0204 	bic.w	r2, r2, #4
 8004718:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800471a:	699a      	ldr	r2, [r3, #24]
 800471c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800471e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8004720:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004722:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004724:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004728:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800472c:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	4a3b      	ldr	r2, [pc, #236]	; (8004820 <HAL_TIM_PWM_ConfigChannel+0x1cc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00f      	beq.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x102>
 8004736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473a:	d00c      	beq.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x102>
 800473c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004740:	4293      	cmp	r3, r2
 8004742:	d008      	beq.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x102>
 8004744:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x102>
 800474c:	f640 4151 	movw	r1, #3153	; 0xc51
 8004750:	4832      	ldr	r0, [pc, #200]	; (800481c <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8004752:	f7fd f960 	bl	8001a16 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004756:	4629      	mov	r1, r5
 8004758:	6820      	ldr	r0, [r4, #0]
 800475a:	f7ff fe83 	bl	8004464 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800475e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8004760:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004762:	699a      	ldr	r2, [r3, #24]
 8004764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004768:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800476a:	699a      	ldr	r2, [r3, #24]
 800476c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004770:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8004772:	699a      	ldr	r2, [r3, #24]
 8004774:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004778:	e7d1      	b.n	800471e <HAL_TIM_PWM_ConfigChannel+0xca>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	4a28      	ldr	r2, [pc, #160]	; (8004820 <HAL_TIM_PWM_ConfigChannel+0x1cc>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00f      	beq.n	80047a2 <HAL_TIM_PWM_ConfigChannel+0x14e>
 8004782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004786:	d00c      	beq.n	80047a2 <HAL_TIM_PWM_ConfigChannel+0x14e>
 8004788:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800478c:	4293      	cmp	r3, r2
 800478e:	d008      	beq.n	80047a2 <HAL_TIM_PWM_ConfigChannel+0x14e>
 8004790:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004794:	4293      	cmp	r3, r2
 8004796:	d004      	beq.n	80047a2 <HAL_TIM_PWM_ConfigChannel+0x14e>
 8004798:	f44f 6146 	mov.w	r1, #3168	; 0xc60
 800479c:	481f      	ldr	r0, [pc, #124]	; (800481c <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 800479e:	f7fd f93a 	bl	8001a16 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047a2:	4629      	mov	r1, r5
 80047a4:	6820      	ldr	r0, [r4, #0]
 80047a6:	f7ff f987 	bl	8003ab8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047aa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047ac:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	f042 0208 	orr.w	r2, r2, #8
 80047b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	f022 0204 	bic.w	r2, r2, #4
 80047bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80047c2:	61da      	str	r2, [r3, #28]
    break;
 80047c4:	e7ac      	b.n	8004720 <HAL_TIM_PWM_ConfigChannel+0xcc>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	4a15      	ldr	r2, [pc, #84]	; (8004820 <HAL_TIM_PWM_ConfigChannel+0x1cc>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00f      	beq.n	80047ee <HAL_TIM_PWM_ConfigChannel+0x19a>
 80047ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d2:	d00c      	beq.n	80047ee <HAL_TIM_PWM_ConfigChannel+0x19a>
 80047d4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80047d8:	4293      	cmp	r3, r2
 80047da:	d008      	beq.n	80047ee <HAL_TIM_PWM_ConfigChannel+0x19a>
 80047dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <HAL_TIM_PWM_ConfigChannel+0x19a>
 80047e4:	f640 416f 	movw	r1, #3183	; 0xc6f
 80047e8:	480c      	ldr	r0, [pc, #48]	; (800481c <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 80047ea:	f7fd f914 	bl	8001a16 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ee:	4629      	mov	r1, r5
 80047f0:	6820      	ldr	r0, [r4, #0]
 80047f2:	f7ff f9af 	bl	8003b54 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047f6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80047f8:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004802:	69da      	ldr	r2, [r3, #28]
 8004804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800480a:	69da      	ldr	r2, [r3, #28]
 800480c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004810:	e7d7      	b.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x16e>
  __HAL_LOCK(htim);
 8004812:	2002      	movs	r0, #2
}
 8004814:	bd70      	pop	{r4, r5, r6, pc}
 8004816:	bf00      	nop
 8004818:	01001111 	.word	0x01001111
 800481c:	08005b10 	.word	0x08005b10
 8004820:	40012c00 	.word	0x40012c00

08004824 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004824:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpbdtr = 0U;

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8004826:	6802      	ldr	r2, [r0, #0]
 8004828:	4b36      	ldr	r3, [pc, #216]	; (8004904 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>)
{
 800482a:	4604      	mov	r4, r0
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800482c:	429a      	cmp	r2, r3
{
 800482e:	460d      	mov	r5, r1
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8004830:	d004      	beq.n	800483c <HAL_TIMEx_ConfigBreakDeadTime+0x18>
 8004832:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8004836:	4834      	ldr	r0, [pc, #208]	; (8004908 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 8004838:	f7fd f8ed 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8004842:	d004      	beq.n	800484e <HAL_TIMEx_ConfigBreakDeadTime+0x2a>
 8004844:	f240 6109 	movw	r1, #1545	; 0x609
 8004848:	482f      	ldr	r0, [pc, #188]	; (8004908 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 800484a:	f7fd f8e4 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800484e:	686b      	ldr	r3, [r5, #4]
 8004850:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8004854:	d004      	beq.n	8004860 <HAL_TIMEx_ConfigBreakDeadTime+0x3c>
 8004856:	f240 610a 	movw	r1, #1546	; 0x60a
 800485a:	482b      	ldr	r0, [pc, #172]	; (8004908 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 800485c:	f7fd f8db 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8004860:	68ab      	ldr	r3, [r5, #8]
 8004862:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8004866:	d004      	beq.n	8004872 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8004868:	f240 610b 	movw	r1, #1547	; 0x60b
 800486c:	4826      	ldr	r0, [pc, #152]	; (8004908 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 800486e:	f7fd f8d2 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8004872:	68eb      	ldr	r3, [r5, #12]
 8004874:	2bff      	cmp	r3, #255	; 0xff
 8004876:	d904      	bls.n	8004882 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 8004878:	f240 610c 	movw	r1, #1548	; 0x60c
 800487c:	4822      	ldr	r0, [pc, #136]	; (8004908 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 800487e:	f7fd f8ca 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8004882:	692b      	ldr	r3, [r5, #16]
 8004884:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8004888:	d004      	beq.n	8004894 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 800488a:	f240 610d 	movw	r1, #1549	; 0x60d
 800488e:	481e      	ldr	r0, [pc, #120]	; (8004908 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 8004890:	f7fd f8c1 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8004894:	696b      	ldr	r3, [r5, #20]
 8004896:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800489a:	d004      	beq.n	80048a6 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800489c:	f240 610e 	movw	r1, #1550	; 0x60e
 80048a0:	4819      	ldr	r0, [pc, #100]	; (8004908 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 80048a2:	f7fd f8b8 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80048a6:	69ab      	ldr	r3, [r5, #24]
 80048a8:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 80048ac:	d004      	beq.n	80048b8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80048ae:	f240 610f 	movw	r1, #1551	; 0x60f
 80048b2:	4815      	ldr	r0, [pc, #84]	; (8004908 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>)
 80048b4:	f7fd f8af 	bl	8001a16 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80048b8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d01e      	beq.n	80048fe <HAL_TIMEx_ConfigBreakDeadTime+0xda>
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80048c0:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048c2:	68eb      	ldr	r3, [r5, #12]
 80048c4:	68aa      	ldr	r2, [r5, #8]
 80048c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ca:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048cc:	686a      	ldr	r2, [r5, #4]
 80048ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048d2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048d4:	682a      	ldr	r2, [r5, #0]
 80048d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048da:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048dc:	692a      	ldr	r2, [r5, #16]
 80048de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048e2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048e4:	696a      	ldr	r2, [r5, #20]
 80048e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048ea:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048ec:	69aa      	ldr	r2, [r5, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80048f2:	4313      	orrs	r3, r2
  htim->Instance->BDTR = tmpbdtr;
 80048f4:	6822      	ldr	r2, [r4, #0]
 80048f6:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80048f8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 80048fc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80048fe:	2002      	movs	r0, #2
}
 8004900:	bd38      	pop	{r3, r4, r5, pc}
 8004902:	bf00      	nop
 8004904:	40012c00 	.word	0x40012c00
 8004908:	08005b48 	.word	0x08005b48

0800490c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800490c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800490e:	4a24      	ldr	r2, [pc, #144]	; (80049a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8004910:	6803      	ldr	r3, [r0, #0]
{
 8004912:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8004914:	4293      	cmp	r3, r2
{
 8004916:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8004918:	d00f      	beq.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 800491a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491e:	d00c      	beq.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8004920:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004924:	4293      	cmp	r3, r2
 8004926:	d008      	beq.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8004928:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800492c:	4293      	cmp	r3, r2
 800492e:	d004      	beq.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8004930:	f44f 61c7 	mov.w	r1, #1592	; 0x638
 8004934:	481b      	ldr	r0, [pc, #108]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8004936:	f7fd f86e 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800493a:	682b      	ldr	r3, [r5, #0]
 800493c:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8004940:	d006      	beq.n	8004950 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004942:	2b40      	cmp	r3, #64	; 0x40
 8004944:	d004      	beq.n	8004950 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004946:	f240 6139 	movw	r1, #1593	; 0x639
 800494a:	4816      	ldr	r0, [pc, #88]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800494c:	f7fd f863 	bl	8001a16 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8004950:	686b      	ldr	r3, [r5, #4]
 8004952:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8004956:	d004      	beq.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004958:	f240 613a 	movw	r1, #1594	; 0x63a
 800495c:	4811      	ldr	r0, [pc, #68]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800495e:	f7fd f85a 	bl	8001a16 <assert_failed>

  __HAL_LOCK(htim);
 8004962:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004966:	2002      	movs	r0, #2
 8004968:	2b01      	cmp	r3, #1
 800496a:	d018      	beq.n	800499e <HAL_TIMEx_MasterConfigSynchronization+0x92>

  htim->State = HAL_TIM_STATE_BUSY;

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800496c:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800496e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004972:	685a      	ldr	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8004974:	6829      	ldr	r1, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004976:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800497a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800497c:	685a      	ldr	r2, [r3, #4]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800497e:	2000      	movs	r0, #0
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8004980:	430a      	orrs	r2, r1
 8004982:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8004984:	689a      	ldr	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004986:	6869      	ldr	r1, [r5, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8004988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800498c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	430a      	orrs	r2, r1
 8004992:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004994:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004996:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800499a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
}
 800499e:	bd38      	pop	{r3, r4, r5, pc}
 80049a0:	40012c00 	.word	0x40012c00
 80049a4:	08005b48 	.word	0x08005b48

080049a8 <HAL_TIMEx_CommutationCallback>:
 80049a8:	4770      	bx	lr

080049aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049aa:	4770      	bx	lr

080049ac <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ac:	6803      	ldr	r3, [r0, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049b4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b6:	695a      	ldr	r2, [r3, #20]
 80049b8:	f022 0201 	bic.w	r2, r2, #1
 80049bc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049be:	2320      	movs	r3, #32
 80049c0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80049c4:	4770      	bx	lr
	...

080049c8 <UART_SetConfig>:
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg = 0x00U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80049c8:	6842      	ldr	r2, [r0, #4]
 80049ca:	4b65      	ldr	r3, [pc, #404]	; (8004b60 <UART_SetConfig+0x198>)
{
 80049cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80049d0:	429a      	cmp	r2, r3
{
 80049d2:	4681      	mov	r9, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80049d4:	d904      	bls.n	80049e0 <UART_SetConfig+0x18>
 80049d6:	f640 11a7 	movw	r1, #2471	; 0x9a7
 80049da:	4862      	ldr	r0, [pc, #392]	; (8004b64 <UART_SetConfig+0x19c>)
 80049dc:	f7fd f81b 	bl	8001a16 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80049e0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80049e4:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80049e8:	d004      	beq.n	80049f4 <UART_SetConfig+0x2c>
 80049ea:	f640 11a8 	movw	r1, #2472	; 0x9a8
 80049ee:	485d      	ldr	r0, [pc, #372]	; (8004b64 <UART_SetConfig+0x19c>)
 80049f0:	f7fd f811 	bl	8001a16 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80049f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80049f8:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80049fc:	d007      	beq.n	8004a0e <UART_SetConfig+0x46>
 80049fe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a02:	d004      	beq.n	8004a0e <UART_SetConfig+0x46>
 8004a04:	f640 11a9 	movw	r1, #2473	; 0x9a9
 8004a08:	4856      	ldr	r0, [pc, #344]	; (8004b64 <UART_SetConfig+0x19c>)
 8004a0a:	f7fd f804 	bl	8001a16 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004a0e:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 8004a12:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004a16:	4213      	tst	r3, r2
 8004a18:	d100      	bne.n	8004a1c <UART_SetConfig+0x54>
 8004a1a:	b923      	cbnz	r3, 8004a26 <UART_SetConfig+0x5e>
 8004a1c:	f640 11aa 	movw	r1, #2474	; 0x9aa
 8004a20:	4850      	ldr	r0, [pc, #320]	; (8004b64 <UART_SetConfig+0x19c>)
 8004a22:	f7fc fff8 	bl	8001a16 <assert_failed>

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a26:	f8d9 5000 	ldr.w	r5, [r9]
 8004a2a:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8004a2e:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a30:	f8d9 1010 	ldr.w	r1, [r9, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a3c:	f8d9 3008 	ldr.w	r3, [r9, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8004a40:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a42:	430b      	orrs	r3, r1
 8004a44:	f8d9 1014 	ldr.w	r1, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8004a48:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8004a4c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a50:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a56:	696b      	ldr	r3, [r5, #20]
 8004a58:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8004a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a60:	4313      	orrs	r3, r2
 8004a62:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004a64:	4b40      	ldr	r3, [pc, #256]	; (8004b68 <UART_SetConfig+0x1a0>)
 8004a66:	2419      	movs	r4, #25
 8004a68:	429d      	cmp	r5, r3
 8004a6a:	d146      	bne.n	8004afa <UART_SetConfig+0x132>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a6c:	f7fe ff2c 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 8004a70:	fb04 f300 	mul.w	r3, r4, r0
 8004a74:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8004a78:	f04f 0864 	mov.w	r8, #100	; 0x64
 8004a7c:	00b6      	lsls	r6, r6, #2
 8004a7e:	fbb3 f3f6 	udiv	r3, r3, r6
 8004a82:	fbb3 f3f8 	udiv	r3, r3, r8
 8004a86:	011e      	lsls	r6, r3, #4
 8004a88:	f7fe ff1e 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 8004a8c:	4360      	muls	r0, r4
 8004a8e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	fbb0 f7f3 	udiv	r7, r0, r3
 8004a98:	f7fe ff16 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 8004a9c:	4360      	muls	r0, r4
 8004a9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aa8:	fbb3 f3f8 	udiv	r3, r3, r8
 8004aac:	fb08 7313 	mls	r3, r8, r3, r7
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	3332      	adds	r3, #50	; 0x32
 8004ab4:	fbb3 f3f8 	udiv	r3, r3, r8
 8004ab8:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8004abc:	f7fe ff04 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 8004ac0:	4360      	muls	r0, r4
 8004ac2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8004ac6:	0092      	lsls	r2, r2, #2
 8004ac8:	fbb0 faf2 	udiv	sl, r0, r2
 8004acc:	f7fe fefc 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004ad0:	4360      	muls	r0, r4
 8004ad2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004adc:	fbb3 f3f8 	udiv	r3, r3, r8
 8004ae0:	fb08 a313 	mls	r3, r8, r3, sl
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	3332      	adds	r3, #50	; 0x32
 8004ae8:	fbb3 f3f8 	udiv	r3, r3, r8
 8004aec:	f003 030f 	and.w	r3, r3, #15
 8004af0:	433b      	orrs	r3, r7
 8004af2:	4433      	add	r3, r6
 8004af4:	60ab      	str	r3, [r5, #8]
 8004af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afa:	f7fe fed5 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8004afe:	fb04 f300 	mul.w	r3, r4, r0
 8004b02:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8004b06:	f04f 0864 	mov.w	r8, #100	; 0x64
 8004b0a:	00b6      	lsls	r6, r6, #2
 8004b0c:	fbb3 f3f6 	udiv	r3, r3, r6
 8004b10:	fbb3 f3f8 	udiv	r3, r3, r8
 8004b14:	011e      	lsls	r6, r3, #4
 8004b16:	f7fe fec7 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8004b1a:	4360      	muls	r0, r4
 8004b1c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	fbb0 f7f3 	udiv	r7, r0, r3
 8004b26:	f7fe febf 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8004b2a:	4360      	muls	r0, r4
 8004b2c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b36:	fbb3 f3f8 	udiv	r3, r3, r8
 8004b3a:	fb08 7313 	mls	r3, r8, r3, r7
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	3332      	adds	r3, #50	; 0x32
 8004b42:	fbb3 f3f8 	udiv	r3, r3, r8
 8004b46:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8004b4a:	f7fe fead 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8004b4e:	4360      	muls	r0, r4
 8004b50:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8004b54:	0092      	lsls	r2, r2, #2
 8004b56:	fbb0 faf2 	udiv	sl, r0, r2
 8004b5a:	f7fe fea5 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8004b5e:	e7b7      	b.n	8004ad0 <UART_SetConfig+0x108>
 8004b60:	0044aa20 	.word	0x0044aa20
 8004b64:	08005b83 	.word	0x08005b83
 8004b68:	40013800 	.word	0x40013800

08004b6c <HAL_UART_Init>:
{
 8004b6c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8004b6e:	4604      	mov	r4, r0
 8004b70:	2800      	cmp	r0, #0
 8004b72:	d05b      	beq.n	8004c2c <HAL_UART_Init+0xc0>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004b74:	6981      	ldr	r1, [r0, #24]
 8004b76:	6803      	ldr	r3, [r0, #0]
 8004b78:	4a2d      	ldr	r2, [pc, #180]	; (8004c30 <HAL_UART_Init+0xc4>)
 8004b7a:	2900      	cmp	r1, #0
 8004b7c:	d04a      	beq.n	8004c14 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00c      	beq.n	8004b9c <HAL_UART_Init+0x30>
 8004b82:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d008      	beq.n	8004b9c <HAL_UART_Init+0x30>
 8004b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d004      	beq.n	8004b9c <HAL_UART_Init+0x30>
 8004b92:	f240 110f 	movw	r1, #271	; 0x10f
 8004b96:	4827      	ldr	r0, [pc, #156]	; (8004c34 <HAL_UART_Init+0xc8>)
 8004b98:	f7fc ff3d 	bl	8001a16 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004b9c:	69a3      	ldr	r3, [r4, #24]
 8004b9e:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8004ba2:	d004      	beq.n	8004bae <HAL_UART_Init+0x42>
 8004ba4:	f44f 7188 	mov.w	r1, #272	; 0x110
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004ba8:	4822      	ldr	r0, [pc, #136]	; (8004c34 <HAL_UART_Init+0xc8>)
 8004baa:	f7fc ff34 	bl	8001a16 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004bae:	68a3      	ldr	r3, [r4, #8]
 8004bb0:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8004bb4:	d004      	beq.n	8004bc0 <HAL_UART_Init+0x54>
 8004bb6:	f44f 718b 	mov.w	r1, #278	; 0x116
 8004bba:	481e      	ldr	r0, [pc, #120]	; (8004c34 <HAL_UART_Init+0xc8>)
 8004bbc:	f7fc ff2b 	bl	8001a16 <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 8004bc0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8004bc4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004bc8:	b923      	cbnz	r3, 8004bd4 <HAL_UART_Init+0x68>
    huart->Lock = HAL_UNLOCKED;
 8004bca:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f7fd f9f4 	bl	8001fbc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004bd4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004bd6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004bd8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004bdc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8004bde:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8004be0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004be4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004be6:	f7ff feef 	bl	80049c8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bea:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bec:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bf6:	695a      	ldr	r2, [r3, #20]
 8004bf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bfc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c04:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8004c06:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c08:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8004c0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8004c0e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8004c12:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d0ca      	beq.n	8004bae <HAL_UART_Init+0x42>
 8004c18:	4a07      	ldr	r2, [pc, #28]	; (8004c38 <HAL_UART_Init+0xcc>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d0c7      	beq.n	8004bae <HAL_UART_Init+0x42>
 8004c1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d0c3      	beq.n	8004bae <HAL_UART_Init+0x42>
 8004c26:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004c2a:	e7bd      	b.n	8004ba8 <HAL_UART_Init+0x3c>
    return HAL_ERROR;
 8004c2c:	2001      	movs	r0, #1
}
 8004c2e:	bd10      	pop	{r4, pc}
 8004c30:	40013800 	.word	0x40013800
 8004c34:	08005b83 	.word	0x08005b83
 8004c38:	40004400 	.word	0x40004400

08004c3c <HAL_UART_Transmit_DMA>:
{
 8004c3c:	b538      	push	{r3, r4, r5, lr}
 8004c3e:	4604      	mov	r4, r0
 8004c40:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8004c42:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8004c46:	2a20      	cmp	r2, #32
 8004c48:	d12a      	bne.n	8004ca0 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL) || (Size == 0U))
 8004c4a:	b339      	cbz	r1, 8004c9c <HAL_UART_Transmit_DMA+0x60>
 8004c4c:	b333      	cbz	r3, 8004c9c <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8004c4e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8004c52:	2a01      	cmp	r2, #1
 8004c54:	d024      	beq.n	8004ca0 <HAL_UART_Transmit_DMA+0x64>
 8004c56:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c58:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8004c5a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c5e:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8004c60:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004c62:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c64:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c66:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004c6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ca4 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8004c6c:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8004c6e:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004c70:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004c72:	4a0d      	ldr	r2, [pc, #52]	; (8004ca8 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferAbortCallback = NULL;
 8004c74:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004c76:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004c78:	4a0c      	ldr	r2, [pc, #48]	; (8004cac <HAL_UART_Transmit_DMA+0x70>)
 8004c7a:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004c7c:	6822      	ldr	r2, [r4, #0]
 8004c7e:	3204      	adds	r2, #4
 8004c80:	f7fd fee2 	bl	8002a48 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004c84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c88:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8004c8a:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004c8c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004c8e:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8004c90:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004c94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c98:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8004c9a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8004ca0:	2002      	movs	r0, #2
}
 8004ca2:	bd38      	pop	{r3, r4, r5, pc}
 8004ca4:	08004cb1 	.word	0x08004cb1
 8004ca8:	08004cdf 	.word	0x08004cdf
 8004cac:	08004d69 	.word	0x08004d69

08004cb0 <UART_DMATransmitCplt>:
{
 8004cb0:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cb2:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cb4:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f013 0320 	ands.w	r3, r3, #32
 8004cbc:	d10a      	bne.n	8004cd4 <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 8004cbe:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004cc0:	6813      	ldr	r3, [r2, #0]
 8004cc2:	695a      	ldr	r2, [r3, #20]
 8004cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cc8:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd0:	60da      	str	r2, [r3, #12]
 8004cd2:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	f7fc f965 	bl	8000fa4 <HAL_UART_TxCpltCallback>
 8004cda:	bd08      	pop	{r3, pc}

08004cdc <HAL_UART_TxHalfCpltCallback>:
 8004cdc:	4770      	bx	lr

08004cde <UART_DMATxHalfCplt>:
{
 8004cde:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8004ce0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004ce2:	f7ff fffb 	bl	8004cdc <HAL_UART_TxHalfCpltCallback>
 8004ce6:	bd08      	pop	{r3, pc}

08004ce8 <HAL_UART_RxCpltCallback>:
 8004ce8:	4770      	bx	lr

08004cea <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8004cea:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8004cee:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8004cf0:	2b22      	cmp	r3, #34	; 0x22
 8004cf2:	d136      	bne.n	8004d62 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004cf4:	6883      	ldr	r3, [r0, #8]
 8004cf6:	6901      	ldr	r1, [r0, #16]
 8004cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfc:	6802      	ldr	r2, [r0, #0]
 8004cfe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004d00:	d123      	bne.n	8004d4a <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d02:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004d04:	b9e9      	cbnz	r1, 8004d42 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d0a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8004d0e:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8004d10:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8004d12:	3c01      	subs	r4, #1
 8004d14:	b2a4      	uxth	r4, r4
 8004d16:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8004d18:	b98c      	cbnz	r4, 8004d3e <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d1a:	6803      	ldr	r3, [r0, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	f022 0220 	bic.w	r2, r2, #32
 8004d22:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d2a:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	f022 0201 	bic.w	r2, r2, #1
 8004d32:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004d34:	2320      	movs	r3, #32
 8004d36:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8004d3a:	f7ff ffd5 	bl	8004ce8 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8004d3e:	2000      	movs	r0, #0
}
 8004d40:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	f823 2b01 	strh.w	r2, [r3], #1
 8004d48:	e7e1      	b.n	8004d0e <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004d4a:	b921      	cbnz	r1, 8004d56 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d4c:	1c59      	adds	r1, r3, #1
 8004d4e:	6852      	ldr	r2, [r2, #4]
 8004d50:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	e7dc      	b.n	8004d10 <UART_Receive_IT+0x26>
 8004d56:	6852      	ldr	r2, [r2, #4]
 8004d58:	1c59      	adds	r1, r3, #1
 8004d5a:	6281      	str	r1, [r0, #40]	; 0x28
 8004d5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d60:	e7f7      	b.n	8004d52 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8004d62:	2002      	movs	r0, #2
 8004d64:	bd10      	pop	{r4, pc}

08004d66 <HAL_UART_ErrorCallback>:
 8004d66:	4770      	bx	lr

08004d68 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d68:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8004d6a:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d6c:	680b      	ldr	r3, [r1, #0]
 8004d6e:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d70:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8004d74:	2821      	cmp	r0, #33	; 0x21
 8004d76:	d10a      	bne.n	8004d8e <UART_DMAError+0x26>
 8004d78:	0612      	lsls	r2, r2, #24
 8004d7a:	d508      	bpl.n	8004d8e <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004d86:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8004d8e:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004d90:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8004d94:	2a22      	cmp	r2, #34	; 0x22
 8004d96:	d106      	bne.n	8004da6 <UART_DMAError+0x3e>
 8004d98:	065b      	lsls	r3, r3, #25
 8004d9a:	d504      	bpl.n	8004da6 <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 8004d9c:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8004d9e:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 8004da0:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004da2:	f7ff fe03 	bl	80049ac <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004da6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8004da8:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004daa:	f043 0310 	orr.w	r3, r3, #16
 8004dae:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8004db0:	f7ff ffd9 	bl	8004d66 <HAL_UART_ErrorCallback>
 8004db4:	bd08      	pop	{r3, pc}
	...

08004db8 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004db8:	6803      	ldr	r3, [r0, #0]
{
 8004dba:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004dbc:	681a      	ldr	r2, [r3, #0]
{
 8004dbe:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8004dc0:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dc2:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dc4:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8004dc6:	d107      	bne.n	8004dd8 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dc8:	0696      	lsls	r6, r2, #26
 8004dca:	d55a      	bpl.n	8004e82 <HAL_UART_IRQHandler+0xca>
 8004dcc:	068d      	lsls	r5, r1, #26
 8004dce:	d558      	bpl.n	8004e82 <HAL_UART_IRQHandler+0xca>
}
 8004dd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8004dd4:	f7ff bf89 	b.w	8004cea <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dd8:	f015 0501 	ands.w	r5, r5, #1
 8004ddc:	d102      	bne.n	8004de4 <HAL_UART_IRQHandler+0x2c>
 8004dde:	f411 7f90 	tst.w	r1, #288	; 0x120
 8004de2:	d04e      	beq.n	8004e82 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004de4:	07d3      	lsls	r3, r2, #31
 8004de6:	d505      	bpl.n	8004df4 <HAL_UART_IRQHandler+0x3c>
 8004de8:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dea:	bf42      	ittt	mi
 8004dec:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8004dee:	f043 0301 	orrmi.w	r3, r3, #1
 8004df2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004df4:	0750      	lsls	r0, r2, #29
 8004df6:	d504      	bpl.n	8004e02 <HAL_UART_IRQHandler+0x4a>
 8004df8:	b11d      	cbz	r5, 8004e02 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dfa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004dfc:	f043 0302 	orr.w	r3, r3, #2
 8004e00:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e02:	0793      	lsls	r3, r2, #30
 8004e04:	d504      	bpl.n	8004e10 <HAL_UART_IRQHandler+0x58>
 8004e06:	b11d      	cbz	r5, 8004e10 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e0a:	f043 0304 	orr.w	r3, r3, #4
 8004e0e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e10:	0716      	lsls	r6, r2, #28
 8004e12:	d504      	bpl.n	8004e1e <HAL_UART_IRQHandler+0x66>
 8004e14:	b11d      	cbz	r5, 8004e1e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e18:	f043 0308 	orr.w	r3, r3, #8
 8004e1c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d066      	beq.n	8004ef2 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e24:	0695      	lsls	r5, r2, #26
 8004e26:	d504      	bpl.n	8004e32 <HAL_UART_IRQHandler+0x7a>
 8004e28:	0688      	lsls	r0, r1, #26
 8004e2a:	d502      	bpl.n	8004e32 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f7ff ff5c 	bl	8004cea <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e32:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8004e34:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e36:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e38:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004e3a:	0711      	lsls	r1, r2, #28
 8004e3c:	d402      	bmi.n	8004e44 <HAL_UART_IRQHandler+0x8c>
 8004e3e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8004e42:	d01a      	beq.n	8004e7a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8004e44:	f7ff fdb2 	bl	80049ac <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	695a      	ldr	r2, [r3, #20]
 8004e4c:	0652      	lsls	r2, r2, #25
 8004e4e:	d510      	bpl.n	8004e72 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e50:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8004e52:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e58:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8004e5a:	b150      	cbz	r0, 8004e72 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e5c:	4b25      	ldr	r3, [pc, #148]	; (8004ef4 <HAL_UART_IRQHandler+0x13c>)
 8004e5e:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e60:	f7fd fe46 	bl	8002af0 <HAL_DMA_Abort_IT>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	d044      	beq.n	8004ef2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e68:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8004e6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004e70:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8004e72:	4620      	mov	r0, r4
 8004e74:	f7ff ff77 	bl	8004d66 <HAL_UART_ErrorCallback>
 8004e78:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8004e7a:	f7ff ff74 	bl	8004d66 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8004e80:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e82:	0616      	lsls	r6, r2, #24
 8004e84:	d527      	bpl.n	8004ed6 <HAL_UART_IRQHandler+0x11e>
 8004e86:	060d      	lsls	r5, r1, #24
 8004e88:	d525      	bpl.n	8004ed6 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e8a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8004e8e:	2a21      	cmp	r2, #33	; 0x21
 8004e90:	d12f      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e92:	68a2      	ldr	r2, [r4, #8]
 8004e94:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004e98:	6a22      	ldr	r2, [r4, #32]
 8004e9a:	d117      	bne.n	8004ecc <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e9c:	8811      	ldrh	r1, [r2, #0]
 8004e9e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004ea2:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004ea4:	6921      	ldr	r1, [r4, #16]
 8004ea6:	b979      	cbnz	r1, 8004ec8 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8004ea8:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8004eaa:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8004eac:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004eae:	3a01      	subs	r2, #1
 8004eb0:	b292      	uxth	r2, r2
 8004eb2:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004eb4:	b9ea      	cbnz	r2, 8004ef2 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ebc:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ec4:	60da      	str	r2, [r3, #12]
 8004ec6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8004ec8:	3201      	adds	r2, #1
 8004eca:	e7ee      	b.n	8004eaa <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ecc:	1c51      	adds	r1, r2, #1
 8004ece:	6221      	str	r1, [r4, #32]
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	605a      	str	r2, [r3, #4]
 8004ed4:	e7ea      	b.n	8004eac <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ed6:	0650      	lsls	r0, r2, #25
 8004ed8:	d50b      	bpl.n	8004ef2 <HAL_UART_IRQHandler+0x13a>
 8004eda:	064a      	lsls	r2, r1, #25
 8004edc:	d509      	bpl.n	8004ef2 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ede:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004ee0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ee6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004ee8:	2320      	movs	r3, #32
 8004eea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8004eee:	f7fc f859 	bl	8000fa4 <HAL_UART_TxCpltCallback>
 8004ef2:	bd70      	pop	{r4, r5, r6, pc}
 8004ef4:	08004ef9 	.word	0x08004ef9

08004ef8 <UART_DMAAbortOnError>:
{
 8004ef8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8004efa:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004efc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004efe:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f00:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004f02:	f7ff ff30 	bl	8004d66 <HAL_UART_ErrorCallback>
 8004f06:	bd08      	pop	{r3, pc}

08004f08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004f08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004f0a:	e003      	b.n	8004f14 <LoopCopyDataInit>

08004f0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004f0c:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004f0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004f10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004f12:	3104      	adds	r1, #4

08004f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004f14:	480a      	ldr	r0, [pc, #40]	; (8004f40 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004f16:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004f18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004f1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004f1c:	d3f6      	bcc.n	8004f0c <CopyDataInit>
  ldr r2, =_sbss
 8004f1e:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004f20:	e002      	b.n	8004f28 <LoopFillZerobss>

08004f22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004f22:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004f24:	f842 3b04 	str.w	r3, [r2], #4

08004f28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004f28:	4b08      	ldr	r3, [pc, #32]	; (8004f4c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004f2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004f2c:	d3f9      	bcc.n	8004f22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004f2e:	f7fc fdf7 	bl	8001b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f32:	f000 f80f 	bl	8004f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004f36:	f7fc fbdb 	bl	80016f0 <main>
  bx lr
 8004f3a:	4770      	bx	lr
  ldr r3, =_sidata
 8004f3c:	08005bf8 	.word	0x08005bf8
  ldr r0, =_sdata
 8004f40:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004f44:	200000c4 	.word	0x200000c4
  ldr r2, =_sbss
 8004f48:	200000c8 	.word	0x200000c8
  ldr r3, = _ebss
 8004f4c:	20000504 	.word	0x20000504

08004f50 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f50:	e7fe      	b.n	8004f50 <CAN1_RX1_IRQHandler>
	...

08004f54 <__libc_init_array>:
 8004f54:	b570      	push	{r4, r5, r6, lr}
 8004f56:	2500      	movs	r5, #0
 8004f58:	4e0c      	ldr	r6, [pc, #48]	; (8004f8c <__libc_init_array+0x38>)
 8004f5a:	4c0d      	ldr	r4, [pc, #52]	; (8004f90 <__libc_init_array+0x3c>)
 8004f5c:	1ba4      	subs	r4, r4, r6
 8004f5e:	10a4      	asrs	r4, r4, #2
 8004f60:	42a5      	cmp	r5, r4
 8004f62:	d109      	bne.n	8004f78 <__libc_init_array+0x24>
 8004f64:	f000 fc72 	bl	800584c <_init>
 8004f68:	2500      	movs	r5, #0
 8004f6a:	4e0a      	ldr	r6, [pc, #40]	; (8004f94 <__libc_init_array+0x40>)
 8004f6c:	4c0a      	ldr	r4, [pc, #40]	; (8004f98 <__libc_init_array+0x44>)
 8004f6e:	1ba4      	subs	r4, r4, r6
 8004f70:	10a4      	asrs	r4, r4, #2
 8004f72:	42a5      	cmp	r5, r4
 8004f74:	d105      	bne.n	8004f82 <__libc_init_array+0x2e>
 8004f76:	bd70      	pop	{r4, r5, r6, pc}
 8004f78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f7c:	4798      	blx	r3
 8004f7e:	3501      	adds	r5, #1
 8004f80:	e7ee      	b.n	8004f60 <__libc_init_array+0xc>
 8004f82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f86:	4798      	blx	r3
 8004f88:	3501      	adds	r5, #1
 8004f8a:	e7f2      	b.n	8004f72 <__libc_init_array+0x1e>
 8004f8c:	08005bf0 	.word	0x08005bf0
 8004f90:	08005bf0 	.word	0x08005bf0
 8004f94:	08005bf0 	.word	0x08005bf0
 8004f98:	08005bf4 	.word	0x08005bf4

08004f9c <memset>:
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	4402      	add	r2, r0
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d100      	bne.n	8004fa6 <memset+0xa>
 8004fa4:	4770      	bx	lr
 8004fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8004faa:	e7f9      	b.n	8004fa0 <memset+0x4>

08004fac <siprintf>:
 8004fac:	b40e      	push	{r1, r2, r3}
 8004fae:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004fb2:	b500      	push	{lr}
 8004fb4:	b09c      	sub	sp, #112	; 0x70
 8004fb6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004fba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fbe:	9104      	str	r1, [sp, #16]
 8004fc0:	9107      	str	r1, [sp, #28]
 8004fc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004fc6:	ab1d      	add	r3, sp, #116	; 0x74
 8004fc8:	9002      	str	r0, [sp, #8]
 8004fca:	9006      	str	r0, [sp, #24]
 8004fcc:	4808      	ldr	r0, [pc, #32]	; (8004ff0 <siprintf+0x44>)
 8004fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fd2:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004fd6:	6800      	ldr	r0, [r0, #0]
 8004fd8:	a902      	add	r1, sp, #8
 8004fda:	9301      	str	r3, [sp, #4]
 8004fdc:	f000 f87c 	bl	80050d8 <_svfiprintf_r>
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	9b02      	ldr	r3, [sp, #8]
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	b01c      	add	sp, #112	; 0x70
 8004fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fec:	b003      	add	sp, #12
 8004fee:	4770      	bx	lr
 8004ff0:	20000060 	.word	0x20000060

08004ff4 <strcat>:
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	b510      	push	{r4, lr}
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	781c      	ldrb	r4, [r3, #0]
 8004ffc:	3201      	adds	r2, #1
 8004ffe:	2c00      	cmp	r4, #0
 8005000:	d1fa      	bne.n	8004ff8 <strcat+0x4>
 8005002:	3b01      	subs	r3, #1
 8005004:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005008:	f803 2f01 	strb.w	r2, [r3, #1]!
 800500c:	2a00      	cmp	r2, #0
 800500e:	d1f9      	bne.n	8005004 <strcat+0x10>
 8005010:	bd10      	pop	{r4, pc}

08005012 <strcpy>:
 8005012:	4603      	mov	r3, r0
 8005014:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005018:	f803 2b01 	strb.w	r2, [r3], #1
 800501c:	2a00      	cmp	r2, #0
 800501e:	d1f9      	bne.n	8005014 <strcpy+0x2>
 8005020:	4770      	bx	lr

08005022 <__ssputs_r>:
 8005022:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005026:	688e      	ldr	r6, [r1, #8]
 8005028:	4682      	mov	sl, r0
 800502a:	429e      	cmp	r6, r3
 800502c:	460c      	mov	r4, r1
 800502e:	4691      	mov	r9, r2
 8005030:	4698      	mov	r8, r3
 8005032:	d835      	bhi.n	80050a0 <__ssputs_r+0x7e>
 8005034:	898a      	ldrh	r2, [r1, #12]
 8005036:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800503a:	d031      	beq.n	80050a0 <__ssputs_r+0x7e>
 800503c:	2302      	movs	r3, #2
 800503e:	6825      	ldr	r5, [r4, #0]
 8005040:	6909      	ldr	r1, [r1, #16]
 8005042:	1a6f      	subs	r7, r5, r1
 8005044:	6965      	ldr	r5, [r4, #20]
 8005046:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800504a:	fb95 f5f3 	sdiv	r5, r5, r3
 800504e:	f108 0301 	add.w	r3, r8, #1
 8005052:	443b      	add	r3, r7
 8005054:	429d      	cmp	r5, r3
 8005056:	bf38      	it	cc
 8005058:	461d      	movcc	r5, r3
 800505a:	0553      	lsls	r3, r2, #21
 800505c:	d531      	bpl.n	80050c2 <__ssputs_r+0xa0>
 800505e:	4629      	mov	r1, r5
 8005060:	f000 fb46 	bl	80056f0 <_malloc_r>
 8005064:	4606      	mov	r6, r0
 8005066:	b950      	cbnz	r0, 800507e <__ssputs_r+0x5c>
 8005068:	230c      	movs	r3, #12
 800506a:	f8ca 3000 	str.w	r3, [sl]
 800506e:	89a3      	ldrh	r3, [r4, #12]
 8005070:	f04f 30ff 	mov.w	r0, #4294967295
 8005074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005078:	81a3      	strh	r3, [r4, #12]
 800507a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800507e:	463a      	mov	r2, r7
 8005080:	6921      	ldr	r1, [r4, #16]
 8005082:	f000 fac3 	bl	800560c <memcpy>
 8005086:	89a3      	ldrh	r3, [r4, #12]
 8005088:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800508c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005090:	81a3      	strh	r3, [r4, #12]
 8005092:	6126      	str	r6, [r4, #16]
 8005094:	443e      	add	r6, r7
 8005096:	6026      	str	r6, [r4, #0]
 8005098:	4646      	mov	r6, r8
 800509a:	6165      	str	r5, [r4, #20]
 800509c:	1bed      	subs	r5, r5, r7
 800509e:	60a5      	str	r5, [r4, #8]
 80050a0:	4546      	cmp	r6, r8
 80050a2:	bf28      	it	cs
 80050a4:	4646      	movcs	r6, r8
 80050a6:	4649      	mov	r1, r9
 80050a8:	4632      	mov	r2, r6
 80050aa:	6820      	ldr	r0, [r4, #0]
 80050ac:	f000 fab9 	bl	8005622 <memmove>
 80050b0:	68a3      	ldr	r3, [r4, #8]
 80050b2:	2000      	movs	r0, #0
 80050b4:	1b9b      	subs	r3, r3, r6
 80050b6:	60a3      	str	r3, [r4, #8]
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	441e      	add	r6, r3
 80050bc:	6026      	str	r6, [r4, #0]
 80050be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c2:	462a      	mov	r2, r5
 80050c4:	f000 fb72 	bl	80057ac <_realloc_r>
 80050c8:	4606      	mov	r6, r0
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d1e1      	bne.n	8005092 <__ssputs_r+0x70>
 80050ce:	6921      	ldr	r1, [r4, #16]
 80050d0:	4650      	mov	r0, sl
 80050d2:	f000 fac1 	bl	8005658 <_free_r>
 80050d6:	e7c7      	b.n	8005068 <__ssputs_r+0x46>

080050d8 <_svfiprintf_r>:
 80050d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050dc:	b09d      	sub	sp, #116	; 0x74
 80050de:	9303      	str	r3, [sp, #12]
 80050e0:	898b      	ldrh	r3, [r1, #12]
 80050e2:	4680      	mov	r8, r0
 80050e4:	061c      	lsls	r4, r3, #24
 80050e6:	460d      	mov	r5, r1
 80050e8:	4616      	mov	r6, r2
 80050ea:	d50f      	bpl.n	800510c <_svfiprintf_r+0x34>
 80050ec:	690b      	ldr	r3, [r1, #16]
 80050ee:	b96b      	cbnz	r3, 800510c <_svfiprintf_r+0x34>
 80050f0:	2140      	movs	r1, #64	; 0x40
 80050f2:	f000 fafd 	bl	80056f0 <_malloc_r>
 80050f6:	6028      	str	r0, [r5, #0]
 80050f8:	6128      	str	r0, [r5, #16]
 80050fa:	b928      	cbnz	r0, 8005108 <_svfiprintf_r+0x30>
 80050fc:	230c      	movs	r3, #12
 80050fe:	f8c8 3000 	str.w	r3, [r8]
 8005102:	f04f 30ff 	mov.w	r0, #4294967295
 8005106:	e0c4      	b.n	8005292 <_svfiprintf_r+0x1ba>
 8005108:	2340      	movs	r3, #64	; 0x40
 800510a:	616b      	str	r3, [r5, #20]
 800510c:	2300      	movs	r3, #0
 800510e:	9309      	str	r3, [sp, #36]	; 0x24
 8005110:	2320      	movs	r3, #32
 8005112:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005116:	2330      	movs	r3, #48	; 0x30
 8005118:	f04f 0b01 	mov.w	fp, #1
 800511c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005120:	4637      	mov	r7, r6
 8005122:	463c      	mov	r4, r7
 8005124:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d13c      	bne.n	80051a6 <_svfiprintf_r+0xce>
 800512c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005130:	d00b      	beq.n	800514a <_svfiprintf_r+0x72>
 8005132:	4653      	mov	r3, sl
 8005134:	4632      	mov	r2, r6
 8005136:	4629      	mov	r1, r5
 8005138:	4640      	mov	r0, r8
 800513a:	f7ff ff72 	bl	8005022 <__ssputs_r>
 800513e:	3001      	adds	r0, #1
 8005140:	f000 80a2 	beq.w	8005288 <_svfiprintf_r+0x1b0>
 8005144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005146:	4453      	add	r3, sl
 8005148:	9309      	str	r3, [sp, #36]	; 0x24
 800514a:	783b      	ldrb	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 809b 	beq.w	8005288 <_svfiprintf_r+0x1b0>
 8005152:	2300      	movs	r3, #0
 8005154:	f04f 32ff 	mov.w	r2, #4294967295
 8005158:	9304      	str	r3, [sp, #16]
 800515a:	9307      	str	r3, [sp, #28]
 800515c:	9205      	str	r2, [sp, #20]
 800515e:	9306      	str	r3, [sp, #24]
 8005160:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005164:	931a      	str	r3, [sp, #104]	; 0x68
 8005166:	2205      	movs	r2, #5
 8005168:	7821      	ldrb	r1, [r4, #0]
 800516a:	4850      	ldr	r0, [pc, #320]	; (80052ac <_svfiprintf_r+0x1d4>)
 800516c:	f000 fa40 	bl	80055f0 <memchr>
 8005170:	1c67      	adds	r7, r4, #1
 8005172:	9b04      	ldr	r3, [sp, #16]
 8005174:	b9d8      	cbnz	r0, 80051ae <_svfiprintf_r+0xd6>
 8005176:	06d9      	lsls	r1, r3, #27
 8005178:	bf44      	itt	mi
 800517a:	2220      	movmi	r2, #32
 800517c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005180:	071a      	lsls	r2, r3, #28
 8005182:	bf44      	itt	mi
 8005184:	222b      	movmi	r2, #43	; 0x2b
 8005186:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800518a:	7822      	ldrb	r2, [r4, #0]
 800518c:	2a2a      	cmp	r2, #42	; 0x2a
 800518e:	d016      	beq.n	80051be <_svfiprintf_r+0xe6>
 8005190:	2100      	movs	r1, #0
 8005192:	200a      	movs	r0, #10
 8005194:	9a07      	ldr	r2, [sp, #28]
 8005196:	4627      	mov	r7, r4
 8005198:	783b      	ldrb	r3, [r7, #0]
 800519a:	3401      	adds	r4, #1
 800519c:	3b30      	subs	r3, #48	; 0x30
 800519e:	2b09      	cmp	r3, #9
 80051a0:	d950      	bls.n	8005244 <_svfiprintf_r+0x16c>
 80051a2:	b1c9      	cbz	r1, 80051d8 <_svfiprintf_r+0x100>
 80051a4:	e011      	b.n	80051ca <_svfiprintf_r+0xf2>
 80051a6:	2b25      	cmp	r3, #37	; 0x25
 80051a8:	d0c0      	beq.n	800512c <_svfiprintf_r+0x54>
 80051aa:	4627      	mov	r7, r4
 80051ac:	e7b9      	b.n	8005122 <_svfiprintf_r+0x4a>
 80051ae:	4a3f      	ldr	r2, [pc, #252]	; (80052ac <_svfiprintf_r+0x1d4>)
 80051b0:	463c      	mov	r4, r7
 80051b2:	1a80      	subs	r0, r0, r2
 80051b4:	fa0b f000 	lsl.w	r0, fp, r0
 80051b8:	4318      	orrs	r0, r3
 80051ba:	9004      	str	r0, [sp, #16]
 80051bc:	e7d3      	b.n	8005166 <_svfiprintf_r+0x8e>
 80051be:	9a03      	ldr	r2, [sp, #12]
 80051c0:	1d11      	adds	r1, r2, #4
 80051c2:	6812      	ldr	r2, [r2, #0]
 80051c4:	9103      	str	r1, [sp, #12]
 80051c6:	2a00      	cmp	r2, #0
 80051c8:	db01      	blt.n	80051ce <_svfiprintf_r+0xf6>
 80051ca:	9207      	str	r2, [sp, #28]
 80051cc:	e004      	b.n	80051d8 <_svfiprintf_r+0x100>
 80051ce:	4252      	negs	r2, r2
 80051d0:	f043 0302 	orr.w	r3, r3, #2
 80051d4:	9207      	str	r2, [sp, #28]
 80051d6:	9304      	str	r3, [sp, #16]
 80051d8:	783b      	ldrb	r3, [r7, #0]
 80051da:	2b2e      	cmp	r3, #46	; 0x2e
 80051dc:	d10d      	bne.n	80051fa <_svfiprintf_r+0x122>
 80051de:	787b      	ldrb	r3, [r7, #1]
 80051e0:	1c79      	adds	r1, r7, #1
 80051e2:	2b2a      	cmp	r3, #42	; 0x2a
 80051e4:	d132      	bne.n	800524c <_svfiprintf_r+0x174>
 80051e6:	9b03      	ldr	r3, [sp, #12]
 80051e8:	3702      	adds	r7, #2
 80051ea:	1d1a      	adds	r2, r3, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	9203      	str	r2, [sp, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bfb8      	it	lt
 80051f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80051f8:	9305      	str	r3, [sp, #20]
 80051fa:	4c2d      	ldr	r4, [pc, #180]	; (80052b0 <_svfiprintf_r+0x1d8>)
 80051fc:	2203      	movs	r2, #3
 80051fe:	7839      	ldrb	r1, [r7, #0]
 8005200:	4620      	mov	r0, r4
 8005202:	f000 f9f5 	bl	80055f0 <memchr>
 8005206:	b138      	cbz	r0, 8005218 <_svfiprintf_r+0x140>
 8005208:	2340      	movs	r3, #64	; 0x40
 800520a:	1b00      	subs	r0, r0, r4
 800520c:	fa03 f000 	lsl.w	r0, r3, r0
 8005210:	9b04      	ldr	r3, [sp, #16]
 8005212:	3701      	adds	r7, #1
 8005214:	4303      	orrs	r3, r0
 8005216:	9304      	str	r3, [sp, #16]
 8005218:	7839      	ldrb	r1, [r7, #0]
 800521a:	2206      	movs	r2, #6
 800521c:	4825      	ldr	r0, [pc, #148]	; (80052b4 <_svfiprintf_r+0x1dc>)
 800521e:	1c7e      	adds	r6, r7, #1
 8005220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005224:	f000 f9e4 	bl	80055f0 <memchr>
 8005228:	2800      	cmp	r0, #0
 800522a:	d035      	beq.n	8005298 <_svfiprintf_r+0x1c0>
 800522c:	4b22      	ldr	r3, [pc, #136]	; (80052b8 <_svfiprintf_r+0x1e0>)
 800522e:	b9fb      	cbnz	r3, 8005270 <_svfiprintf_r+0x198>
 8005230:	9b03      	ldr	r3, [sp, #12]
 8005232:	3307      	adds	r3, #7
 8005234:	f023 0307 	bic.w	r3, r3, #7
 8005238:	3308      	adds	r3, #8
 800523a:	9303      	str	r3, [sp, #12]
 800523c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800523e:	444b      	add	r3, r9
 8005240:	9309      	str	r3, [sp, #36]	; 0x24
 8005242:	e76d      	b.n	8005120 <_svfiprintf_r+0x48>
 8005244:	fb00 3202 	mla	r2, r0, r2, r3
 8005248:	2101      	movs	r1, #1
 800524a:	e7a4      	b.n	8005196 <_svfiprintf_r+0xbe>
 800524c:	2300      	movs	r3, #0
 800524e:	240a      	movs	r4, #10
 8005250:	4618      	mov	r0, r3
 8005252:	9305      	str	r3, [sp, #20]
 8005254:	460f      	mov	r7, r1
 8005256:	783a      	ldrb	r2, [r7, #0]
 8005258:	3101      	adds	r1, #1
 800525a:	3a30      	subs	r2, #48	; 0x30
 800525c:	2a09      	cmp	r2, #9
 800525e:	d903      	bls.n	8005268 <_svfiprintf_r+0x190>
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0ca      	beq.n	80051fa <_svfiprintf_r+0x122>
 8005264:	9005      	str	r0, [sp, #20]
 8005266:	e7c8      	b.n	80051fa <_svfiprintf_r+0x122>
 8005268:	fb04 2000 	mla	r0, r4, r0, r2
 800526c:	2301      	movs	r3, #1
 800526e:	e7f1      	b.n	8005254 <_svfiprintf_r+0x17c>
 8005270:	ab03      	add	r3, sp, #12
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	462a      	mov	r2, r5
 8005276:	4b11      	ldr	r3, [pc, #68]	; (80052bc <_svfiprintf_r+0x1e4>)
 8005278:	a904      	add	r1, sp, #16
 800527a:	4640      	mov	r0, r8
 800527c:	f3af 8000 	nop.w
 8005280:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005284:	4681      	mov	r9, r0
 8005286:	d1d9      	bne.n	800523c <_svfiprintf_r+0x164>
 8005288:	89ab      	ldrh	r3, [r5, #12]
 800528a:	065b      	lsls	r3, r3, #25
 800528c:	f53f af39 	bmi.w	8005102 <_svfiprintf_r+0x2a>
 8005290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005292:	b01d      	add	sp, #116	; 0x74
 8005294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005298:	ab03      	add	r3, sp, #12
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	462a      	mov	r2, r5
 800529e:	4b07      	ldr	r3, [pc, #28]	; (80052bc <_svfiprintf_r+0x1e4>)
 80052a0:	a904      	add	r1, sp, #16
 80052a2:	4640      	mov	r0, r8
 80052a4:	f000 f884 	bl	80053b0 <_printf_i>
 80052a8:	e7ea      	b.n	8005280 <_svfiprintf_r+0x1a8>
 80052aa:	bf00      	nop
 80052ac:	08005bbc 	.word	0x08005bbc
 80052b0:	08005bc2 	.word	0x08005bc2
 80052b4:	08005bc6 	.word	0x08005bc6
 80052b8:	00000000 	.word	0x00000000
 80052bc:	08005023 	.word	0x08005023

080052c0 <_printf_common>:
 80052c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	4691      	mov	r9, r2
 80052c6:	461f      	mov	r7, r3
 80052c8:	688a      	ldr	r2, [r1, #8]
 80052ca:	690b      	ldr	r3, [r1, #16]
 80052cc:	4606      	mov	r6, r0
 80052ce:	4293      	cmp	r3, r2
 80052d0:	bfb8      	it	lt
 80052d2:	4613      	movlt	r3, r2
 80052d4:	f8c9 3000 	str.w	r3, [r9]
 80052d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052dc:	460c      	mov	r4, r1
 80052de:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052e2:	b112      	cbz	r2, 80052ea <_printf_common+0x2a>
 80052e4:	3301      	adds	r3, #1
 80052e6:	f8c9 3000 	str.w	r3, [r9]
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	0699      	lsls	r1, r3, #26
 80052ee:	bf42      	ittt	mi
 80052f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80052f4:	3302      	addmi	r3, #2
 80052f6:	f8c9 3000 	strmi.w	r3, [r9]
 80052fa:	6825      	ldr	r5, [r4, #0]
 80052fc:	f015 0506 	ands.w	r5, r5, #6
 8005300:	d107      	bne.n	8005312 <_printf_common+0x52>
 8005302:	f104 0a19 	add.w	sl, r4, #25
 8005306:	68e3      	ldr	r3, [r4, #12]
 8005308:	f8d9 2000 	ldr.w	r2, [r9]
 800530c:	1a9b      	subs	r3, r3, r2
 800530e:	429d      	cmp	r5, r3
 8005310:	db2a      	blt.n	8005368 <_printf_common+0xa8>
 8005312:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005316:	6822      	ldr	r2, [r4, #0]
 8005318:	3300      	adds	r3, #0
 800531a:	bf18      	it	ne
 800531c:	2301      	movne	r3, #1
 800531e:	0692      	lsls	r2, r2, #26
 8005320:	d42f      	bmi.n	8005382 <_printf_common+0xc2>
 8005322:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005326:	4639      	mov	r1, r7
 8005328:	4630      	mov	r0, r6
 800532a:	47c0      	blx	r8
 800532c:	3001      	adds	r0, #1
 800532e:	d022      	beq.n	8005376 <_printf_common+0xb6>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	68e5      	ldr	r5, [r4, #12]
 8005334:	f003 0306 	and.w	r3, r3, #6
 8005338:	2b04      	cmp	r3, #4
 800533a:	bf18      	it	ne
 800533c:	2500      	movne	r5, #0
 800533e:	f8d9 2000 	ldr.w	r2, [r9]
 8005342:	f04f 0900 	mov.w	r9, #0
 8005346:	bf08      	it	eq
 8005348:	1aad      	subeq	r5, r5, r2
 800534a:	68a3      	ldr	r3, [r4, #8]
 800534c:	6922      	ldr	r2, [r4, #16]
 800534e:	bf08      	it	eq
 8005350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005354:	4293      	cmp	r3, r2
 8005356:	bfc4      	itt	gt
 8005358:	1a9b      	subgt	r3, r3, r2
 800535a:	18ed      	addgt	r5, r5, r3
 800535c:	341a      	adds	r4, #26
 800535e:	454d      	cmp	r5, r9
 8005360:	d11b      	bne.n	800539a <_printf_common+0xda>
 8005362:	2000      	movs	r0, #0
 8005364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005368:	2301      	movs	r3, #1
 800536a:	4652      	mov	r2, sl
 800536c:	4639      	mov	r1, r7
 800536e:	4630      	mov	r0, r6
 8005370:	47c0      	blx	r8
 8005372:	3001      	adds	r0, #1
 8005374:	d103      	bne.n	800537e <_printf_common+0xbe>
 8005376:	f04f 30ff 	mov.w	r0, #4294967295
 800537a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537e:	3501      	adds	r5, #1
 8005380:	e7c1      	b.n	8005306 <_printf_common+0x46>
 8005382:	2030      	movs	r0, #48	; 0x30
 8005384:	18e1      	adds	r1, r4, r3
 8005386:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005390:	4422      	add	r2, r4
 8005392:	3302      	adds	r3, #2
 8005394:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005398:	e7c3      	b.n	8005322 <_printf_common+0x62>
 800539a:	2301      	movs	r3, #1
 800539c:	4622      	mov	r2, r4
 800539e:	4639      	mov	r1, r7
 80053a0:	4630      	mov	r0, r6
 80053a2:	47c0      	blx	r8
 80053a4:	3001      	adds	r0, #1
 80053a6:	d0e6      	beq.n	8005376 <_printf_common+0xb6>
 80053a8:	f109 0901 	add.w	r9, r9, #1
 80053ac:	e7d7      	b.n	800535e <_printf_common+0x9e>
	...

080053b0 <_printf_i>:
 80053b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053b4:	4617      	mov	r7, r2
 80053b6:	7e0a      	ldrb	r2, [r1, #24]
 80053b8:	b085      	sub	sp, #20
 80053ba:	2a6e      	cmp	r2, #110	; 0x6e
 80053bc:	4698      	mov	r8, r3
 80053be:	4606      	mov	r6, r0
 80053c0:	460c      	mov	r4, r1
 80053c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053c4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80053c8:	f000 80bc 	beq.w	8005544 <_printf_i+0x194>
 80053cc:	d81a      	bhi.n	8005404 <_printf_i+0x54>
 80053ce:	2a63      	cmp	r2, #99	; 0x63
 80053d0:	d02e      	beq.n	8005430 <_printf_i+0x80>
 80053d2:	d80a      	bhi.n	80053ea <_printf_i+0x3a>
 80053d4:	2a00      	cmp	r2, #0
 80053d6:	f000 80c8 	beq.w	800556a <_printf_i+0x1ba>
 80053da:	2a58      	cmp	r2, #88	; 0x58
 80053dc:	f000 808a 	beq.w	80054f4 <_printf_i+0x144>
 80053e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053e4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80053e8:	e02a      	b.n	8005440 <_printf_i+0x90>
 80053ea:	2a64      	cmp	r2, #100	; 0x64
 80053ec:	d001      	beq.n	80053f2 <_printf_i+0x42>
 80053ee:	2a69      	cmp	r2, #105	; 0x69
 80053f0:	d1f6      	bne.n	80053e0 <_printf_i+0x30>
 80053f2:	6821      	ldr	r1, [r4, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80053fa:	d023      	beq.n	8005444 <_printf_i+0x94>
 80053fc:	1d11      	adds	r1, r2, #4
 80053fe:	6019      	str	r1, [r3, #0]
 8005400:	6813      	ldr	r3, [r2, #0]
 8005402:	e027      	b.n	8005454 <_printf_i+0xa4>
 8005404:	2a73      	cmp	r2, #115	; 0x73
 8005406:	f000 80b4 	beq.w	8005572 <_printf_i+0x1c2>
 800540a:	d808      	bhi.n	800541e <_printf_i+0x6e>
 800540c:	2a6f      	cmp	r2, #111	; 0x6f
 800540e:	d02a      	beq.n	8005466 <_printf_i+0xb6>
 8005410:	2a70      	cmp	r2, #112	; 0x70
 8005412:	d1e5      	bne.n	80053e0 <_printf_i+0x30>
 8005414:	680a      	ldr	r2, [r1, #0]
 8005416:	f042 0220 	orr.w	r2, r2, #32
 800541a:	600a      	str	r2, [r1, #0]
 800541c:	e003      	b.n	8005426 <_printf_i+0x76>
 800541e:	2a75      	cmp	r2, #117	; 0x75
 8005420:	d021      	beq.n	8005466 <_printf_i+0xb6>
 8005422:	2a78      	cmp	r2, #120	; 0x78
 8005424:	d1dc      	bne.n	80053e0 <_printf_i+0x30>
 8005426:	2278      	movs	r2, #120	; 0x78
 8005428:	496f      	ldr	r1, [pc, #444]	; (80055e8 <_printf_i+0x238>)
 800542a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800542e:	e064      	b.n	80054fa <_printf_i+0x14a>
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005436:	1d11      	adds	r1, r2, #4
 8005438:	6019      	str	r1, [r3, #0]
 800543a:	6813      	ldr	r3, [r2, #0]
 800543c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005440:	2301      	movs	r3, #1
 8005442:	e0a3      	b.n	800558c <_printf_i+0x1dc>
 8005444:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005448:	f102 0104 	add.w	r1, r2, #4
 800544c:	6019      	str	r1, [r3, #0]
 800544e:	d0d7      	beq.n	8005400 <_printf_i+0x50>
 8005450:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005454:	2b00      	cmp	r3, #0
 8005456:	da03      	bge.n	8005460 <_printf_i+0xb0>
 8005458:	222d      	movs	r2, #45	; 0x2d
 800545a:	425b      	negs	r3, r3
 800545c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005460:	4962      	ldr	r1, [pc, #392]	; (80055ec <_printf_i+0x23c>)
 8005462:	220a      	movs	r2, #10
 8005464:	e017      	b.n	8005496 <_printf_i+0xe6>
 8005466:	6820      	ldr	r0, [r4, #0]
 8005468:	6819      	ldr	r1, [r3, #0]
 800546a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800546e:	d003      	beq.n	8005478 <_printf_i+0xc8>
 8005470:	1d08      	adds	r0, r1, #4
 8005472:	6018      	str	r0, [r3, #0]
 8005474:	680b      	ldr	r3, [r1, #0]
 8005476:	e006      	b.n	8005486 <_printf_i+0xd6>
 8005478:	f010 0f40 	tst.w	r0, #64	; 0x40
 800547c:	f101 0004 	add.w	r0, r1, #4
 8005480:	6018      	str	r0, [r3, #0]
 8005482:	d0f7      	beq.n	8005474 <_printf_i+0xc4>
 8005484:	880b      	ldrh	r3, [r1, #0]
 8005486:	2a6f      	cmp	r2, #111	; 0x6f
 8005488:	bf14      	ite	ne
 800548a:	220a      	movne	r2, #10
 800548c:	2208      	moveq	r2, #8
 800548e:	4957      	ldr	r1, [pc, #348]	; (80055ec <_printf_i+0x23c>)
 8005490:	2000      	movs	r0, #0
 8005492:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005496:	6865      	ldr	r5, [r4, #4]
 8005498:	2d00      	cmp	r5, #0
 800549a:	60a5      	str	r5, [r4, #8]
 800549c:	f2c0 809c 	blt.w	80055d8 <_printf_i+0x228>
 80054a0:	6820      	ldr	r0, [r4, #0]
 80054a2:	f020 0004 	bic.w	r0, r0, #4
 80054a6:	6020      	str	r0, [r4, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d13f      	bne.n	800552c <_printf_i+0x17c>
 80054ac:	2d00      	cmp	r5, #0
 80054ae:	f040 8095 	bne.w	80055dc <_printf_i+0x22c>
 80054b2:	4675      	mov	r5, lr
 80054b4:	2a08      	cmp	r2, #8
 80054b6:	d10b      	bne.n	80054d0 <_printf_i+0x120>
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	07da      	lsls	r2, r3, #31
 80054bc:	d508      	bpl.n	80054d0 <_printf_i+0x120>
 80054be:	6923      	ldr	r3, [r4, #16]
 80054c0:	6862      	ldr	r2, [r4, #4]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	bfde      	ittt	le
 80054c6:	2330      	movle	r3, #48	; 0x30
 80054c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054d0:	ebae 0305 	sub.w	r3, lr, r5
 80054d4:	6123      	str	r3, [r4, #16]
 80054d6:	f8cd 8000 	str.w	r8, [sp]
 80054da:	463b      	mov	r3, r7
 80054dc:	aa03      	add	r2, sp, #12
 80054de:	4621      	mov	r1, r4
 80054e0:	4630      	mov	r0, r6
 80054e2:	f7ff feed 	bl	80052c0 <_printf_common>
 80054e6:	3001      	adds	r0, #1
 80054e8:	d155      	bne.n	8005596 <_printf_i+0x1e6>
 80054ea:	f04f 30ff 	mov.w	r0, #4294967295
 80054ee:	b005      	add	sp, #20
 80054f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054f4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80054f8:	493c      	ldr	r1, [pc, #240]	; (80055ec <_printf_i+0x23c>)
 80054fa:	6822      	ldr	r2, [r4, #0]
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005502:	f100 0504 	add.w	r5, r0, #4
 8005506:	601d      	str	r5, [r3, #0]
 8005508:	d001      	beq.n	800550e <_printf_i+0x15e>
 800550a:	6803      	ldr	r3, [r0, #0]
 800550c:	e002      	b.n	8005514 <_printf_i+0x164>
 800550e:	0655      	lsls	r5, r2, #25
 8005510:	d5fb      	bpl.n	800550a <_printf_i+0x15a>
 8005512:	8803      	ldrh	r3, [r0, #0]
 8005514:	07d0      	lsls	r0, r2, #31
 8005516:	bf44      	itt	mi
 8005518:	f042 0220 	orrmi.w	r2, r2, #32
 800551c:	6022      	strmi	r2, [r4, #0]
 800551e:	b91b      	cbnz	r3, 8005528 <_printf_i+0x178>
 8005520:	6822      	ldr	r2, [r4, #0]
 8005522:	f022 0220 	bic.w	r2, r2, #32
 8005526:	6022      	str	r2, [r4, #0]
 8005528:	2210      	movs	r2, #16
 800552a:	e7b1      	b.n	8005490 <_printf_i+0xe0>
 800552c:	4675      	mov	r5, lr
 800552e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005532:	fb02 3310 	mls	r3, r2, r0, r3
 8005536:	5ccb      	ldrb	r3, [r1, r3]
 8005538:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800553c:	4603      	mov	r3, r0
 800553e:	2800      	cmp	r0, #0
 8005540:	d1f5      	bne.n	800552e <_printf_i+0x17e>
 8005542:	e7b7      	b.n	80054b4 <_printf_i+0x104>
 8005544:	6808      	ldr	r0, [r1, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	f010 0f80 	tst.w	r0, #128	; 0x80
 800554c:	6949      	ldr	r1, [r1, #20]
 800554e:	d004      	beq.n	800555a <_printf_i+0x1aa>
 8005550:	1d10      	adds	r0, r2, #4
 8005552:	6018      	str	r0, [r3, #0]
 8005554:	6813      	ldr	r3, [r2, #0]
 8005556:	6019      	str	r1, [r3, #0]
 8005558:	e007      	b.n	800556a <_printf_i+0x1ba>
 800555a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800555e:	f102 0004 	add.w	r0, r2, #4
 8005562:	6018      	str	r0, [r3, #0]
 8005564:	6813      	ldr	r3, [r2, #0]
 8005566:	d0f6      	beq.n	8005556 <_printf_i+0x1a6>
 8005568:	8019      	strh	r1, [r3, #0]
 800556a:	2300      	movs	r3, #0
 800556c:	4675      	mov	r5, lr
 800556e:	6123      	str	r3, [r4, #16]
 8005570:	e7b1      	b.n	80054d6 <_printf_i+0x126>
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	1d11      	adds	r1, r2, #4
 8005576:	6019      	str	r1, [r3, #0]
 8005578:	6815      	ldr	r5, [r2, #0]
 800557a:	2100      	movs	r1, #0
 800557c:	6862      	ldr	r2, [r4, #4]
 800557e:	4628      	mov	r0, r5
 8005580:	f000 f836 	bl	80055f0 <memchr>
 8005584:	b108      	cbz	r0, 800558a <_printf_i+0x1da>
 8005586:	1b40      	subs	r0, r0, r5
 8005588:	6060      	str	r0, [r4, #4]
 800558a:	6863      	ldr	r3, [r4, #4]
 800558c:	6123      	str	r3, [r4, #16]
 800558e:	2300      	movs	r3, #0
 8005590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005594:	e79f      	b.n	80054d6 <_printf_i+0x126>
 8005596:	6923      	ldr	r3, [r4, #16]
 8005598:	462a      	mov	r2, r5
 800559a:	4639      	mov	r1, r7
 800559c:	4630      	mov	r0, r6
 800559e:	47c0      	blx	r8
 80055a0:	3001      	adds	r0, #1
 80055a2:	d0a2      	beq.n	80054ea <_printf_i+0x13a>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	079b      	lsls	r3, r3, #30
 80055a8:	d507      	bpl.n	80055ba <_printf_i+0x20a>
 80055aa:	2500      	movs	r5, #0
 80055ac:	f104 0919 	add.w	r9, r4, #25
 80055b0:	68e3      	ldr	r3, [r4, #12]
 80055b2:	9a03      	ldr	r2, [sp, #12]
 80055b4:	1a9b      	subs	r3, r3, r2
 80055b6:	429d      	cmp	r5, r3
 80055b8:	db05      	blt.n	80055c6 <_printf_i+0x216>
 80055ba:	68e0      	ldr	r0, [r4, #12]
 80055bc:	9b03      	ldr	r3, [sp, #12]
 80055be:	4298      	cmp	r0, r3
 80055c0:	bfb8      	it	lt
 80055c2:	4618      	movlt	r0, r3
 80055c4:	e793      	b.n	80054ee <_printf_i+0x13e>
 80055c6:	2301      	movs	r3, #1
 80055c8:	464a      	mov	r2, r9
 80055ca:	4639      	mov	r1, r7
 80055cc:	4630      	mov	r0, r6
 80055ce:	47c0      	blx	r8
 80055d0:	3001      	adds	r0, #1
 80055d2:	d08a      	beq.n	80054ea <_printf_i+0x13a>
 80055d4:	3501      	adds	r5, #1
 80055d6:	e7eb      	b.n	80055b0 <_printf_i+0x200>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1a7      	bne.n	800552c <_printf_i+0x17c>
 80055dc:	780b      	ldrb	r3, [r1, #0]
 80055de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055e6:	e765      	b.n	80054b4 <_printf_i+0x104>
 80055e8:	08005bde 	.word	0x08005bde
 80055ec:	08005bcd 	.word	0x08005bcd

080055f0 <memchr>:
 80055f0:	b510      	push	{r4, lr}
 80055f2:	b2c9      	uxtb	r1, r1
 80055f4:	4402      	add	r2, r0
 80055f6:	4290      	cmp	r0, r2
 80055f8:	4603      	mov	r3, r0
 80055fa:	d101      	bne.n	8005600 <memchr+0x10>
 80055fc:	2000      	movs	r0, #0
 80055fe:	bd10      	pop	{r4, pc}
 8005600:	781c      	ldrb	r4, [r3, #0]
 8005602:	3001      	adds	r0, #1
 8005604:	428c      	cmp	r4, r1
 8005606:	d1f6      	bne.n	80055f6 <memchr+0x6>
 8005608:	4618      	mov	r0, r3
 800560a:	bd10      	pop	{r4, pc}

0800560c <memcpy>:
 800560c:	b510      	push	{r4, lr}
 800560e:	1e43      	subs	r3, r0, #1
 8005610:	440a      	add	r2, r1
 8005612:	4291      	cmp	r1, r2
 8005614:	d100      	bne.n	8005618 <memcpy+0xc>
 8005616:	bd10      	pop	{r4, pc}
 8005618:	f811 4b01 	ldrb.w	r4, [r1], #1
 800561c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005620:	e7f7      	b.n	8005612 <memcpy+0x6>

08005622 <memmove>:
 8005622:	4288      	cmp	r0, r1
 8005624:	b510      	push	{r4, lr}
 8005626:	eb01 0302 	add.w	r3, r1, r2
 800562a:	d803      	bhi.n	8005634 <memmove+0x12>
 800562c:	1e42      	subs	r2, r0, #1
 800562e:	4299      	cmp	r1, r3
 8005630:	d10c      	bne.n	800564c <memmove+0x2a>
 8005632:	bd10      	pop	{r4, pc}
 8005634:	4298      	cmp	r0, r3
 8005636:	d2f9      	bcs.n	800562c <memmove+0xa>
 8005638:	1881      	adds	r1, r0, r2
 800563a:	1ad2      	subs	r2, r2, r3
 800563c:	42d3      	cmn	r3, r2
 800563e:	d100      	bne.n	8005642 <memmove+0x20>
 8005640:	bd10      	pop	{r4, pc}
 8005642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005646:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800564a:	e7f7      	b.n	800563c <memmove+0x1a>
 800564c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005650:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005654:	e7eb      	b.n	800562e <memmove+0xc>
	...

08005658 <_free_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4605      	mov	r5, r0
 800565c:	2900      	cmp	r1, #0
 800565e:	d043      	beq.n	80056e8 <_free_r+0x90>
 8005660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005664:	1f0c      	subs	r4, r1, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	bfb8      	it	lt
 800566a:	18e4      	addlt	r4, r4, r3
 800566c:	f000 f8d4 	bl	8005818 <__malloc_lock>
 8005670:	4a1e      	ldr	r2, [pc, #120]	; (80056ec <_free_r+0x94>)
 8005672:	6813      	ldr	r3, [r2, #0]
 8005674:	4610      	mov	r0, r2
 8005676:	b933      	cbnz	r3, 8005686 <_free_r+0x2e>
 8005678:	6063      	str	r3, [r4, #4]
 800567a:	6014      	str	r4, [r2, #0]
 800567c:	4628      	mov	r0, r5
 800567e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005682:	f000 b8ca 	b.w	800581a <__malloc_unlock>
 8005686:	42a3      	cmp	r3, r4
 8005688:	d90b      	bls.n	80056a2 <_free_r+0x4a>
 800568a:	6821      	ldr	r1, [r4, #0]
 800568c:	1862      	adds	r2, r4, r1
 800568e:	4293      	cmp	r3, r2
 8005690:	bf01      	itttt	eq
 8005692:	681a      	ldreq	r2, [r3, #0]
 8005694:	685b      	ldreq	r3, [r3, #4]
 8005696:	1852      	addeq	r2, r2, r1
 8005698:	6022      	streq	r2, [r4, #0]
 800569a:	6063      	str	r3, [r4, #4]
 800569c:	6004      	str	r4, [r0, #0]
 800569e:	e7ed      	b.n	800567c <_free_r+0x24>
 80056a0:	4613      	mov	r3, r2
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	b10a      	cbz	r2, 80056aa <_free_r+0x52>
 80056a6:	42a2      	cmp	r2, r4
 80056a8:	d9fa      	bls.n	80056a0 <_free_r+0x48>
 80056aa:	6819      	ldr	r1, [r3, #0]
 80056ac:	1858      	adds	r0, r3, r1
 80056ae:	42a0      	cmp	r0, r4
 80056b0:	d10b      	bne.n	80056ca <_free_r+0x72>
 80056b2:	6820      	ldr	r0, [r4, #0]
 80056b4:	4401      	add	r1, r0
 80056b6:	1858      	adds	r0, r3, r1
 80056b8:	4282      	cmp	r2, r0
 80056ba:	6019      	str	r1, [r3, #0]
 80056bc:	d1de      	bne.n	800567c <_free_r+0x24>
 80056be:	6810      	ldr	r0, [r2, #0]
 80056c0:	6852      	ldr	r2, [r2, #4]
 80056c2:	4401      	add	r1, r0
 80056c4:	6019      	str	r1, [r3, #0]
 80056c6:	605a      	str	r2, [r3, #4]
 80056c8:	e7d8      	b.n	800567c <_free_r+0x24>
 80056ca:	d902      	bls.n	80056d2 <_free_r+0x7a>
 80056cc:	230c      	movs	r3, #12
 80056ce:	602b      	str	r3, [r5, #0]
 80056d0:	e7d4      	b.n	800567c <_free_r+0x24>
 80056d2:	6820      	ldr	r0, [r4, #0]
 80056d4:	1821      	adds	r1, r4, r0
 80056d6:	428a      	cmp	r2, r1
 80056d8:	bf01      	itttt	eq
 80056da:	6811      	ldreq	r1, [r2, #0]
 80056dc:	6852      	ldreq	r2, [r2, #4]
 80056de:	1809      	addeq	r1, r1, r0
 80056e0:	6021      	streq	r1, [r4, #0]
 80056e2:	6062      	str	r2, [r4, #4]
 80056e4:	605c      	str	r4, [r3, #4]
 80056e6:	e7c9      	b.n	800567c <_free_r+0x24>
 80056e8:	bd38      	pop	{r3, r4, r5, pc}
 80056ea:	bf00      	nop
 80056ec:	20000190 	.word	0x20000190

080056f0 <_malloc_r>:
 80056f0:	b570      	push	{r4, r5, r6, lr}
 80056f2:	1ccd      	adds	r5, r1, #3
 80056f4:	f025 0503 	bic.w	r5, r5, #3
 80056f8:	3508      	adds	r5, #8
 80056fa:	2d0c      	cmp	r5, #12
 80056fc:	bf38      	it	cc
 80056fe:	250c      	movcc	r5, #12
 8005700:	2d00      	cmp	r5, #0
 8005702:	4606      	mov	r6, r0
 8005704:	db01      	blt.n	800570a <_malloc_r+0x1a>
 8005706:	42a9      	cmp	r1, r5
 8005708:	d903      	bls.n	8005712 <_malloc_r+0x22>
 800570a:	230c      	movs	r3, #12
 800570c:	6033      	str	r3, [r6, #0]
 800570e:	2000      	movs	r0, #0
 8005710:	bd70      	pop	{r4, r5, r6, pc}
 8005712:	f000 f881 	bl	8005818 <__malloc_lock>
 8005716:	4a23      	ldr	r2, [pc, #140]	; (80057a4 <_malloc_r+0xb4>)
 8005718:	6814      	ldr	r4, [r2, #0]
 800571a:	4621      	mov	r1, r4
 800571c:	b991      	cbnz	r1, 8005744 <_malloc_r+0x54>
 800571e:	4c22      	ldr	r4, [pc, #136]	; (80057a8 <_malloc_r+0xb8>)
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	b91b      	cbnz	r3, 800572c <_malloc_r+0x3c>
 8005724:	4630      	mov	r0, r6
 8005726:	f000 f867 	bl	80057f8 <_sbrk_r>
 800572a:	6020      	str	r0, [r4, #0]
 800572c:	4629      	mov	r1, r5
 800572e:	4630      	mov	r0, r6
 8005730:	f000 f862 	bl	80057f8 <_sbrk_r>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d126      	bne.n	8005786 <_malloc_r+0x96>
 8005738:	230c      	movs	r3, #12
 800573a:	4630      	mov	r0, r6
 800573c:	6033      	str	r3, [r6, #0]
 800573e:	f000 f86c 	bl	800581a <__malloc_unlock>
 8005742:	e7e4      	b.n	800570e <_malloc_r+0x1e>
 8005744:	680b      	ldr	r3, [r1, #0]
 8005746:	1b5b      	subs	r3, r3, r5
 8005748:	d41a      	bmi.n	8005780 <_malloc_r+0x90>
 800574a:	2b0b      	cmp	r3, #11
 800574c:	d90f      	bls.n	800576e <_malloc_r+0x7e>
 800574e:	600b      	str	r3, [r1, #0]
 8005750:	18cc      	adds	r4, r1, r3
 8005752:	50cd      	str	r5, [r1, r3]
 8005754:	4630      	mov	r0, r6
 8005756:	f000 f860 	bl	800581a <__malloc_unlock>
 800575a:	f104 000b 	add.w	r0, r4, #11
 800575e:	1d23      	adds	r3, r4, #4
 8005760:	f020 0007 	bic.w	r0, r0, #7
 8005764:	1ac3      	subs	r3, r0, r3
 8005766:	d01b      	beq.n	80057a0 <_malloc_r+0xb0>
 8005768:	425a      	negs	r2, r3
 800576a:	50e2      	str	r2, [r4, r3]
 800576c:	bd70      	pop	{r4, r5, r6, pc}
 800576e:	428c      	cmp	r4, r1
 8005770:	bf0b      	itete	eq
 8005772:	6863      	ldreq	r3, [r4, #4]
 8005774:	684b      	ldrne	r3, [r1, #4]
 8005776:	6013      	streq	r3, [r2, #0]
 8005778:	6063      	strne	r3, [r4, #4]
 800577a:	bf18      	it	ne
 800577c:	460c      	movne	r4, r1
 800577e:	e7e9      	b.n	8005754 <_malloc_r+0x64>
 8005780:	460c      	mov	r4, r1
 8005782:	6849      	ldr	r1, [r1, #4]
 8005784:	e7ca      	b.n	800571c <_malloc_r+0x2c>
 8005786:	1cc4      	adds	r4, r0, #3
 8005788:	f024 0403 	bic.w	r4, r4, #3
 800578c:	42a0      	cmp	r0, r4
 800578e:	d005      	beq.n	800579c <_malloc_r+0xac>
 8005790:	1a21      	subs	r1, r4, r0
 8005792:	4630      	mov	r0, r6
 8005794:	f000 f830 	bl	80057f8 <_sbrk_r>
 8005798:	3001      	adds	r0, #1
 800579a:	d0cd      	beq.n	8005738 <_malloc_r+0x48>
 800579c:	6025      	str	r5, [r4, #0]
 800579e:	e7d9      	b.n	8005754 <_malloc_r+0x64>
 80057a0:	bd70      	pop	{r4, r5, r6, pc}
 80057a2:	bf00      	nop
 80057a4:	20000190 	.word	0x20000190
 80057a8:	20000194 	.word	0x20000194

080057ac <_realloc_r>:
 80057ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ae:	4607      	mov	r7, r0
 80057b0:	4614      	mov	r4, r2
 80057b2:	460e      	mov	r6, r1
 80057b4:	b921      	cbnz	r1, 80057c0 <_realloc_r+0x14>
 80057b6:	4611      	mov	r1, r2
 80057b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057bc:	f7ff bf98 	b.w	80056f0 <_malloc_r>
 80057c0:	b922      	cbnz	r2, 80057cc <_realloc_r+0x20>
 80057c2:	f7ff ff49 	bl	8005658 <_free_r>
 80057c6:	4625      	mov	r5, r4
 80057c8:	4628      	mov	r0, r5
 80057ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057cc:	f000 f826 	bl	800581c <_malloc_usable_size_r>
 80057d0:	4284      	cmp	r4, r0
 80057d2:	d90f      	bls.n	80057f4 <_realloc_r+0x48>
 80057d4:	4621      	mov	r1, r4
 80057d6:	4638      	mov	r0, r7
 80057d8:	f7ff ff8a 	bl	80056f0 <_malloc_r>
 80057dc:	4605      	mov	r5, r0
 80057de:	2800      	cmp	r0, #0
 80057e0:	d0f2      	beq.n	80057c8 <_realloc_r+0x1c>
 80057e2:	4631      	mov	r1, r6
 80057e4:	4622      	mov	r2, r4
 80057e6:	f7ff ff11 	bl	800560c <memcpy>
 80057ea:	4631      	mov	r1, r6
 80057ec:	4638      	mov	r0, r7
 80057ee:	f7ff ff33 	bl	8005658 <_free_r>
 80057f2:	e7e9      	b.n	80057c8 <_realloc_r+0x1c>
 80057f4:	4635      	mov	r5, r6
 80057f6:	e7e7      	b.n	80057c8 <_realloc_r+0x1c>

080057f8 <_sbrk_r>:
 80057f8:	b538      	push	{r3, r4, r5, lr}
 80057fa:	2300      	movs	r3, #0
 80057fc:	4c05      	ldr	r4, [pc, #20]	; (8005814 <_sbrk_r+0x1c>)
 80057fe:	4605      	mov	r5, r0
 8005800:	4608      	mov	r0, r1
 8005802:	6023      	str	r3, [r4, #0]
 8005804:	f000 f814 	bl	8005830 <_sbrk>
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	d102      	bne.n	8005812 <_sbrk_r+0x1a>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	b103      	cbz	r3, 8005812 <_sbrk_r+0x1a>
 8005810:	602b      	str	r3, [r5, #0]
 8005812:	bd38      	pop	{r3, r4, r5, pc}
 8005814:	20000500 	.word	0x20000500

08005818 <__malloc_lock>:
 8005818:	4770      	bx	lr

0800581a <__malloc_unlock>:
 800581a:	4770      	bx	lr

0800581c <_malloc_usable_size_r>:
 800581c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005820:	2800      	cmp	r0, #0
 8005822:	f1a0 0004 	sub.w	r0, r0, #4
 8005826:	bfbc      	itt	lt
 8005828:	580b      	ldrlt	r3, [r1, r0]
 800582a:	18c0      	addlt	r0, r0, r3
 800582c:	4770      	bx	lr
	...

08005830 <_sbrk>:
 8005830:	4b04      	ldr	r3, [pc, #16]	; (8005844 <_sbrk+0x14>)
 8005832:	4602      	mov	r2, r0
 8005834:	6819      	ldr	r1, [r3, #0]
 8005836:	b909      	cbnz	r1, 800583c <_sbrk+0xc>
 8005838:	4903      	ldr	r1, [pc, #12]	; (8005848 <_sbrk+0x18>)
 800583a:	6019      	str	r1, [r3, #0]
 800583c:	6818      	ldr	r0, [r3, #0]
 800583e:	4402      	add	r2, r0
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	4770      	bx	lr
 8005844:	20000198 	.word	0x20000198
 8005848:	20000504 	.word	0x20000504

0800584c <_init>:
 800584c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584e:	bf00      	nop
 8005850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005852:	bc08      	pop	{r3}
 8005854:	469e      	mov	lr, r3
 8005856:	4770      	bx	lr

08005858 <_fini>:
 8005858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585a:	bf00      	nop
 800585c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585e:	bc08      	pop	{r3}
 8005860:	469e      	mov	lr, r3
 8005862:	4770      	bx	lr
