
digiTOS-COMOD-SinBoard-CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006210  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  080062d0  080062d0  000162d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800671c  0800671c  0001671c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006720  08006720  00016720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000029c  20000000  08006724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000042c  200002a0  080069c0  000202a0  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200006cc  080069c0  000206cc  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00029dee  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005334  00000000  00000000  0004a0b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009a21  00000000  00000000  0004f3e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ef8  00000000  00000000  00058e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001498  00000000  00000000  00059d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b1f8  00000000  00000000  0005b198  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004d7b  00000000  00000000  00066390  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006b10b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002f70  00000000  00000000  0006b188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002a0 	.word	0x200002a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080062b8 	.word	0x080062b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002a4 	.word	0x200002a4
 8000104:	080062b8 	.word	0x080062b8

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cfrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	1c08      	adds	r0, r1, #0
 8000238:	4661      	mov	r1, ip
 800023a:	e7ff      	b.n	800023c <__aeabi_cfcmpeq>

0800023c <__aeabi_cfcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f000 fa43 	bl	80006c8 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cfcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_fcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 f9d5 	bl	80005fc <__eqsf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_fcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fa35 	bl	80006c8 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_fcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fa2b 	bl	80006c8 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_fcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f9e1 	bl	8000648 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_fcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 f9d7 	bl	8000648 <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_fcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_f2uiz>:
 80002a8:	219e      	movs	r1, #158	; 0x9e
 80002aa:	b510      	push	{r4, lr}
 80002ac:	05c9      	lsls	r1, r1, #23
 80002ae:	1c04      	adds	r4, r0, #0
 80002b0:	f7ff fff0 	bl	8000294 <__aeabi_fcmpge>
 80002b4:	2800      	cmp	r0, #0
 80002b6:	d103      	bne.n	80002c0 <__aeabi_f2uiz+0x18>
 80002b8:	1c20      	adds	r0, r4, #0
 80002ba:	f000 fd03 	bl	8000cc4 <__aeabi_f2iz>
 80002be:	bd10      	pop	{r4, pc}
 80002c0:	219e      	movs	r1, #158	; 0x9e
 80002c2:	1c20      	adds	r0, r4, #0
 80002c4:	05c9      	lsls	r1, r1, #23
 80002c6:	f000 fb61 	bl	800098c <__aeabi_fsub>
 80002ca:	f000 fcfb 	bl	8000cc4 <__aeabi_f2iz>
 80002ce:	2380      	movs	r3, #128	; 0x80
 80002d0:	061b      	lsls	r3, r3, #24
 80002d2:	469c      	mov	ip, r3
 80002d4:	4460      	add	r0, ip
 80002d6:	e7f2      	b.n	80002be <__aeabi_f2uiz+0x16>

080002d8 <__aeabi_fadd>:
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	46c6      	mov	lr, r8
 80002dc:	024e      	lsls	r6, r1, #9
 80002de:	0247      	lsls	r7, r0, #9
 80002e0:	0a76      	lsrs	r6, r6, #9
 80002e2:	0a7b      	lsrs	r3, r7, #9
 80002e4:	0044      	lsls	r4, r0, #1
 80002e6:	0fc5      	lsrs	r5, r0, #31
 80002e8:	00f7      	lsls	r7, r6, #3
 80002ea:	0048      	lsls	r0, r1, #1
 80002ec:	4698      	mov	r8, r3
 80002ee:	b500      	push	{lr}
 80002f0:	0e24      	lsrs	r4, r4, #24
 80002f2:	002a      	movs	r2, r5
 80002f4:	00db      	lsls	r3, r3, #3
 80002f6:	0e00      	lsrs	r0, r0, #24
 80002f8:	0fc9      	lsrs	r1, r1, #31
 80002fa:	46bc      	mov	ip, r7
 80002fc:	428d      	cmp	r5, r1
 80002fe:	d067      	beq.n	80003d0 <__aeabi_fadd+0xf8>
 8000300:	1a22      	subs	r2, r4, r0
 8000302:	2a00      	cmp	r2, #0
 8000304:	dc00      	bgt.n	8000308 <__aeabi_fadd+0x30>
 8000306:	e0a5      	b.n	8000454 <__aeabi_fadd+0x17c>
 8000308:	2800      	cmp	r0, #0
 800030a:	d13a      	bne.n	8000382 <__aeabi_fadd+0xaa>
 800030c:	2f00      	cmp	r7, #0
 800030e:	d100      	bne.n	8000312 <__aeabi_fadd+0x3a>
 8000310:	e093      	b.n	800043a <__aeabi_fadd+0x162>
 8000312:	1e51      	subs	r1, r2, #1
 8000314:	2900      	cmp	r1, #0
 8000316:	d000      	beq.n	800031a <__aeabi_fadd+0x42>
 8000318:	e0bc      	b.n	8000494 <__aeabi_fadd+0x1bc>
 800031a:	2401      	movs	r4, #1
 800031c:	1bdb      	subs	r3, r3, r7
 800031e:	015a      	lsls	r2, r3, #5
 8000320:	d546      	bpl.n	80003b0 <__aeabi_fadd+0xd8>
 8000322:	019b      	lsls	r3, r3, #6
 8000324:	099e      	lsrs	r6, r3, #6
 8000326:	0030      	movs	r0, r6
 8000328:	f000 fd82 	bl	8000e30 <__clzsi2>
 800032c:	3805      	subs	r0, #5
 800032e:	4086      	lsls	r6, r0
 8000330:	4284      	cmp	r4, r0
 8000332:	dd00      	ble.n	8000336 <__aeabi_fadd+0x5e>
 8000334:	e09d      	b.n	8000472 <__aeabi_fadd+0x19a>
 8000336:	1b04      	subs	r4, r0, r4
 8000338:	0032      	movs	r2, r6
 800033a:	2020      	movs	r0, #32
 800033c:	3401      	adds	r4, #1
 800033e:	40e2      	lsrs	r2, r4
 8000340:	1b04      	subs	r4, r0, r4
 8000342:	40a6      	lsls	r6, r4
 8000344:	0033      	movs	r3, r6
 8000346:	1e5e      	subs	r6, r3, #1
 8000348:	41b3      	sbcs	r3, r6
 800034a:	2400      	movs	r4, #0
 800034c:	4313      	orrs	r3, r2
 800034e:	075a      	lsls	r2, r3, #29
 8000350:	d004      	beq.n	800035c <__aeabi_fadd+0x84>
 8000352:	220f      	movs	r2, #15
 8000354:	401a      	ands	r2, r3
 8000356:	2a04      	cmp	r2, #4
 8000358:	d000      	beq.n	800035c <__aeabi_fadd+0x84>
 800035a:	3304      	adds	r3, #4
 800035c:	015a      	lsls	r2, r3, #5
 800035e:	d529      	bpl.n	80003b4 <__aeabi_fadd+0xdc>
 8000360:	3401      	adds	r4, #1
 8000362:	2cff      	cmp	r4, #255	; 0xff
 8000364:	d100      	bne.n	8000368 <__aeabi_fadd+0x90>
 8000366:	e081      	b.n	800046c <__aeabi_fadd+0x194>
 8000368:	002a      	movs	r2, r5
 800036a:	019b      	lsls	r3, r3, #6
 800036c:	0a5b      	lsrs	r3, r3, #9
 800036e:	b2e4      	uxtb	r4, r4
 8000370:	025b      	lsls	r3, r3, #9
 8000372:	05e4      	lsls	r4, r4, #23
 8000374:	0a58      	lsrs	r0, r3, #9
 8000376:	07d2      	lsls	r2, r2, #31
 8000378:	4320      	orrs	r0, r4
 800037a:	4310      	orrs	r0, r2
 800037c:	bc04      	pop	{r2}
 800037e:	4690      	mov	r8, r2
 8000380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000382:	2cff      	cmp	r4, #255	; 0xff
 8000384:	d0e3      	beq.n	800034e <__aeabi_fadd+0x76>
 8000386:	2180      	movs	r1, #128	; 0x80
 8000388:	0038      	movs	r0, r7
 800038a:	04c9      	lsls	r1, r1, #19
 800038c:	4308      	orrs	r0, r1
 800038e:	4684      	mov	ip, r0
 8000390:	2a1b      	cmp	r2, #27
 8000392:	dd00      	ble.n	8000396 <__aeabi_fadd+0xbe>
 8000394:	e082      	b.n	800049c <__aeabi_fadd+0x1c4>
 8000396:	2020      	movs	r0, #32
 8000398:	4661      	mov	r1, ip
 800039a:	40d1      	lsrs	r1, r2
 800039c:	1a82      	subs	r2, r0, r2
 800039e:	4660      	mov	r0, ip
 80003a0:	4090      	lsls	r0, r2
 80003a2:	0002      	movs	r2, r0
 80003a4:	1e50      	subs	r0, r2, #1
 80003a6:	4182      	sbcs	r2, r0
 80003a8:	430a      	orrs	r2, r1
 80003aa:	1a9b      	subs	r3, r3, r2
 80003ac:	015a      	lsls	r2, r3, #5
 80003ae:	d4b8      	bmi.n	8000322 <__aeabi_fadd+0x4a>
 80003b0:	075a      	lsls	r2, r3, #29
 80003b2:	d1ce      	bne.n	8000352 <__aeabi_fadd+0x7a>
 80003b4:	08de      	lsrs	r6, r3, #3
 80003b6:	002a      	movs	r2, r5
 80003b8:	2cff      	cmp	r4, #255	; 0xff
 80003ba:	d13a      	bne.n	8000432 <__aeabi_fadd+0x15a>
 80003bc:	2e00      	cmp	r6, #0
 80003be:	d100      	bne.n	80003c2 <__aeabi_fadd+0xea>
 80003c0:	e0ae      	b.n	8000520 <__aeabi_fadd+0x248>
 80003c2:	2380      	movs	r3, #128	; 0x80
 80003c4:	03db      	lsls	r3, r3, #15
 80003c6:	4333      	orrs	r3, r6
 80003c8:	025b      	lsls	r3, r3, #9
 80003ca:	0a5b      	lsrs	r3, r3, #9
 80003cc:	24ff      	movs	r4, #255	; 0xff
 80003ce:	e7cf      	b.n	8000370 <__aeabi_fadd+0x98>
 80003d0:	1a21      	subs	r1, r4, r0
 80003d2:	2900      	cmp	r1, #0
 80003d4:	dd52      	ble.n	800047c <__aeabi_fadd+0x1a4>
 80003d6:	2800      	cmp	r0, #0
 80003d8:	d031      	beq.n	800043e <__aeabi_fadd+0x166>
 80003da:	2cff      	cmp	r4, #255	; 0xff
 80003dc:	d0b7      	beq.n	800034e <__aeabi_fadd+0x76>
 80003de:	2080      	movs	r0, #128	; 0x80
 80003e0:	003e      	movs	r6, r7
 80003e2:	04c0      	lsls	r0, r0, #19
 80003e4:	4306      	orrs	r6, r0
 80003e6:	46b4      	mov	ip, r6
 80003e8:	291b      	cmp	r1, #27
 80003ea:	dd00      	ble.n	80003ee <__aeabi_fadd+0x116>
 80003ec:	e0aa      	b.n	8000544 <__aeabi_fadd+0x26c>
 80003ee:	2620      	movs	r6, #32
 80003f0:	4660      	mov	r0, ip
 80003f2:	40c8      	lsrs	r0, r1
 80003f4:	1a71      	subs	r1, r6, r1
 80003f6:	4666      	mov	r6, ip
 80003f8:	408e      	lsls	r6, r1
 80003fa:	0031      	movs	r1, r6
 80003fc:	1e4e      	subs	r6, r1, #1
 80003fe:	41b1      	sbcs	r1, r6
 8000400:	4301      	orrs	r1, r0
 8000402:	185b      	adds	r3, r3, r1
 8000404:	0159      	lsls	r1, r3, #5
 8000406:	d5d3      	bpl.n	80003b0 <__aeabi_fadd+0xd8>
 8000408:	3401      	adds	r4, #1
 800040a:	2cff      	cmp	r4, #255	; 0xff
 800040c:	d100      	bne.n	8000410 <__aeabi_fadd+0x138>
 800040e:	e087      	b.n	8000520 <__aeabi_fadd+0x248>
 8000410:	2201      	movs	r2, #1
 8000412:	4978      	ldr	r1, [pc, #480]	; (80005f4 <__aeabi_fadd+0x31c>)
 8000414:	401a      	ands	r2, r3
 8000416:	085b      	lsrs	r3, r3, #1
 8000418:	400b      	ands	r3, r1
 800041a:	4313      	orrs	r3, r2
 800041c:	e797      	b.n	800034e <__aeabi_fadd+0x76>
 800041e:	2c00      	cmp	r4, #0
 8000420:	d000      	beq.n	8000424 <__aeabi_fadd+0x14c>
 8000422:	e0a7      	b.n	8000574 <__aeabi_fadd+0x29c>
 8000424:	2b00      	cmp	r3, #0
 8000426:	d000      	beq.n	800042a <__aeabi_fadd+0x152>
 8000428:	e0b6      	b.n	8000598 <__aeabi_fadd+0x2c0>
 800042a:	1e3b      	subs	r3, r7, #0
 800042c:	d162      	bne.n	80004f4 <__aeabi_fadd+0x21c>
 800042e:	2600      	movs	r6, #0
 8000430:	2200      	movs	r2, #0
 8000432:	0273      	lsls	r3, r6, #9
 8000434:	0a5b      	lsrs	r3, r3, #9
 8000436:	b2e4      	uxtb	r4, r4
 8000438:	e79a      	b.n	8000370 <__aeabi_fadd+0x98>
 800043a:	0014      	movs	r4, r2
 800043c:	e787      	b.n	800034e <__aeabi_fadd+0x76>
 800043e:	2f00      	cmp	r7, #0
 8000440:	d04d      	beq.n	80004de <__aeabi_fadd+0x206>
 8000442:	1e48      	subs	r0, r1, #1
 8000444:	2800      	cmp	r0, #0
 8000446:	d157      	bne.n	80004f8 <__aeabi_fadd+0x220>
 8000448:	4463      	add	r3, ip
 800044a:	2401      	movs	r4, #1
 800044c:	015a      	lsls	r2, r3, #5
 800044e:	d5af      	bpl.n	80003b0 <__aeabi_fadd+0xd8>
 8000450:	2402      	movs	r4, #2
 8000452:	e7dd      	b.n	8000410 <__aeabi_fadd+0x138>
 8000454:	2a00      	cmp	r2, #0
 8000456:	d124      	bne.n	80004a2 <__aeabi_fadd+0x1ca>
 8000458:	1c62      	adds	r2, r4, #1
 800045a:	b2d2      	uxtb	r2, r2
 800045c:	2a01      	cmp	r2, #1
 800045e:	ddde      	ble.n	800041e <__aeabi_fadd+0x146>
 8000460:	1bde      	subs	r6, r3, r7
 8000462:	0172      	lsls	r2, r6, #5
 8000464:	d535      	bpl.n	80004d2 <__aeabi_fadd+0x1fa>
 8000466:	1afe      	subs	r6, r7, r3
 8000468:	000d      	movs	r5, r1
 800046a:	e75c      	b.n	8000326 <__aeabi_fadd+0x4e>
 800046c:	002a      	movs	r2, r5
 800046e:	2300      	movs	r3, #0
 8000470:	e77e      	b.n	8000370 <__aeabi_fadd+0x98>
 8000472:	0033      	movs	r3, r6
 8000474:	4a60      	ldr	r2, [pc, #384]	; (80005f8 <__aeabi_fadd+0x320>)
 8000476:	1a24      	subs	r4, r4, r0
 8000478:	4013      	ands	r3, r2
 800047a:	e768      	b.n	800034e <__aeabi_fadd+0x76>
 800047c:	2900      	cmp	r1, #0
 800047e:	d163      	bne.n	8000548 <__aeabi_fadd+0x270>
 8000480:	1c61      	adds	r1, r4, #1
 8000482:	b2c8      	uxtb	r0, r1
 8000484:	2801      	cmp	r0, #1
 8000486:	dd4e      	ble.n	8000526 <__aeabi_fadd+0x24e>
 8000488:	29ff      	cmp	r1, #255	; 0xff
 800048a:	d049      	beq.n	8000520 <__aeabi_fadd+0x248>
 800048c:	4463      	add	r3, ip
 800048e:	085b      	lsrs	r3, r3, #1
 8000490:	000c      	movs	r4, r1
 8000492:	e75c      	b.n	800034e <__aeabi_fadd+0x76>
 8000494:	2aff      	cmp	r2, #255	; 0xff
 8000496:	d041      	beq.n	800051c <__aeabi_fadd+0x244>
 8000498:	000a      	movs	r2, r1
 800049a:	e779      	b.n	8000390 <__aeabi_fadd+0xb8>
 800049c:	2201      	movs	r2, #1
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	e784      	b.n	80003ac <__aeabi_fadd+0xd4>
 80004a2:	2c00      	cmp	r4, #0
 80004a4:	d01d      	beq.n	80004e2 <__aeabi_fadd+0x20a>
 80004a6:	28ff      	cmp	r0, #255	; 0xff
 80004a8:	d022      	beq.n	80004f0 <__aeabi_fadd+0x218>
 80004aa:	2480      	movs	r4, #128	; 0x80
 80004ac:	04e4      	lsls	r4, r4, #19
 80004ae:	4252      	negs	r2, r2
 80004b0:	4323      	orrs	r3, r4
 80004b2:	2a1b      	cmp	r2, #27
 80004b4:	dd00      	ble.n	80004b8 <__aeabi_fadd+0x1e0>
 80004b6:	e08a      	b.n	80005ce <__aeabi_fadd+0x2f6>
 80004b8:	001c      	movs	r4, r3
 80004ba:	2520      	movs	r5, #32
 80004bc:	40d4      	lsrs	r4, r2
 80004be:	1aaa      	subs	r2, r5, r2
 80004c0:	4093      	lsls	r3, r2
 80004c2:	1e5a      	subs	r2, r3, #1
 80004c4:	4193      	sbcs	r3, r2
 80004c6:	4323      	orrs	r3, r4
 80004c8:	4662      	mov	r2, ip
 80004ca:	0004      	movs	r4, r0
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	000d      	movs	r5, r1
 80004d0:	e725      	b.n	800031e <__aeabi_fadd+0x46>
 80004d2:	2e00      	cmp	r6, #0
 80004d4:	d000      	beq.n	80004d8 <__aeabi_fadd+0x200>
 80004d6:	e726      	b.n	8000326 <__aeabi_fadd+0x4e>
 80004d8:	2200      	movs	r2, #0
 80004da:	2400      	movs	r4, #0
 80004dc:	e7a9      	b.n	8000432 <__aeabi_fadd+0x15a>
 80004de:	000c      	movs	r4, r1
 80004e0:	e735      	b.n	800034e <__aeabi_fadd+0x76>
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d04d      	beq.n	8000582 <__aeabi_fadd+0x2aa>
 80004e6:	43d2      	mvns	r2, r2
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d0ed      	beq.n	80004c8 <__aeabi_fadd+0x1f0>
 80004ec:	28ff      	cmp	r0, #255	; 0xff
 80004ee:	d1e0      	bne.n	80004b2 <__aeabi_fadd+0x1da>
 80004f0:	4663      	mov	r3, ip
 80004f2:	24ff      	movs	r4, #255	; 0xff
 80004f4:	000d      	movs	r5, r1
 80004f6:	e72a      	b.n	800034e <__aeabi_fadd+0x76>
 80004f8:	29ff      	cmp	r1, #255	; 0xff
 80004fa:	d00f      	beq.n	800051c <__aeabi_fadd+0x244>
 80004fc:	0001      	movs	r1, r0
 80004fe:	e773      	b.n	80003e8 <__aeabi_fadd+0x110>
 8000500:	2b00      	cmp	r3, #0
 8000502:	d061      	beq.n	80005c8 <__aeabi_fadd+0x2f0>
 8000504:	24ff      	movs	r4, #255	; 0xff
 8000506:	2f00      	cmp	r7, #0
 8000508:	d100      	bne.n	800050c <__aeabi_fadd+0x234>
 800050a:	e720      	b.n	800034e <__aeabi_fadd+0x76>
 800050c:	2280      	movs	r2, #128	; 0x80
 800050e:	4641      	mov	r1, r8
 8000510:	03d2      	lsls	r2, r2, #15
 8000512:	4211      	tst	r1, r2
 8000514:	d002      	beq.n	800051c <__aeabi_fadd+0x244>
 8000516:	4216      	tst	r6, r2
 8000518:	d100      	bne.n	800051c <__aeabi_fadd+0x244>
 800051a:	003b      	movs	r3, r7
 800051c:	24ff      	movs	r4, #255	; 0xff
 800051e:	e716      	b.n	800034e <__aeabi_fadd+0x76>
 8000520:	24ff      	movs	r4, #255	; 0xff
 8000522:	2300      	movs	r3, #0
 8000524:	e724      	b.n	8000370 <__aeabi_fadd+0x98>
 8000526:	2c00      	cmp	r4, #0
 8000528:	d1ea      	bne.n	8000500 <__aeabi_fadd+0x228>
 800052a:	2b00      	cmp	r3, #0
 800052c:	d058      	beq.n	80005e0 <__aeabi_fadd+0x308>
 800052e:	2f00      	cmp	r7, #0
 8000530:	d100      	bne.n	8000534 <__aeabi_fadd+0x25c>
 8000532:	e70c      	b.n	800034e <__aeabi_fadd+0x76>
 8000534:	4463      	add	r3, ip
 8000536:	015a      	lsls	r2, r3, #5
 8000538:	d400      	bmi.n	800053c <__aeabi_fadd+0x264>
 800053a:	e739      	b.n	80003b0 <__aeabi_fadd+0xd8>
 800053c:	4a2e      	ldr	r2, [pc, #184]	; (80005f8 <__aeabi_fadd+0x320>)
 800053e:	000c      	movs	r4, r1
 8000540:	4013      	ands	r3, r2
 8000542:	e704      	b.n	800034e <__aeabi_fadd+0x76>
 8000544:	2101      	movs	r1, #1
 8000546:	e75c      	b.n	8000402 <__aeabi_fadd+0x12a>
 8000548:	2c00      	cmp	r4, #0
 800054a:	d11e      	bne.n	800058a <__aeabi_fadd+0x2b2>
 800054c:	2b00      	cmp	r3, #0
 800054e:	d040      	beq.n	80005d2 <__aeabi_fadd+0x2fa>
 8000550:	43c9      	mvns	r1, r1
 8000552:	2900      	cmp	r1, #0
 8000554:	d00b      	beq.n	800056e <__aeabi_fadd+0x296>
 8000556:	28ff      	cmp	r0, #255	; 0xff
 8000558:	d036      	beq.n	80005c8 <__aeabi_fadd+0x2f0>
 800055a:	291b      	cmp	r1, #27
 800055c:	dc47      	bgt.n	80005ee <__aeabi_fadd+0x316>
 800055e:	001c      	movs	r4, r3
 8000560:	2620      	movs	r6, #32
 8000562:	40cc      	lsrs	r4, r1
 8000564:	1a71      	subs	r1, r6, r1
 8000566:	408b      	lsls	r3, r1
 8000568:	1e59      	subs	r1, r3, #1
 800056a:	418b      	sbcs	r3, r1
 800056c:	4323      	orrs	r3, r4
 800056e:	4463      	add	r3, ip
 8000570:	0004      	movs	r4, r0
 8000572:	e747      	b.n	8000404 <__aeabi_fadd+0x12c>
 8000574:	2b00      	cmp	r3, #0
 8000576:	d118      	bne.n	80005aa <__aeabi_fadd+0x2d2>
 8000578:	1e3b      	subs	r3, r7, #0
 800057a:	d02d      	beq.n	80005d8 <__aeabi_fadd+0x300>
 800057c:	000d      	movs	r5, r1
 800057e:	24ff      	movs	r4, #255	; 0xff
 8000580:	e6e5      	b.n	800034e <__aeabi_fadd+0x76>
 8000582:	003b      	movs	r3, r7
 8000584:	0004      	movs	r4, r0
 8000586:	000d      	movs	r5, r1
 8000588:	e6e1      	b.n	800034e <__aeabi_fadd+0x76>
 800058a:	28ff      	cmp	r0, #255	; 0xff
 800058c:	d01c      	beq.n	80005c8 <__aeabi_fadd+0x2f0>
 800058e:	2480      	movs	r4, #128	; 0x80
 8000590:	04e4      	lsls	r4, r4, #19
 8000592:	4249      	negs	r1, r1
 8000594:	4323      	orrs	r3, r4
 8000596:	e7e0      	b.n	800055a <__aeabi_fadd+0x282>
 8000598:	2f00      	cmp	r7, #0
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0x2c6>
 800059c:	e6d7      	b.n	800034e <__aeabi_fadd+0x76>
 800059e:	1bde      	subs	r6, r3, r7
 80005a0:	0172      	lsls	r2, r6, #5
 80005a2:	d51f      	bpl.n	80005e4 <__aeabi_fadd+0x30c>
 80005a4:	1afb      	subs	r3, r7, r3
 80005a6:	000d      	movs	r5, r1
 80005a8:	e6d1      	b.n	800034e <__aeabi_fadd+0x76>
 80005aa:	24ff      	movs	r4, #255	; 0xff
 80005ac:	2f00      	cmp	r7, #0
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fadd+0x2da>
 80005b0:	e6cd      	b.n	800034e <__aeabi_fadd+0x76>
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	4640      	mov	r0, r8
 80005b6:	03d2      	lsls	r2, r2, #15
 80005b8:	4210      	tst	r0, r2
 80005ba:	d0af      	beq.n	800051c <__aeabi_fadd+0x244>
 80005bc:	4216      	tst	r6, r2
 80005be:	d1ad      	bne.n	800051c <__aeabi_fadd+0x244>
 80005c0:	003b      	movs	r3, r7
 80005c2:	000d      	movs	r5, r1
 80005c4:	24ff      	movs	r4, #255	; 0xff
 80005c6:	e6c2      	b.n	800034e <__aeabi_fadd+0x76>
 80005c8:	4663      	mov	r3, ip
 80005ca:	24ff      	movs	r4, #255	; 0xff
 80005cc:	e6bf      	b.n	800034e <__aeabi_fadd+0x76>
 80005ce:	2301      	movs	r3, #1
 80005d0:	e77a      	b.n	80004c8 <__aeabi_fadd+0x1f0>
 80005d2:	003b      	movs	r3, r7
 80005d4:	0004      	movs	r4, r0
 80005d6:	e6ba      	b.n	800034e <__aeabi_fadd+0x76>
 80005d8:	2680      	movs	r6, #128	; 0x80
 80005da:	2200      	movs	r2, #0
 80005dc:	03f6      	lsls	r6, r6, #15
 80005de:	e6f0      	b.n	80003c2 <__aeabi_fadd+0xea>
 80005e0:	003b      	movs	r3, r7
 80005e2:	e6b4      	b.n	800034e <__aeabi_fadd+0x76>
 80005e4:	1e33      	subs	r3, r6, #0
 80005e6:	d000      	beq.n	80005ea <__aeabi_fadd+0x312>
 80005e8:	e6e2      	b.n	80003b0 <__aeabi_fadd+0xd8>
 80005ea:	2200      	movs	r2, #0
 80005ec:	e721      	b.n	8000432 <__aeabi_fadd+0x15a>
 80005ee:	2301      	movs	r3, #1
 80005f0:	e7bd      	b.n	800056e <__aeabi_fadd+0x296>
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	7dffffff 	.word	0x7dffffff
 80005f8:	fbffffff 	.word	0xfbffffff

080005fc <__eqsf2>:
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	0042      	lsls	r2, r0, #1
 8000600:	0245      	lsls	r5, r0, #9
 8000602:	024e      	lsls	r6, r1, #9
 8000604:	004c      	lsls	r4, r1, #1
 8000606:	0fc3      	lsrs	r3, r0, #31
 8000608:	0a6d      	lsrs	r5, r5, #9
 800060a:	0e12      	lsrs	r2, r2, #24
 800060c:	0a76      	lsrs	r6, r6, #9
 800060e:	0e24      	lsrs	r4, r4, #24
 8000610:	0fc9      	lsrs	r1, r1, #31
 8000612:	2001      	movs	r0, #1
 8000614:	2aff      	cmp	r2, #255	; 0xff
 8000616:	d006      	beq.n	8000626 <__eqsf2+0x2a>
 8000618:	2cff      	cmp	r4, #255	; 0xff
 800061a:	d003      	beq.n	8000624 <__eqsf2+0x28>
 800061c:	42a2      	cmp	r2, r4
 800061e:	d101      	bne.n	8000624 <__eqsf2+0x28>
 8000620:	42b5      	cmp	r5, r6
 8000622:	d006      	beq.n	8000632 <__eqsf2+0x36>
 8000624:	bd70      	pop	{r4, r5, r6, pc}
 8000626:	2d00      	cmp	r5, #0
 8000628:	d1fc      	bne.n	8000624 <__eqsf2+0x28>
 800062a:	2cff      	cmp	r4, #255	; 0xff
 800062c:	d1fa      	bne.n	8000624 <__eqsf2+0x28>
 800062e:	2e00      	cmp	r6, #0
 8000630:	d1f8      	bne.n	8000624 <__eqsf2+0x28>
 8000632:	428b      	cmp	r3, r1
 8000634:	d006      	beq.n	8000644 <__eqsf2+0x48>
 8000636:	2001      	movs	r0, #1
 8000638:	2a00      	cmp	r2, #0
 800063a:	d1f3      	bne.n	8000624 <__eqsf2+0x28>
 800063c:	0028      	movs	r0, r5
 800063e:	1e45      	subs	r5, r0, #1
 8000640:	41a8      	sbcs	r0, r5
 8000642:	e7ef      	b.n	8000624 <__eqsf2+0x28>
 8000644:	2000      	movs	r0, #0
 8000646:	e7ed      	b.n	8000624 <__eqsf2+0x28>

08000648 <__gesf2>:
 8000648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064a:	0042      	lsls	r2, r0, #1
 800064c:	0245      	lsls	r5, r0, #9
 800064e:	024c      	lsls	r4, r1, #9
 8000650:	0fc3      	lsrs	r3, r0, #31
 8000652:	0048      	lsls	r0, r1, #1
 8000654:	0a6d      	lsrs	r5, r5, #9
 8000656:	0e12      	lsrs	r2, r2, #24
 8000658:	0a64      	lsrs	r4, r4, #9
 800065a:	0e00      	lsrs	r0, r0, #24
 800065c:	0fc9      	lsrs	r1, r1, #31
 800065e:	2aff      	cmp	r2, #255	; 0xff
 8000660:	d01e      	beq.n	80006a0 <__gesf2+0x58>
 8000662:	28ff      	cmp	r0, #255	; 0xff
 8000664:	d021      	beq.n	80006aa <__gesf2+0x62>
 8000666:	2a00      	cmp	r2, #0
 8000668:	d10a      	bne.n	8000680 <__gesf2+0x38>
 800066a:	426e      	negs	r6, r5
 800066c:	416e      	adcs	r6, r5
 800066e:	b2f6      	uxtb	r6, r6
 8000670:	2800      	cmp	r0, #0
 8000672:	d10f      	bne.n	8000694 <__gesf2+0x4c>
 8000674:	2c00      	cmp	r4, #0
 8000676:	d10d      	bne.n	8000694 <__gesf2+0x4c>
 8000678:	2000      	movs	r0, #0
 800067a:	2d00      	cmp	r5, #0
 800067c:	d009      	beq.n	8000692 <__gesf2+0x4a>
 800067e:	e005      	b.n	800068c <__gesf2+0x44>
 8000680:	2800      	cmp	r0, #0
 8000682:	d101      	bne.n	8000688 <__gesf2+0x40>
 8000684:	2c00      	cmp	r4, #0
 8000686:	d001      	beq.n	800068c <__gesf2+0x44>
 8000688:	428b      	cmp	r3, r1
 800068a:	d011      	beq.n	80006b0 <__gesf2+0x68>
 800068c:	2101      	movs	r1, #1
 800068e:	4258      	negs	r0, r3
 8000690:	4308      	orrs	r0, r1
 8000692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000694:	2e00      	cmp	r6, #0
 8000696:	d0f7      	beq.n	8000688 <__gesf2+0x40>
 8000698:	2001      	movs	r0, #1
 800069a:	3901      	subs	r1, #1
 800069c:	4308      	orrs	r0, r1
 800069e:	e7f8      	b.n	8000692 <__gesf2+0x4a>
 80006a0:	2d00      	cmp	r5, #0
 80006a2:	d0de      	beq.n	8000662 <__gesf2+0x1a>
 80006a4:	2002      	movs	r0, #2
 80006a6:	4240      	negs	r0, r0
 80006a8:	e7f3      	b.n	8000692 <__gesf2+0x4a>
 80006aa:	2c00      	cmp	r4, #0
 80006ac:	d0db      	beq.n	8000666 <__gesf2+0x1e>
 80006ae:	e7f9      	b.n	80006a4 <__gesf2+0x5c>
 80006b0:	4282      	cmp	r2, r0
 80006b2:	dceb      	bgt.n	800068c <__gesf2+0x44>
 80006b4:	db04      	blt.n	80006c0 <__gesf2+0x78>
 80006b6:	42a5      	cmp	r5, r4
 80006b8:	d8e8      	bhi.n	800068c <__gesf2+0x44>
 80006ba:	2000      	movs	r0, #0
 80006bc:	42a5      	cmp	r5, r4
 80006be:	d2e8      	bcs.n	8000692 <__gesf2+0x4a>
 80006c0:	2101      	movs	r1, #1
 80006c2:	1e58      	subs	r0, r3, #1
 80006c4:	4308      	orrs	r0, r1
 80006c6:	e7e4      	b.n	8000692 <__gesf2+0x4a>

080006c8 <__lesf2>:
 80006c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ca:	0042      	lsls	r2, r0, #1
 80006cc:	024d      	lsls	r5, r1, #9
 80006ce:	004c      	lsls	r4, r1, #1
 80006d0:	0246      	lsls	r6, r0, #9
 80006d2:	0a76      	lsrs	r6, r6, #9
 80006d4:	0e12      	lsrs	r2, r2, #24
 80006d6:	0fc3      	lsrs	r3, r0, #31
 80006d8:	0a6d      	lsrs	r5, r5, #9
 80006da:	0e24      	lsrs	r4, r4, #24
 80006dc:	0fc9      	lsrs	r1, r1, #31
 80006de:	2aff      	cmp	r2, #255	; 0xff
 80006e0:	d016      	beq.n	8000710 <__lesf2+0x48>
 80006e2:	2cff      	cmp	r4, #255	; 0xff
 80006e4:	d018      	beq.n	8000718 <__lesf2+0x50>
 80006e6:	2a00      	cmp	r2, #0
 80006e8:	d10a      	bne.n	8000700 <__lesf2+0x38>
 80006ea:	4270      	negs	r0, r6
 80006ec:	4170      	adcs	r0, r6
 80006ee:	b2c0      	uxtb	r0, r0
 80006f0:	2c00      	cmp	r4, #0
 80006f2:	d015      	beq.n	8000720 <__lesf2+0x58>
 80006f4:	2800      	cmp	r0, #0
 80006f6:	d005      	beq.n	8000704 <__lesf2+0x3c>
 80006f8:	2001      	movs	r0, #1
 80006fa:	3901      	subs	r1, #1
 80006fc:	4308      	orrs	r0, r1
 80006fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000700:	2c00      	cmp	r4, #0
 8000702:	d013      	beq.n	800072c <__lesf2+0x64>
 8000704:	4299      	cmp	r1, r3
 8000706:	d014      	beq.n	8000732 <__lesf2+0x6a>
 8000708:	2001      	movs	r0, #1
 800070a:	425b      	negs	r3, r3
 800070c:	4318      	orrs	r0, r3
 800070e:	e7f6      	b.n	80006fe <__lesf2+0x36>
 8000710:	2002      	movs	r0, #2
 8000712:	2e00      	cmp	r6, #0
 8000714:	d1f3      	bne.n	80006fe <__lesf2+0x36>
 8000716:	e7e4      	b.n	80006e2 <__lesf2+0x1a>
 8000718:	2002      	movs	r0, #2
 800071a:	2d00      	cmp	r5, #0
 800071c:	d1ef      	bne.n	80006fe <__lesf2+0x36>
 800071e:	e7e2      	b.n	80006e6 <__lesf2+0x1e>
 8000720:	2d00      	cmp	r5, #0
 8000722:	d1e7      	bne.n	80006f4 <__lesf2+0x2c>
 8000724:	2000      	movs	r0, #0
 8000726:	2e00      	cmp	r6, #0
 8000728:	d0e9      	beq.n	80006fe <__lesf2+0x36>
 800072a:	e7ed      	b.n	8000708 <__lesf2+0x40>
 800072c:	2d00      	cmp	r5, #0
 800072e:	d1e9      	bne.n	8000704 <__lesf2+0x3c>
 8000730:	e7ea      	b.n	8000708 <__lesf2+0x40>
 8000732:	42a2      	cmp	r2, r4
 8000734:	dc06      	bgt.n	8000744 <__lesf2+0x7c>
 8000736:	dbdf      	blt.n	80006f8 <__lesf2+0x30>
 8000738:	42ae      	cmp	r6, r5
 800073a:	d803      	bhi.n	8000744 <__lesf2+0x7c>
 800073c:	2000      	movs	r0, #0
 800073e:	42ae      	cmp	r6, r5
 8000740:	d3da      	bcc.n	80006f8 <__lesf2+0x30>
 8000742:	e7dc      	b.n	80006fe <__lesf2+0x36>
 8000744:	2001      	movs	r0, #1
 8000746:	4249      	negs	r1, r1
 8000748:	4308      	orrs	r0, r1
 800074a:	e7d8      	b.n	80006fe <__lesf2+0x36>

0800074c <__aeabi_fmul>:
 800074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074e:	4657      	mov	r7, sl
 8000750:	464e      	mov	r6, r9
 8000752:	4645      	mov	r5, r8
 8000754:	46de      	mov	lr, fp
 8000756:	b5e0      	push	{r5, r6, r7, lr}
 8000758:	0247      	lsls	r7, r0, #9
 800075a:	0046      	lsls	r6, r0, #1
 800075c:	4688      	mov	r8, r1
 800075e:	0a7f      	lsrs	r7, r7, #9
 8000760:	0e36      	lsrs	r6, r6, #24
 8000762:	0fc4      	lsrs	r4, r0, #31
 8000764:	2e00      	cmp	r6, #0
 8000766:	d047      	beq.n	80007f8 <__aeabi_fmul+0xac>
 8000768:	2eff      	cmp	r6, #255	; 0xff
 800076a:	d024      	beq.n	80007b6 <__aeabi_fmul+0x6a>
 800076c:	00fb      	lsls	r3, r7, #3
 800076e:	2780      	movs	r7, #128	; 0x80
 8000770:	04ff      	lsls	r7, r7, #19
 8000772:	431f      	orrs	r7, r3
 8000774:	2300      	movs	r3, #0
 8000776:	4699      	mov	r9, r3
 8000778:	469a      	mov	sl, r3
 800077a:	3e7f      	subs	r6, #127	; 0x7f
 800077c:	4643      	mov	r3, r8
 800077e:	025d      	lsls	r5, r3, #9
 8000780:	0058      	lsls	r0, r3, #1
 8000782:	0fdb      	lsrs	r3, r3, #31
 8000784:	0a6d      	lsrs	r5, r5, #9
 8000786:	0e00      	lsrs	r0, r0, #24
 8000788:	4698      	mov	r8, r3
 800078a:	d043      	beq.n	8000814 <__aeabi_fmul+0xc8>
 800078c:	28ff      	cmp	r0, #255	; 0xff
 800078e:	d03b      	beq.n	8000808 <__aeabi_fmul+0xbc>
 8000790:	00eb      	lsls	r3, r5, #3
 8000792:	2580      	movs	r5, #128	; 0x80
 8000794:	2200      	movs	r2, #0
 8000796:	04ed      	lsls	r5, r5, #19
 8000798:	431d      	orrs	r5, r3
 800079a:	387f      	subs	r0, #127	; 0x7f
 800079c:	1836      	adds	r6, r6, r0
 800079e:	1c73      	adds	r3, r6, #1
 80007a0:	4641      	mov	r1, r8
 80007a2:	469b      	mov	fp, r3
 80007a4:	464b      	mov	r3, r9
 80007a6:	4061      	eors	r1, r4
 80007a8:	4313      	orrs	r3, r2
 80007aa:	2b0f      	cmp	r3, #15
 80007ac:	d864      	bhi.n	8000878 <__aeabi_fmul+0x12c>
 80007ae:	4875      	ldr	r0, [pc, #468]	; (8000984 <__aeabi_fmul+0x238>)
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	58c3      	ldr	r3, [r0, r3]
 80007b4:	469f      	mov	pc, r3
 80007b6:	2f00      	cmp	r7, #0
 80007b8:	d142      	bne.n	8000840 <__aeabi_fmul+0xf4>
 80007ba:	2308      	movs	r3, #8
 80007bc:	4699      	mov	r9, r3
 80007be:	3b06      	subs	r3, #6
 80007c0:	26ff      	movs	r6, #255	; 0xff
 80007c2:	469a      	mov	sl, r3
 80007c4:	e7da      	b.n	800077c <__aeabi_fmul+0x30>
 80007c6:	4641      	mov	r1, r8
 80007c8:	2a02      	cmp	r2, #2
 80007ca:	d028      	beq.n	800081e <__aeabi_fmul+0xd2>
 80007cc:	2a03      	cmp	r2, #3
 80007ce:	d100      	bne.n	80007d2 <__aeabi_fmul+0x86>
 80007d0:	e0ce      	b.n	8000970 <__aeabi_fmul+0x224>
 80007d2:	2a01      	cmp	r2, #1
 80007d4:	d000      	beq.n	80007d8 <__aeabi_fmul+0x8c>
 80007d6:	e0ac      	b.n	8000932 <__aeabi_fmul+0x1e6>
 80007d8:	4011      	ands	r1, r2
 80007da:	2000      	movs	r0, #0
 80007dc:	2200      	movs	r2, #0
 80007de:	b2cc      	uxtb	r4, r1
 80007e0:	0240      	lsls	r0, r0, #9
 80007e2:	05d2      	lsls	r2, r2, #23
 80007e4:	0a40      	lsrs	r0, r0, #9
 80007e6:	07e4      	lsls	r4, r4, #31
 80007e8:	4310      	orrs	r0, r2
 80007ea:	4320      	orrs	r0, r4
 80007ec:	bc3c      	pop	{r2, r3, r4, r5}
 80007ee:	4690      	mov	r8, r2
 80007f0:	4699      	mov	r9, r3
 80007f2:	46a2      	mov	sl, r4
 80007f4:	46ab      	mov	fp, r5
 80007f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007f8:	2f00      	cmp	r7, #0
 80007fa:	d115      	bne.n	8000828 <__aeabi_fmul+0xdc>
 80007fc:	2304      	movs	r3, #4
 80007fe:	4699      	mov	r9, r3
 8000800:	3b03      	subs	r3, #3
 8000802:	2600      	movs	r6, #0
 8000804:	469a      	mov	sl, r3
 8000806:	e7b9      	b.n	800077c <__aeabi_fmul+0x30>
 8000808:	20ff      	movs	r0, #255	; 0xff
 800080a:	2202      	movs	r2, #2
 800080c:	2d00      	cmp	r5, #0
 800080e:	d0c5      	beq.n	800079c <__aeabi_fmul+0x50>
 8000810:	2203      	movs	r2, #3
 8000812:	e7c3      	b.n	800079c <__aeabi_fmul+0x50>
 8000814:	2d00      	cmp	r5, #0
 8000816:	d119      	bne.n	800084c <__aeabi_fmul+0x100>
 8000818:	2000      	movs	r0, #0
 800081a:	2201      	movs	r2, #1
 800081c:	e7be      	b.n	800079c <__aeabi_fmul+0x50>
 800081e:	2401      	movs	r4, #1
 8000820:	22ff      	movs	r2, #255	; 0xff
 8000822:	400c      	ands	r4, r1
 8000824:	2000      	movs	r0, #0
 8000826:	e7db      	b.n	80007e0 <__aeabi_fmul+0x94>
 8000828:	0038      	movs	r0, r7
 800082a:	f000 fb01 	bl	8000e30 <__clzsi2>
 800082e:	2676      	movs	r6, #118	; 0x76
 8000830:	1f43      	subs	r3, r0, #5
 8000832:	409f      	lsls	r7, r3
 8000834:	2300      	movs	r3, #0
 8000836:	4276      	negs	r6, r6
 8000838:	1a36      	subs	r6, r6, r0
 800083a:	4699      	mov	r9, r3
 800083c:	469a      	mov	sl, r3
 800083e:	e79d      	b.n	800077c <__aeabi_fmul+0x30>
 8000840:	230c      	movs	r3, #12
 8000842:	4699      	mov	r9, r3
 8000844:	3b09      	subs	r3, #9
 8000846:	26ff      	movs	r6, #255	; 0xff
 8000848:	469a      	mov	sl, r3
 800084a:	e797      	b.n	800077c <__aeabi_fmul+0x30>
 800084c:	0028      	movs	r0, r5
 800084e:	f000 faef 	bl	8000e30 <__clzsi2>
 8000852:	1f43      	subs	r3, r0, #5
 8000854:	409d      	lsls	r5, r3
 8000856:	2376      	movs	r3, #118	; 0x76
 8000858:	425b      	negs	r3, r3
 800085a:	1a18      	subs	r0, r3, r0
 800085c:	2200      	movs	r2, #0
 800085e:	e79d      	b.n	800079c <__aeabi_fmul+0x50>
 8000860:	2080      	movs	r0, #128	; 0x80
 8000862:	2400      	movs	r4, #0
 8000864:	03c0      	lsls	r0, r0, #15
 8000866:	22ff      	movs	r2, #255	; 0xff
 8000868:	e7ba      	b.n	80007e0 <__aeabi_fmul+0x94>
 800086a:	003d      	movs	r5, r7
 800086c:	4652      	mov	r2, sl
 800086e:	e7ab      	b.n	80007c8 <__aeabi_fmul+0x7c>
 8000870:	003d      	movs	r5, r7
 8000872:	0021      	movs	r1, r4
 8000874:	4652      	mov	r2, sl
 8000876:	e7a7      	b.n	80007c8 <__aeabi_fmul+0x7c>
 8000878:	0c3b      	lsrs	r3, r7, #16
 800087a:	469c      	mov	ip, r3
 800087c:	042a      	lsls	r2, r5, #16
 800087e:	0c12      	lsrs	r2, r2, #16
 8000880:	0c2b      	lsrs	r3, r5, #16
 8000882:	0014      	movs	r4, r2
 8000884:	4660      	mov	r0, ip
 8000886:	4665      	mov	r5, ip
 8000888:	043f      	lsls	r7, r7, #16
 800088a:	0c3f      	lsrs	r7, r7, #16
 800088c:	437c      	muls	r4, r7
 800088e:	4342      	muls	r2, r0
 8000890:	435d      	muls	r5, r3
 8000892:	437b      	muls	r3, r7
 8000894:	0c27      	lsrs	r7, r4, #16
 8000896:	189b      	adds	r3, r3, r2
 8000898:	18ff      	adds	r7, r7, r3
 800089a:	42ba      	cmp	r2, r7
 800089c:	d903      	bls.n	80008a6 <__aeabi_fmul+0x15a>
 800089e:	2380      	movs	r3, #128	; 0x80
 80008a0:	025b      	lsls	r3, r3, #9
 80008a2:	469c      	mov	ip, r3
 80008a4:	4465      	add	r5, ip
 80008a6:	0424      	lsls	r4, r4, #16
 80008a8:	043a      	lsls	r2, r7, #16
 80008aa:	0c24      	lsrs	r4, r4, #16
 80008ac:	1912      	adds	r2, r2, r4
 80008ae:	0193      	lsls	r3, r2, #6
 80008b0:	1e5c      	subs	r4, r3, #1
 80008b2:	41a3      	sbcs	r3, r4
 80008b4:	0c3f      	lsrs	r7, r7, #16
 80008b6:	0e92      	lsrs	r2, r2, #26
 80008b8:	197d      	adds	r5, r7, r5
 80008ba:	431a      	orrs	r2, r3
 80008bc:	01ad      	lsls	r5, r5, #6
 80008be:	4315      	orrs	r5, r2
 80008c0:	012b      	lsls	r3, r5, #4
 80008c2:	d504      	bpl.n	80008ce <__aeabi_fmul+0x182>
 80008c4:	2301      	movs	r3, #1
 80008c6:	465e      	mov	r6, fp
 80008c8:	086a      	lsrs	r2, r5, #1
 80008ca:	401d      	ands	r5, r3
 80008cc:	4315      	orrs	r5, r2
 80008ce:	0032      	movs	r2, r6
 80008d0:	327f      	adds	r2, #127	; 0x7f
 80008d2:	2a00      	cmp	r2, #0
 80008d4:	dd25      	ble.n	8000922 <__aeabi_fmul+0x1d6>
 80008d6:	076b      	lsls	r3, r5, #29
 80008d8:	d004      	beq.n	80008e4 <__aeabi_fmul+0x198>
 80008da:	230f      	movs	r3, #15
 80008dc:	402b      	ands	r3, r5
 80008de:	2b04      	cmp	r3, #4
 80008e0:	d000      	beq.n	80008e4 <__aeabi_fmul+0x198>
 80008e2:	3504      	adds	r5, #4
 80008e4:	012b      	lsls	r3, r5, #4
 80008e6:	d503      	bpl.n	80008f0 <__aeabi_fmul+0x1a4>
 80008e8:	0032      	movs	r2, r6
 80008ea:	4b27      	ldr	r3, [pc, #156]	; (8000988 <__aeabi_fmul+0x23c>)
 80008ec:	3280      	adds	r2, #128	; 0x80
 80008ee:	401d      	ands	r5, r3
 80008f0:	2afe      	cmp	r2, #254	; 0xfe
 80008f2:	dc94      	bgt.n	800081e <__aeabi_fmul+0xd2>
 80008f4:	2401      	movs	r4, #1
 80008f6:	01a8      	lsls	r0, r5, #6
 80008f8:	0a40      	lsrs	r0, r0, #9
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	400c      	ands	r4, r1
 80008fe:	e76f      	b.n	80007e0 <__aeabi_fmul+0x94>
 8000900:	2080      	movs	r0, #128	; 0x80
 8000902:	03c0      	lsls	r0, r0, #15
 8000904:	4207      	tst	r7, r0
 8000906:	d007      	beq.n	8000918 <__aeabi_fmul+0x1cc>
 8000908:	4205      	tst	r5, r0
 800090a:	d105      	bne.n	8000918 <__aeabi_fmul+0x1cc>
 800090c:	4328      	orrs	r0, r5
 800090e:	0240      	lsls	r0, r0, #9
 8000910:	0a40      	lsrs	r0, r0, #9
 8000912:	4644      	mov	r4, r8
 8000914:	22ff      	movs	r2, #255	; 0xff
 8000916:	e763      	b.n	80007e0 <__aeabi_fmul+0x94>
 8000918:	4338      	orrs	r0, r7
 800091a:	0240      	lsls	r0, r0, #9
 800091c:	0a40      	lsrs	r0, r0, #9
 800091e:	22ff      	movs	r2, #255	; 0xff
 8000920:	e75e      	b.n	80007e0 <__aeabi_fmul+0x94>
 8000922:	2401      	movs	r4, #1
 8000924:	1aa3      	subs	r3, r4, r2
 8000926:	2b1b      	cmp	r3, #27
 8000928:	dd05      	ble.n	8000936 <__aeabi_fmul+0x1ea>
 800092a:	400c      	ands	r4, r1
 800092c:	2200      	movs	r2, #0
 800092e:	2000      	movs	r0, #0
 8000930:	e756      	b.n	80007e0 <__aeabi_fmul+0x94>
 8000932:	465e      	mov	r6, fp
 8000934:	e7cb      	b.n	80008ce <__aeabi_fmul+0x182>
 8000936:	002a      	movs	r2, r5
 8000938:	2020      	movs	r0, #32
 800093a:	40da      	lsrs	r2, r3
 800093c:	1ac3      	subs	r3, r0, r3
 800093e:	409d      	lsls	r5, r3
 8000940:	002b      	movs	r3, r5
 8000942:	1e5d      	subs	r5, r3, #1
 8000944:	41ab      	sbcs	r3, r5
 8000946:	4313      	orrs	r3, r2
 8000948:	075a      	lsls	r2, r3, #29
 800094a:	d004      	beq.n	8000956 <__aeabi_fmul+0x20a>
 800094c:	220f      	movs	r2, #15
 800094e:	401a      	ands	r2, r3
 8000950:	2a04      	cmp	r2, #4
 8000952:	d000      	beq.n	8000956 <__aeabi_fmul+0x20a>
 8000954:	3304      	adds	r3, #4
 8000956:	015a      	lsls	r2, r3, #5
 8000958:	d504      	bpl.n	8000964 <__aeabi_fmul+0x218>
 800095a:	2401      	movs	r4, #1
 800095c:	2201      	movs	r2, #1
 800095e:	400c      	ands	r4, r1
 8000960:	2000      	movs	r0, #0
 8000962:	e73d      	b.n	80007e0 <__aeabi_fmul+0x94>
 8000964:	2401      	movs	r4, #1
 8000966:	019b      	lsls	r3, r3, #6
 8000968:	0a58      	lsrs	r0, r3, #9
 800096a:	400c      	ands	r4, r1
 800096c:	2200      	movs	r2, #0
 800096e:	e737      	b.n	80007e0 <__aeabi_fmul+0x94>
 8000970:	2080      	movs	r0, #128	; 0x80
 8000972:	2401      	movs	r4, #1
 8000974:	03c0      	lsls	r0, r0, #15
 8000976:	4328      	orrs	r0, r5
 8000978:	0240      	lsls	r0, r0, #9
 800097a:	0a40      	lsrs	r0, r0, #9
 800097c:	400c      	ands	r4, r1
 800097e:	22ff      	movs	r2, #255	; 0xff
 8000980:	e72e      	b.n	80007e0 <__aeabi_fmul+0x94>
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	080062f0 	.word	0x080062f0
 8000988:	f7ffffff 	.word	0xf7ffffff

0800098c <__aeabi_fsub>:
 800098c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098e:	464f      	mov	r7, r9
 8000990:	46d6      	mov	lr, sl
 8000992:	4646      	mov	r6, r8
 8000994:	0044      	lsls	r4, r0, #1
 8000996:	b5c0      	push	{r6, r7, lr}
 8000998:	0fc2      	lsrs	r2, r0, #31
 800099a:	0247      	lsls	r7, r0, #9
 800099c:	0248      	lsls	r0, r1, #9
 800099e:	0a40      	lsrs	r0, r0, #9
 80009a0:	4684      	mov	ip, r0
 80009a2:	4666      	mov	r6, ip
 80009a4:	0a7b      	lsrs	r3, r7, #9
 80009a6:	0048      	lsls	r0, r1, #1
 80009a8:	0fc9      	lsrs	r1, r1, #31
 80009aa:	469a      	mov	sl, r3
 80009ac:	0e24      	lsrs	r4, r4, #24
 80009ae:	0015      	movs	r5, r2
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	0e00      	lsrs	r0, r0, #24
 80009b4:	4689      	mov	r9, r1
 80009b6:	00f6      	lsls	r6, r6, #3
 80009b8:	28ff      	cmp	r0, #255	; 0xff
 80009ba:	d100      	bne.n	80009be <__aeabi_fsub+0x32>
 80009bc:	e08f      	b.n	8000ade <__aeabi_fsub+0x152>
 80009be:	2101      	movs	r1, #1
 80009c0:	464f      	mov	r7, r9
 80009c2:	404f      	eors	r7, r1
 80009c4:	0039      	movs	r1, r7
 80009c6:	4291      	cmp	r1, r2
 80009c8:	d066      	beq.n	8000a98 <__aeabi_fsub+0x10c>
 80009ca:	1a22      	subs	r2, r4, r0
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	dc00      	bgt.n	80009d2 <__aeabi_fsub+0x46>
 80009d0:	e09d      	b.n	8000b0e <__aeabi_fsub+0x182>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d13d      	bne.n	8000a52 <__aeabi_fsub+0xc6>
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	d100      	bne.n	80009dc <__aeabi_fsub+0x50>
 80009da:	e08b      	b.n	8000af4 <__aeabi_fsub+0x168>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2900      	cmp	r1, #0
 80009e0:	d000      	beq.n	80009e4 <__aeabi_fsub+0x58>
 80009e2:	e0b5      	b.n	8000b50 <__aeabi_fsub+0x1c4>
 80009e4:	2401      	movs	r4, #1
 80009e6:	1b9b      	subs	r3, r3, r6
 80009e8:	015a      	lsls	r2, r3, #5
 80009ea:	d544      	bpl.n	8000a76 <__aeabi_fsub+0xea>
 80009ec:	019b      	lsls	r3, r3, #6
 80009ee:	099f      	lsrs	r7, r3, #6
 80009f0:	0038      	movs	r0, r7
 80009f2:	f000 fa1d 	bl	8000e30 <__clzsi2>
 80009f6:	3805      	subs	r0, #5
 80009f8:	4087      	lsls	r7, r0
 80009fa:	4284      	cmp	r4, r0
 80009fc:	dd00      	ble.n	8000a00 <__aeabi_fsub+0x74>
 80009fe:	e096      	b.n	8000b2e <__aeabi_fsub+0x1a2>
 8000a00:	1b04      	subs	r4, r0, r4
 8000a02:	003a      	movs	r2, r7
 8000a04:	2020      	movs	r0, #32
 8000a06:	3401      	adds	r4, #1
 8000a08:	40e2      	lsrs	r2, r4
 8000a0a:	1b04      	subs	r4, r0, r4
 8000a0c:	40a7      	lsls	r7, r4
 8000a0e:	003b      	movs	r3, r7
 8000a10:	1e5f      	subs	r7, r3, #1
 8000a12:	41bb      	sbcs	r3, r7
 8000a14:	2400      	movs	r4, #0
 8000a16:	4313      	orrs	r3, r2
 8000a18:	075a      	lsls	r2, r3, #29
 8000a1a:	d004      	beq.n	8000a26 <__aeabi_fsub+0x9a>
 8000a1c:	220f      	movs	r2, #15
 8000a1e:	401a      	ands	r2, r3
 8000a20:	2a04      	cmp	r2, #4
 8000a22:	d000      	beq.n	8000a26 <__aeabi_fsub+0x9a>
 8000a24:	3304      	adds	r3, #4
 8000a26:	015a      	lsls	r2, r3, #5
 8000a28:	d527      	bpl.n	8000a7a <__aeabi_fsub+0xee>
 8000a2a:	3401      	adds	r4, #1
 8000a2c:	2cff      	cmp	r4, #255	; 0xff
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_fsub+0xa6>
 8000a30:	e079      	b.n	8000b26 <__aeabi_fsub+0x19a>
 8000a32:	2201      	movs	r2, #1
 8000a34:	019b      	lsls	r3, r3, #6
 8000a36:	0a5b      	lsrs	r3, r3, #9
 8000a38:	b2e4      	uxtb	r4, r4
 8000a3a:	402a      	ands	r2, r5
 8000a3c:	025b      	lsls	r3, r3, #9
 8000a3e:	05e4      	lsls	r4, r4, #23
 8000a40:	0a58      	lsrs	r0, r3, #9
 8000a42:	07d2      	lsls	r2, r2, #31
 8000a44:	4320      	orrs	r0, r4
 8000a46:	4310      	orrs	r0, r2
 8000a48:	bc1c      	pop	{r2, r3, r4}
 8000a4a:	4690      	mov	r8, r2
 8000a4c:	4699      	mov	r9, r3
 8000a4e:	46a2      	mov	sl, r4
 8000a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a52:	2cff      	cmp	r4, #255	; 0xff
 8000a54:	d0e0      	beq.n	8000a18 <__aeabi_fsub+0x8c>
 8000a56:	2180      	movs	r1, #128	; 0x80
 8000a58:	04c9      	lsls	r1, r1, #19
 8000a5a:	430e      	orrs	r6, r1
 8000a5c:	2a1b      	cmp	r2, #27
 8000a5e:	dc7b      	bgt.n	8000b58 <__aeabi_fsub+0x1cc>
 8000a60:	0031      	movs	r1, r6
 8000a62:	2020      	movs	r0, #32
 8000a64:	40d1      	lsrs	r1, r2
 8000a66:	1a82      	subs	r2, r0, r2
 8000a68:	4096      	lsls	r6, r2
 8000a6a:	1e72      	subs	r2, r6, #1
 8000a6c:	4196      	sbcs	r6, r2
 8000a6e:	430e      	orrs	r6, r1
 8000a70:	1b9b      	subs	r3, r3, r6
 8000a72:	015a      	lsls	r2, r3, #5
 8000a74:	d4ba      	bmi.n	80009ec <__aeabi_fsub+0x60>
 8000a76:	075a      	lsls	r2, r3, #29
 8000a78:	d1d0      	bne.n	8000a1c <__aeabi_fsub+0x90>
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	08df      	lsrs	r7, r3, #3
 8000a7e:	402a      	ands	r2, r5
 8000a80:	2cff      	cmp	r4, #255	; 0xff
 8000a82:	d133      	bne.n	8000aec <__aeabi_fsub+0x160>
 8000a84:	2f00      	cmp	r7, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fsub+0xfe>
 8000a88:	e0a8      	b.n	8000bdc <__aeabi_fsub+0x250>
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	03db      	lsls	r3, r3, #15
 8000a8e:	433b      	orrs	r3, r7
 8000a90:	025b      	lsls	r3, r3, #9
 8000a92:	0a5b      	lsrs	r3, r3, #9
 8000a94:	24ff      	movs	r4, #255	; 0xff
 8000a96:	e7d1      	b.n	8000a3c <__aeabi_fsub+0xb0>
 8000a98:	1a21      	subs	r1, r4, r0
 8000a9a:	2900      	cmp	r1, #0
 8000a9c:	dd4c      	ble.n	8000b38 <__aeabi_fsub+0x1ac>
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	d02a      	beq.n	8000af8 <__aeabi_fsub+0x16c>
 8000aa2:	2cff      	cmp	r4, #255	; 0xff
 8000aa4:	d0b8      	beq.n	8000a18 <__aeabi_fsub+0x8c>
 8000aa6:	2080      	movs	r0, #128	; 0x80
 8000aa8:	04c0      	lsls	r0, r0, #19
 8000aaa:	4306      	orrs	r6, r0
 8000aac:	291b      	cmp	r1, #27
 8000aae:	dd00      	ble.n	8000ab2 <__aeabi_fsub+0x126>
 8000ab0:	e0af      	b.n	8000c12 <__aeabi_fsub+0x286>
 8000ab2:	0030      	movs	r0, r6
 8000ab4:	2720      	movs	r7, #32
 8000ab6:	40c8      	lsrs	r0, r1
 8000ab8:	1a79      	subs	r1, r7, r1
 8000aba:	408e      	lsls	r6, r1
 8000abc:	1e71      	subs	r1, r6, #1
 8000abe:	418e      	sbcs	r6, r1
 8000ac0:	4306      	orrs	r6, r0
 8000ac2:	199b      	adds	r3, r3, r6
 8000ac4:	0159      	lsls	r1, r3, #5
 8000ac6:	d5d6      	bpl.n	8000a76 <__aeabi_fsub+0xea>
 8000ac8:	3401      	adds	r4, #1
 8000aca:	2cff      	cmp	r4, #255	; 0xff
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fsub+0x144>
 8000ace:	e085      	b.n	8000bdc <__aeabi_fsub+0x250>
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	497a      	ldr	r1, [pc, #488]	; (8000cbc <__aeabi_fsub+0x330>)
 8000ad4:	401a      	ands	r2, r3
 8000ad6:	085b      	lsrs	r3, r3, #1
 8000ad8:	400b      	ands	r3, r1
 8000ada:	4313      	orrs	r3, r2
 8000adc:	e79c      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	d000      	beq.n	8000ae4 <__aeabi_fsub+0x158>
 8000ae2:	e770      	b.n	80009c6 <__aeabi_fsub+0x3a>
 8000ae4:	e76b      	b.n	80009be <__aeabi_fsub+0x32>
 8000ae6:	1e3b      	subs	r3, r7, #0
 8000ae8:	d1c5      	bne.n	8000a76 <__aeabi_fsub+0xea>
 8000aea:	2200      	movs	r2, #0
 8000aec:	027b      	lsls	r3, r7, #9
 8000aee:	0a5b      	lsrs	r3, r3, #9
 8000af0:	b2e4      	uxtb	r4, r4
 8000af2:	e7a3      	b.n	8000a3c <__aeabi_fsub+0xb0>
 8000af4:	0014      	movs	r4, r2
 8000af6:	e78f      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000af8:	2e00      	cmp	r6, #0
 8000afa:	d04d      	beq.n	8000b98 <__aeabi_fsub+0x20c>
 8000afc:	1e48      	subs	r0, r1, #1
 8000afe:	2800      	cmp	r0, #0
 8000b00:	d157      	bne.n	8000bb2 <__aeabi_fsub+0x226>
 8000b02:	199b      	adds	r3, r3, r6
 8000b04:	2401      	movs	r4, #1
 8000b06:	015a      	lsls	r2, r3, #5
 8000b08:	d5b5      	bpl.n	8000a76 <__aeabi_fsub+0xea>
 8000b0a:	2402      	movs	r4, #2
 8000b0c:	e7e0      	b.n	8000ad0 <__aeabi_fsub+0x144>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d125      	bne.n	8000b5e <__aeabi_fsub+0x1d2>
 8000b12:	1c62      	adds	r2, r4, #1
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	2a01      	cmp	r2, #1
 8000b18:	dd72      	ble.n	8000c00 <__aeabi_fsub+0x274>
 8000b1a:	1b9f      	subs	r7, r3, r6
 8000b1c:	017a      	lsls	r2, r7, #5
 8000b1e:	d535      	bpl.n	8000b8c <__aeabi_fsub+0x200>
 8000b20:	1af7      	subs	r7, r6, r3
 8000b22:	000d      	movs	r5, r1
 8000b24:	e764      	b.n	80009f0 <__aeabi_fsub+0x64>
 8000b26:	2201      	movs	r2, #1
 8000b28:	2300      	movs	r3, #0
 8000b2a:	402a      	ands	r2, r5
 8000b2c:	e786      	b.n	8000a3c <__aeabi_fsub+0xb0>
 8000b2e:	003b      	movs	r3, r7
 8000b30:	4a63      	ldr	r2, [pc, #396]	; (8000cc0 <__aeabi_fsub+0x334>)
 8000b32:	1a24      	subs	r4, r4, r0
 8000b34:	4013      	ands	r3, r2
 8000b36:	e76f      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000b38:	2900      	cmp	r1, #0
 8000b3a:	d16c      	bne.n	8000c16 <__aeabi_fsub+0x28a>
 8000b3c:	1c61      	adds	r1, r4, #1
 8000b3e:	b2c8      	uxtb	r0, r1
 8000b40:	2801      	cmp	r0, #1
 8000b42:	dd4e      	ble.n	8000be2 <__aeabi_fsub+0x256>
 8000b44:	29ff      	cmp	r1, #255	; 0xff
 8000b46:	d049      	beq.n	8000bdc <__aeabi_fsub+0x250>
 8000b48:	199b      	adds	r3, r3, r6
 8000b4a:	085b      	lsrs	r3, r3, #1
 8000b4c:	000c      	movs	r4, r1
 8000b4e:	e763      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000b50:	2aff      	cmp	r2, #255	; 0xff
 8000b52:	d041      	beq.n	8000bd8 <__aeabi_fsub+0x24c>
 8000b54:	000a      	movs	r2, r1
 8000b56:	e781      	b.n	8000a5c <__aeabi_fsub+0xd0>
 8000b58:	2601      	movs	r6, #1
 8000b5a:	1b9b      	subs	r3, r3, r6
 8000b5c:	e789      	b.n	8000a72 <__aeabi_fsub+0xe6>
 8000b5e:	2c00      	cmp	r4, #0
 8000b60:	d01c      	beq.n	8000b9c <__aeabi_fsub+0x210>
 8000b62:	28ff      	cmp	r0, #255	; 0xff
 8000b64:	d021      	beq.n	8000baa <__aeabi_fsub+0x21e>
 8000b66:	2480      	movs	r4, #128	; 0x80
 8000b68:	04e4      	lsls	r4, r4, #19
 8000b6a:	4252      	negs	r2, r2
 8000b6c:	4323      	orrs	r3, r4
 8000b6e:	2a1b      	cmp	r2, #27
 8000b70:	dd00      	ble.n	8000b74 <__aeabi_fsub+0x1e8>
 8000b72:	e096      	b.n	8000ca2 <__aeabi_fsub+0x316>
 8000b74:	001c      	movs	r4, r3
 8000b76:	2520      	movs	r5, #32
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	1aaa      	subs	r2, r5, r2
 8000b7c:	4093      	lsls	r3, r2
 8000b7e:	1e5a      	subs	r2, r3, #1
 8000b80:	4193      	sbcs	r3, r2
 8000b82:	4323      	orrs	r3, r4
 8000b84:	1af3      	subs	r3, r6, r3
 8000b86:	0004      	movs	r4, r0
 8000b88:	000d      	movs	r5, r1
 8000b8a:	e72d      	b.n	80009e8 <__aeabi_fsub+0x5c>
 8000b8c:	2f00      	cmp	r7, #0
 8000b8e:	d000      	beq.n	8000b92 <__aeabi_fsub+0x206>
 8000b90:	e72e      	b.n	80009f0 <__aeabi_fsub+0x64>
 8000b92:	2200      	movs	r2, #0
 8000b94:	2400      	movs	r4, #0
 8000b96:	e7a9      	b.n	8000aec <__aeabi_fsub+0x160>
 8000b98:	000c      	movs	r4, r1
 8000b9a:	e73d      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d058      	beq.n	8000c52 <__aeabi_fsub+0x2c6>
 8000ba0:	43d2      	mvns	r2, r2
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	d0ee      	beq.n	8000b84 <__aeabi_fsub+0x1f8>
 8000ba6:	28ff      	cmp	r0, #255	; 0xff
 8000ba8:	d1e1      	bne.n	8000b6e <__aeabi_fsub+0x1e2>
 8000baa:	0033      	movs	r3, r6
 8000bac:	24ff      	movs	r4, #255	; 0xff
 8000bae:	000d      	movs	r5, r1
 8000bb0:	e732      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000bb2:	29ff      	cmp	r1, #255	; 0xff
 8000bb4:	d010      	beq.n	8000bd8 <__aeabi_fsub+0x24c>
 8000bb6:	0001      	movs	r1, r0
 8000bb8:	e778      	b.n	8000aac <__aeabi_fsub+0x120>
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d06e      	beq.n	8000c9c <__aeabi_fsub+0x310>
 8000bbe:	24ff      	movs	r4, #255	; 0xff
 8000bc0:	2e00      	cmp	r6, #0
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_fsub+0x23a>
 8000bc4:	e728      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	4651      	mov	r1, sl
 8000bca:	03d2      	lsls	r2, r2, #15
 8000bcc:	4211      	tst	r1, r2
 8000bce:	d003      	beq.n	8000bd8 <__aeabi_fsub+0x24c>
 8000bd0:	4661      	mov	r1, ip
 8000bd2:	4211      	tst	r1, r2
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_fsub+0x24c>
 8000bd6:	0033      	movs	r3, r6
 8000bd8:	24ff      	movs	r4, #255	; 0xff
 8000bda:	e71d      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000bdc:	24ff      	movs	r4, #255	; 0xff
 8000bde:	2300      	movs	r3, #0
 8000be0:	e72c      	b.n	8000a3c <__aeabi_fsub+0xb0>
 8000be2:	2c00      	cmp	r4, #0
 8000be4:	d1e9      	bne.n	8000bba <__aeabi_fsub+0x22e>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d063      	beq.n	8000cb2 <__aeabi_fsub+0x326>
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_fsub+0x264>
 8000bee:	e713      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000bf0:	199b      	adds	r3, r3, r6
 8000bf2:	015a      	lsls	r2, r3, #5
 8000bf4:	d400      	bmi.n	8000bf8 <__aeabi_fsub+0x26c>
 8000bf6:	e73e      	b.n	8000a76 <__aeabi_fsub+0xea>
 8000bf8:	4a31      	ldr	r2, [pc, #196]	; (8000cc0 <__aeabi_fsub+0x334>)
 8000bfa:	000c      	movs	r4, r1
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	e70b      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000c00:	2c00      	cmp	r4, #0
 8000c02:	d11e      	bne.n	8000c42 <__aeabi_fsub+0x2b6>
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d12f      	bne.n	8000c68 <__aeabi_fsub+0x2dc>
 8000c08:	2e00      	cmp	r6, #0
 8000c0a:	d04f      	beq.n	8000cac <__aeabi_fsub+0x320>
 8000c0c:	0033      	movs	r3, r6
 8000c0e:	000d      	movs	r5, r1
 8000c10:	e702      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000c12:	2601      	movs	r6, #1
 8000c14:	e755      	b.n	8000ac2 <__aeabi_fsub+0x136>
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d11f      	bne.n	8000c5a <__aeabi_fsub+0x2ce>
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d043      	beq.n	8000ca6 <__aeabi_fsub+0x31a>
 8000c1e:	43c9      	mvns	r1, r1
 8000c20:	2900      	cmp	r1, #0
 8000c22:	d00b      	beq.n	8000c3c <__aeabi_fsub+0x2b0>
 8000c24:	28ff      	cmp	r0, #255	; 0xff
 8000c26:	d039      	beq.n	8000c9c <__aeabi_fsub+0x310>
 8000c28:	291b      	cmp	r1, #27
 8000c2a:	dc44      	bgt.n	8000cb6 <__aeabi_fsub+0x32a>
 8000c2c:	001c      	movs	r4, r3
 8000c2e:	2720      	movs	r7, #32
 8000c30:	40cc      	lsrs	r4, r1
 8000c32:	1a79      	subs	r1, r7, r1
 8000c34:	408b      	lsls	r3, r1
 8000c36:	1e59      	subs	r1, r3, #1
 8000c38:	418b      	sbcs	r3, r1
 8000c3a:	4323      	orrs	r3, r4
 8000c3c:	199b      	adds	r3, r3, r6
 8000c3e:	0004      	movs	r4, r0
 8000c40:	e740      	b.n	8000ac4 <__aeabi_fsub+0x138>
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d11a      	bne.n	8000c7c <__aeabi_fsub+0x2f0>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d124      	bne.n	8000c94 <__aeabi_fsub+0x308>
 8000c4a:	2780      	movs	r7, #128	; 0x80
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	03ff      	lsls	r7, r7, #15
 8000c50:	e71b      	b.n	8000a8a <__aeabi_fsub+0xfe>
 8000c52:	0033      	movs	r3, r6
 8000c54:	0004      	movs	r4, r0
 8000c56:	000d      	movs	r5, r1
 8000c58:	e6de      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000c5a:	28ff      	cmp	r0, #255	; 0xff
 8000c5c:	d01e      	beq.n	8000c9c <__aeabi_fsub+0x310>
 8000c5e:	2480      	movs	r4, #128	; 0x80
 8000c60:	04e4      	lsls	r4, r4, #19
 8000c62:	4249      	negs	r1, r1
 8000c64:	4323      	orrs	r3, r4
 8000c66:	e7df      	b.n	8000c28 <__aeabi_fsub+0x29c>
 8000c68:	2e00      	cmp	r6, #0
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_fsub+0x2e2>
 8000c6c:	e6d4      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000c6e:	1b9f      	subs	r7, r3, r6
 8000c70:	017a      	lsls	r2, r7, #5
 8000c72:	d400      	bmi.n	8000c76 <__aeabi_fsub+0x2ea>
 8000c74:	e737      	b.n	8000ae6 <__aeabi_fsub+0x15a>
 8000c76:	1af3      	subs	r3, r6, r3
 8000c78:	000d      	movs	r5, r1
 8000c7a:	e6cd      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000c7c:	24ff      	movs	r4, #255	; 0xff
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d100      	bne.n	8000c84 <__aeabi_fsub+0x2f8>
 8000c82:	e6c9      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	4650      	mov	r0, sl
 8000c88:	03d2      	lsls	r2, r2, #15
 8000c8a:	4210      	tst	r0, r2
 8000c8c:	d0a4      	beq.n	8000bd8 <__aeabi_fsub+0x24c>
 8000c8e:	4660      	mov	r0, ip
 8000c90:	4210      	tst	r0, r2
 8000c92:	d1a1      	bne.n	8000bd8 <__aeabi_fsub+0x24c>
 8000c94:	0033      	movs	r3, r6
 8000c96:	000d      	movs	r5, r1
 8000c98:	24ff      	movs	r4, #255	; 0xff
 8000c9a:	e6bd      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000c9c:	0033      	movs	r3, r6
 8000c9e:	24ff      	movs	r4, #255	; 0xff
 8000ca0:	e6ba      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e76e      	b.n	8000b84 <__aeabi_fsub+0x1f8>
 8000ca6:	0033      	movs	r3, r6
 8000ca8:	0004      	movs	r4, r0
 8000caa:	e6b5      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000cac:	2700      	movs	r7, #0
 8000cae:	2200      	movs	r2, #0
 8000cb0:	e71c      	b.n	8000aec <__aeabi_fsub+0x160>
 8000cb2:	0033      	movs	r3, r6
 8000cb4:	e6b0      	b.n	8000a18 <__aeabi_fsub+0x8c>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e7c0      	b.n	8000c3c <__aeabi_fsub+0x2b0>
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	7dffffff 	.word	0x7dffffff
 8000cc0:	fbffffff 	.word	0xfbffffff

08000cc4 <__aeabi_f2iz>:
 8000cc4:	0241      	lsls	r1, r0, #9
 8000cc6:	0043      	lsls	r3, r0, #1
 8000cc8:	0fc2      	lsrs	r2, r0, #31
 8000cca:	0a49      	lsrs	r1, r1, #9
 8000ccc:	0e1b      	lsrs	r3, r3, #24
 8000cce:	2000      	movs	r0, #0
 8000cd0:	2b7e      	cmp	r3, #126	; 0x7e
 8000cd2:	dd0d      	ble.n	8000cf0 <__aeabi_f2iz+0x2c>
 8000cd4:	2b9d      	cmp	r3, #157	; 0x9d
 8000cd6:	dc0c      	bgt.n	8000cf2 <__aeabi_f2iz+0x2e>
 8000cd8:	2080      	movs	r0, #128	; 0x80
 8000cda:	0400      	lsls	r0, r0, #16
 8000cdc:	4301      	orrs	r1, r0
 8000cde:	2b95      	cmp	r3, #149	; 0x95
 8000ce0:	dc0a      	bgt.n	8000cf8 <__aeabi_f2iz+0x34>
 8000ce2:	2096      	movs	r0, #150	; 0x96
 8000ce4:	1ac3      	subs	r3, r0, r3
 8000ce6:	40d9      	lsrs	r1, r3
 8000ce8:	4248      	negs	r0, r1
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_f2iz+0x2c>
 8000cee:	0008      	movs	r0, r1
 8000cf0:	4770      	bx	lr
 8000cf2:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <__aeabi_f2iz+0x3c>)
 8000cf4:	18d0      	adds	r0, r2, r3
 8000cf6:	e7fb      	b.n	8000cf0 <__aeabi_f2iz+0x2c>
 8000cf8:	3b96      	subs	r3, #150	; 0x96
 8000cfa:	4099      	lsls	r1, r3
 8000cfc:	e7f4      	b.n	8000ce8 <__aeabi_f2iz+0x24>
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	7fffffff 	.word	0x7fffffff

08000d04 <__aeabi_i2f>:
 8000d04:	b570      	push	{r4, r5, r6, lr}
 8000d06:	2800      	cmp	r0, #0
 8000d08:	d030      	beq.n	8000d6c <__aeabi_i2f+0x68>
 8000d0a:	17c3      	asrs	r3, r0, #31
 8000d0c:	18c4      	adds	r4, r0, r3
 8000d0e:	405c      	eors	r4, r3
 8000d10:	0fc5      	lsrs	r5, r0, #31
 8000d12:	0020      	movs	r0, r4
 8000d14:	f000 f88c 	bl	8000e30 <__clzsi2>
 8000d18:	239e      	movs	r3, #158	; 0x9e
 8000d1a:	1a1b      	subs	r3, r3, r0
 8000d1c:	2b96      	cmp	r3, #150	; 0x96
 8000d1e:	dc0d      	bgt.n	8000d3c <__aeabi_i2f+0x38>
 8000d20:	2296      	movs	r2, #150	; 0x96
 8000d22:	1ad2      	subs	r2, r2, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	002a      	movs	r2, r5
 8000d28:	0264      	lsls	r4, r4, #9
 8000d2a:	0a64      	lsrs	r4, r4, #9
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	0264      	lsls	r4, r4, #9
 8000d30:	05db      	lsls	r3, r3, #23
 8000d32:	0a60      	lsrs	r0, r4, #9
 8000d34:	07d2      	lsls	r2, r2, #31
 8000d36:	4318      	orrs	r0, r3
 8000d38:	4310      	orrs	r0, r2
 8000d3a:	bd70      	pop	{r4, r5, r6, pc}
 8000d3c:	2b99      	cmp	r3, #153	; 0x99
 8000d3e:	dc19      	bgt.n	8000d74 <__aeabi_i2f+0x70>
 8000d40:	2299      	movs	r2, #153	; 0x99
 8000d42:	1ad2      	subs	r2, r2, r3
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	dd29      	ble.n	8000d9c <__aeabi_i2f+0x98>
 8000d48:	4094      	lsls	r4, r2
 8000d4a:	0022      	movs	r2, r4
 8000d4c:	4c14      	ldr	r4, [pc, #80]	; (8000da0 <__aeabi_i2f+0x9c>)
 8000d4e:	4014      	ands	r4, r2
 8000d50:	0751      	lsls	r1, r2, #29
 8000d52:	d004      	beq.n	8000d5e <__aeabi_i2f+0x5a>
 8000d54:	210f      	movs	r1, #15
 8000d56:	400a      	ands	r2, r1
 8000d58:	2a04      	cmp	r2, #4
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_i2f+0x5a>
 8000d5c:	3404      	adds	r4, #4
 8000d5e:	0162      	lsls	r2, r4, #5
 8000d60:	d413      	bmi.n	8000d8a <__aeabi_i2f+0x86>
 8000d62:	01a4      	lsls	r4, r4, #6
 8000d64:	0a64      	lsrs	r4, r4, #9
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	002a      	movs	r2, r5
 8000d6a:	e7e0      	b.n	8000d2e <__aeabi_i2f+0x2a>
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2300      	movs	r3, #0
 8000d70:	2400      	movs	r4, #0
 8000d72:	e7dc      	b.n	8000d2e <__aeabi_i2f+0x2a>
 8000d74:	2205      	movs	r2, #5
 8000d76:	0021      	movs	r1, r4
 8000d78:	1a12      	subs	r2, r2, r0
 8000d7a:	40d1      	lsrs	r1, r2
 8000d7c:	22b9      	movs	r2, #185	; 0xb9
 8000d7e:	1ad2      	subs	r2, r2, r3
 8000d80:	4094      	lsls	r4, r2
 8000d82:	1e62      	subs	r2, r4, #1
 8000d84:	4194      	sbcs	r4, r2
 8000d86:	430c      	orrs	r4, r1
 8000d88:	e7da      	b.n	8000d40 <__aeabi_i2f+0x3c>
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <__aeabi_i2f+0x9c>)
 8000d8c:	002a      	movs	r2, r5
 8000d8e:	401c      	ands	r4, r3
 8000d90:	239f      	movs	r3, #159	; 0x9f
 8000d92:	01a4      	lsls	r4, r4, #6
 8000d94:	1a1b      	subs	r3, r3, r0
 8000d96:	0a64      	lsrs	r4, r4, #9
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	e7c8      	b.n	8000d2e <__aeabi_i2f+0x2a>
 8000d9c:	0022      	movs	r2, r4
 8000d9e:	e7d5      	b.n	8000d4c <__aeabi_i2f+0x48>
 8000da0:	fbffffff 	.word	0xfbffffff

08000da4 <__aeabi_ui2f>:
 8000da4:	b510      	push	{r4, lr}
 8000da6:	1e04      	subs	r4, r0, #0
 8000da8:	d027      	beq.n	8000dfa <__aeabi_ui2f+0x56>
 8000daa:	f000 f841 	bl	8000e30 <__clzsi2>
 8000dae:	239e      	movs	r3, #158	; 0x9e
 8000db0:	1a1b      	subs	r3, r3, r0
 8000db2:	2b96      	cmp	r3, #150	; 0x96
 8000db4:	dc0a      	bgt.n	8000dcc <__aeabi_ui2f+0x28>
 8000db6:	2296      	movs	r2, #150	; 0x96
 8000db8:	1ad2      	subs	r2, r2, r3
 8000dba:	4094      	lsls	r4, r2
 8000dbc:	0264      	lsls	r4, r4, #9
 8000dbe:	0a64      	lsrs	r4, r4, #9
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	0264      	lsls	r4, r4, #9
 8000dc4:	05db      	lsls	r3, r3, #23
 8000dc6:	0a60      	lsrs	r0, r4, #9
 8000dc8:	4318      	orrs	r0, r3
 8000dca:	bd10      	pop	{r4, pc}
 8000dcc:	2b99      	cmp	r3, #153	; 0x99
 8000dce:	dc17      	bgt.n	8000e00 <__aeabi_ui2f+0x5c>
 8000dd0:	2299      	movs	r2, #153	; 0x99
 8000dd2:	1ad2      	subs	r2, r2, r3
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	dd27      	ble.n	8000e28 <__aeabi_ui2f+0x84>
 8000dd8:	4094      	lsls	r4, r2
 8000dda:	0022      	movs	r2, r4
 8000ddc:	4c13      	ldr	r4, [pc, #76]	; (8000e2c <__aeabi_ui2f+0x88>)
 8000dde:	4014      	ands	r4, r2
 8000de0:	0751      	lsls	r1, r2, #29
 8000de2:	d004      	beq.n	8000dee <__aeabi_ui2f+0x4a>
 8000de4:	210f      	movs	r1, #15
 8000de6:	400a      	ands	r2, r1
 8000de8:	2a04      	cmp	r2, #4
 8000dea:	d000      	beq.n	8000dee <__aeabi_ui2f+0x4a>
 8000dec:	3404      	adds	r4, #4
 8000dee:	0162      	lsls	r2, r4, #5
 8000df0:	d412      	bmi.n	8000e18 <__aeabi_ui2f+0x74>
 8000df2:	01a4      	lsls	r4, r4, #6
 8000df4:	0a64      	lsrs	r4, r4, #9
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	e7e3      	b.n	8000dc2 <__aeabi_ui2f+0x1e>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	2400      	movs	r4, #0
 8000dfe:	e7e0      	b.n	8000dc2 <__aeabi_ui2f+0x1e>
 8000e00:	22b9      	movs	r2, #185	; 0xb9
 8000e02:	0021      	movs	r1, r4
 8000e04:	1ad2      	subs	r2, r2, r3
 8000e06:	4091      	lsls	r1, r2
 8000e08:	000a      	movs	r2, r1
 8000e0a:	1e51      	subs	r1, r2, #1
 8000e0c:	418a      	sbcs	r2, r1
 8000e0e:	2105      	movs	r1, #5
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	4314      	orrs	r4, r2
 8000e16:	e7db      	b.n	8000dd0 <__aeabi_ui2f+0x2c>
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__aeabi_ui2f+0x88>)
 8000e1a:	401c      	ands	r4, r3
 8000e1c:	239f      	movs	r3, #159	; 0x9f
 8000e1e:	01a4      	lsls	r4, r4, #6
 8000e20:	1a1b      	subs	r3, r3, r0
 8000e22:	0a64      	lsrs	r4, r4, #9
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	e7cc      	b.n	8000dc2 <__aeabi_ui2f+0x1e>
 8000e28:	0022      	movs	r2, r4
 8000e2a:	e7d7      	b.n	8000ddc <__aeabi_ui2f+0x38>
 8000e2c:	fbffffff 	.word	0xfbffffff

08000e30 <__clzsi2>:
 8000e30:	211c      	movs	r1, #28
 8000e32:	2301      	movs	r3, #1
 8000e34:	041b      	lsls	r3, r3, #16
 8000e36:	4298      	cmp	r0, r3
 8000e38:	d301      	bcc.n	8000e3e <__clzsi2+0xe>
 8000e3a:	0c00      	lsrs	r0, r0, #16
 8000e3c:	3910      	subs	r1, #16
 8000e3e:	0a1b      	lsrs	r3, r3, #8
 8000e40:	4298      	cmp	r0, r3
 8000e42:	d301      	bcc.n	8000e48 <__clzsi2+0x18>
 8000e44:	0a00      	lsrs	r0, r0, #8
 8000e46:	3908      	subs	r1, #8
 8000e48:	091b      	lsrs	r3, r3, #4
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d301      	bcc.n	8000e52 <__clzsi2+0x22>
 8000e4e:	0900      	lsrs	r0, r0, #4
 8000e50:	3904      	subs	r1, #4
 8000e52:	a202      	add	r2, pc, #8	; (adr r2, 8000e5c <__clzsi2+0x2c>)
 8000e54:	5c10      	ldrb	r0, [r2, r0]
 8000e56:	1840      	adds	r0, r0, r1
 8000e58:	4770      	bx	lr
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	02020304 	.word	0x02020304
 8000e60:	01010101 	.word	0x01010101
	...

08000e6c <MX_ADC_Init>:
DMA_HandleTypeDef hdma_adc;

/* ADC init function */

void MX_ADC_Init(void)
{
 8000e6c:	b530      	push	{r4, r5, lr}
 8000e6e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e70:	220c      	movs	r2, #12
 8000e72:	2100      	movs	r1, #0
 8000e74:	a801      	add	r0, sp, #4
 8000e76:	f004 fdd8 	bl	8005a2a <memset>
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  //hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e7a:	2204      	movs	r2, #4
  hadc.Instance = ADC1;
 8000e7c:	4c1f      	ldr	r4, [pc, #124]	; (8000efc <MX_ADC_Init+0x90>)
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <MX_ADC_Init+0x94>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e80:	6162      	str	r2, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e82:	22c2      	movs	r2, #194	; 0xc2
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000e84:	2501      	movs	r5, #1
  hadc.Instance = ADC1;
 8000e86:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e88:	2300      	movs	r3, #0
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e8a:	32ff      	adds	r2, #255	; 0xff
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = ENABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e8c:	0020      	movs	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e8e:	6063      	str	r3, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e90:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e92:	60e3      	str	r3, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000e94:	6125      	str	r5, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000e96:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000e98:	61e3      	str	r3, [r4, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000e9a:	6225      	str	r5, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e9c:	6263      	str	r3, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9e:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea0:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000ea2:	6325      	str	r5, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ea4:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ea6:	f001 fcfb 	bl	80028a0 <HAL_ADC_Init>
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_ADC_Init+0x46>
  {
    Error_Handler();
 8000eae:	f000 ffc7 	bl	8001e40 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	015b      	lsls	r3, r3, #5
 8000eb6:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000eb8:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000eba:	a901      	add	r1, sp, #4
 8000ebc:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8000ebe:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000ec0:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ec2:	f001 ff59 	bl	8002d78 <HAL_ADC_ConfigChannel>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC_Init+0x62>
  {
    Error_Handler();
 8000eca:	f000 ffb9 	bl	8001e40 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ece:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ed0:	a901      	add	r1, sp, #4
 8000ed2:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 8000ed4:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ed6:	f001 ff4f 	bl	8002d78 <HAL_ADC_ConfigChannel>
 8000eda:	2800      	cmp	r0, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_ADC_Init+0x76>
  {
    Error_Handler();
 8000ede:	f000 ffaf 	bl	8001e40 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ee2:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ee4:	a901      	add	r1, sp, #4
 8000ee6:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 8000ee8:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000eea:	f001 ff45 	bl	8002d78 <HAL_ADC_ConfigChannel>
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_ADC_Init+0x8a>
  {
    Error_Handler();
 8000ef2:	f000 ffa5 	bl	8001e40 <Error_Handler>
	  {
		Error_Handler();
	  }
  #endif

}
 8000ef6:	b005      	add	sp, #20
 8000ef8:	bd30      	pop	{r4, r5, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	20000348 	.word	0x20000348
 8000f00:	40012400 	.word	0x40012400

08000f04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f04:	b570      	push	{r4, r5, r6, lr}
 8000f06:	0005      	movs	r5, r0
 8000f08:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	2214      	movs	r2, #20
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	a803      	add	r0, sp, #12
 8000f10:	f004 fd8b 	bl	8005a2a <memset>
  if(adcHandle->Instance==ADC1)
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <HAL_ADC_MspInit+0x94>)
 8000f16:	682a      	ldr	r2, [r5, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d13b      	bne.n	8000f94 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f1c:	2080      	movs	r0, #128	; 0x80
 8000f1e:	491f      	ldr	r1, [pc, #124]	; (8000f9c <HAL_ADC_MspInit+0x98>)
 8000f20:	0080      	lsls	r0, r0, #2
 8000f22:	698a      	ldr	r2, [r1, #24]
        /* ADC Init */
        hdma_adc.Instance = DMA1_Channel2;
        hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
        hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
        hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
        hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f24:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f26:	4302      	orrs	r2, r0
 8000f28:	618a      	str	r2, [r1, #24]
 8000f2a:	698b      	ldr	r3, [r1, #24]
        hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f2c:	0076      	lsls	r6, r6, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f2e:	4003      	ands	r3, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	694a      	ldr	r2, [r1, #20]
 8000f38:	0280      	lsls	r0, r0, #10
 8000f3a:	4302      	orrs	r2, r0
 8000f3c:	614a      	str	r2, [r1, #20]
 8000f3e:	694b      	ldr	r3, [r1, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4003      	ands	r3, r0
 8000f44:	9302      	str	r3, [sp, #8]
 8000f46:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = V_OUT_Pin|C_OUT_Pin|DC_FEEDBACK_Pin;
 8000f4a:	2326      	movs	r3, #38	; 0x26
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = V_OUT_Pin|C_OUT_Pin|DC_FEEDBACK_Pin;
 8000f4e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f50:	3b23      	subs	r3, #35	; 0x23
 8000f52:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f002 fa9a 	bl	800348c <HAL_GPIO_Init>
        hdma_adc.Instance = DMA1_Channel2;
 8000f58:	4c11      	ldr	r4, [pc, #68]	; (8000fa0 <HAL_ADC_MspInit+0x9c>)
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_ADC_MspInit+0xa0>)
        hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
        hdma_adc.Init.Mode = DMA_CIRCULAR;
        hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
        if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000f5c:	0020      	movs	r0, r4
        hdma_adc.Instance = DMA1_Channel2;
 8000f5e:	6023      	str	r3, [r4, #0]
        hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f60:	2300      	movs	r3, #0
 8000f62:	6063      	str	r3, [r4, #4]
        hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f64:	60a3      	str	r3, [r4, #8]
        hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000f66:	3380      	adds	r3, #128	; 0x80
 8000f68:	60e3      	str	r3, [r4, #12]
        hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	6163      	str	r3, [r4, #20]
        hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000f70:	2320      	movs	r3, #32
 8000f72:	61a3      	str	r3, [r4, #24]
        hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	015b      	lsls	r3, r3, #5
        hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f78:	6126      	str	r6, [r4, #16]
        hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f7a:	61e3      	str	r3, [r4, #28]
        if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000f7c:	f002 f86c 	bl	8003058 <HAL_DMA_Init>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_ADC_MspInit+0x84>
        {
          Error_Handler();
 8000f84:	f000 ff5c 	bl	8001e40 <Error_Handler>
        }

        __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_ADC_DMA_CH2);
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_ADC_MspInit+0xa4>)
 8000f8a:	6813      	ldr	r3, [r2, #0]
 8000f8c:	4333      	orrs	r3, r6
 8000f8e:	6013      	str	r3, [r2, #0]

        __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8000f90:	63ec      	str	r4, [r5, #60]	; 0x3c
 8000f92:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f94:	b008      	add	sp, #32
 8000f96:	bd70      	pop	{r4, r5, r6, pc}
 8000f98:	40012400 	.word	0x40012400
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	20000304 	.word	0x20000304
 8000fa4:	4002001c 	.word	0x4002001c
 8000fa8:	40010000 	.word	0x40010000

08000fac <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000fac:	b510      	push	{r4, lr}

  hcrc.Instance = CRC;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_CRC_Init+0x34>)
 8000fb0:	4c0c      	ldr	r4, [pc, #48]	; (8000fe4 <MX_CRC_Init+0x38>)
 8000fb2:	6023      	str	r3, [r4, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000fb4:	2300      	movs	r3, #0
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fb6:	0020      	movs	r0, r4
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000fb8:	7123      	strb	r3, [r4, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000fba:	7163      	strb	r3, [r4, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000fbc:	6163      	str	r3, [r4, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fbe:	61a3      	str	r3, [r4, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	6223      	str	r3, [r4, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fc4:	f001 ffec 	bl	8002fa0 <HAL_CRC_Init>
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_CRC_Init+0x24>
  {
    Error_Handler();
 8000fcc:	f000 ff38 	bl	8001e40 <Error_Handler>
  }
  if (HAL_CRCEx_Init(&hcrc) != HAL_OK)
 8000fd0:	0020      	movs	r0, r4
 8000fd2:	f002 f83f 	bl	8003054 <HAL_CRCEx_Init>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	d001      	beq.n	8000fde <MX_CRC_Init+0x32>
  {
    Error_Handler();
 8000fda:	f000 ff31 	bl	8001e40 <Error_Handler>
  }

}
 8000fde:	bd10      	pop	{r4, pc}
 8000fe0:	40023000 	.word	0x40023000
 8000fe4:	20000394 	.word	0x20000394

08000fe8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <HAL_CRC_MspInit+0x20>)
 8000fea:	6802      	ldr	r2, [r0, #0]
{
 8000fec:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d108      	bne.n	8001004 <HAL_CRC_MspInit+0x1c>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ff2:	2040      	movs	r0, #64	; 0x40
 8000ff4:	4a05      	ldr	r2, [pc, #20]	; (800100c <HAL_CRC_MspInit+0x24>)
 8000ff6:	6951      	ldr	r1, [r2, #20]
 8000ff8:	4301      	orrs	r1, r0
 8000ffa:	6151      	str	r1, [r2, #20]
 8000ffc:	6953      	ldr	r3, [r2, #20]
 8000ffe:	4003      	ands	r3, r0
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001004:	b002      	add	sp, #8
 8001006:	4770      	bx	lr
 8001008:	40023000 	.word	0x40023000
 800100c:	40021000 	.word	0x40021000

08001010 <StartADC>:
#include "digiTOS-ADC.h"

// ************** ADC SECTION ************** //
//uint32_t adc_cnt1=0;

void StartADC(){
 8001010:	b510      	push	{r4, lr}
	//HAL_ADC_Start_IT(&hadc);
	//ADC->CCR |= ADC_CCR_TSEN | ADC_CCR_VREFEN;
	HAL_ADC_Start_DMA(&hadc,(uint32_t*) &ADC_Data,ADC_ChannelCnt);
 8001012:	2203      	movs	r2, #3
 8001014:	4902      	ldr	r1, [pc, #8]	; (8001020 <StartADC+0x10>)
 8001016:	4803      	ldr	r0, [pc, #12]	; (8001024 <StartADC+0x14>)
 8001018:	f001 fd76 	bl	8002b08 <HAL_ADC_Start_DMA>
}
 800101c:	bd10      	pop	{r4, pc}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	200003c4 	.word	0x200003c4
 8001024:	20000348 	.word	0x20000348

08001028 <ResetV_data>:

//******* ADC **********//

//******* AMPLITUDE **********//
void ResetV_data() {
	 V_1=0;
 8001028:	2300      	movs	r3, #0
	 V_2=0;
	 V_3=0;
	 V_4=0;

	 V_Cnt[0]=1;
 800102a:	2101      	movs	r1, #1
	 V_1=0;
 800102c:	4a08      	ldr	r2, [pc, #32]	; (8001050 <ResetV_data+0x28>)
 800102e:	6013      	str	r3, [r2, #0]
	 V_2=0;
 8001030:	4a08      	ldr	r2, [pc, #32]	; (8001054 <ResetV_data+0x2c>)
 8001032:	6013      	str	r3, [r2, #0]
	 V_3=0;
 8001034:	4a08      	ldr	r2, [pc, #32]	; (8001058 <ResetV_data+0x30>)
 8001036:	6013      	str	r3, [r2, #0]
	 V_4=0;
 8001038:	4a08      	ldr	r2, [pc, #32]	; (800105c <ResetV_data+0x34>)
 800103a:	6013      	str	r3, [r2, #0]
	 V_Cnt[0]=1;
 800103c:	4a08      	ldr	r2, [pc, #32]	; (8001060 <ResetV_data+0x38>)
 800103e:	6011      	str	r1, [r2, #0]
	 V_Cnt[1]=1;
 8001040:	6051      	str	r1, [r2, #4]
	 V_Cnt[2]=1;
 8001042:	6091      	str	r1, [r2, #8]
	 V_Cnt[3]=1;
 8001044:	60d1      	str	r1, [r2, #12]
	 V_Cnt[4]=1;
	 V_5=1500;
	#endif

	#ifdef DC_PROTECTION
	 	 DC_Data=0;
 8001046:	4a07      	ldr	r2, [pc, #28]	; (8001064 <ResetV_data+0x3c>)
 8001048:	6013      	str	r3, [r2, #0]
	 	 DC_DataCnt=0;
 800104a:	4a07      	ldr	r2, [pc, #28]	; (8001068 <ResetV_data+0x40>)
 800104c:	6013      	str	r3, [r2, #0]
	#endif
}
 800104e:	4770      	bx	lr
 8001050:	20000020 	.word	0x20000020
 8001054:	20000024 	.word	0x20000024
 8001058:	20000028 	.word	0x20000028
 800105c:	2000002c 	.word	0x2000002c
 8001060:	20000030 	.word	0x20000030
 8001064:	200002cc 	.word	0x200002cc
 8001068:	200002d4 	.word	0x200002d4

0800106c <CalcNewAmp>:
	}
	return Value;
	//
}

float CalcNewAmp(uint32_t V_curr, uint32_t V_etalon) {
 800106c:	b510      	push	{r4, lr}
	float fRes=1;
	if (V_curr>V_etalon) {
 800106e:	4288      	cmp	r0, r1
 8001070:	d924      	bls.n	80010bc <CalcNewAmp+0x50>
		fRes=fRes+(float)((V_curr-V_etalon)*Amp_CoefPlus);
 8001072:	1a40      	subs	r0, r0, r1
 8001074:	f7ff fe96 	bl	8000da4 <__aeabi_ui2f>
 8001078:	4914      	ldr	r1, [pc, #80]	; (80010cc <CalcNewAmp+0x60>)
 800107a:	f7ff fb67 	bl	800074c <__aeabi_fmul>
 800107e:	21fe      	movs	r1, #254	; 0xfe
 8001080:	0589      	lsls	r1, r1, #22
 8001082:	f7ff f929 	bl	80002d8 <__aeabi_fadd>
	}
	if (V_curr<V_etalon) {
		fRes=fRes-(float)((V_etalon-V_curr)*Amp_CoefMinus);
	}

	if (fRes>Amp_max) {
 8001086:	4912      	ldr	r1, [pc, #72]	; (80010d0 <CalcNewAmp+0x64>)
		fRes=fRes-(float)((V_etalon-V_curr)*Amp_CoefMinus);
 8001088:	1c04      	adds	r4, r0, #0
	if (fRes>Amp_max) {
 800108a:	f7ff f8f9 	bl	8000280 <__aeabi_fcmpgt>
 800108e:	2800      	cmp	r0, #0
 8001090:	d119      	bne.n	80010c6 <CalcNewAmp+0x5a>
		fRes=Amp_max;
	}
	if (fRes<Amp_min) {
 8001092:	4910      	ldr	r1, [pc, #64]	; (80010d4 <CalcNewAmp+0x68>)
 8001094:	1c20      	adds	r0, r4, #0
 8001096:	f7ff f8df 	bl	8000258 <__aeabi_fcmplt>
 800109a:	2800      	cmp	r0, #0
 800109c:	d000      	beq.n	80010a0 <CalcNewAmp+0x34>
		fRes=Amp_min;
 800109e:	4c0d      	ldr	r4, [pc, #52]	; (80010d4 <CalcNewAmp+0x68>)
	}

	return fRes;
}
 80010a0:	1c20      	adds	r0, r4, #0
 80010a2:	bd10      	pop	{r4, pc}
		fRes=fRes-(float)((V_etalon-V_curr)*Amp_CoefMinus);
 80010a4:	1a08      	subs	r0, r1, r0
 80010a6:	f7ff fe7d 	bl	8000da4 <__aeabi_ui2f>
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <CalcNewAmp+0x60>)
 80010ac:	f7ff fb4e 	bl	800074c <__aeabi_fmul>
 80010b0:	1c01      	adds	r1, r0, #0
 80010b2:	20fe      	movs	r0, #254	; 0xfe
 80010b4:	0580      	lsls	r0, r0, #22
 80010b6:	f7ff fc69 	bl	800098c <__aeabi_fsub>
 80010ba:	e7e4      	b.n	8001086 <CalcNewAmp+0x1a>
	if (V_curr<V_etalon) {
 80010bc:	4288      	cmp	r0, r1
 80010be:	d3f1      	bcc.n	80010a4 <CalcNewAmp+0x38>
	float fRes=1;
 80010c0:	24fe      	movs	r4, #254	; 0xfe
 80010c2:	05a4      	lsls	r4, r4, #22
 80010c4:	e7ec      	b.n	80010a0 <CalcNewAmp+0x34>
		fRes=Amp_max;
 80010c6:	4c02      	ldr	r4, [pc, #8]	; (80010d0 <CalcNewAmp+0x64>)
 80010c8:	e7ea      	b.n	80010a0 <CalcNewAmp+0x34>
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	3999999a 	.word	0x3999999a
 80010d0:	3fcccccd 	.word	0x3fcccccd
 80010d4:	3ecccccd 	.word	0x3ecccccd

080010d8 <CalcNewAmpByStep>:

#ifdef AMP_CORRECTION_TYPE_STEP
float CalcNewAmpByStep(float CurrAmp, float TargetAmp) {
 80010d8:	b570      	push	{r4, r5, r6, lr}
 80010da:	1c05      	adds	r5, r0, #0
 80010dc:	1c0c      	adds	r4, r1, #0
	float fRes=CurrAmp;
	if (TargetAmp>CurrAmp) {
 80010de:	f7ff f8bb 	bl	8000258 <__aeabi_fcmplt>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	d00d      	beq.n	8001102 <CalcNewAmpByStep+0x2a>
		fRes=fRes+amp_correction_step;
 80010e6:	490f      	ldr	r1, [pc, #60]	; (8001124 <CalcNewAmpByStep+0x4c>)
 80010e8:	1c28      	adds	r0, r5, #0
 80010ea:	f7ff f8f5 	bl	80002d8 <__aeabi_fadd>
 80010ee:	1c05      	adds	r5, r0, #0
		if (fRes>=TargetAmp) {
 80010f0:	1c01      	adds	r1, r0, #0
 80010f2:	1c20      	adds	r0, r4, #0
 80010f4:	f7ff f8ba 	bl	800026c <__aeabi_fcmple>
		}
		return fRes;
	}
	if (TargetAmp<CurrAmp) {
		fRes=fRes-amp_correction_step;
		if (fRes<=TargetAmp) {
 80010f8:	2800      	cmp	r0, #0
 80010fa:	d100      	bne.n	80010fe <CalcNewAmpByStep+0x26>
			fRes=TargetAmp;
		}
		return fRes;
	}
	return fRes;
 80010fc:	1c2c      	adds	r4, r5, #0
}
 80010fe:	1c20      	adds	r0, r4, #0
 8001100:	bd70      	pop	{r4, r5, r6, pc}
	if (TargetAmp<CurrAmp) {
 8001102:	1c21      	adds	r1, r4, #0
 8001104:	1c28      	adds	r0, r5, #0
 8001106:	f7ff f8bb 	bl	8000280 <__aeabi_fcmpgt>
 800110a:	2800      	cmp	r0, #0
 800110c:	d0f6      	beq.n	80010fc <CalcNewAmpByStep+0x24>
		fRes=fRes-amp_correction_step;
 800110e:	4905      	ldr	r1, [pc, #20]	; (8001124 <CalcNewAmpByStep+0x4c>)
 8001110:	1c28      	adds	r0, r5, #0
 8001112:	f7ff fc3b 	bl	800098c <__aeabi_fsub>
 8001116:	1c05      	adds	r5, r0, #0
		if (fRes<=TargetAmp) {
 8001118:	1c01      	adds	r1, r0, #0
 800111a:	1c20      	adds	r0, r4, #0
 800111c:	f7ff f8ba 	bl	8000294 <__aeabi_fcmpge>
 8001120:	e7ea      	b.n	80010f8 <CalcNewAmpByStep+0x20>
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	3bc49ba6 	.word	0x3bc49ba6

08001128 <UpdateAmplitudeByV>:
#endif

void UpdateAmplitudeByV() {
 8001128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		V_5=(uint32_t) (V_5/V_Cnt[4]);
		VDDA_Actual=(3300*(*VREFINT_CAL_ADDR))/V_5;
    #endif

	#ifndef USE_VREF_FOR_ADC_CORRECTION
		V_1=(uint32_t) (V_1/V_Cnt[0]);
 800112a:	4c48      	ldr	r4, [pc, #288]	; (800124c <UpdateAmplitudeByV+0x124>)
 800112c:	4f48      	ldr	r7, [pc, #288]	; (8001250 <UpdateAmplitudeByV+0x128>)
 800112e:	6838      	ldr	r0, [r7, #0]
 8001130:	6821      	ldr	r1, [r4, #0]
 8001132:	f7fe fff3 	bl	800011c <__udivsi3>
		V_2=(uint32_t) (V_2/V_Cnt[1]);
 8001136:	4e47      	ldr	r6, [pc, #284]	; (8001254 <UpdateAmplitudeByV+0x12c>)
		V_1=(uint32_t) (V_1/V_Cnt[0]);
 8001138:	6038      	str	r0, [r7, #0]
		V_2=(uint32_t) (V_2/V_Cnt[1]);
 800113a:	6830      	ldr	r0, [r6, #0]
 800113c:	6861      	ldr	r1, [r4, #4]
 800113e:	f7fe ffed 	bl	800011c <__udivsi3>
		V_3=(uint32_t) (V_3/V_Cnt[2]);
 8001142:	4d45      	ldr	r5, [pc, #276]	; (8001258 <UpdateAmplitudeByV+0x130>)
		V_2=(uint32_t) (V_2/V_Cnt[1]);
 8001144:	6030      	str	r0, [r6, #0]
		V_3=(uint32_t) (V_3/V_Cnt[2]);
 8001146:	6828      	ldr	r0, [r5, #0]
 8001148:	68a1      	ldr	r1, [r4, #8]
 800114a:	f7fe ffe7 	bl	800011c <__udivsi3>
		V_4=(uint32_t) (V_4/V_Cnt[3]);
 800114e:	4b43      	ldr	r3, [pc, #268]	; (800125c <UpdateAmplitudeByV+0x134>)
		V_3=(uint32_t) (V_3/V_Cnt[2]);
 8001150:	6028      	str	r0, [r5, #0]
		V_4=(uint32_t) (V_4/V_Cnt[3]);
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	68e1      	ldr	r1, [r4, #12]
 8001156:	f7fe ffe1 	bl	800011c <__udivsi3>
		Sine_Amplitude_3=CalcNewAmp(V_3,V3_etalon);
		Sine_Amplitude_4=CalcNewAmp(V_4,V4_etalon);
	#endif

	#ifdef AMP_CORRECTION_TYPE_STEP
		amp1_target=CalcNewAmp(V_1,V1_etalon);
 800115a:	2180      	movs	r1, #128	; 0x80
		V_4=(uint32_t) (V_4/V_Cnt[3]);
 800115c:	4b3f      	ldr	r3, [pc, #252]	; (800125c <UpdateAmplitudeByV+0x134>)
		amp1_target=CalcNewAmp(V_1,V1_etalon);
 800115e:	0109      	lsls	r1, r1, #4
		V_4=(uint32_t) (V_4/V_Cnt[3]);
 8001160:	6018      	str	r0, [r3, #0]
		amp1_target=CalcNewAmp(V_1,V1_etalon);
 8001162:	6838      	ldr	r0, [r7, #0]
 8001164:	f7ff ff82 	bl	800106c <CalcNewAmp>
 8001168:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <UpdateAmplitudeByV+0x138>)
		Sine_Amplitude_1=CalcNewAmpByStep(Sine_Amplitude_1,amp1_target);
 800116a:	4c3e      	ldr	r4, [pc, #248]	; (8001264 <UpdateAmplitudeByV+0x13c>)
		amp1_target=CalcNewAmp(V_1,V1_etalon);
 800116c:	6018      	str	r0, [r3, #0]
 800116e:	1c01      	adds	r1, r0, #0
		Sine_Amplitude_1=CalcNewAmpByStep(Sine_Amplitude_1,amp1_target);
 8001170:	6820      	ldr	r0, [r4, #0]
 8001172:	f7ff ffb1 	bl	80010d8 <CalcNewAmpByStep>

		amp2_target=CalcNewAmp(V_2,V2_etalon);
 8001176:	2180      	movs	r1, #128	; 0x80
		Sine_Amplitude_1=CalcNewAmpByStep(Sine_Amplitude_1,amp1_target);
 8001178:	6020      	str	r0, [r4, #0]
		amp2_target=CalcNewAmp(V_2,V2_etalon);
 800117a:	6830      	ldr	r0, [r6, #0]
 800117c:	0109      	lsls	r1, r1, #4
 800117e:	f7ff ff75 	bl	800106c <CalcNewAmp>
 8001182:	4b39      	ldr	r3, [pc, #228]	; (8001268 <UpdateAmplitudeByV+0x140>)
		Sine_Amplitude_2=CalcNewAmpByStep(Sine_Amplitude_2,amp2_target);
 8001184:	4e39      	ldr	r6, [pc, #228]	; (800126c <UpdateAmplitudeByV+0x144>)
		amp2_target=CalcNewAmp(V_2,V2_etalon);
 8001186:	6018      	str	r0, [r3, #0]
 8001188:	1c01      	adds	r1, r0, #0
		Sine_Amplitude_2=CalcNewAmpByStep(Sine_Amplitude_2,amp2_target);
 800118a:	6830      	ldr	r0, [r6, #0]
 800118c:	f7ff ffa4 	bl	80010d8 <CalcNewAmpByStep>

		amp3_target=CalcNewAmp(V_3,V3_etalon);
 8001190:	2180      	movs	r1, #128	; 0x80
		Sine_Amplitude_2=CalcNewAmpByStep(Sine_Amplitude_2,amp2_target);
 8001192:	6030      	str	r0, [r6, #0]
		amp3_target=CalcNewAmp(V_3,V3_etalon);
 8001194:	6828      	ldr	r0, [r5, #0]
 8001196:	0109      	lsls	r1, r1, #4
 8001198:	f7ff ff68 	bl	800106c <CalcNewAmp>
		Sine_Amplitude_3=CalcNewAmpByStep(Sine_Amplitude_3,amp3_target);
 800119c:	4d34      	ldr	r5, [pc, #208]	; (8001270 <UpdateAmplitudeByV+0x148>)
		amp3_target=CalcNewAmp(V_3,V3_etalon);
 800119e:	4b35      	ldr	r3, [pc, #212]	; (8001274 <UpdateAmplitudeByV+0x14c>)
 80011a0:	1c01      	adds	r1, r0, #0
 80011a2:	6018      	str	r0, [r3, #0]
		Sine_Amplitude_3=CalcNewAmpByStep(Sine_Amplitude_3,amp3_target);
 80011a4:	6828      	ldr	r0, [r5, #0]
 80011a6:	f7ff ff97 	bl	80010d8 <CalcNewAmpByStep>

		amp4_target=CalcNewAmp(V_4,V4_etalon);
 80011aa:	2180      	movs	r1, #128	; 0x80
 80011ac:	4b2b      	ldr	r3, [pc, #172]	; (800125c <UpdateAmplitudeByV+0x134>)
		Sine_Amplitude_3=CalcNewAmpByStep(Sine_Amplitude_3,amp3_target);
 80011ae:	6028      	str	r0, [r5, #0]
		amp4_target=CalcNewAmp(V_4,V4_etalon);
 80011b0:	6818      	ldr	r0, [r3, #0]
 80011b2:	0109      	lsls	r1, r1, #4
 80011b4:	f7ff ff5a 	bl	800106c <CalcNewAmp>
 80011b8:	4b2f      	ldr	r3, [pc, #188]	; (8001278 <UpdateAmplitudeByV+0x150>)
		Sine_Amplitude_4=CalcNewAmpByStep(Sine_Amplitude_4,amp4_target);
 80011ba:	4f30      	ldr	r7, [pc, #192]	; (800127c <UpdateAmplitudeByV+0x154>)
		amp4_target=CalcNewAmp(V_4,V4_etalon);
 80011bc:	1c01      	adds	r1, r0, #0
 80011be:	6018      	str	r0, [r3, #0]
		Sine_Amplitude_4=CalcNewAmpByStep(Sine_Amplitude_4,amp4_target);
 80011c0:	6838      	ldr	r0, [r7, #0]
 80011c2:	f7ff ff89 	bl	80010d8 <CalcNewAmpByStep>
 80011c6:	6038      	str	r0, [r7, #0]
	#endif

	#ifdef AMP_PROTECTION
		uint16_t AverageAmplitude=(uint16_t) (100*(float)(Sine_Amplitude_4+Sine_Amplitude_3+Sine_Amplitude_2+Sine_Amplitude_1));
 80011c8:	6838      	ldr	r0, [r7, #0]
 80011ca:	6829      	ldr	r1, [r5, #0]
 80011cc:	6836      	ldr	r6, [r6, #0]
 80011ce:	6825      	ldr	r5, [r4, #0]
		if ((AMP_BLOCKED==0) && ((AverageAmplitude>=AMP_PROTECTION_MAX) || (AverageAmplitude<=AMP_PROTECTION_MIN))) {
 80011d0:	4c2b      	ldr	r4, [pc, #172]	; (8001280 <UpdateAmplitudeByV+0x158>)
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d11c      	bne.n	8001212 <UpdateAmplitudeByV+0xea>
		uint16_t AverageAmplitude=(uint16_t) (100*(float)(Sine_Amplitude_4+Sine_Amplitude_3+Sine_Amplitude_2+Sine_Amplitude_1));
 80011d8:	f7ff f87e 	bl	80002d8 <__aeabi_fadd>
 80011dc:	1c31      	adds	r1, r6, #0
 80011de:	f7ff f87b 	bl	80002d8 <__aeabi_fadd>
 80011e2:	1c29      	adds	r1, r5, #0
 80011e4:	f7ff f878 	bl	80002d8 <__aeabi_fadd>
 80011e8:	4926      	ldr	r1, [pc, #152]	; (8001284 <UpdateAmplitudeByV+0x15c>)
 80011ea:	f7ff faaf 	bl	800074c <__aeabi_fmul>
 80011ee:	f7ff f85b 	bl	80002a8 <__aeabi_f2uiz>
		if ((AMP_BLOCKED==0) && ((AverageAmplitude>=AMP_PROTECTION_MAX) || (AverageAmplitude<=AMP_PROTECTION_MIN))) {
 80011f2:	23c7      	movs	r3, #199	; 0xc7
 80011f4:	38c9      	subs	r0, #201	; 0xc9
 80011f6:	b280      	uxth	r0, r0
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4298      	cmp	r0, r3
 80011fc:	d909      	bls.n	8001212 <UpdateAmplitudeByV+0xea>
			AMP_PROTECTION_CNT++;
 80011fe:	4a22      	ldr	r2, [pc, #136]	; (8001288 <UpdateAmplitudeByV+0x160>)
 8001200:	6813      	ldr	r3, [r2, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	6013      	str	r3, [r2, #0]
			if (AMP_PROTECTION_CNT>AMP_PROTECTION_MINMAX_CNT) {
 8001206:	22fa      	movs	r2, #250	; 0xfa
 8001208:	00d2      	lsls	r2, r2, #3
 800120a:	4293      	cmp	r3, r2
 800120c:	dd01      	ble.n	8001212 <UpdateAmplitudeByV+0xea>
				AMP_BLOCKED=1;
 800120e:	2301      	movs	r3, #1
 8001210:	6023      	str	r3, [r4, #0]

		}
	#endif

	#ifdef DC_PROTECTION
			 DC_DataAverage=(DC_Data/DC_DataCnt);
 8001212:	4b1e      	ldr	r3, [pc, #120]	; (800128c <UpdateAmplitudeByV+0x164>)
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <UpdateAmplitudeByV+0x168>)
 8001218:	6819      	ldr	r1, [r3, #0]
 800121a:	f7fe ff7f 	bl	800011c <__udivsi3>
			 if ((DC_BLOCKED==0) && (DC_DataAverage>=DC_PROTECTION_MAX) ) {
 800121e:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <UpdateAmplitudeByV+0x16c>)
			 DC_DataAverage=(DC_Data/DC_DataCnt);
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <UpdateAmplitudeByV+0x170>)
			 if ((DC_BLOCKED==0) && (DC_DataAverage>=DC_PROTECTION_MAX) ) {
 8001222:	6811      	ldr	r1, [r2, #0]
			 DC_DataAverage=(DC_Data/DC_DataCnt);
 8001224:	6018      	str	r0, [r3, #0]
			 if ((DC_BLOCKED==0) && (DC_DataAverage>=DC_PROTECTION_MAX) ) {
 8001226:	2900      	cmp	r1, #0
 8001228:	d10d      	bne.n	8001246 <UpdateAmplitudeByV+0x11e>
 800122a:	6819      	ldr	r1, [r3, #0]
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <UpdateAmplitudeByV+0x174>)
 800122e:	4299      	cmp	r1, r3
 8001230:	d909      	bls.n	8001246 <UpdateAmplitudeByV+0x11e>
				 DC_PROTECTION_CNT++;
 8001232:	491b      	ldr	r1, [pc, #108]	; (80012a0 <UpdateAmplitudeByV+0x178>)
 8001234:	680b      	ldr	r3, [r1, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	600b      	str	r3, [r1, #0]
				 if (DC_PROTECTION_CNT>DC_PROTECTION_WAVE_CNT) {
 800123a:	21fa      	movs	r1, #250	; 0xfa
 800123c:	00c9      	lsls	r1, r1, #3
 800123e:	428b      	cmp	r3, r1
 8001240:	dd01      	ble.n	8001246 <UpdateAmplitudeByV+0x11e>
				 	DC_BLOCKED=1;
 8001242:	2301      	movs	r3, #1
 8001244:	6013      	str	r3, [r2, #0]
				 }
			 }
	#endif

	ResetV_data();
 8001246:	f7ff feef 	bl	8001028 <ResetV_data>
}
 800124a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800124c:	20000030 	.word	0x20000030
 8001250:	20000020 	.word	0x20000020
 8001254:	20000024 	.word	0x20000024
 8001258:	20000028 	.word	0x20000028
 800125c:	2000002c 	.word	0x2000002c
 8001260:	20000040 	.word	0x20000040
 8001264:	20000010 	.word	0x20000010
 8001268:	20000044 	.word	0x20000044
 800126c:	20000014 	.word	0x20000014
 8001270:	20000018 	.word	0x20000018
 8001274:	20000048 	.word	0x20000048
 8001278:	2000004c 	.word	0x2000004c
 800127c:	2000001c 	.word	0x2000001c
 8001280:	200002bc 	.word	0x200002bc
 8001284:	42c80000 	.word	0x42c80000
 8001288:	200002c0 	.word	0x200002c0
 800128c:	200002cc 	.word	0x200002cc
 8001290:	200002d4 	.word	0x200002d4
 8001294:	200002c8 	.word	0x200002c8
 8001298:	200002d0 	.word	0x200002d0
 800129c:	00000dab 	.word	0x00000dab
 80012a0:	200002d8 	.word	0x200002d8

080012a4 <CheckV_Feedback>:

void CheckV_Feedback() {
 80012a4:	b530      	push	{r4, r5, lr}
			V_5=V_5+ADC_Data[3];
			V_Cnt[4]= V_Cnt[4]+1;
		#endif

		#ifdef DC_PROTECTION
			 DC_Data=DC_Data+ADC_Data[2];
 80012a6:	491e      	ldr	r1, [pc, #120]	; (8001320 <CheckV_Feedback+0x7c>)
 80012a8:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <CheckV_Feedback+0x80>)
 80012aa:	8893      	ldrh	r3, [r2, #4]
 80012ac:	6808      	ldr	r0, [r1, #0]
 80012ae:	181b      	adds	r3, r3, r0
 80012b0:	600b      	str	r3, [r1, #0]
			 DC_DataCnt=DC_DataCnt+1;
 80012b2:	491d      	ldr	r1, [pc, #116]	; (8001328 <CheckV_Feedback+0x84>)
		#endif

		if (sin_step>Sin_Amp_ind[2]) {
 80012b4:	481d      	ldr	r0, [pc, #116]	; (800132c <CheckV_Feedback+0x88>)
			 DC_DataCnt=DC_DataCnt+1;
 80012b6:	680b      	ldr	r3, [r1, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	600b      	str	r3, [r1, #0]
		if (sin_step>Sin_Amp_ind[2]) {
 80012bc:	491c      	ldr	r1, [pc, #112]	; (8001330 <CheckV_Feedback+0x8c>)
 80012be:	8804      	ldrh	r4, [r0, #0]
 80012c0:	688d      	ldr	r5, [r1, #8]
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <CheckV_Feedback+0x90>)
 80012c4:	42ac      	cmp	r4, r5
 80012c6:	dd08      	ble.n	80012da <CheckV_Feedback+0x36>
			V_4=V_4+ADC_Data[0];
 80012c8:	491b      	ldr	r1, [pc, #108]	; (8001338 <CheckV_Feedback+0x94>)
 80012ca:	8812      	ldrh	r2, [r2, #0]
 80012cc:	6808      	ldr	r0, [r1, #0]
 80012ce:	1812      	adds	r2, r2, r0
 80012d0:	600a      	str	r2, [r1, #0]
			V_Cnt[3]= V_Cnt[3]+1;
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	3201      	adds	r2, #1
 80012d6:	60da      	str	r2, [r3, #12]
		} else {
			V_1=V_1+ADC_Data[0];
			V_Cnt[0]= V_Cnt[0]+1;
			return;
		}
}
 80012d8:	bd30      	pop	{r4, r5, pc}
		if (sin_step>Sin_Amp_ind[1]) {
 80012da:	8804      	ldrh	r4, [r0, #0]
 80012dc:	684d      	ldr	r5, [r1, #4]
 80012de:	42ac      	cmp	r4, r5
 80012e0:	dd08      	ble.n	80012f4 <CheckV_Feedback+0x50>
			V_3=V_3+ADC_Data[0];
 80012e2:	4916      	ldr	r1, [pc, #88]	; (800133c <CheckV_Feedback+0x98>)
 80012e4:	8812      	ldrh	r2, [r2, #0]
 80012e6:	6808      	ldr	r0, [r1, #0]
 80012e8:	1812      	adds	r2, r2, r0
 80012ea:	600a      	str	r2, [r1, #0]
			V_Cnt[2]= V_Cnt[2]+1;
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	3201      	adds	r2, #1
 80012f0:	609a      	str	r2, [r3, #8]
			return;
 80012f2:	e7f1      	b.n	80012d8 <CheckV_Feedback+0x34>
		if (sin_step>Sin_Amp_ind[0]) {
 80012f4:	8800      	ldrh	r0, [r0, #0]
 80012f6:	6809      	ldr	r1, [r1, #0]
			V_2=V_2+ADC_Data[0];
 80012f8:	8812      	ldrh	r2, [r2, #0]
		if (sin_step>Sin_Amp_ind[0]) {
 80012fa:	4288      	cmp	r0, r1
 80012fc:	dd07      	ble.n	800130e <CheckV_Feedback+0x6a>
			V_2=V_2+ADC_Data[0];
 80012fe:	4910      	ldr	r1, [pc, #64]	; (8001340 <CheckV_Feedback+0x9c>)
 8001300:	6808      	ldr	r0, [r1, #0]
 8001302:	1812      	adds	r2, r2, r0
 8001304:	600a      	str	r2, [r1, #0]
			V_Cnt[1]= V_Cnt[1]+1;
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	3201      	adds	r2, #1
 800130a:	605a      	str	r2, [r3, #4]
			return;
 800130c:	e7e4      	b.n	80012d8 <CheckV_Feedback+0x34>
			V_1=V_1+ADC_Data[0];
 800130e:	490d      	ldr	r1, [pc, #52]	; (8001344 <CheckV_Feedback+0xa0>)
 8001310:	6808      	ldr	r0, [r1, #0]
 8001312:	1812      	adds	r2, r2, r0
 8001314:	600a      	str	r2, [r1, #0]
			V_Cnt[0]= V_Cnt[0]+1;
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	3201      	adds	r2, #1
 800131a:	601a      	str	r2, [r3, #0]
			return;
 800131c:	e7dc      	b.n	80012d8 <CheckV_Feedback+0x34>
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	200002cc 	.word	0x200002cc
 8001324:	200003c4 	.word	0x200003c4
 8001328:	200002d4 	.word	0x200002d4
 800132c:	200002e2 	.word	0x200002e2
 8001330:	20000000 	.word	0x20000000
 8001334:	20000030 	.word	0x20000030
 8001338:	2000002c 	.word	0x2000002c
 800133c:	20000028 	.word	0x20000028
 8001340:	20000024 	.word	0x20000024
 8001344:	20000020 	.word	0x20000020

08001348 <TM_CRC_Calculate8>:
button_struct_t DevModeKey; // button DEV_MODE1
button_struct_t DevModeKey2; // button DEV_MODE2
button_struct_t FaultFlag; // button FAULT_FEEDBACK_Pin


uint32_t TM_CRC_Calculate8(uint8_t* arr, uint32_t count, uint8_t reset) {
 8001348:	b570      	push	{r4, r5, r6, lr}
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <TM_CRC_Calculate8+0x38>)
	uint32_t cnt;

	/* Reset CRC data register if necessary */
	if (reset) {
 800134c:	2a00      	cmp	r2, #0
 800134e:	d001      	beq.n	8001354 <TM_CRC_Calculate8+0xc>
		/* Reset generator */
		CRC->CR = CRC_CR_RESET;
 8001350:	2201      	movs	r2, #1
 8001352:	609a      	str	r2, [r3, #8]
	}

	/* Calculate number of 32-bit blocks */
	cnt = count >> 2;
 8001354:	088a      	lsrs	r2, r1, #2
 8001356:	0014      	movs	r4, r2

	/* Calculate */
	while (cnt--) {
 8001358:	0005      	movs	r5, r0
 800135a:	3c01      	subs	r4, #1
 800135c:	d208      	bcs.n	8001370 <TM_CRC_Calculate8+0x28>
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	1880      	adds	r0, r0, r2
		/* Increase by 4 */
		arr += 4;
	}

	/* Calculate remaining data as 8-bit */
	cnt = count % 4;
 8001362:	2203      	movs	r2, #3
 8001364:	4011      	ands	r1, r2
 8001366:	1841      	adds	r1, r0, r1

	/* Calculate */
	while (cnt--) {
 8001368:	4288      	cmp	r0, r1
 800136a:	d104      	bne.n	8001376 <TM_CRC_Calculate8+0x2e>
		/* Set new value */
		*((uint8_t *)&CRC->DR) = *arr++;
	}

	/* Return data */
	return CRC->DR;
 800136c:	6818      	ldr	r0, [r3, #0]
}
 800136e:	bd70      	pop	{r4, r5, r6, pc}
		CRC->DR = *(uint32_t *)arr;
 8001370:	cd40      	ldmia	r5!, {r6}
 8001372:	601e      	str	r6, [r3, #0]
 8001374:	e7f1      	b.n	800135a <TM_CRC_Calculate8+0x12>
		*((uint8_t *)&CRC->DR) = *arr++;
 8001376:	7802      	ldrb	r2, [r0, #0]
 8001378:	3001      	adds	r0, #1
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	e7f4      	b.n	8001368 <TM_CRC_Calculate8+0x20>
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	40023000 	.word	0x40023000

08001384 <AddUART_CRC>:
void AddUART_Header() {
	ClearUART_Buff();
	strcat(uart_buff,"@data@");
}

void AddUART_CRC() {
 8001384:	b570      	push	{r4, r5, r6, lr}
	memset(crc_buff, '\0', sizeof(crc_buff));
 8001386:	4c0b      	ldr	r4, [pc, #44]	; (80013b4 <AddUART_CRC+0x30>)
 8001388:	2214      	movs	r2, #20
 800138a:	2100      	movs	r1, #0
 800138c:	0020      	movs	r0, r4
 800138e:	f004 fb4c 	bl	8005a2a <memset>
	//uint32_t crc=Get_CRC((uint8_t *) &uart_buff, sizeof(uart_buff));
	uint32_t crc=TM_CRC_Calculate8((uint8_t *) &uart_buff, sizeof(uart_buff), 1);
 8001392:	4d09      	ldr	r5, [pc, #36]	; (80013b8 <AddUART_CRC+0x34>)
 8001394:	2201      	movs	r2, #1
 8001396:	0028      	movs	r0, r5
 8001398:	2164      	movs	r1, #100	; 0x64
 800139a:	f7ff ffd5 	bl	8001348 <TM_CRC_Calculate8>
	sprintf(crc_buff, "@crc@%08X@\r\n",  (unsigned int) crc);
 800139e:	4907      	ldr	r1, [pc, #28]	; (80013bc <AddUART_CRC+0x38>)
	uint32_t crc=TM_CRC_Calculate8((uint8_t *) &uart_buff, sizeof(uart_buff), 1);
 80013a0:	0002      	movs	r2, r0
	sprintf(crc_buff, "@crc@%08X@\r\n",  (unsigned int) crc);
 80013a2:	0020      	movs	r0, r4
 80013a4:	f004 fb4a 	bl	8005a3c <siprintf>
	strcat(uart_buff,crc_buff);
 80013a8:	0028      	movs	r0, r5
 80013aa:	0021      	movs	r1, r4
 80013ac:	f004 fb68 	bl	8005a80 <strcat>

}
 80013b0:	bd70      	pop	{r4, r5, r6, pc}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	2000044c 	.word	0x2000044c
 80013b8:	200003cc 	.word	0x200003cc
 80013bc:	08006330 	.word	0x08006330

080013c0 <ClearUART_Buff>:
	if (WaitForTX) {
		WaitForUART_TX();
	}
}

void ClearUART_Buff() {
 80013c0:	b510      	push	{r4, lr}
	memset(uart_buff, '\0', sizeof(uart_buff));
 80013c2:	2264      	movs	r2, #100	; 0x64
 80013c4:	2100      	movs	r1, #0
 80013c6:	4802      	ldr	r0, [pc, #8]	; (80013d0 <ClearUART_Buff+0x10>)
 80013c8:	f004 fb2f 	bl	8005a2a <memset>
}
 80013cc:	bd10      	pop	{r4, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	200003cc 	.word	0x200003cc

080013d4 <Get_ChipID>:
void Get_ChipID(void) {
 80013d4:	b507      	push	{r0, r1, r2, lr}
	ClearUART_Buff();
 80013d6:	f7ff fff3 	bl	80013c0 <ClearUART_Buff>
	sprintf(uart_buff, "@id@%08X-%08X-%08X",   (unsigned int) TM_ID_GetUnique32(0),
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <Get_ChipID+0x24>)
 80013dc:	4907      	ldr	r1, [pc, #28]	; (80013fc <Get_ChipID+0x28>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <Get_ChipID+0x2c>)
 80013e2:	4808      	ldr	r0, [pc, #32]	; (8001404 <Get_ChipID+0x30>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6809      	ldr	r1, [r1, #0]
 80013e8:	9100      	str	r1, [sp, #0]
 80013ea:	4907      	ldr	r1, [pc, #28]	; (8001408 <Get_ChipID+0x34>)
 80013ec:	f004 fb26 	bl	8005a3c <siprintf>
	AddUART_CRC();
 80013f0:	f7ff ffc8 	bl	8001384 <AddUART_CRC>
}
 80013f4:	bd07      	pop	{r0, r1, r2, pc}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	1ffff7ac 	.word	0x1ffff7ac
 80013fc:	1ffff7b4 	.word	0x1ffff7b4
 8001400:	1ffff7b0 	.word	0x1ffff7b0
 8001404:	200003cc 	.word	0x200003cc
 8001408:	0800633d 	.word	0x0800633d

0800140c <Get_FlashSize>:
void Get_FlashSize(void) {
 800140c:	b510      	push	{r4, lr}
	ClearUART_Buff();
 800140e:	f7ff ffd7 	bl	80013c0 <ClearUART_Buff>
    sprintf(uart_buff, "@flash_size@%02d", TM_ID_GetFlashSize());
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <Get_FlashSize+0x1c>)
 8001414:	4905      	ldr	r1, [pc, #20]	; (800142c <Get_FlashSize+0x20>)
 8001416:	881a      	ldrh	r2, [r3, #0]
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <Get_FlashSize+0x24>)
 800141a:	b292      	uxth	r2, r2
 800141c:	f004 fb0e 	bl	8005a3c <siprintf>
    AddUART_CRC();
 8001420:	f7ff ffb0 	bl	8001384 <AddUART_CRC>
}
 8001424:	bd10      	pop	{r4, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	1ffff7cc 	.word	0x1ffff7cc
 800142c:	08006350 	.word	0x08006350
 8001430:	200003cc 	.word	0x200003cc

08001434 <Get_Version>:
void Get_Version(void) {
 8001434:	b510      	push	{r4, lr}
	ClearUART_Buff();
 8001436:	f7ff ffc3 	bl	80013c0 <ClearUART_Buff>
	strcat(uart_buff,"@version@");
 800143a:	4c06      	ldr	r4, [pc, #24]	; (8001454 <Get_Version+0x20>)
 800143c:	4906      	ldr	r1, [pc, #24]	; (8001458 <Get_Version+0x24>)
 800143e:	0020      	movs	r0, r4
 8001440:	f004 fb1e 	bl	8005a80 <strcat>
    strcat(uart_buff,__DATE__);
 8001444:	4905      	ldr	r1, [pc, #20]	; (800145c <Get_Version+0x28>)
 8001446:	0020      	movs	r0, r4
 8001448:	f004 fb1a 	bl	8005a80 <strcat>
    AddUART_CRC();
 800144c:	f7ff ff9a 	bl	8001384 <AddUART_CRC>
}
 8001450:	bd10      	pop	{r4, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	200003cc 	.word	0x200003cc
 8001458:	08006361 	.word	0x08006361
 800145c:	0800636b 	.word	0x0800636b

08001460 <WaitForUART_TX>:

void WaitForUART_TX() {
	while (!huart1_finished_tx);
 8001460:	4a02      	ldr	r2, [pc, #8]	; (800146c <WaitForUART_TX+0xc>)
 8001462:	6813      	ldr	r3, [r2, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0fc      	beq.n	8001462 <WaitForUART_TX+0x2>
}
 8001468:	4770      	bx	lr
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	20000230 	.word	0x20000230

08001470 <SerialPrintln>:
	huart1_finished_tx = 0;
 8001470:	2200      	movs	r2, #0
void SerialPrintln(int WaitForTX) {
 8001472:	b510      	push	{r4, lr}
 8001474:	0004      	movs	r4, r0
	huart1_finished_tx = 0;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <SerialPrintln+0x24>)
 8001478:	601a      	str	r2, [r3, #0]
	while (HAL_UART_Transmit_DMA(&huart1, (uint8_t*) uart_buff, sizeof(uart_buff)-1) == HAL_BUSY);
 800147a:	2263      	movs	r2, #99	; 0x63
 800147c:	4906      	ldr	r1, [pc, #24]	; (8001498 <SerialPrintln+0x28>)
 800147e:	4807      	ldr	r0, [pc, #28]	; (800149c <SerialPrintln+0x2c>)
 8001480:	f003 feba 	bl	80051f8 <HAL_UART_Transmit_DMA>
 8001484:	2802      	cmp	r0, #2
 8001486:	d0f8      	beq.n	800147a <SerialPrintln+0xa>
	if (WaitForTX) {
 8001488:	2c00      	cmp	r4, #0
 800148a:	d001      	beq.n	8001490 <SerialPrintln+0x20>
		WaitForUART_TX();
 800148c:	f7ff ffe8 	bl	8001460 <WaitForUART_TX>
}
 8001490:	bd10      	pop	{r4, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	20000230 	.word	0x20000230
 8001498:	200003cc 	.word	0x200003cc
 800149c:	20000630 	.word	0x20000630

080014a0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == USART1)  // change USART instance
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_UART_TxCpltCallback+0x18>)
 80014a2:	6802      	ldr	r2, [r0, #0]
{
 80014a4:	b510      	push	{r4, lr}
    if (huart->Instance == USART1)  // change USART instance
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d104      	bne.n	80014b4 <HAL_UART_TxCpltCallback+0x14>
    {
    	huart1_finished_tx = 1;
 80014aa:	2201      	movs	r2, #1
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <HAL_UART_TxCpltCallback+0x1c>)
 80014ae:	601a      	str	r2, [r3, #0]
    	ClearUART_Buff();
 80014b0:	f7ff ff86 	bl	80013c0 <ClearUART_Buff>
    }
}
 80014b4:	bd10      	pop	{r4, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	40013800 	.word	0x40013800
 80014bc:	20000230 	.word	0x20000230

080014c0 <ResetWDG>:

void ResetWDG() {
 80014c0:	b510      	push	{r4, lr}
	 HAL_IWDG_Refresh(&hiwdg);
 80014c2:	4802      	ldr	r0, [pc, #8]	; (80014cc <ResetWDG+0xc>)
 80014c4:	f002 f9b4 	bl	8003830 <HAL_IWDG_Refresh>
	 //IWDG->KR = 0x0000AAAAU;
}
 80014c8:	bd10      	pop	{r4, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	20000498 	.word	0x20000498

080014d0 <PrintCurrentState>:

void PrintCurrentState() {
 80014d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (DevMode1!=1) {
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <PrintCurrentState+0xa0>)
void PrintCurrentState() {
 80014d4:	b08b      	sub	sp, #44	; 0x2c
	if (DevMode1!=1) {
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d147      	bne.n	800156c <PrintCurrentState+0x9c>
		return;
	}

	#ifdef DEBUG_MODE
		ClearUART_Buff();
 80014dc:	f7ff ff70 	bl	80013c0 <ClearUART_Buff>
		#endif

		#ifndef USE_VREF
				"V=%4u, I=%4u, DC=%4u, A1=%03d,  A2=%03d,  A3=%03d,  A4=%03d, AMP_F=%01d, F=%01d, DC_F=%01d \r\n",
		#endif
	      		  				(uint16_t) ADC_Data[0],
 80014e0:	4b24      	ldr	r3, [pc, #144]	; (8001574 <PrintCurrentState+0xa4>)
								(uint16_t) (VDDA_Actual),
								#endif
	      		  				(uint16_t) (100*Sine_Amplitude_1),
	      		  				(uint16_t) (100*Sine_Amplitude_2),
								(uint16_t) (100*Sine_Amplitude_3),
								(uint16_t) (100*Sine_Amplitude_4),
 80014e2:	4925      	ldr	r1, [pc, #148]	; (8001578 <PrintCurrentState+0xa8>)
	      		  				(uint16_t) ADC_Data[0],
 80014e4:	881a      	ldrh	r2, [r3, #0]
 80014e6:	b292      	uxth	r2, r2
 80014e8:	9208      	str	r2, [sp, #32]
								(uint16_t) ADC_Data[1],
 80014ea:	885a      	ldrh	r2, [r3, #2]
 80014ec:	b292      	uxth	r2, r2
 80014ee:	9209      	str	r2, [sp, #36]	; 0x24
								(uint16_t) ADC_Data[2],
 80014f0:	889c      	ldrh	r4, [r3, #4]
	      		  				(uint16_t) (100*Sine_Amplitude_1),
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <PrintCurrentState+0xac>)
		sprintf(uart_buff,
 80014f4:	4a22      	ldr	r2, [pc, #136]	; (8001580 <PrintCurrentState+0xb0>)
	      		  				(uint16_t) (100*Sine_Amplitude_1),
 80014f6:	681d      	ldr	r5, [r3, #0]
	      		  				(uint16_t) (100*Sine_Amplitude_2),
 80014f8:	4b22      	ldr	r3, [pc, #136]	; (8001584 <PrintCurrentState+0xb4>)
		sprintf(uart_buff,
 80014fa:	6812      	ldr	r2, [r2, #0]
	      		  				(uint16_t) (100*Sine_Amplitude_2),
 80014fc:	681e      	ldr	r6, [r3, #0]
								(uint16_t) (100*Sine_Amplitude_3),
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <PrintCurrentState+0xb8>)
								(uint16_t) ADC_Data[2],
 8001500:	b2a4      	uxth	r4, r4
								(uint16_t) (100*Sine_Amplitude_3),
 8001502:	681f      	ldr	r7, [r3, #0]
								(uint16_t) (100*Sine_Amplitude_4),
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <PrintCurrentState+0xbc>)
 8001506:	6818      	ldr	r0, [r3, #0]
		sprintf(uart_buff,
 8001508:	4b21      	ldr	r3, [pc, #132]	; (8001590 <PrintCurrentState+0xc0>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	9207      	str	r2, [sp, #28]
 800150e:	3b03      	subs	r3, #3
 8001510:	425a      	negs	r2, r3
 8001512:	4153      	adcs	r3, r2
 8001514:	9306      	str	r3, [sp, #24]
 8001516:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <PrintCurrentState+0xc4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	9305      	str	r3, [sp, #20]
								(uint16_t) (100*Sine_Amplitude_4),
 800151c:	f7ff f916 	bl	800074c <__aeabi_fmul>
 8001520:	f7fe fec2 	bl	80002a8 <__aeabi_f2uiz>
		sprintf(uart_buff,
 8001524:	b280      	uxth	r0, r0
								(uint16_t) (100*Sine_Amplitude_3),
 8001526:	4914      	ldr	r1, [pc, #80]	; (8001578 <PrintCurrentState+0xa8>)
		sprintf(uart_buff,
 8001528:	9004      	str	r0, [sp, #16]
								(uint16_t) (100*Sine_Amplitude_3),
 800152a:	1c38      	adds	r0, r7, #0
 800152c:	f7ff f90e 	bl	800074c <__aeabi_fmul>
 8001530:	f7fe feba 	bl	80002a8 <__aeabi_f2uiz>
		sprintf(uart_buff,
 8001534:	b280      	uxth	r0, r0
	      		  				(uint16_t) (100*Sine_Amplitude_2),
 8001536:	4910      	ldr	r1, [pc, #64]	; (8001578 <PrintCurrentState+0xa8>)
		sprintf(uart_buff,
 8001538:	9003      	str	r0, [sp, #12]
	      		  				(uint16_t) (100*Sine_Amplitude_2),
 800153a:	1c30      	adds	r0, r6, #0
 800153c:	f7ff f906 	bl	800074c <__aeabi_fmul>
 8001540:	f7fe feb2 	bl	80002a8 <__aeabi_f2uiz>
		sprintf(uart_buff,
 8001544:	b280      	uxth	r0, r0
	      		  				(uint16_t) (100*Sine_Amplitude_1),
 8001546:	490c      	ldr	r1, [pc, #48]	; (8001578 <PrintCurrentState+0xa8>)
		sprintf(uart_buff,
 8001548:	9002      	str	r0, [sp, #8]
	      		  				(uint16_t) (100*Sine_Amplitude_1),
 800154a:	1c28      	adds	r0, r5, #0
 800154c:	f7ff f8fe 	bl	800074c <__aeabi_fmul>
 8001550:	f7fe feaa 	bl	80002a8 <__aeabi_f2uiz>
		sprintf(uart_buff,
 8001554:	b280      	uxth	r0, r0
 8001556:	9001      	str	r0, [sp, #4]
 8001558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800155a:	9a08      	ldr	r2, [sp, #32]
 800155c:	490e      	ldr	r1, [pc, #56]	; (8001598 <PrintCurrentState+0xc8>)
 800155e:	480f      	ldr	r0, [pc, #60]	; (800159c <PrintCurrentState+0xcc>)
 8001560:	9400      	str	r4, [sp, #0]
 8001562:	f004 fa6b 	bl	8005a3c <siprintf>
								AMP_BLOCKED,
								(uint16_t) (BoardStatus==sFaultFlag),
								DC_BLOCKED);
		SerialPrintln(0);
 8001566:	2000      	movs	r0, #0
 8001568:	f7ff ff82 	bl	8001470 <SerialPrintln>
	#endif
}
 800156c:	b00b      	add	sp, #44	; 0x2c
 800156e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001570:	200002e8 	.word	0x200002e8
 8001574:	200003c4 	.word	0x200003c4
 8001578:	42c80000 	.word	0x42c80000
 800157c:	20000010 	.word	0x20000010
 8001580:	200002c8 	.word	0x200002c8
 8001584:	20000014 	.word	0x20000014
 8001588:	20000018 	.word	0x20000018
 800158c:	2000001c 	.word	0x2000001c
 8001590:	200002e4 	.word	0x200002e4
 8001594:	200002bc 	.word	0x200002bc
 8001598:	08006377 	.word	0x08006377
 800159c:	200003cc 	.word	0x200003cc

080015a0 <Set50HzDeadTimeNS>:
//#define DeadTime64X 				1 //1331,2ns
//#define DeadTime128X 				1 //2662,4ns
void Set50HzDeadTimeNS(void) {

		// Tdts = Tck_int //
	    TIM1->CR1 &= ~TIM_CR1_CKD;
 80015a0:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <Set50HzDeadTimeNS+0x44>)
 80015a2:	4911      	ldr	r1, [pc, #68]	; (80015e8 <Set50HzDeadTimeNS+0x48>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	400a      	ands	r2, r1
	    TIM1->BDTR &= ~TIM_BDTR_DTG;
 80015a8:	21ff      	movs	r1, #255	; 0xff
	    TIM1->CR1 &= ~TIM_CR1_CKD;
 80015aa:	601a      	str	r2, [r3, #0]
	    TIM1->BDTR &= ~TIM_BDTR_DTG;
 80015ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015ae:	438a      	bics	r2, r1
 80015b0:	645a      	str	r2, [r3, #68]	; 0x44

	    //TIM1->BDTR  |= TIM_BDTR_DTG_7;//128x //2662,4ns
	    TIM1->BDTR  |= TIM_BDTR_DTG_6;//64x //1331,2ns
 80015b2:	2240      	movs	r2, #64	; 0x40
 80015b4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80015b6:	430a      	orrs	r2, r1
 80015b8:	645a      	str	r2, [r3, #68]	; 0x44
	    //TIM1->BDTR  |= TIM_BDTR_DTG_5;//32x //665,6ns
	    TIM1->BDTR  |= TIM_BDTR_DTG_4;//16x //332,8ns
 80015ba:	2210      	movs	r2, #16
 80015bc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80015be:	430a      	orrs	r2, r1
 80015c0:	645a      	str	r2, [r3, #68]	; 0x44
	    TIM1->BDTR  |= TIM_BDTR_DTG_3;//8x //166,4ns
 80015c2:	2208      	movs	r2, #8
 80015c4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80015c6:	430a      	orrs	r2, r1
 80015c8:	645a      	str	r2, [r3, #68]	; 0x44
	    TIM1->BDTR  |= TIM_BDTR_DTG_2;//4x //83,2ns
 80015ca:	2204      	movs	r2, #4
 80015cc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80015ce:	430a      	orrs	r2, r1
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44
	    TIM1->BDTR  |= TIM_BDTR_DTG_1;//2x  //41,6ns
 80015d2:	2202      	movs	r2, #2
 80015d4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80015d6:	430a      	orrs	r2, r1
 80015d8:	645a      	str	r2, [r3, #68]	; 0x44
	    TIM1->BDTR  |= TIM_BDTR_DTG_0;//1x // Dead time base value 1/Fosc=1/48000=20.8ns
 80015da:	2201      	movs	r2, #1
 80015dc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80015de:	430a      	orrs	r2, r1
 80015e0:	645a      	str	r2, [r3, #68]	; 0x44
}
 80015e2:	4770      	bx	lr
 80015e4:	40012c00 	.word	0x40012c00
 80015e8:	fffffcff 	.word	0xfffffcff

080015ec <SetNormalSignal>:
////////////////////// DEAD TIME - END //////////////////////


////////////////////// SIGNAL INVERSE - BEGIN //////////////////////
void SetNormalSignal(void) {
		TIM1->CCER |= TIM_CCER_CC3NP; // active high level: 0 - high, 1 - low
 80015ec:	2280      	movs	r2, #128	; 0x80
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <SetNormalSignal+0x18>)
 80015f0:	0112      	lsls	r2, r2, #4
 80015f2:	6a19      	ldr	r1, [r3, #32]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	621a      	str	r2, [r3, #32]
		TIM1->CCER |= TIM_CCER_CC3P; // active high level: 0 - high, 1 - low
 80015f8:	2280      	movs	r2, #128	; 0x80
 80015fa:	6a19      	ldr	r1, [r3, #32]
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	430a      	orrs	r2, r1
 8001600:	621a      	str	r2, [r3, #32]
}
 8001602:	4770      	bx	lr
 8001604:	40012c00 	.word	0x40012c00

08001608 <Idle_SET>:
////////////////////// SIGNAL INVERSE - END //////////////////////

////////////////////// IDLE STATE - BEGIN //////////////////////
void Idle_SET(void) {
	    /* output idle state HIGHT */
		TIM1->CR2 |= TIM_CR2_OIS3;
 8001608:	2280      	movs	r2, #128	; 0x80
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <Idle_SET+0x18>)
 800160c:	0152      	lsls	r2, r2, #5
 800160e:	6859      	ldr	r1, [r3, #4]
 8001610:	430a      	orrs	r2, r1
 8001612:	605a      	str	r2, [r3, #4]
		TIM1->CR2 |= TIM_CR2_OIS3N;
 8001614:	2280      	movs	r2, #128	; 0x80
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	0192      	lsls	r2, r2, #6
 800161a:	430a      	orrs	r2, r1
 800161c:	605a      	str	r2, [r3, #4]
}
 800161e:	4770      	bx	lr
 8001620:	40012c00 	.word	0x40012c00

08001624 <PWM_50Hz_Init>:
	/************************** Config PWM channel ************************************/

	TIM1->PSC = 960-1; // div for clock: F = SYSCLK / [PSC + 1]
	TIM1->ARR = 1000; // count to 1000
	TIM1->CCR3 = 500; // duty cycle 50%
	TIM1->CR1 &= ~TIM_CR1_DIR; // count up: 0 - up, 1 - down
 8001624:	2110      	movs	r1, #16
	TIM1->PSC = 960-1; // div for clock: F = SYSCLK / [PSC + 1]
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <PWM_50Hz_Init+0x48>)
 8001628:	4a11      	ldr	r2, [pc, #68]	; (8001670 <PWM_50Hz_Init+0x4c>)
void PWM_50Hz_Init (void) {
 800162a:	b510      	push	{r4, lr}
	TIM1->PSC = 960-1; // div for clock: F = SYSCLK / [PSC + 1]
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 1000; // count to 1000
 800162e:	3229      	adds	r2, #41	; 0x29
 8001630:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR3 = 500; // duty cycle 50%
 8001632:	3af5      	subs	r2, #245	; 0xf5
 8001634:	3aff      	subs	r2, #255	; 0xff
 8001636:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CR1 &= ~TIM_CR1_DIR; // count up: 0 - up, 1 - down
 8001638:	681a      	ldr	r2, [r3, #0]
    TIM1->CR1 &= ~TIM_CR1_CMS; // aligned on the front signal

    TIM1->CCMR2 &= ~TIM_CCMR2_OC3M;
 800163a:	2070      	movs	r0, #112	; 0x70
	TIM1->CR1 &= ~TIM_CR1_DIR; // count up: 0 - up, 1 - down
 800163c:	438a      	bics	r2, r1
 800163e:	601a      	str	r2, [r3, #0]
    TIM1->CR1 &= ~TIM_CR1_CMS; // aligned on the front signal
 8001640:	2260      	movs	r2, #96	; 0x60
 8001642:	6819      	ldr	r1, [r3, #0]
 8001644:	4391      	bics	r1, r2
 8001646:	6019      	str	r1, [r3, #0]
    TIM1->CCMR2 &= ~TIM_CCMR2_OC3M;
 8001648:	69d9      	ldr	r1, [r3, #28]
 800164a:	4381      	bics	r1, r0
 800164c:	61d9      	str	r1, [r3, #28]
    TIM1->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1; // positiv PWM
 800164e:	69d9      	ldr	r1, [r3, #28]
 8001650:	430a      	orrs	r2, r1
 8001652:	61da      	str	r2, [r3, #28]

	/* Enable channel outputs */
	TIM1->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE; // enable PWM complementary out
 8001654:	22a0      	movs	r2, #160	; 0xa0
 8001656:	6a19      	ldr	r1, [r3, #32]
 8001658:	00d2      	lsls	r2, r2, #3
 800165a:	430a      	orrs	r2, r1
 800165c:	621a      	str	r2, [r3, #32]

	SetNormalSignal(); // NORMAL or INVERSE
 800165e:	f7ff ffc5 	bl	80015ec <SetNormalSignal>
	Idle_SET(); // se idle state /* output idle state HIGHT */
 8001662:	f7ff ffd1 	bl	8001608 <Idle_SET>

	Set50HzDeadTimeNS(); // 1976 ns
 8001666:	f7ff ff9b 	bl	80015a0 <Set50HzDeadTimeNS>

	//ch50HZ_OUTEN(); // OUTPUT ENABLE
	//ch50HZ_START(); // start CNT

}
 800166a:	bd10      	pop	{r4, pc}
 800166c:	40012c00 	.word	0x40012c00
 8001670:	000003bf 	.word	0x000003bf

08001674 <PWM_50Hz_START>:

////////////////////// CONTROL 50Hz - BEGIN //////////////////////
void PWM_50Hz_START(void)
{
	//TIM1->CNT = 0;
	TIM1->CCR3=500;
 8001674:	23fa      	movs	r3, #250	; 0xfa
{
 8001676:	b510      	push	{r4, lr}
	TIM1->CCR3=500;
 8001678:	4c0c      	ldr	r4, [pc, #48]	; (80016ac <PWM_50Hz_START+0x38>)
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	63e3      	str	r3, [r4, #60]	; 0x3c
	/* Enable channel outputs */
		TIM1->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE; // enable PWM complementary out
 800167e:	23a0      	movs	r3, #160	; 0xa0
 8001680:	6a22      	ldr	r2, [r4, #32]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4313      	orrs	r3, r2
 8001686:	6223      	str	r3, [r4, #32]

		SetNormalSignal(); // NORMAL or INVERSE
 8001688:	f7ff ffb0 	bl	80015ec <SetNormalSignal>
		Idle_SET(); // se idle state /* output idle state HIGHT */
 800168c:	f7ff ffbc 	bl	8001608 <Idle_SET>

		Set50HzDeadTimeNS(); // 1976 ns
 8001690:	f7ff ff86 	bl	80015a0 <Set50HzDeadTimeNS>

	TIM1->DIER |= TIM_DIER_UIE;
 8001694:	2301      	movs	r3, #1
 8001696:	68e2      	ldr	r2, [r4, #12]
 8001698:	431a      	orrs	r2, r3
 800169a:	60e2      	str	r2, [r4, #12]
	TIM1->CR1 |= TIM_CR1_CEN;
 800169c:	6822      	ldr	r2, [r4, #0]
 800169e:	4313      	orrs	r3, r2
 80016a0:	6023      	str	r3, [r4, #0]

	ResetV_data();
 80016a2:	f7ff fcc1 	bl	8001028 <ResetV_data>
	UpdateAmplitudeByV();
 80016a6:	f7ff fd3f 	bl	8001128 <UpdateAmplitudeByV>
}
 80016aa:	bd10      	pop	{r4, pc}
 80016ac:	40012c00 	.word	0x40012c00

080016b0 <PWM_50Hz_STOP>:

void PWM_50Hz_STOP(void)
{
	//TIM1->CNT = 0;
	TIM1->SR&=~TIM_SR_UIF; // clear update flag
 80016b0:	2101      	movs	r1, #1
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <PWM_50Hz_STOP+0x44>)
 80016b4:	691a      	ldr	r2, [r3, #16]
 80016b6:	438a      	bics	r2, r1
 80016b8:	611a      	str	r2, [r3, #16]

	TIM1->DIER &= ~TIM_DIER_UIE; // stop interrupt
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	438a      	bics	r2, r1
 80016be:	60da      	str	r2, [r3, #12]
	TIM1->CR1 &= (uint16_t)~TIM_CR1_CEN; // stop cnt
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	490d      	ldr	r1, [pc, #52]	; (80016f8 <PWM_50Hz_STOP+0x48>)
 80016c4:	400a      	ands	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]

	//TIM1->CR1 &= ~TIM_CR1_CKD; // off dead time
	//TIM1->BDTR &= ~TIM_BDTR_DTG;

	TIM1->CR2 |= TIM_CR2_OIS3N; // revert level
 80016c8:	2280      	movs	r2, #128	; 0x80
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	0192      	lsls	r2, r2, #6
 80016ce:	430a      	orrs	r2, r1
 80016d0:	605a      	str	r2, [r3, #4]
	TIM1->CR2 &= ~TIM_CR2_OIS3;
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4909      	ldr	r1, [pc, #36]	; (80016fc <PWM_50Hz_STOP+0x4c>)
 80016d6:	400a      	ands	r2, r1
 80016d8:	605a      	str	r2, [r3, #4]

	TIM1->CCER |= TIM_CCER_CC3P; // active high level: 0 - high, 1 - low
 80016da:	2280      	movs	r2, #128	; 0x80
 80016dc:	6a19      	ldr	r1, [r3, #32]
 80016de:	0092      	lsls	r2, r2, #2
 80016e0:	430a      	orrs	r2, r1
 80016e2:	621a      	str	r2, [r3, #32]
	TIM1->CCER &= ~TIM_CCER_CC3NP; // active high level: 0 - high, 1 - low
 80016e4:	6a1a      	ldr	r2, [r3, #32]
 80016e6:	4906      	ldr	r1, [pc, #24]	; (8001700 <PWM_50Hz_STOP+0x50>)
 80016e8:	400a      	ands	r2, r1
 80016ea:	621a      	str	r2, [r3, #32]

	TIM1->CCR3=0;
 80016ec:	2200      	movs	r2, #0
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c

}
 80016f0:	4770      	bx	lr
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	40012c00 	.word	0x40012c00
 80016f8:	0000fffe 	.word	0x0000fffe
 80016fc:	ffffefff 	.word	0xffffefff
 8001700:	fffff7ff 	.word	0xfffff7ff

08001704 <PWM_50Hz_OUTEN>:

void PWM_50Hz_OUTEN(void)
{
	TIM1->BDTR |= TIM_BDTR_MOE | TIM_BDTR_AOE; // enable generation output
 8001704:	23c0      	movs	r3, #192	; 0xc0
 8001706:	4a03      	ldr	r2, [pc, #12]	; (8001714 <PWM_50Hz_OUTEN+0x10>)
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800170c:	430b      	orrs	r3, r1
 800170e:	6453      	str	r3, [r2, #68]	; 0x44
	//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
}
 8001710:	4770      	bx	lr
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	40012c00 	.word	0x40012c00

08001718 <PWM_50Hz_OUTDIS>:

void PWM_50Hz_OUTDIS(void)
{
    TIM1->BDTR &= ~TIM_BDTR_MOE;
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <PWM_50Hz_OUTDIS+0x14>)
 800171a:	4905      	ldr	r1, [pc, #20]	; (8001730 <PWM_50Hz_OUTDIS+0x18>)
 800171c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800171e:	400a      	ands	r2, r1
 8001720:	645a      	str	r2, [r3, #68]	; 0x44
    TIM1->BDTR &= ~TIM_BDTR_AOE;
 8001722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001724:	4903      	ldr	r1, [pc, #12]	; (8001734 <PWM_50Hz_OUTDIS+0x1c>)
 8001726:	400a      	ands	r2, r1
 8001728:	645a      	str	r2, [r3, #68]	; 0x44
    //HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_3);
}
 800172a:	4770      	bx	lr
 800172c:	40012c00 	.word	0x40012c00
 8001730:	ffff7fff 	.word	0xffff7fff
 8001734:	ffffbfff 	.word	0xffffbfff

08001738 <PWM_50Hz_ON>:

void PWM_50Hz_ON(void){
 8001738:	b510      	push	{r4, lr}
	PWM_50Hz_OUTEN(); // OUTPUT ENABLE
 800173a:	f7ff ffe3 	bl	8001704 <PWM_50Hz_OUTEN>
	PWM_50Hz_START(); // start CNT
 800173e:	f7ff ff99 	bl	8001674 <PWM_50Hz_START>
}
 8001742:	bd10      	pop	{r4, pc}

08001744 <PWM_50Hz_OFF>:

void PWM_50Hz_OFF(void){
 8001744:	b510      	push	{r4, lr}
	PWM_50Hz_OUTDIS(); // OUTPUT ENABLE
 8001746:	f7ff ffe7 	bl	8001718 <PWM_50Hz_OUTDIS>
	PWM_50Hz_STOP(); // start CNT
 800174a:	f7ff ffb1 	bl	80016b0 <PWM_50Hz_STOP>
}
 800174e:	bd10      	pop	{r4, pc}

08001750 <PWM_Sinus_START>:


////////////////////// INIT GENERATOR PWM LOW - BEGIN //////////////////////
void PWM_Sinus_START(void)
{
	sin_step=0;
 8001750:	2200      	movs	r2, #0
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <PWM_Sinus_START+0x24>)
{
 8001754:	b510      	push	{r4, lr}
	sin_step=0;
 8001756:	801a      	strh	r2, [r3, #0]
	//TIM1->CNT = 0;
	TIM3->CCR1=0;
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <PWM_Sinus_START+0x28>)
 800175a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=0;
 800175c:	639a      	str	r2, [r3, #56]	; 0x38
	//TIM3->CCER |= TIM_CCER_CC1P;

	//TIM3->CCER |= TIM_CCER_CC2E; // enable PWM complementary out to PA9
	//TIM3->CCER |= TIM_CCER_CC2P;

	TIM3->DIER |= TIM_DIER_UIE;
 800175e:	68d9      	ldr	r1, [r3, #12]
 8001760:	3201      	adds	r2, #1
 8001762:	4311      	orrs	r1, r2
 8001764:	60d9      	str	r1, [r3, #12]
	TIM3->CR1 |= TIM_CR1_CEN;
 8001766:	6819      	ldr	r1, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]

	ResetAmplitude();
 800176c:	f000 f878 	bl	8001860 <ResetAmplitude>
}
 8001770:	bd10      	pop	{r4, pc}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	200002e2 	.word	0x200002e2
 8001778:	40000400 	.word	0x40000400

0800177c <PWM_Sinus_STOP>:

void PWM_Sinus_STOP(void)
{
	//TIM1->CNT = 0;
	TIM3->SR&=~TIM_SR_UIF; // clear update flag
 800177c:	2101      	movs	r1, #1
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <PWM_Sinus_STOP+0x20>)
 8001780:	691a      	ldr	r2, [r3, #16]
 8001782:	438a      	bics	r2, r1
 8001784:	611a      	str	r2, [r3, #16]

	TIM3->DIER &= ~TIM_DIER_UIE; // stop interrupt
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	438a      	bics	r2, r1
 800178a:	60da      	str	r2, [r3, #12]
	TIM3->CR1 &= (uint16_t)~TIM_CR1_CEN; // stop cnt
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4904      	ldr	r1, [pc, #16]	; (80017a0 <PWM_Sinus_STOP+0x24>)
 8001790:	400a      	ands	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

	TIM3->CCR1=0;
 8001794:	2200      	movs	r2, #0
 8001796:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=0;
 8001798:	639a      	str	r2, [r3, #56]	; 0x38
}
 800179a:	4770      	bx	lr
 800179c:	40000400 	.word	0x40000400
 80017a0:	0000fffe 	.word	0x0000fffe

080017a4 <PWM_Sinus_OUTEN>:

void PWM_Sinus_OUTEN(void)
{
	TIM3->BDTR |= TIM_BDTR_MOE | TIM_BDTR_AOE; // enable generation output
 80017a4:	23c0      	movs	r3, #192	; 0xc0
 80017a6:	4a03      	ldr	r2, [pc, #12]	; (80017b4 <PWM_Sinus_OUTEN+0x10>)
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80017ac:	430b      	orrs	r3, r1
 80017ae:	6453      	str	r3, [r2, #68]	; 0x44

	//HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
	//HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
}
 80017b0:	4770      	bx	lr
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	40000400 	.word	0x40000400

080017b8 <PWM_Sinus_OUTDIS>:

void PWM_Sinus_OUTDIS(void)
{
    TIM3->BDTR &= ~TIM_BDTR_MOE;
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <PWM_Sinus_OUTDIS+0x14>)
 80017ba:	4905      	ldr	r1, [pc, #20]	; (80017d0 <PWM_Sinus_OUTDIS+0x18>)
 80017bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017be:	400a      	ands	r2, r1
 80017c0:	645a      	str	r2, [r3, #68]	; 0x44
    TIM3->BDTR &= ~TIM_BDTR_AOE;
 80017c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017c4:	4903      	ldr	r1, [pc, #12]	; (80017d4 <PWM_Sinus_OUTDIS+0x1c>)
 80017c6:	400a      	ands	r2, r1
 80017c8:	645a      	str	r2, [r3, #68]	; 0x44

    //HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
    //HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
}
 80017ca:	4770      	bx	lr
 80017cc:	40000400 	.word	0x40000400
 80017d0:	ffff7fff 	.word	0xffff7fff
 80017d4:	ffffbfff 	.word	0xffffbfff

080017d8 <PWM_Sinus_ON>:

void PWM_Sinus_ON(void) {
 80017d8:	b510      	push	{r4, lr}
	PWM_Sinus_OUTEN(); // OUTPUT ENABLE
 80017da:	f7ff ffe3 	bl	80017a4 <PWM_Sinus_OUTEN>
	PWM_Sinus_START(); // start CNT
 80017de:	f7ff ffb7 	bl	8001750 <PWM_Sinus_START>
}
 80017e2:	bd10      	pop	{r4, pc}

080017e4 <PWM_Sinus_OFF>:

void PWM_Sinus_OFF(void){
 80017e4:	b510      	push	{r4, lr}
	PWM_Sinus_OUTDIS(); // OUTPUT ENABLE
 80017e6:	f7ff ffe7 	bl	80017b8 <PWM_Sinus_OUTDIS>
	PWM_Sinus_STOP(); // start CNT
 80017ea:	f7ff ffc7 	bl	800177c <PWM_Sinus_STOP>
}
 80017ee:	bd10      	pop	{r4, pc}

080017f0 <PWM_Sinus_Init>:
	//GPIOA->CRL	&= ~GPIO_CRL_MODE1;
	//GPIOA->CRL	|= GPIO_CRL_MODE1; // gpio speed 50 MHz

	/*************************** Config PWM channel ***********************************/
		TIM3->PSC = SinResPSC; // div for clock: F = SYSCLK / [PSC + 1]
		TIM3->ARR = 1000; // count to 1000
 80017f0:	21fa      	movs	r1, #250	; 0xfa
		TIM3->PSC = SinResPSC; // div for clock: F = SYSCLK / [PSC + 1]
 80017f2:	2201      	movs	r2, #1
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <PWM_Sinus_Init+0x64>)
		TIM3->ARR = 1000; // count to 1000
 80017f6:	0089      	lsls	r1, r1, #2
		TIM3->PSC = SinResPSC; // div for clock: F = SYSCLK / [PSC + 1]
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
		TIM3->ARR = 1000; // count to 1000
 80017fa:	62d9      	str	r1, [r3, #44]	; 0x2c
		TIM3->CCR1 = 0; // duty cycle 0%
 80017fc:	2100      	movs	r1, #0
 80017fe:	6359      	str	r1, [r3, #52]	; 0x34
		TIM3->CCR2 = 0; // duty cycle 0%
 8001800:	6399      	str	r1, [r3, #56]	; 0x38

			TIM3->CCER |= TIM_CCER_CC1E; // enable PWM out to PA8
 8001802:	6a19      	ldr	r1, [r3, #32]
 8001804:	430a      	orrs	r2, r1
 8001806:	621a      	str	r2, [r3, #32]
			//TIM3->CCER &= ~TIM_CCER_CC1P; // active high level: 0 - high, 1 - low
			TIM3->CCER |= TIM_CCER_CC1P;
 8001808:	2202      	movs	r2, #2
 800180a:	6a19      	ldr	r1, [r3, #32]
 800180c:	430a      	orrs	r2, r1

			TIM3->CCER |= TIM_CCER_CC2E; // enable PWM complementary out to PA9
 800180e:	2110      	movs	r1, #16
			TIM3->CCER |= TIM_CCER_CC1P;
 8001810:	621a      	str	r2, [r3, #32]
			TIM3->CCER |= TIM_CCER_CC2E; // enable PWM complementary out to PA9
 8001812:	6a1a      	ldr	r2, [r3, #32]
 8001814:	430a      	orrs	r2, r1
 8001816:	621a      	str	r2, [r3, #32]
			//TIM3->CCER &= ~TIM_CCER_CC2P; // active high level: 0 - high, 1 - low
			TIM3->CCER |= TIM_CCER_CC2P;
 8001818:	2220      	movs	r2, #32
 800181a:	6a18      	ldr	r0, [r3, #32]
 800181c:	4302      	orrs	r2, r0
 800181e:	621a      	str	r2, [r3, #32]

		// se idle state
		TIM3->CR2 |= TIM_CR2_OIS1;
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	6858      	ldr	r0, [r3, #4]
 8001824:	0052      	lsls	r2, r2, #1
 8001826:	4302      	orrs	r2, r0
 8001828:	605a      	str	r2, [r3, #4]
		TIM3->CR2 |= TIM_CR2_OIS2;
 800182a:	2280      	movs	r2, #128	; 0x80
 800182c:	6858      	ldr	r0, [r3, #4]
 800182e:	00d2      	lsls	r2, r2, #3
 8001830:	4302      	orrs	r2, r0
 8001832:	605a      	str	r2, [r3, #4]

		TIM3->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 8001834:	699a      	ldr	r2, [r3, #24]
 8001836:	4808      	ldr	r0, [pc, #32]	; (8001858 <PWM_Sinus_Init+0x68>)
 8001838:	4002      	ands	r2, r0
 800183a:	619a      	str	r2, [r3, #24]
		TIM3->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 |
 800183c:	6998      	ldr	r0, [r3, #24]
 800183e:	4a07      	ldr	r2, [pc, #28]	; (800185c <PWM_Sinus_Init+0x6c>)
 8001840:	4302      	orrs	r2, r0
 8001842:	619a      	str	r2, [r3, #24]
		 TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1; // positiv PWM1_CH1 and PWM1_CH2

		/*******************************************************************************/

		TIM3->CR1 &= ~TIM_CR1_DIR; // count up: 0 - up, 1 - down
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	438a      	bics	r2, r1
 8001848:	601a      	str	r2, [r3, #0]
		TIM3->CR1 &= ~TIM_CR1_CMS; // aligned on the front signal: 00 - front; 01, 10, 11 - center
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	3150      	adds	r1, #80	; 0x50
 800184e:	438a      	bics	r2, r1
 8001850:	601a      	str	r2, [r3, #0]

}
 8001852:	4770      	bx	lr
 8001854:	40000400 	.word	0x40000400
 8001858:	ffff8f8f 	.word	0xffff8f8f
 800185c:	00006060 	.word	0x00006060

08001860 <ResetAmplitude>:
		Sine_Amplitude_1=1;
	#endif

	#ifdef AMP_CORRECTION_TYPE_STEP
		#ifdef USE_SOFT_START
			Sine_Amplitude_4=SOFT_START_FROM;
 8001860:	23fc      	movs	r3, #252	; 0xfc
 8001862:	4a08      	ldr	r2, [pc, #32]	; (8001884 <ResetAmplitude+0x24>)
 8001864:	059b      	lsls	r3, r3, #22
 8001866:	6013      	str	r3, [r2, #0]
			Sine_Amplitude_3=SOFT_START_FROM;
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <ResetAmplitude+0x28>)
 800186a:	6013      	str	r3, [r2, #0]
			Sine_Amplitude_2=SOFT_START_FROM;
 800186c:	4a07      	ldr	r2, [pc, #28]	; (800188c <ResetAmplitude+0x2c>)
 800186e:	6013      	str	r3, [r2, #0]
			Sine_Amplitude_1=SOFT_START_FROM;
 8001870:	4a07      	ldr	r2, [pc, #28]	; (8001890 <ResetAmplitude+0x30>)
 8001872:	6013      	str	r3, [r2, #0]
			Sine_Amplitude_1=1;
		#endif
	#endif

	#ifdef AMP_PROTECTION
			AMP_BLOCKED=0;
 8001874:	2300      	movs	r3, #0
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <ResetAmplitude+0x34>)
 8001878:	6013      	str	r3, [r2, #0]
			AMP_PROTECTION_CNT_BEFORESTART=0;
 800187a:	4a07      	ldr	r2, [pc, #28]	; (8001898 <ResetAmplitude+0x38>)
 800187c:	6013      	str	r3, [r2, #0]
			AMP_PROTECTION_CNT=0;
 800187e:	4a07      	ldr	r2, [pc, #28]	; (800189c <ResetAmplitude+0x3c>)
 8001880:	6013      	str	r3, [r2, #0]
	#endif

}
 8001882:	4770      	bx	lr
 8001884:	2000001c 	.word	0x2000001c
 8001888:	20000018 	.word	0x20000018
 800188c:	20000014 	.word	0x20000014
 8001890:	20000010 	.word	0x20000010
 8001894:	200002bc 	.word	0x200002bc
 8001898:	200002c4 	.word	0x200002c4
 800189c:	200002c0 	.word	0x200002c0

080018a0 <GetApmlitude>:
		return;
	}
}

float GetApmlitude() {
	if (sin_step>Sin_Amp_ind[2]) {
 80018a0:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <GetApmlitude+0x30>)
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <GetApmlitude+0x34>)
 80018a4:	8811      	ldrh	r1, [r2, #0]
 80018a6:	6898      	ldr	r0, [r3, #8]
 80018a8:	4281      	cmp	r1, r0
 80018aa:	dd02      	ble.n	80018b2 <GetApmlitude+0x12>
		return Sine_Amplitude_4;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <GetApmlitude+0x38>)
		return Sine_Amplitude_3;
	}
	if (sin_step>Sin_Amp_ind[0]) {
		return Sine_Amplitude_2;
	}
	return Sine_Amplitude_1;
 80018ae:	6818      	ldr	r0, [r3, #0]
}
 80018b0:	4770      	bx	lr
	if (sin_step>Sin_Amp_ind[1]) {
 80018b2:	8811      	ldrh	r1, [r2, #0]
 80018b4:	6858      	ldr	r0, [r3, #4]
 80018b6:	4281      	cmp	r1, r0
 80018b8:	dd01      	ble.n	80018be <GetApmlitude+0x1e>
		return Sine_Amplitude_3;
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <GetApmlitude+0x3c>)
 80018bc:	e7f7      	b.n	80018ae <GetApmlitude+0xe>
	if (sin_step>Sin_Amp_ind[0]) {
 80018be:	8812      	ldrh	r2, [r2, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	dd01      	ble.n	80018ca <GetApmlitude+0x2a>
		return Sine_Amplitude_2;
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <GetApmlitude+0x40>)
 80018c8:	e7f1      	b.n	80018ae <GetApmlitude+0xe>
	return Sine_Amplitude_1;
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <GetApmlitude+0x44>)
 80018cc:	e7ef      	b.n	80018ae <GetApmlitude+0xe>
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	200002e2 	.word	0x200002e2
 80018d4:	20000000 	.word	0x20000000
 80018d8:	2000001c 	.word	0x2000001c
 80018dc:	20000018 	.word	0x20000018
 80018e0:	20000014 	.word	0x20000014
 80018e4:	20000010 	.word	0x20000010

080018e8 <GetSinus>:

uint16_t GetSinus() {
	if (sin_step >= SinRes) {
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <GetSinus+0x54>)
uint16_t GetSinus() {
 80018ea:	b570      	push	{r4, r5, r6, lr}
	if (sin_step >= SinRes) {
 80018ec:	881a      	ldrh	r2, [r3, #0]
 80018ee:	2aef      	cmp	r2, #239	; 0xef
 80018f0:	d901      	bls.n	80018f6 <GetSinus+0xe>
		sin_step = 0;
 80018f2:	2200      	movs	r2, #0
 80018f4:	801a      	strh	r2, [r3, #0]
	}
	uint16_t fSinusData=sin_data[sin_step];
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	4a11      	ldr	r2, [pc, #68]	; (8001940 <GetSinus+0x58>)
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	5a9c      	ldrh	r4, [r3, r2]
	float curAmplitude=GetApmlitude();
 80018fe:	f7ff ffcf 	bl	80018a0 <GetApmlitude>
	if (curAmplitude!=1) {
 8001902:	21fe      	movs	r1, #254	; 0xfe
 8001904:	0589      	lsls	r1, r1, #22
	uint16_t fSinusData=sin_data[sin_step];
 8001906:	b2a4      	uxth	r4, r4
	float curAmplitude=GetApmlitude();
 8001908:	1c05      	adds	r5, r0, #0
	if (curAmplitude!=1) {
 800190a:	f7fe fc9f 	bl	800024c <__aeabi_fcmpeq>
 800190e:	2800      	cmp	r0, #0
 8001910:	d108      	bne.n	8001924 <GetSinus+0x3c>
		fSinusData=(uint16_t) (curAmplitude*fSinusData);
 8001912:	0020      	movs	r0, r4
 8001914:	f7ff f9f6 	bl	8000d04 <__aeabi_i2f>
 8001918:	1c29      	adds	r1, r5, #0
 800191a:	f7fe ff17 	bl	800074c <__aeabi_fmul>
 800191e:	f7fe fcc3 	bl	80002a8 <__aeabi_f2uiz>
 8001922:	b284      	uxth	r4, r0
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <GetSinus+0x5c>)
 8001926:	1c20      	adds	r0, r4, #0
 8001928:	429c      	cmp	r4, r3
 800192a:	d902      	bls.n	8001932 <GetSinus+0x4a>
 800192c:	1c18      	adds	r0, r3, #0
 800192e:	b280      	uxth	r0, r0
	}
	if (fSinusData>=MaxSinusData) {
		return MaxSinusData;
	}
	return fSinusData;
}
 8001930:	bd70      	pop	{r4, r5, r6, pc}
 8001932:	b2a3      	uxth	r3, r4
 8001934:	2b1e      	cmp	r3, #30
 8001936:	d2fa      	bcs.n	800192e <GetSinus+0x46>
 8001938:	201e      	movs	r0, #30
 800193a:	e7f8      	b.n	800192e <GetSinus+0x46>
 800193c:	200002e2 	.word	0x200002e2
 8001940:	20000050 	.word	0x20000050
 8001944:	000003ca 	.word	0x000003ca

08001948 <buttonInit>:
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		}	
		HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
	#endif
	
	button_struct->GPIO_Pin = GPIO_Pin;
 8001948:	6002      	str	r2, [r0, #0]
	button_struct->GPIO_Port = GPIO_Port;
	button_struct->debounce_time = debounce_time;
 800194a:	9a00      	ldr	r2, [sp, #0]
	button_struct->long_press_time = long_press_time;
	button_struct->active_state = active_state;
 800194c:	7203      	strb	r3, [r0, #8]
	button_struct->debounce_time = debounce_time;
 800194e:	60c2      	str	r2, [r0, #12]
	button_struct->long_press_time = long_press_time;
 8001950:	9a01      	ldr	r2, [sp, #4]
	
	button_struct->short_press_handled = 0;
 8001952:	2300      	movs	r3, #0
	button_struct->long_press_time = long_press_time;
 8001954:	6102      	str	r2, [r0, #16]
	button_struct->long_press_handled = 0;
	button_struct->_on_press_time = 0;
	button_struct->_previous_state = button_off;
 8001956:	2201      	movs	r2, #1
	button_struct->GPIO_Port = GPIO_Port;
 8001958:	6041      	str	r1, [r0, #4]
	button_struct->short_press_handled = 0;
 800195a:	7503      	strb	r3, [r0, #20]
	button_struct->long_press_handled = 0;
 800195c:	7543      	strb	r3, [r0, #21]
	button_struct->_on_press_time = 0;
 800195e:	6183      	str	r3, [r0, #24]
	button_struct->_previous_state = button_off;
 8001960:	75c2      	strb	r2, [r0, #23]
	button_struct->_state_changed = 0;
 8001962:	7583      	strb	r3, [r0, #22]
	button_struct->_state = noEvent;
 8001964:	7243      	strb	r3, [r0, #9]
}
 8001966:	4770      	bx	lr

08001968 <_button_state>:
/*	PRIVATE FUNCTIONS */
/**********************************************************/
/* Low level GPIO read routine.
button_on - button is currently read as pressed
*/
_phy_state_t _button_state(button_struct_t *button_struct){
 8001968:	b510      	push	{r4, lr}
 800196a:	0004      	movs	r4, r0
	if(HAL_GPIO_ReadPin(button_struct->GPIO_Port, button_struct->GPIO_Pin) == button_struct->active_state){
 800196c:	8801      	ldrh	r1, [r0, #0]
 800196e:	6840      	ldr	r0, [r0, #4]
 8001970:	f001 fea4 	bl	80036bc <HAL_GPIO_ReadPin>
 8001974:	7a23      	ldrb	r3, [r4, #8]
 8001976:	1a18      	subs	r0, r3, r0
 8001978:	1e43      	subs	r3, r0, #1
 800197a:	4198      	sbcs	r0, r3
 800197c:	b2c0      	uxtb	r0, r0
		return button_on;
	}
	else{
		return button_off;
	}
}
 800197e:	bd10      	pop	{r4, pc}

08001980 <buttonUpdate>:
button_state_t buttonUpdate(button_struct_t *button_struct){
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	0004      	movs	r4, r0
	_phy_state_t state = _button_state(button_struct);	// get button state
 8001984:	f7ff fff0 	bl	8001968 <_button_state>
	if(state != button_struct->_previous_state){	// state is	different
 8001988:	7de6      	ldrb	r6, [r4, #23]
	_phy_state_t state = _button_state(button_struct);	// get button state
 800198a:	0005      	movs	r5, r0
	if(state != button_struct->_previous_state){	// state is	different
 800198c:	4286      	cmp	r6, r0
 800198e:	d01a      	beq.n	80019c6 <buttonUpdate+0x46>
		if(state == button_on){	
 8001990:	2800      	cmp	r0, #0
 8001992:	d107      	bne.n	80019a4 <buttonUpdate+0x24>
			button_struct->_on_press_time = HAL_GetTick(); // get current time
 8001994:	f000 ff22 	bl	80027dc <HAL_GetTick>
			button_struct->_state_changed = 1;	// state is changed
 8001998:	2301      	movs	r3, #1
			button_struct->_on_press_time = HAL_GetTick(); // get current time
 800199a:	61a0      	str	r0, [r4, #24]
			button_struct->_state_changed = 1;	// state is changed
 800199c:	75a3      	strb	r3, [r4, #22]
			button_struct->_previous_state = button_on;
 800199e:	75e5      	strb	r5, [r4, #23]
			return_status = noEvent;
 80019a0:	2000      	movs	r0, #0
 80019a2:	e00f      	b.n	80019c4 <buttonUpdate+0x44>
			if(HAL_GetTick() >= (button_struct->_on_press_time + button_struct->debounce_time)){	
 80019a4:	f000 ff1a 	bl	80027dc <HAL_GetTick>
 80019a8:	69a3      	ldr	r3, [r4, #24]
 80019aa:	68e1      	ldr	r1, [r4, #12]
 80019ac:	0002      	movs	r2, r0
 80019ae:	185b      	adds	r3, r3, r1
 80019b0:	2001      	movs	r0, #1
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d303      	bcc.n	80019be <buttonUpdate+0x3e>
				button_struct->_state = isReleased;
 80019b6:	2304      	movs	r3, #4
				button_struct->_previous_state = button_off;
 80019b8:	75e0      	strb	r0, [r4, #23]
				return_status = button_struct->_state;
 80019ba:	0018      	movs	r0, r3
				button_struct->_state = isReleased;
 80019bc:	7263      	strb	r3, [r4, #9]
			button_struct->long_press_handled = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	7563      	strb	r3, [r4, #21]
			button_struct->short_press_handled = 0;
 80019c2:	7523      	strb	r3, [r4, #20]
}
 80019c4:	bd70      	pop	{r4, r5, r6, pc}
		if(state == button_on){	// state = button_on, prevous state = button_on
 80019c6:	2e00      	cmp	r6, #0
 80019c8:	d1ea      	bne.n	80019a0 <buttonUpdate+0x20>
			if(HAL_GetTick() >= (button_struct->_on_press_time + button_struct->long_press_time)){	
 80019ca:	f000 ff07 	bl	80027dc <HAL_GetTick>
 80019ce:	69a3      	ldr	r3, [r4, #24]
 80019d0:	6922      	ldr	r2, [r4, #16]
 80019d2:	189b      	adds	r3, r3, r2
 80019d4:	4298      	cmp	r0, r3
 80019d6:	d308      	bcc.n	80019ea <buttonUpdate+0x6a>
				if(button_struct->long_press_handled == 1){	//was button handled yet?
 80019d8:	7d63      	ldrb	r3, [r4, #21]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d102      	bne.n	80019e4 <buttonUpdate+0x64>
						button_struct->_state = noEvent;
 80019de:	7266      	strb	r6, [r4, #9]
					return_status = button_struct->_state;
 80019e0:	7a60      	ldrb	r0, [r4, #9]
 80019e2:	e7ef      	b.n	80019c4 <buttonUpdate+0x44>
					button_struct->_state = isPressedLong;
 80019e4:	2303      	movs	r3, #3
						button_struct->_state = isPressed;
 80019e6:	7263      	strb	r3, [r4, #9]
 80019e8:	e7fa      	b.n	80019e0 <buttonUpdate+0x60>
				if(HAL_GetTick() >= (button_struct->_on_press_time + button_struct->debounce_time)){	
 80019ea:	f000 fef7 	bl	80027dc <HAL_GetTick>
 80019ee:	69a3      	ldr	r3, [r4, #24]
 80019f0:	68e2      	ldr	r2, [r4, #12]
 80019f2:	189b      	adds	r3, r3, r2
 80019f4:	4298      	cmp	r0, r3
 80019f6:	d3d3      	bcc.n	80019a0 <buttonUpdate+0x20>
					if(button_struct->short_press_handled == 1){	//was button handled yet?
 80019f8:	7d23      	ldrb	r3, [r4, #20]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d0ef      	beq.n	80019de <buttonUpdate+0x5e>
						button_struct->_state = isPressed;
 80019fe:	2302      	movs	r3, #2
 8001a00:	e7f1      	b.n	80019e6 <buttonUpdate+0x66>
	...

08001a04 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001a04:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a06:	2001      	movs	r0, #1
 8001a08:	4a08      	ldr	r2, [pc, #32]	; (8001a2c <MX_DMA_Init+0x28>)
 8001a0a:	6951      	ldr	r1, [r2, #20]
 8001a0c:	4301      	orrs	r1, r0
 8001a0e:	6151      	str	r1, [r2, #20]
 8001a10:	6953      	ldr	r3, [r2, #20]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a14:	4003      	ands	r3, r0
 8001a16:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001a18:	0011      	movs	r1, r2
 8001a1a:	300a      	adds	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a1c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001a1e:	f001 fa59 	bl	8002ed4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8001a22:	200b      	movs	r0, #11
 8001a24:	f001 fa90 	bl	8002f48 <HAL_NVIC_EnableIRQ>

}
 8001a28:	bd07      	pop	{r0, r1, r2, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	40021000 	.word	0x40021000

08001a30 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a32:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	2214      	movs	r2, #20
 8001a36:	2100      	movs	r1, #0
 8001a38:	a803      	add	r0, sp, #12
 8001a3a:	f003 fff6 	bl	8005a2a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a3e:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a40:	2580      	movs	r5, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a42:	4b29      	ldr	r3, [pc, #164]	; (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a44:	03c0      	lsls	r0, r0, #15
 8001a46:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a48:	02ad      	lsls	r5, r5, #10
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a4a:	4301      	orrs	r1, r0
 8001a4c:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a50:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a54:	4002      	ands	r2, r0
 8001a56:	9200      	str	r2, [sp, #0]
 8001a58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 8001a5c:	4e23      	ldr	r6, [pc, #140]	; (8001aec <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	432a      	orrs	r2, r5
 8001a60:	615a      	str	r2, [r3, #20]
 8001a62:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 8001a64:	0030      	movs	r0, r6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	402a      	ands	r2, r5
 8001a68:	9201      	str	r2, [sp, #4]
 8001a6a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6c:	695a      	ldr	r2, [r3, #20]
                          |LED4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PA0 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a70:	430a      	orrs	r2, r1
 8001a72:	615a      	str	r2, [r3, #20]
 8001a74:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 8001a76:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a78:	400b      	ands	r3, r1
 8001a7a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 8001a7c:	21e9      	movs	r1, #233	; 0xe9
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 8001a80:	f001 fe2e 	bl	80036e0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a86:	2703      	movs	r7, #3
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <MX_GPIO_Init+0xc0>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	a903      	add	r1, sp, #12
 8001a8c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
 8001a8e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a90:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f001 fcfa 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FAULT_FEEDBACK_Pin|DEV_MODE2_Pin|DEV_MODE1_Pin;
 8001a98:	238c      	movs	r3, #140	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = FAULT_FEEDBACK_Pin|DEV_MODE2_Pin|DEV_MODE1_Pin;
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa0:	3b18      	subs	r3, #24
 8001aa2:	3bff      	subs	r3, #255	; 0xff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	a903      	add	r1, sp, #12
 8001aa6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aaa:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	f001 fcee 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 8001ab0:	23e9      	movs	r3, #233	; 0xe9
                          |LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 8001ab4:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab6:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab8:	3be8      	subs	r3, #232	; 0xe8
 8001aba:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001abe:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac0:	f001 fce4 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ac4:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac6:	a903      	add	r1, sp, #12
 8001ac8:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aca:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001acc:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f001 fcdc 	bl	800348c <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB6);
 8001ad4:	2080      	movs	r0, #128	; 0x80
 8001ad6:	0240      	lsls	r0, r0, #9
 8001ad8:	f001 fe2c 	bl	8003734 <HAL_I2CEx_EnableFastModePlus>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB7);
 8001adc:	0028      	movs	r0, r5
 8001ade:	f001 fe29 	bl	8003734 <HAL_I2CEx_EnableFastModePlus>

}
 8001ae2:	b009      	add	sp, #36	; 0x24
 8001ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	48000400 	.word	0x48000400
 8001af0:	00001801 	.word	0x00001801

08001af4 <MX_IWDG_Init>:

/* IWDG init function */
void MX_IWDG_Init(void)
{

  hiwdg.Instance = IWDG;
 8001af4:	4807      	ldr	r0, [pc, #28]	; (8001b14 <MX_IWDG_Init+0x20>)
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <MX_IWDG_Init+0x24>)
{
 8001af8:	b510      	push	{r4, lr}
  hiwdg.Instance = IWDG;
 8001afa:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8001afc:	2306      	movs	r3, #6
 8001afe:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <MX_IWDG_Init+0x28>)
 8001b02:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 8001b04:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001b06:	f001 fe43 	bl	8003790 <HAL_IWDG_Init>
 8001b0a:	2800      	cmp	r0, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_IWDG_Init+0x1e>
  {
    Error_Handler();
 8001b0e:	f000 f997 	bl	8001e40 <Error_Handler>
  }

}
 8001b12:	bd10      	pop	{r4, pc}
 8001b14:	20000498 	.word	0x20000498
 8001b18:	40003000 	.word	0x40003000
 8001b1c:	00000fff 	.word	0x00000fff

08001b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b20:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b22:	2510      	movs	r5, #16
{
 8001b24:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b26:	2230      	movs	r2, #48	; 0x30
 8001b28:	2100      	movs	r1, #0
 8001b2a:	a808      	add	r0, sp, #32
 8001b2c:	f003 ff7d 	bl	8005a2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b30:	002a      	movs	r2, r5
 8001b32:	2100      	movs	r1, #0
 8001b34:	4668      	mov	r0, sp
 8001b36:	f003 ff78 	bl	8005a2a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b3a:	002a      	movs	r2, r5
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	a804      	add	r0, sp, #16
 8001b40:	f003 ff73 	bl	8005a2a <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_LSI
 8001b44:	2319      	movs	r3, #25
 8001b46:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	025b      	lsls	r3, r3, #9
 8001b4c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001b4e:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b50:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001b52:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001b54:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b56:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b58:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b5a:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001b5c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b5e:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001b60:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b62:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b64:	f001 fe6c 	bl	8003840 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b68:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b6a:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b6c:	2500      	movs	r5, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b6e:	0021      	movs	r1, r4
 8001b70:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b72:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b74:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b76:	9503      	str	r5, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b78:	f002 f90c 	bl	8003d94 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b7c:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b7e:	9404      	str	r4, [sp, #16]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001b80:	9506      	str	r5, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b82:	f002 fa0f 	bl	8003fa4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001b86:	b015      	add	sp, #84	; 0x54
 8001b88:	bd30      	pop	{r4, r5, pc}
	...

08001b8c <main>:
		__HAL_RCC_DBGMCU_CLK_ENABLE();
 8001b8c:	2080      	movs	r0, #128	; 0x80
 8001b8e:	4a9a      	ldr	r2, [pc, #616]	; (8001df8 <main+0x26c>)
 8001b90:	03c0      	lsls	r0, r0, #15
 8001b92:	6991      	ldr	r1, [r2, #24]
{
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
		__HAL_RCC_DBGMCU_CLK_ENABLE();
 8001b96:	4301      	orrs	r1, r0
 8001b98:	6191      	str	r1, [r2, #24]
 8001b9a:	6993      	ldr	r3, [r2, #24]
	    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_WWDG_STOP;
 8001b9c:	2280      	movs	r2, #128	; 0x80
{
 8001b9e:	b085      	sub	sp, #20
		__HAL_RCC_DBGMCU_CLK_ENABLE();
 8001ba0:	4003      	ands	r3, r0
 8001ba2:	9303      	str	r3, [sp, #12]
 8001ba4:	9b03      	ldr	r3, [sp, #12]
	    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_WWDG_STOP;
 8001ba6:	4b95      	ldr	r3, [pc, #596]	; (8001dfc <main+0x270>)
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	6899      	ldr	r1, [r3, #8]
  BoardStatus=sBoot;
 8001bac:	2500      	movs	r5, #0
	    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_WWDG_STOP;
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	609a      	str	r2, [r3, #8]
	    DBGMCU->APB2FZ = 0xFFFFFFFF;
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4252      	negs	r2, r2
 8001bb6:	60da      	str	r2, [r3, #12]
	    DBGMCU->APB1FZ = 0xFFFFFFFF;
 8001bb8:	609a      	str	r2, [r3, #8]
	    DBGMCU->CR |=DBGMCU_CR_DBG_STOP;
 8001bba:	6859      	ldr	r1, [r3, #4]
 8001bbc:	3203      	adds	r2, #3
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	605a      	str	r2, [r3, #4]
	    __HAL_DBGMCU_FREEZE_IWDG();
 8001bc2:	2280      	movs	r2, #128	; 0x80
 8001bc4:	6899      	ldr	r1, [r3, #8]
 8001bc6:	0152      	lsls	r2, r2, #5
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	609a      	str	r2, [r3, #8]
  HAL_Init();
 8001bcc:	f000 fdee 	bl	80027ac <HAL_Init>
  SystemClock_Config();
 8001bd0:	f7ff ffa6 	bl	8001b20 <SystemClock_Config>
  MX_GPIO_Init();
 8001bd4:	f7ff ff2c 	bl	8001a30 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bd8:	f7ff ff14 	bl	8001a04 <MX_DMA_Init>
  MX_CRC_Init();
 8001bdc:	f7ff f9e6 	bl	8000fac <MX_CRC_Init>
  MX_ADC_Init();
 8001be0:	f7ff f944 	bl	8000e6c <MX_ADC_Init>
  MX_IWDG_Init();
 8001be4:	f7ff ff86 	bl	8001af4 <MX_IWDG_Init>
  MX_TIM1_Init();
 8001be8:	f000 fc62 	bl	80024b0 <MX_TIM1_Init>
  MX_TIM14_Init();
 8001bec:	f000 fb6c 	bl	80022c8 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8001bf0:	f000 fd38 	bl	8002664 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001bf4:	f000 fcd4 	bl	80025a0 <MX_TIM3_Init>
  MX_TIM16_Init();
 8001bf8:	f000 fb80 	bl	80022fc <MX_TIM16_Init>
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	200a      	movs	r0, #10
 8001c00:	0011      	movs	r1, r2
 8001c02:	f001 f967 	bl	8002ed4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001c06:	200a      	movs	r0, #10
 8001c08:	f001 f99e 	bl	8002f48 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2004      	movs	r0, #4
 8001c10:	0011      	movs	r1, r2
 8001c12:	f001 f95f 	bl	8002ed4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001c16:	2004      	movs	r0, #4
 8001c18:	f001 f996 	bl	8002f48 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2003      	movs	r0, #3
 8001c20:	0011      	movs	r1, r2
 8001c22:	f001 f957 	bl	8002ed4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001c26:	2003      	movs	r0, #3
 8001c28:	f001 f98e 	bl	8002f48 <HAL_NVIC_EnableIRQ>
  StartADC();
 8001c2c:	f7ff f9f0 	bl	8001010 <StartADC>
  SinWave=swNOP;
 8001c30:	2203      	movs	r2, #3
 8001c32:	4b73      	ldr	r3, [pc, #460]	; (8001e00 <main+0x274>)
  TIM16->ARR=sBoot_Delay;
 8001c34:	4e73      	ldr	r6, [pc, #460]	; (8001e04 <main+0x278>)
  SinWave=swNOP;
 8001c36:	701a      	strb	r2, [r3, #0]
  PWM_50Hz_Init();
 8001c38:	f7ff fcf4 	bl	8001624 <PWM_50Hz_Init>
  PWM_50Hz_ON();
 8001c3c:	f7ff fd7c 	bl	8001738 <PWM_50Hz_ON>
  PWM_50Hz_OFF();
 8001c40:	f7ff fd80 	bl	8001744 <PWM_50Hz_OFF>
  PWM_Sinus_Init();
 8001c44:	f7ff fdd4 	bl	80017f0 <PWM_Sinus_Init>
  PWM_Sinus_ON();
 8001c48:	f7ff fdc6 	bl	80017d8 <PWM_Sinus_ON>
  PWM_Sinus_OFF();
 8001c4c:	f7ff fdca 	bl	80017e4 <PWM_Sinus_OFF>
  ResetWDG();
 8001c50:	f7ff fc36 	bl	80014c0 <ResetWDG>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_SET);
 8001c54:	2201      	movs	r2, #1
 8001c56:	2108      	movs	r1, #8
 8001c58:	486b      	ldr	r0, [pc, #428]	; (8001e08 <main+0x27c>)
 8001c5a:	f001 fd41 	bl	80036e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,GPIO_PIN_SET);
 8001c5e:	2201      	movs	r2, #1
 8001c60:	4869      	ldr	r0, [pc, #420]	; (8001e08 <main+0x27c>)
 8001c62:	0011      	movs	r1, r2
 8001c64:	f001 fd3c 	bl	80036e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,GPIO_PIN_SET);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	2140      	movs	r1, #64	; 0x40
 8001c6c:	4866      	ldr	r0, [pc, #408]	; (8001e08 <main+0x27c>)
 8001c6e:	f001 fd37 	bl	80036e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,GPIO_PIN_SET);
 8001c72:	2201      	movs	r2, #1
 8001c74:	2180      	movs	r1, #128	; 0x80
 8001c76:	4864      	ldr	r0, [pc, #400]	; (8001e08 <main+0x27c>)
 8001c78:	f001 fd32 	bl	80036e0 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim16);
 8001c7c:	4c63      	ldr	r4, [pc, #396]	; (8001e0c <main+0x280>)
 8001c7e:	0020      	movs	r0, r4
 8001c80:	f002 fb4c 	bl	800431c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim16);
 8001c84:	0020      	movs	r0, r4
 8001c86:	f002 fb79 	bl	800437c <HAL_TIM_Base_Start_IT>
  BoardStatus=sBoot;
 8001c8a:	4b61      	ldr	r3, [pc, #388]	; (8001e10 <main+0x284>)
 8001c8c:	701d      	strb	r5, [r3, #0]
  TIM16->ARR=sBoot_Delay;
 8001c8e:	2364      	movs	r3, #100	; 0x64
 8001c90:	62f3      	str	r3, [r6, #44]	; 0x2c
  ResetWDG();
 8001c92:	f7ff fc15 	bl	80014c0 <ResetWDG>
  buttonInit(&DevModeKey, DEV_MODE1_GPIO_Port, DEV_MODE1_Pin, GPIO_PIN_RESET, 30, 2000);
 8001c96:	23fa      	movs	r3, #250	; 0xfa
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	2280      	movs	r2, #128	; 0x80
 8001c9e:	231e      	movs	r3, #30
 8001ca0:	2190      	movs	r1, #144	; 0x90
 8001ca2:	4f5c      	ldr	r7, [pc, #368]	; (8001e14 <main+0x288>)
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	0052      	lsls	r2, r2, #1
 8001ca8:	002b      	movs	r3, r5
 8001caa:	05c9      	lsls	r1, r1, #23
 8001cac:	0038      	movs	r0, r7
 8001cae:	f7ff fe4b 	bl	8001948 <buttonInit>
  buttonInit(&DevModeKey2, DEV_MODE2_GPIO_Port, DEV_MODE2_Pin, GPIO_PIN_RESET, 30, 1000);
 8001cb2:	23fa      	movs	r3, #250	; 0xfa
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	2190      	movs	r1, #144	; 0x90
 8001cba:	231e      	movs	r3, #30
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	05c9      	lsls	r1, r1, #23
 8001cc2:	002b      	movs	r3, r5
 8001cc4:	4854      	ldr	r0, [pc, #336]	; (8001e18 <main+0x28c>)
 8001cc6:	f7ff fe3f 	bl	8001948 <buttonInit>
  buttonInit(&FaultFlag, FAULT_FEEDBACK_GPIO_Port, FAULT_FEEDBACK_Pin, GPIO_PIN_RESET, 30, 1000);
 8001cca:	23fa      	movs	r3, #250	; 0xfa
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	9301      	str	r3, [sp, #4]
 8001cd0:	2190      	movs	r1, #144	; 0x90
 8001cd2:	231e      	movs	r3, #30
 8001cd4:	4c51      	ldr	r4, [pc, #324]	; (8001e1c <main+0x290>)
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	05c9      	lsls	r1, r1, #23
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	0020      	movs	r0, r4
 8001cde:	002b      	movs	r3, r5
 8001ce0:	f7ff fe32 	bl	8001948 <buttonInit>
  buttonUpdate(&DevModeKey);
 8001ce4:	0038      	movs	r0, r7
 8001ce6:	f7ff fe4b 	bl	8001980 <buttonUpdate>
  buttonUpdate(&DevModeKey2);
 8001cea:	484b      	ldr	r0, [pc, #300]	; (8001e18 <main+0x28c>)
 8001cec:	f7ff fe48 	bl	8001980 <buttonUpdate>
  buttonUpdate(&FaultFlag);
 8001cf0:	0020      	movs	r0, r4
 8001cf2:	f7ff fe45 	bl	8001980 <buttonUpdate>
  HAL_Delay(500);
 8001cf6:	20fa      	movs	r0, #250	; 0xfa
 8001cf8:	0040      	lsls	r0, r0, #1
 8001cfa:	f000 fd75 	bl	80027e8 <HAL_Delay>
  Get_Version();
 8001cfe:	f7ff fb99 	bl	8001434 <Get_Version>
  SerialPrintln(1);
 8001d02:	2001      	movs	r0, #1
 8001d04:	f7ff fbb4 	bl	8001470 <SerialPrintln>
  Get_ChipID();
 8001d08:	f7ff fb64 	bl	80013d4 <Get_ChipID>
  SerialPrintln(1);
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f7ff fbaf 	bl	8001470 <SerialPrintln>
  Get_FlashSize();
 8001d12:	f7ff fb7b 	bl	800140c <Get_FlashSize>
  SerialPrintln(1);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f7ff fbaa 	bl	8001470 <SerialPrintln>
  ClearUART_Buff();
 8001d1c:	f7ff fb50 	bl	80013c0 <ClearUART_Buff>
  buttonUpdate(&FaultFlag);
 8001d20:	0020      	movs	r0, r4
 8001d22:	f7ff fe2d 	bl	8001980 <buttonUpdate>
  if(buttonUpdate(&DevModeKey) == isPressed){
 8001d26:	0038      	movs	r0, r7
 8001d28:	f7ff fe2a 	bl	8001980 <buttonUpdate>
 8001d2c:	4d3c      	ldr	r5, [pc, #240]	; (8001e20 <main+0x294>)
 8001d2e:	2802      	cmp	r0, #2
 8001d30:	d11b      	bne.n	8001d6a <main+0x1de>
	strcpy(uart_buff,"DEV MODE - wait\r\n");
 8001d32:	493c      	ldr	r1, [pc, #240]	; (8001e24 <main+0x298>)
 8001d34:	0028      	movs	r0, r5
 8001d36:	f003 feb0 	bl	8005a9a <strcpy>
	SerialPrintln(1);
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f7ff fb98 	bl	8001470 <SerialPrintln>
	ResetWDG();
 8001d40:	f7ff fbbe 	bl	80014c0 <ResetWDG>
    HAL_Delay(500);
 8001d44:	20fa      	movs	r0, #250	; 0xfa
 8001d46:	0040      	lsls	r0, r0, #1
 8001d48:	f000 fd4e 	bl	80027e8 <HAL_Delay>
	if(buttonUpdate(&DevModeKey) == isPressed){
 8001d4c:	0038      	movs	r0, r7
 8001d4e:	f7ff fe17 	bl	8001980 <buttonUpdate>
 8001d52:	2802      	cmp	r0, #2
 8001d54:	d109      	bne.n	8001d6a <main+0x1de>
		strcpy(uart_buff,"DEV MODE - confirmed\r\n");
 8001d56:	4934      	ldr	r1, [pc, #208]	; (8001e28 <main+0x29c>)
 8001d58:	0028      	movs	r0, r5
 8001d5a:	f003 fe9e 	bl	8005a9a <strcpy>
	    SerialPrintln(1);
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7ff fb86 	bl	8001470 <SerialPrintln>
		DevMode1=1;
 8001d64:	2201      	movs	r2, #1
 8001d66:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <main+0x2a0>)
 8001d68:	601a      	str	r2, [r3, #0]
  	BoardStatus=sGEN;
 8001d6a:	2701      	movs	r7, #1
    strcpy(uart_buff,"Start Loop\r\n");
 8001d6c:	4930      	ldr	r1, [pc, #192]	; (8001e30 <main+0x2a4>)
 8001d6e:	0028      	movs	r0, r5
 8001d70:	f003 fe93 	bl	8005a9a <strcpy>
    SerialPrintln(1);
 8001d74:	2001      	movs	r0, #1
 8001d76:	f7ff fb7b 	bl	8001470 <SerialPrintln>
  	BoardStatus=sGEN;
 8001d7a:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <main+0x284>)
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_RESET);
 8001d7c:	2200      	movs	r2, #0
  	BoardStatus=sGEN;
 8001d7e:	701f      	strb	r7, [r3, #0]
  	TIM16->ARR=sDEF_Delay;
 8001d80:	23fa      	movs	r3, #250	; 0xfa
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	62f3      	str	r3, [r6, #44]	; 0x2c
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_RESET);
 8001d86:	2108      	movs	r1, #8
 8001d88:	481f      	ldr	r0, [pc, #124]	; (8001e08 <main+0x27c>)
 8001d8a:	f001 fca9 	bl	80036e0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	0039      	movs	r1, r7
 8001d92:	481d      	ldr	r0, [pc, #116]	; (8001e08 <main+0x27c>)
 8001d94:	f001 fca4 	bl	80036e0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,GPIO_PIN_RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2140      	movs	r1, #64	; 0x40
 8001d9c:	481a      	ldr	r0, [pc, #104]	; (8001e08 <main+0x27c>)
 8001d9e:	f001 fc9f 	bl	80036e0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	4818      	ldr	r0, [pc, #96]	; (8001e08 <main+0x27c>)
 8001da8:	f001 fc9a 	bl	80036e0 <HAL_GPIO_WritePin>
       buttonUpdate(&FaultFlag);
 8001dac:	0020      	movs	r0, r4
 8001dae:	f7ff fde7 	bl	8001980 <buttonUpdate>
       buttonUpdate(&DevModeKey2);
 8001db2:	4819      	ldr	r0, [pc, #100]	; (8001e18 <main+0x28c>)
 8001db4:	f7ff fde4 	bl	8001980 <buttonUpdate>
       HAL_Delay(500);
 8001db8:	20fa      	movs	r0, #250	; 0xfa
 8001dba:	0040      	lsls	r0, r0, #1
 8001dbc:	f000 fd14 	bl	80027e8 <HAL_Delay>
       if(buttonUpdate(&DevModeKey2) == isPressedLong){
 8001dc0:	4815      	ldr	r0, [pc, #84]	; (8001e18 <main+0x28c>)
 8001dc2:	f7ff fddd 	bl	8001980 <buttonUpdate>
 8001dc6:	2803      	cmp	r0, #3
 8001dc8:	d106      	bne.n	8001dd8 <main+0x24c>
    	   strcpy(uart_buff,"Start GENERATOR\r\n");
 8001dca:	491a      	ldr	r1, [pc, #104]	; (8001e34 <main+0x2a8>)
 8001dcc:	0028      	movs	r0, r5
 8001dce:	f003 fe64 	bl	8005a9a <strcpy>
    	   SerialPrintln(1);
 8001dd2:	0038      	movs	r0, r7
 8001dd4:	f7ff fb4c 	bl	8001470 <SerialPrintln>
       buttonUpdate(&FaultFlag);
 8001dd8:	0020      	movs	r0, r4
 8001dda:	f7ff fdd1 	bl	8001980 <buttonUpdate>
       TIM14->PSC=SinResPSC;
 8001dde:	2201      	movs	r2, #1
       HAL_TIM_Base_Start(&htim14);
 8001de0:	4c15      	ldr	r4, [pc, #84]	; (8001e38 <main+0x2ac>)
       TIM14->PSC=SinResPSC;
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <main+0x2b0>)
       HAL_TIM_Base_Start(&htim14);
 8001de4:	0020      	movs	r0, r4
       TIM14->PSC=SinResPSC;
 8001de6:	629a      	str	r2, [r3, #40]	; 0x28
       HAL_TIM_Base_Start(&htim14);
 8001de8:	f002 fa98 	bl	800431c <HAL_TIM_Base_Start>
       HAL_TIM_Base_Start_IT(&htim14);
 8001dec:	0020      	movs	r0, r4
 8001dee:	f002 fac5 	bl	800437c <HAL_TIM_Base_Start_IT>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	e7fd      	b.n	8001df2 <main+0x266>
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40015800 	.word	0x40015800
 8001e00:	200002f4 	.word	0x200002f4
 8001e04:	40014400 	.word	0x40014400
 8001e08:	48000400 	.word	0x48000400
 8001e0c:	20000568 	.word	0x20000568
 8001e10:	200002e4 	.word	0x200002e4
 8001e14:	20000430 	.word	0x20000430
 8001e18:	2000047c 	.word	0x2000047c
 8001e1c:	20000460 	.word	0x20000460
 8001e20:	200003cc 	.word	0x200003cc
 8001e24:	080063d5 	.word	0x080063d5
 8001e28:	080063e7 	.word	0x080063e7
 8001e2c:	200002e8 	.word	0x200002e8
 8001e30:	080063fe 	.word	0x080063fe
 8001e34:	0800640b 	.word	0x0800640b
 8001e38:	20000528 	.word	0x20000528
 8001e3c:	40002000 	.word	0x40002000

08001e40 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e40:	4770      	bx	lr

08001e42 <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001e42:	4770      	bx	lr

08001e44 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e44:	2001      	movs	r0, #1
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_MspInit+0x2c>)
{
 8001e48:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4a:	6999      	ldr	r1, [r3, #24]
 8001e4c:	4301      	orrs	r1, r0
 8001e4e:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e50:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e54:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	4002      	ands	r2, r0
 8001e58:	9200      	str	r2, [sp, #0]
 8001e5a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5c:	69da      	ldr	r2, [r3, #28]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	61da      	str	r2, [r3, #28]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	400b      	ands	r3, r1
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	9b01      	ldr	r3, [sp, #4]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6a:	b002      	add	sp, #8
 8001e6c:	4770      	bx	lr
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	40021000 	.word	0x40021000

08001e74 <NMI_Handler>:
 8001e74:	4770      	bx	lr

08001e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e76:	e7fe      	b.n	8001e76 <HardFault_Handler>

08001e78 <SVC_Handler>:
 8001e78:	4770      	bx	lr

08001e7a <PendSV_Handler>:
 8001e7a:	4770      	bx	lr

08001e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e7e:	f000 fca5 	bl	80027cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e82:	bd10      	pop	{r4, pc}

08001e84 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001e84:	b510      	push	{r4, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001e86:	f001 fa61 	bl	800334c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001e8a:	bd10      	pop	{r4, pc}

08001e8c <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001e8c:	4770      	bx	lr
	...

08001e90 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001e90:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001e92:	4803      	ldr	r0, [pc, #12]	; (8001ea0 <DMA1_Channel2_3_IRQHandler+0x10>)
 8001e94:	f001 f9f1 	bl	800327a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001e9a:	f001 f9ee 	bl	800327a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001e9e:	bd10      	pop	{r4, pc}
 8001ea0:	20000304 	.word	0x20000304
 8001ea4:	200005ec 	.word	0x200005ec

08001ea8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001ea8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001eaa:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <DMA1_Channel4_5_IRQHandler+0xc>)
 8001eac:	f001 f9e5 	bl	800327a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8001eb0:	bd10      	pop	{r4, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	200005a8 	.word	0x200005a8

08001eb8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001eb8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001eba:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <ADC1_IRQHandler+0xc>)
 8001ebc:	f000 fecc 	bl	8002c58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001ec0:	bd10      	pop	{r4, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	20000348 	.word	0x20000348

08001ec8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001ec8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001eca:	4c0d      	ldr	r4, [pc, #52]	; (8001f00 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x38>)
 8001ecc:	0020      	movs	r0, r4
 8001ece:	f002 fa8a 	bl	80043e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	4252      	negs	r2, r2
 8001ed8:	611a      	str	r2, [r3, #16]

  sin_step=0;sinStatus=0;TIM3->CCR2=0;TIM3->CCR1=0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x3c>)
 8001ede:	8013      	strh	r3, [r2, #0]
 8001ee0:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 8001ee2:	7013      	strb	r3, [r2, #0]
 8001ee4:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 8001ee6:	6393      	str	r3, [r2, #56]	; 0x38
 8001ee8:	6353      	str	r3, [r2, #52]	; 0x34

  if (SinWave==swStart) {
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x48>)
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	2a01      	cmp	r2, #1
 8001ef0:	d105      	bne.n	8001efe <TIM1_BRK_UP_TRG_COM_IRQHandler+0x36>
	  SinWave=swGEN;
 8001ef2:	3201      	adds	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
	  TIM1->CCR3=500;
 8001ef6:	32f3      	adds	r2, #243	; 0xf3
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x4c>)
 8001efa:	32ff      	adds	r2, #255	; 0xff
 8001efc:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001efe:	bd10      	pop	{r4, pc}
 8001f00:	200004e8 	.word	0x200004e8
 8001f04:	200002e2 	.word	0x200002e2
 8001f08:	200002e0 	.word	0x200002e0
 8001f0c:	40000400 	.word	0x40000400
 8001f10:	200002f4 	.word	0x200002f4
 8001f14:	40012c00 	.word	0x40012c00

08001f18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f1a:	4c29      	ldr	r4, [pc, #164]	; (8001fc0 <TIM3_IRQHandler+0xa8>)
 8001f1c:	0020      	movs	r0, r4
 8001f1e:	f002 fa62 	bl	80043e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8001f22:	2202      	movs	r2, #2
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	4252      	negs	r2, r2
 8001f28:	611a      	str	r2, [r3, #16]

	if ((SinWave==swStop) || (SinWave==swStart) || (SinWave==swNOP))  {
 8001f2a:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <TIM3_IRQHandler+0xac>)
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	2a00      	cmp	r2, #0
 8001f30:	d005      	beq.n	8001f3e <TIM3_IRQHandler+0x26>
 8001f32:	781a      	ldrb	r2, [r3, #0]
 8001f34:	2a01      	cmp	r2, #1
 8001f36:	d002      	beq.n	8001f3e <TIM3_IRQHandler+0x26>
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	2a03      	cmp	r2, #3
 8001f3c:	d105      	bne.n	8001f4a <TIM3_IRQHandler+0x32>
 		TIM3->CCR2=0;
 8001f3e:	2200      	movs	r2, #0
 8001f40:	4921      	ldr	r1, [pc, #132]	; (8001fc8 <TIM3_IRQHandler+0xb0>)
 8001f42:	638a      	str	r2, [r1, #56]	; 0x38
 		TIM3->CCR1=0;
 8001f44:	634a      	str	r2, [r1, #52]	; 0x34
 		//TIM1->CCR3=0;
 		sin_step=0;
 8001f46:	4921      	ldr	r1, [pc, #132]	; (8001fcc <TIM3_IRQHandler+0xb4>)
 8001f48:	800a      	strh	r2, [r1, #0]
 	}

	if (SinWave==swNOP) {return;}
 8001f4a:	781a      	ldrb	r2, [r3, #0]
 8001f4c:	2a03      	cmp	r2, #3
 8001f4e:	d034      	beq.n	8001fba <TIM3_IRQHandler+0xa2>

   	if (SinWave==swStart)  {
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	2a01      	cmp	r2, #1
 8001f54:	d101      	bne.n	8001f5a <TIM3_IRQHandler+0x42>
   		SinWave=swGEN;
 8001f56:	3201      	adds	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]
   	}

    if  ( (TIM1->CNT==498) || (TIM1->CNT==998) )  {
 8001f5a:	23f9      	movs	r3, #249	; 0xf9
 8001f5c:	4d1c      	ldr	r5, [pc, #112]	; (8001fd0 <TIM3_IRQHandler+0xb8>)
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d003      	beq.n	8001f6e <TIM3_IRQHandler+0x56>
 8001f66:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <TIM3_IRQHandler+0xbc>)
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d10a      	bne.n	8001f84 <TIM3_IRQHandler+0x6c>
      	    sin_step=0;
 8001f6e:	2400      	movs	r4, #0
      	    TIM3->CCR1=0;
 8001f70:	4e15      	ldr	r6, [pc, #84]	; (8001fc8 <TIM3_IRQHandler+0xb0>)
      	    sin_step=0;
 8001f72:	4f16      	ldr	r7, [pc, #88]	; (8001fcc <TIM3_IRQHandler+0xb4>)
 8001f74:	803c      	strh	r4, [r7, #0]
      	    TIM3->CCR1=0;
 8001f76:	6374      	str	r4, [r6, #52]	; 0x34
      	    TIM3->CCR2=0;
 8001f78:	63b4      	str	r4, [r6, #56]	; 0x38
      	   	UpdateAmplitudeByV();
 8001f7a:	f7ff f8d5 	bl	8001128 <UpdateAmplitudeByV>
      	    sin_step=0;
 8001f7e:	803c      	strh	r4, [r7, #0]
      	    TIM3->CCR1=0;
 8001f80:	6374      	str	r4, [r6, #52]	; 0x34
      	    TIM3->CCR2=0;
 8001f82:	63b4      	str	r4, [r6, #56]	; 0x38
      	    //return;
         }

   if  (TIM1->CNT>499) { sinStatus=1;} else { sinStatus=0;}
 8001f84:	23f4      	movs	r3, #244	; 0xf4
 8001f86:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001f88:	33ff      	adds	r3, #255	; 0xff
 8001f8a:	4d13      	ldr	r5, [pc, #76]	; (8001fd8 <TIM3_IRQHandler+0xc0>)
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d915      	bls.n	8001fbc <TIM3_IRQHandler+0xa4>
 8001f90:	3bf3      	subs	r3, #243	; 0xf3
 8001f92:	3bff      	subs	r3, #255	; 0xff
 8001f94:	702b      	strb	r3, [r5, #0]

   if (sinStatus==0) {
 8001f96:	782b      	ldrb	r3, [r5, #0]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d104      	bne.n	8001fa8 <TIM3_IRQHandler+0x90>
	   TIM3->CCR2=0;
 8001f9e:	4c0a      	ldr	r4, [pc, #40]	; (8001fc8 <TIM3_IRQHandler+0xb0>)
 8001fa0:	63a3      	str	r3, [r4, #56]	; 0x38
	   TIM3->CCR1=GetSinus();
 8001fa2:	f7ff fca1 	bl	80018e8 <GetSinus>
 8001fa6:	6360      	str	r0, [r4, #52]	; 0x34
   }
   if (sinStatus==1) {
 8001fa8:	782b      	ldrb	r3, [r5, #0]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d105      	bne.n	8001fba <TIM3_IRQHandler+0xa2>
	   TIM3->CCR1=0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	4c05      	ldr	r4, [pc, #20]	; (8001fc8 <TIM3_IRQHandler+0xb0>)
 8001fb2:	6363      	str	r3, [r4, #52]	; 0x34
	   TIM3->CCR2=GetSinus();
 8001fb4:	f7ff fc98 	bl	80018e8 <GetSinus>
 8001fb8:	63a0      	str	r0, [r4, #56]	; 0x38




  /* USER CODE END TIM3_IRQn 1 */
}
 8001fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   if  (TIM1->CNT>499) { sinStatus=1;} else { sinStatus=0;}
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	e7e9      	b.n	8001f94 <TIM3_IRQHandler+0x7c>
 8001fc0:	200004a8 	.word	0x200004a8
 8001fc4:	200002f4 	.word	0x200002f4
 8001fc8:	40000400 	.word	0x40000400
 8001fcc:	200002e2 	.word	0x200002e2
 8001fd0:	40012c00 	.word	0x40012c00
 8001fd4:	000003e6 	.word	0x000003e6
 8001fd8:	200002e0 	.word	0x200002e0

08001fdc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001fde:	4c36      	ldr	r4, [pc, #216]	; (80020b8 <TIM14_IRQHandler+0xdc>)
 8001fe0:	0020      	movs	r0, r4
 8001fe2:	f002 fa00 	bl	80043e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  __HAL_TIM_CLEAR_FLAG(&htim14, TIM_FLAG_UPDATE);
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	6823      	ldr	r3, [r4, #0]


  if ((buttonUpdate(&FaultFlag) == isPressed) || (buttonUpdate(&FaultFlag) == isPressedLong)) {
 8001fea:	4d34      	ldr	r5, [pc, #208]	; (80020bc <TIM14_IRQHandler+0xe0>)
  __HAL_TIM_CLEAR_FLAG(&htim14, TIM_FLAG_UPDATE);
 8001fec:	4252      	negs	r2, r2
 8001fee:	611a      	str	r2, [r3, #16]
  if ((buttonUpdate(&FaultFlag) == isPressed) || (buttonUpdate(&FaultFlag) == isPressedLong)) {
 8001ff0:	0028      	movs	r0, r5
 8001ff2:	f7ff fcc5 	bl	8001980 <buttonUpdate>
 8001ff6:	4c32      	ldr	r4, [pc, #200]	; (80020c0 <TIM14_IRQHandler+0xe4>)
 8001ff8:	2802      	cmp	r0, #2
 8001ffa:	d109      	bne.n	8002010 <TIM14_IRQHandler+0x34>
	  BoardStatus=sFaultFlag;
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <TIM14_IRQHandler+0xe8>)
 8002000:	701a      	strb	r2, [r3, #0]
	  FaultWaitCnt=0;
 8002002:	2200      	movs	r2, #0
 8002004:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <TIM14_IRQHandler+0xec>)
 8002006:	601a      	str	r2, [r3, #0]
		  if (SinWave!=swGEN) {
 8002008:	7823      	ldrb	r3, [r4, #0]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d128      	bne.n	8002060 <TIM14_IRQHandler+0x84>
  	    		sin_step = 0;
  	    	}*/


  /* USER CODE END TIM14_IRQn 1 */
}
 800200e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((buttonUpdate(&FaultFlag) == isPressed) || (buttonUpdate(&FaultFlag) == isPressedLong)) {
 8002010:	0028      	movs	r0, r5
 8002012:	f7ff fcb5 	bl	8001980 <buttonUpdate>
 8002016:	2803      	cmp	r0, #3
 8002018:	d0f0      	beq.n	8001ffc <TIM14_IRQHandler+0x20>
  	  if ((SinWave==swNOP) && (BoardStatus == sGEN) && (AMP_BLOCKED==0) && (DC_BLOCKED==0) ) {
 800201a:	7823      	ldrb	r3, [r4, #0]
 800201c:	4e2b      	ldr	r6, [pc, #172]	; (80020cc <TIM14_IRQHandler+0xf0>)
 800201e:	2b03      	cmp	r3, #3
 8002020:	d121      	bne.n	8002066 <TIM14_IRQHandler+0x8a>
 8002022:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <TIM14_IRQHandler+0xe8>)
 8002024:	781f      	ldrb	r7, [r3, #0]
 8002026:	b2ff      	uxtb	r7, r7
 8002028:	2f01      	cmp	r7, #1
 800202a:	d11c      	bne.n	8002066 <TIM14_IRQHandler+0x8a>
 800202c:	4b28      	ldr	r3, [pc, #160]	; (80020d0 <TIM14_IRQHandler+0xf4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d118      	bne.n	8002066 <TIM14_IRQHandler+0x8a>
 8002034:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <TIM14_IRQHandler+0xf8>)
 8002036:	681d      	ldr	r5, [r3, #0]
 8002038:	2d00      	cmp	r5, #0
 800203a:	d114      	bne.n	8002066 <TIM14_IRQHandler+0x8a>
  	  	  if  (buttonUpdate(&DevModeKey2) == isPressedLong) {
 800203c:	4826      	ldr	r0, [pc, #152]	; (80020d8 <TIM14_IRQHandler+0xfc>)
  	  sin_step=0;
 800203e:	8035      	strh	r5, [r6, #0]
  	  	  if  (buttonUpdate(&DevModeKey2) == isPressedLong) {
 8002040:	f7ff fc9e 	bl	8001980 <buttonUpdate>
 8002044:	2803      	cmp	r0, #3
 8002046:	d10e      	bne.n	8002066 <TIM14_IRQHandler+0x8a>
    		TIM3->CCR2=0;
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <TIM14_IRQHandler+0x100>)
    		SinWave=swStart;
 800204a:	7027      	strb	r7, [r4, #0]
    		TIM3->CCR2=0;
 800204c:	639d      	str	r5, [r3, #56]	; 0x38
    		 		TIM3->CCR1=0;
 800204e:	635d      	str	r5, [r3, #52]	; 0x34
    		 		TIM1->CCR3=0;
 8002050:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <TIM14_IRQHandler+0x104>)
 8002052:	63dd      	str	r5, [r3, #60]	; 0x3c
    		 		sin_step=0;
 8002054:	8035      	strh	r5, [r6, #0]
    		PWM_50Hz_ON();
 8002056:	f7ff fb6f 	bl	8001738 <PWM_50Hz_ON>
    		PWM_Sinus_ON();
 800205a:	f7ff fbbd 	bl	80017d8 <PWM_Sinus_ON>
    		return;
 800205e:	e7d6      	b.n	800200e <TIM14_IRQHandler+0x32>
			  SinWave=swGEN;
 8002060:	2302      	movs	r3, #2
 8002062:	7023      	strb	r3, [r4, #0]
 8002064:	e7d9      	b.n	800201a <TIM14_IRQHandler+0x3e>
  if (SinWave==swGEN) {
 8002066:	7823      	ldrb	r3, [r4, #0]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d11e      	bne.n	80020aa <TIM14_IRQHandler+0xce>
				if (  (BoardStatus == sFaultFlag) || (buttonUpdate(&DevModeKey2) == isReleased)
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <TIM14_IRQHandler+0xe8>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d10d      	bne.n	8002090 <TIM14_IRQHandler+0xb4>
		  SinWave=swNOP;
 8002074:	2303      	movs	r3, #3
 8002076:	7023      	strb	r3, [r4, #0]
		  	  	TIM3->CCR2=0;
 8002078:	2300      	movs	r3, #0
 800207a:	4a18      	ldr	r2, [pc, #96]	; (80020dc <TIM14_IRQHandler+0x100>)
 800207c:	6393      	str	r3, [r2, #56]	; 0x38
		   		TIM3->CCR1=0;
 800207e:	6353      	str	r3, [r2, #52]	; 0x34
		   		TIM1->CCR3=0;
 8002080:	4a17      	ldr	r2, [pc, #92]	; (80020e0 <TIM14_IRQHandler+0x104>)
 8002082:	63d3      	str	r3, [r2, #60]	; 0x3c
		   		sin_step=0;
 8002084:	8033      	strh	r3, [r6, #0]
		  PWM_50Hz_OFF();
 8002086:	f7ff fb5d 	bl	8001744 <PWM_50Hz_OFF>
		  PWM_Sinus_OFF();
 800208a:	f7ff fbab 	bl	80017e4 <PWM_Sinus_OFF>
		  return;
 800208e:	e7be      	b.n	800200e <TIM14_IRQHandler+0x32>
				if (  (BoardStatus == sFaultFlag) || (buttonUpdate(&DevModeKey2) == isReleased)
 8002090:	4811      	ldr	r0, [pc, #68]	; (80020d8 <TIM14_IRQHandler+0xfc>)
 8002092:	f7ff fc75 	bl	8001980 <buttonUpdate>
 8002096:	2804      	cmp	r0, #4
 8002098:	d0ec      	beq.n	8002074 <TIM14_IRQHandler+0x98>
						|| (AMP_BLOCKED==1)  || (DC_BLOCKED==1) ) {
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <TIM14_IRQHandler+0xf4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d0e8      	beq.n	8002074 <TIM14_IRQHandler+0x98>
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <TIM14_IRQHandler+0xf8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d0e4      	beq.n	8002074 <TIM14_IRQHandler+0x98>
  	  	  	  CheckV_Feedback();
 80020aa:	f7ff f8fb 	bl	80012a4 <CheckV_Feedback>
  	  	  	  sin_step++;
 80020ae:	8833      	ldrh	r3, [r6, #0]
 80020b0:	3301      	adds	r3, #1
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	8033      	strh	r3, [r6, #0]
 80020b6:	e7aa      	b.n	800200e <TIM14_IRQHandler+0x32>
 80020b8:	20000528 	.word	0x20000528
 80020bc:	20000460 	.word	0x20000460
 80020c0:	200002f4 	.word	0x200002f4
 80020c4:	200002e4 	.word	0x200002e4
 80020c8:	200002ec 	.word	0x200002ec
 80020cc:	200002e2 	.word	0x200002e2
 80020d0:	200002bc 	.word	0x200002bc
 80020d4:	200002c8 	.word	0x200002c8
 80020d8:	2000047c 	.word	0x2000047c
 80020dc:	40000400 	.word	0x40000400
 80020e0:	40012c00 	.word	0x40012c00

080020e4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80020e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80020e6:	4c4c      	ldr	r4, [pc, #304]	; (8002218 <TIM16_IRQHandler+0x134>)
 80020e8:	0020      	movs	r0, r4
 80020ea:	f002 f97c 	bl	80043e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  __HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE);
 80020ee:	2202      	movs	r2, #2
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	4252      	negs	r2, r2
 80020f4:	611a      	str	r2, [r3, #16]

    	// Reset IWDG
      ResetWDG();
 80020f6:	f7ff f9e3 	bl	80014c0 <ResetWDG>

        //
        switch(BoardStatus) {
 80020fa:	4c48      	ldr	r4, [pc, #288]	; (800221c <TIM16_IRQHandler+0x138>)
 80020fc:	7820      	ldrb	r0, [r4, #0]
 80020fe:	b2c0      	uxtb	r0, r0
 8002100:	2803      	cmp	r0, #3
 8002102:	d816      	bhi.n	8002132 <TIM16_IRQHandler+0x4e>
 8002104:	f7fe f800 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002108:	3e021602 	.word	0x3e021602
      	  case sBoot:
      	  case sUnknown:
      	  	  //TIM3->ARR=sBoot_Delay;
      	  	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800210c:	2108      	movs	r1, #8
 800210e:	4844      	ldr	r0, [pc, #272]	; (8002220 <TIM16_IRQHandler+0x13c>)
 8002110:	f001 fb00 	bl	8003714 <HAL_GPIO_TogglePin>
      	  	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002114:	2101      	movs	r1, #1
 8002116:	4842      	ldr	r0, [pc, #264]	; (8002220 <TIM16_IRQHandler+0x13c>)
 8002118:	f001 fafc 	bl	8003714 <HAL_GPIO_TogglePin>
      	  	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800211c:	2140      	movs	r1, #64	; 0x40
 800211e:	4840      	ldr	r0, [pc, #256]	; (8002220 <TIM16_IRQHandler+0x13c>)
 8002120:	f001 faf8 	bl	8003714 <HAL_GPIO_TogglePin>
      	  	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8002124:	483e      	ldr	r0, [pc, #248]	; (8002220 <TIM16_IRQHandler+0x13c>)
 8002126:	2180      	movs	r1, #128	; 0x80
 8002128:	f001 faf4 	bl	8003714 <HAL_GPIO_TogglePin>

      	  	  // when boot check faultflag
      	  	  buttonUpdate(&FaultFlag);
 800212c:	483d      	ldr	r0, [pc, #244]	; (8002224 <TIM16_IRQHandler+0x140>)
 800212e:	f7ff fc27 	bl	8001980 <buttonUpdate>
					  }
      		  	  break;
        }

  /* USER CODE END TIM16_IRQn 1 */
}
 8002132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      		  	PrintCurrentState();
 8002134:	f7ff f9cc 	bl	80014d0 <PrintCurrentState>
      		  	  if (AMP_BLOCKED==1) {
 8002138:	493b      	ldr	r1, [pc, #236]	; (8002228 <TIM16_IRQHandler+0x144>)
 800213a:	680b      	ldr	r3, [r1, #0]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d105      	bne.n	800214c <TIM16_IRQHandler+0x68>
      		  		AMP_PROTECTION_CNT_BEFORESTART++;
 8002140:	4a3a      	ldr	r2, [pc, #232]	; (800222c <TIM16_IRQHandler+0x148>)
 8002142:	6813      	ldr	r3, [r2, #0]
 8002144:	3301      	adds	r3, #1
      		  		if (AMP_PROTECTION_CNT_BEFORESTART>=DelaySecBeforeStartAfterAmpProtection) {
 8002146:	2b1d      	cmp	r3, #29
 8002148:	dc10      	bgt.n	800216c <TIM16_IRQHandler+0x88>
      		  			AMP_PROTECTION_CNT=0;
 800214a:	6013      	str	r3, [r2, #0]
      		  	  if (DC_BLOCKED==1) {
 800214c:	4938      	ldr	r1, [pc, #224]	; (8002230 <TIM16_IRQHandler+0x14c>)
 800214e:	680b      	ldr	r3, [r1, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d1ee      	bne.n	8002132 <TIM16_IRQHandler+0x4e>
					  if (DC_DataAverage<DC_PROTECTION_ROLLBACK) {
 8002154:	4b37      	ldr	r3, [pc, #220]	; (8002234 <TIM16_IRQHandler+0x150>)
 8002156:	4a38      	ldr	r2, [pc, #224]	; (8002238 <TIM16_IRQHandler+0x154>)
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	4b38      	ldr	r3, [pc, #224]	; (800223c <TIM16_IRQHandler+0x158>)
 800215c:	4290      	cmp	r0, r2
 800215e:	d80f      	bhi.n	8002180 <TIM16_IRQHandler+0x9c>
						DC_PROTECTION_CNT_BEFORESTART++;
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	3201      	adds	r2, #1
						if (DC_PROTECTION_CNT_BEFORESTART>=DelaySecBeforeStartAfterDCProtection) {
 8002164:	2a1d      	cmp	r2, #29
 8002166:	dc06      	bgt.n	8002176 <TIM16_IRQHandler+0x92>
							DC_PROTECTION_CNT=0;
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e7e2      	b.n	8002132 <TIM16_IRQHandler+0x4e>
      		  			AMP_PROTECTION_CNT_BEFORESTART=0;
 800216c:	2300      	movs	r3, #0
 800216e:	6013      	str	r3, [r2, #0]
      		  			AMP_BLOCKED=0;
 8002170:	600b      	str	r3, [r1, #0]
      		  			AMP_PROTECTION_CNT=0;
 8002172:	4a33      	ldr	r2, [pc, #204]	; (8002240 <TIM16_IRQHandler+0x15c>)
 8002174:	e7e9      	b.n	800214a <TIM16_IRQHandler+0x66>
							DC_PROTECTION_CNT_BEFORESTART=0;
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
							DC_BLOCKED=0;
 800217a:	600a      	str	r2, [r1, #0]
							DC_PROTECTION_CNT=0;
 800217c:	4b31      	ldr	r3, [pc, #196]	; (8002244 <TIM16_IRQHandler+0x160>)
 800217e:	e7f3      	b.n	8002168 <TIM16_IRQHandler+0x84>
						  DC_PROTECTION_CNT_BEFORESTART=0;
 8002180:	2200      	movs	r2, #0
 8002182:	e7f1      	b.n	8002168 <TIM16_IRQHandler+0x84>
      		  	  	PrintCurrentState();
 8002184:	f7ff f9a4 	bl	80014d0 <PrintCurrentState>
					if ((buttonUpdate(&FaultFlag) == isPressed) || (buttonUpdate(&FaultFlag) == isPressedLong)
 8002188:	4f26      	ldr	r7, [pc, #152]	; (8002224 <TIM16_IRQHandler+0x140>)
 800218a:	0038      	movs	r0, r7
 800218c:	f7ff fbf8 	bl	8001980 <buttonUpdate>
 8002190:	4d2d      	ldr	r5, [pc, #180]	; (8002248 <TIM16_IRQHandler+0x164>)
 8002192:	4e2e      	ldr	r6, [pc, #184]	; (800224c <TIM16_IRQHandler+0x168>)
 8002194:	2802      	cmp	r0, #2
 8002196:	d11a      	bne.n	80021ce <TIM16_IRQHandler+0xea>
						RstCnt++;
 8002198:	682b      	ldr	r3, [r5, #0]
 800219a:	4f2d      	ldr	r7, [pc, #180]	; (8002250 <TIM16_IRQHandler+0x16c>)
 800219c:	3301      	adds	r3, #1
 800219e:	602b      	str	r3, [r5, #0]
						if (RstCnt==DelaySecBeforeAttemRst) {
 80021a0:	2b0a      	cmp	r3, #10
 80021a2:	d12a      	bne.n	80021fa <TIM16_IRQHandler+0x116>
							RstCnt=0;
 80021a4:	2300      	movs	r3, #0
							HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin,GPIO_PIN_SET);
 80021a6:	2201      	movs	r2, #1
 80021a8:	2120      	movs	r1, #32
 80021aa:	481d      	ldr	r0, [pc, #116]	; (8002220 <TIM16_IRQHandler+0x13c>)
							RstCnt=0;
 80021ac:	602b      	str	r3, [r5, #0]
							HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin,GPIO_PIN_SET);
 80021ae:	f001 fa97 	bl	80036e0 <HAL_GPIO_WritePin>
							TIM16->ARR=sRST_Delay;
 80021b2:	23fa      	movs	r3, #250	; 0xfa
 80021b4:	005b      	lsls	r3, r3, #1
							TIM16->ARR=sDEF_Delay;
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
						HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80021b8:	2180      	movs	r1, #128	; 0x80
 80021ba:	4819      	ldr	r0, [pc, #100]	; (8002220 <TIM16_IRQHandler+0x13c>)
 80021bc:	f001 faaa 	bl	8003714 <HAL_GPIO_TogglePin>
						BoardStatus=sFaultFlag;
 80021c0:	2303      	movs	r3, #3
						SinWave=swNOP;
 80021c2:	4a24      	ldr	r2, [pc, #144]	; (8002254 <TIM16_IRQHandler+0x170>)
						BoardStatus=sFaultFlag;
 80021c4:	7023      	strb	r3, [r4, #0]
						SinWave=swNOP;
 80021c6:	7013      	strb	r3, [r2, #0]
						FaultWaitCnt=0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	6033      	str	r3, [r6, #0]
 80021cc:	e7b1      	b.n	8002132 <TIM16_IRQHandler+0x4e>
					if ((buttonUpdate(&FaultFlag) == isPressed) || (buttonUpdate(&FaultFlag) == isPressedLong)
 80021ce:	0038      	movs	r0, r7
 80021d0:	f7ff fbd6 	bl	8001980 <buttonUpdate>
 80021d4:	2803      	cmp	r0, #3
 80021d6:	d0df      	beq.n	8002198 <TIM16_IRQHandler+0xb4>
						  SinWave=swNOP;
 80021d8:	2103      	movs	r1, #3
						  RstCnt=0;
 80021da:	2200      	movs	r2, #0
						  SinWave=swNOP;
 80021dc:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <TIM16_IRQHandler+0x170>)
						  RstCnt=0;
 80021de:	602a      	str	r2, [r5, #0]
						  SinWave=swNOP;
 80021e0:	7019      	strb	r1, [r3, #0]
						  FaultWaitCnt++;
 80021e2:	6833      	ldr	r3, [r6, #0]
 80021e4:	3301      	adds	r3, #1
 80021e6:	6033      	str	r3, [r6, #0]
						  if (FaultWaitCnt>=DelaySecBeforeStartAfterFault) {
 80021e8:	2b09      	cmp	r3, #9
 80021ea:	dd0e      	ble.n	800220a <TIM16_IRQHandler+0x126>
							  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,GPIO_PIN_RESET);
 80021ec:	317d      	adds	r1, #125	; 0x7d
 80021ee:	480c      	ldr	r0, [pc, #48]	; (8002220 <TIM16_IRQHandler+0x13c>)
 80021f0:	f001 fa76 	bl	80036e0 <HAL_GPIO_WritePin>
							  BoardStatus=sGEN;
 80021f4:	2301      	movs	r3, #1
 80021f6:	7023      	strb	r3, [r4, #0]
 80021f8:	e79b      	b.n	8002132 <TIM16_IRQHandler+0x4e>
							HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin,GPIO_PIN_RESET);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2120      	movs	r1, #32
 80021fe:	4808      	ldr	r0, [pc, #32]	; (8002220 <TIM16_IRQHandler+0x13c>)
 8002200:	f001 fa6e 	bl	80036e0 <HAL_GPIO_WritePin>
							TIM16->ARR=sDEF_Delay;
 8002204:	23fa      	movs	r3, #250	; 0xfa
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	e7d5      	b.n	80021b6 <TIM16_IRQHandler+0xd2>
							  BoardStatus=sFaultFlag;
 800220a:	7021      	strb	r1, [r4, #0]
							  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800220c:	4804      	ldr	r0, [pc, #16]	; (8002220 <TIM16_IRQHandler+0x13c>)
 800220e:	2180      	movs	r1, #128	; 0x80
 8002210:	f001 fa80 	bl	8003714 <HAL_GPIO_TogglePin>
}
 8002214:	e78d      	b.n	8002132 <TIM16_IRQHandler+0x4e>
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	20000568 	.word	0x20000568
 800221c:	200002e4 	.word	0x200002e4
 8002220:	48000400 	.word	0x48000400
 8002224:	20000460 	.word	0x20000460
 8002228:	200002bc 	.word	0x200002bc
 800222c:	200002c4 	.word	0x200002c4
 8002230:	200002c8 	.word	0x200002c8
 8002234:	200002d0 	.word	0x200002d0
 8002238:	000009c3 	.word	0x000009c3
 800223c:	200002dc 	.word	0x200002dc
 8002240:	200002c0 	.word	0x200002c0
 8002244:	200002d8 	.word	0x200002d8
 8002248:	200002f0 	.word	0x200002f0
 800224c:	200002ec 	.word	0x200002ec
 8002250:	40014400 	.word	0x40014400
 8002254:	200002f4 	.word	0x200002f4

08002258 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002258:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800225a:	4802      	ldr	r0, [pc, #8]	; (8002264 <USART1_IRQHandler+0xc>)
 800225c:	f003 fb02 	bl	8005864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */


  /* USER CODE END USART1_IRQn 1 */
}
 8002260:	bd10      	pop	{r4, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	20000630 	.word	0x20000630

08002268 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002268:	2101      	movs	r1, #1
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800226c:	4811      	ldr	r0, [pc, #68]	; (80022b4 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	4002      	ands	r2, r0
 8002278:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	480e      	ldr	r0, [pc, #56]	; (80022b8 <SystemInit+0x50>)
 800227e:	4002      	ands	r2, r0
 8002280:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	480d      	ldr	r0, [pc, #52]	; (80022bc <SystemInit+0x54>)
 8002286:	4002      	ands	r2, r0
 8002288:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	480c      	ldr	r0, [pc, #48]	; (80022c0 <SystemInit+0x58>)
 800228e:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002290:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002292:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002296:	4382      	bics	r2, r0
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800229a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800229c:	4809      	ldr	r0, [pc, #36]	; (80022c4 <SystemInit+0x5c>)
 800229e:	4002      	ands	r2, r0
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80022a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a4:	438a      	bics	r2, r1
 80022a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]

}
 80022ac:	4770      	bx	lr
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08ffb80c 	.word	0x08ffb80c
 80022b8:	fef6ffff 	.word	0xfef6ffff
 80022bc:	fffbffff 	.word	0xfffbffff
 80022c0:	ffc0ffff 	.word	0xffc0ffff
 80022c4:	fffffeec 	.word	0xfffffeec

080022c8 <MX_TIM14_Init>:
}
/* TIM14 init function */
void MX_TIM14_Init(void)
{

  htim14.Instance = TIM14;
 80022c8:	480a      	ldr	r0, [pc, #40]	; (80022f4 <MX_TIM14_Init+0x2c>)
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <MX_TIM14_Init+0x30>)
{
 80022cc:	b510      	push	{r4, lr}
  htim14.Instance = TIM14;
 80022ce:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 1;
 80022d0:	2301      	movs	r3, #1
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim14.Init.Period = 1000;
 80022d2:	22fa      	movs	r2, #250	; 0xfa
  htim14.Init.Prescaler = 1;
 80022d4:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d6:	2300      	movs	r3, #0
  htim14.Init.Period = 1000;
 80022d8:	0092      	lsls	r2, r2, #2
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022da:	6083      	str	r3, [r0, #8]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022dc:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022de:	3380      	adds	r3, #128	; 0x80
  htim14.Init.Period = 1000;
 80022e0:	60c2      	str	r2, [r0, #12]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022e2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80022e4:	f002 f964 	bl	80045b0 <HAL_TIM_Base_Init>
 80022e8:	2800      	cmp	r0, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM14_Init+0x28>
  {
    Error_Handler();
 80022ec:	f7ff fda8 	bl	8001e40 <Error_Handler>
  }

}
 80022f0:	bd10      	pop	{r4, pc}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	20000528 	.word	0x20000528
 80022f8:	40002000 	.word	0x40002000

080022fc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{

  htim16.Instance = TIM16;
 80022fc:	480a      	ldr	r0, [pc, #40]	; (8002328 <MX_TIM16_Init+0x2c>)
 80022fe:	4b0b      	ldr	r3, [pc, #44]	; (800232c <MX_TIM16_Init+0x30>)
{
 8002300:	b510      	push	{r4, lr}
  htim16.Instance = TIM16;
 8002302:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 47999;
 8002304:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <MX_TIM16_Init+0x34>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim16.Init.Period = 1000;
 8002306:	22fa      	movs	r2, #250	; 0xfa
  htim16.Init.Prescaler = 47999;
 8002308:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230a:	2300      	movs	r3, #0
  htim16.Init.Period = 1000;
 800230c:	0092      	lsls	r2, r2, #2
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230e:	6083      	str	r3, [r0, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002310:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8002312:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002314:	3380      	adds	r3, #128	; 0x80
  htim16.Init.Period = 1000;
 8002316:	60c2      	str	r2, [r0, #12]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002318:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800231a:	f002 f949 	bl	80045b0 <HAL_TIM_Base_Init>
 800231e:	2800      	cmp	r0, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM16_Init+0x2a>
  {
    Error_Handler();
 8002322:	f7ff fd8d 	bl	8001e40 <Error_Handler>
  }

}
 8002326:	bd10      	pop	{r4, pc}
 8002328:	20000568 	.word	0x20000568
 800232c:	40014400 	.word	0x40014400
 8002330:	0000bb7f 	.word	0x0000bb7f

08002334 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002334:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM1)
 8002336:	6803      	ldr	r3, [r0, #0]
 8002338:	4a28      	ldr	r2, [pc, #160]	; (80023dc <HAL_TIM_Base_MspInit+0xa8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d113      	bne.n	8002366 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800233e:	2080      	movs	r0, #128	; 0x80
 8002340:	4a27      	ldr	r2, [pc, #156]	; (80023e0 <HAL_TIM_Base_MspInit+0xac>)
 8002342:	0100      	lsls	r0, r0, #4
 8002344:	6991      	ldr	r1, [r2, #24]
 8002346:	4301      	orrs	r1, r0
 8002348:	6191      	str	r1, [r2, #24]
 800234a:	6993      	ldr	r3, [r2, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800234c:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 800234e:	4003      	ands	r3, r0
 8002350:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002352:	200d      	movs	r0, #13
 8002354:	0011      	movs	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002356:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002358:	f000 fdbc 	bl	8002ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800235c:	200d      	movs	r0, #13
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800235e:	f000 fdf3 	bl	8002f48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002362:	b005      	add	sp, #20
 8002364:	bd00      	pop	{pc}
  else if(tim_baseHandle->Instance==TIM3)
 8002366:	4a1f      	ldr	r2, [pc, #124]	; (80023e4 <HAL_TIM_Base_MspInit+0xb0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d10f      	bne.n	800238c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800236c:	2002      	movs	r0, #2
 800236e:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <HAL_TIM_Base_MspInit+0xac>)
 8002370:	69d1      	ldr	r1, [r2, #28]
 8002372:	4301      	orrs	r1, r0
 8002374:	61d1      	str	r1, [r2, #28]
 8002376:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002378:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800237a:	4003      	ands	r3, r0
 800237c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800237e:	300e      	adds	r0, #14
 8002380:	0011      	movs	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002382:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002384:	f000 fda6 	bl	8002ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002388:	2010      	movs	r0, #16
 800238a:	e7e8      	b.n	800235e <HAL_TIM_Base_MspInit+0x2a>
  else if(tim_baseHandle->Instance==TIM14)
 800238c:	4a16      	ldr	r2, [pc, #88]	; (80023e8 <HAL_TIM_Base_MspInit+0xb4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d110      	bne.n	80023b4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002392:	2080      	movs	r0, #128	; 0x80
 8002394:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <HAL_TIM_Base_MspInit+0xac>)
 8002396:	0040      	lsls	r0, r0, #1
 8002398:	69d1      	ldr	r1, [r2, #28]
 800239a:	4301      	orrs	r1, r0
 800239c:	61d1      	str	r1, [r2, #28]
 800239e:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80023a0:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 80023a2:	4003      	ands	r3, r0
 80023a4:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80023a6:	38ed      	subs	r0, #237	; 0xed
 80023a8:	0011      	movs	r1, r2
    __HAL_RCC_TIM14_CLK_ENABLE();
 80023aa:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80023ac:	f000 fd92 	bl	8002ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80023b0:	2013      	movs	r0, #19
 80023b2:	e7d4      	b.n	800235e <HAL_TIM_Base_MspInit+0x2a>
  else if(tim_baseHandle->Instance==TIM16)
 80023b4:	4a0d      	ldr	r2, [pc, #52]	; (80023ec <HAL_TIM_Base_MspInit+0xb8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d1d3      	bne.n	8002362 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80023ba:	2080      	movs	r0, #128	; 0x80
 80023bc:	4a08      	ldr	r2, [pc, #32]	; (80023e0 <HAL_TIM_Base_MspInit+0xac>)
 80023be:	0280      	lsls	r0, r0, #10
 80023c0:	6991      	ldr	r1, [r2, #24]
 80023c2:	4301      	orrs	r1, r0
 80023c4:	6191      	str	r1, [r2, #24]
 80023c6:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80023c8:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 80023ca:	4003      	ands	r3, r0
 80023cc:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80023ce:	2015      	movs	r0, #21
 80023d0:	0011      	movs	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 80023d2:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80023d4:	f000 fd7e 	bl	8002ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80023d8:	2015      	movs	r0, #21
 80023da:	e7c0      	b.n	800235e <HAL_TIM_Base_MspInit+0x2a>
 80023dc:	40012c00 	.word	0x40012c00
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40000400 	.word	0x40000400
 80023e8:	40002000 	.word	0x40002000
 80023ec:	40014400 	.word	0x40014400

080023f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023f0:	b530      	push	{r4, r5, lr}
 80023f2:	0004      	movs	r4, r0
 80023f4:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f6:	2214      	movs	r2, #20
 80023f8:	2100      	movs	r1, #0
 80023fa:	a803      	add	r0, sp, #12
 80023fc:	f003 fb15 	bl	8005a2a <memset>
  if(timHandle->Instance==TIM1)
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	4a27      	ldr	r2, [pc, #156]	; (80024a0 <HAL_TIM_MspPostInit+0xb0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d12f      	bne.n	8002468 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002408:	2080      	movs	r0, #128	; 0x80
 800240a:	4b26      	ldr	r3, [pc, #152]	; (80024a4 <HAL_TIM_MspPostInit+0xb4>)
 800240c:	02c0      	lsls	r0, r0, #11
 800240e:	6959      	ldr	r1, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM1 GPIO Configuration    
    PB1     ------> TIM1_CH3N
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = CH4_Pin;
 8002410:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002412:	4301      	orrs	r1, r0
 8002414:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002416:	2180      	movs	r1, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002418:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241a:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241c:	0289      	lsls	r1, r1, #10
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241e:	4002      	ands	r2, r0
 8002420:	9200      	str	r2, [sp, #0]
 8002422:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002424:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8002426:	4820      	ldr	r0, [pc, #128]	; (80024a8 <HAL_TIM_MspPostInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002428:	430a      	orrs	r2, r1
 800242a:	615a      	str	r2, [r3, #20]
 800242c:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = CH4_Pin;
 800242e:	9403      	str	r4, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002430:	400b      	ands	r3, r1
 8002432:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8002434:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002438:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800243a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800243c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 800243e:	f001 f825 	bl	800348c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CH3_Pin;
 8002442:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8002444:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = CH3_Pin;
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
    HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 800244c:	05c0      	lsls	r0, r0, #23
 800244e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002454:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002456:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8002458:	f001 f818 	bl	800348c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PA10);
 800245c:	2080      	movs	r0, #128	; 0x80
 800245e:	0400      	lsls	r0, r0, #16
 8002460:	f001 f968 	bl	8003734 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002464:	b009      	add	sp, #36	; 0x24
 8002466:	bd30      	pop	{r4, r5, pc}
  else if(timHandle->Instance==TIM3)
 8002468:	4a10      	ldr	r2, [pc, #64]	; (80024ac <HAL_TIM_MspPostInit+0xbc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d1fa      	bne.n	8002464 <HAL_TIM_MspPostInit+0x74>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246e:	2080      	movs	r0, #128	; 0x80
 8002470:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <HAL_TIM_MspPostInit+0xb4>)
 8002472:	0280      	lsls	r0, r0, #10
 8002474:	6951      	ldr	r1, [r2, #20]
 8002476:	4301      	orrs	r1, r0
 8002478:	6151      	str	r1, [r2, #20]
 800247a:	6953      	ldr	r3, [r2, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247c:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247e:	4003      	ands	r3, r0
 8002480:	9302      	str	r3, [sp, #8]
 8002482:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = CH1_Pin|CH2_Pin;
 8002484:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002486:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = CH1_Pin|CH2_Pin;
 8002488:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	3bbe      	subs	r3, #190	; 0xbe
 800248c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800248e:	3301      	adds	r3, #1
 8002490:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002492:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002494:	3b02      	subs	r3, #2
 8002496:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	f000 fff8 	bl	800348c <HAL_GPIO_Init>
}
 800249c:	e7e2      	b.n	8002464 <HAL_TIM_MspPostInit+0x74>
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	40021000 	.word	0x40021000
 80024a8:	48000400 	.word	0x48000400
 80024ac:	40000400 	.word	0x40000400

080024b0 <MX_TIM1_Init>:
{
 80024b0:	b530      	push	{r4, r5, lr}
 80024b2:	b095      	sub	sp, #84	; 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024b4:	2210      	movs	r2, #16
 80024b6:	2100      	movs	r1, #0
 80024b8:	a802      	add	r0, sp, #8
 80024ba:	f003 fab6 	bl	8005a2a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024be:	2208      	movs	r2, #8
 80024c0:	2100      	movs	r1, #0
 80024c2:	4668      	mov	r0, sp
 80024c4:	f003 fab1 	bl	8005a2a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024c8:	221c      	movs	r2, #28
 80024ca:	2100      	movs	r1, #0
 80024cc:	a806      	add	r0, sp, #24
 80024ce:	f003 faac 	bl	8005a2a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024d2:	221c      	movs	r2, #28
 80024d4:	2100      	movs	r1, #0
 80024d6:	a80d      	add	r0, sp, #52	; 0x34
 80024d8:	f003 faa7 	bl	8005a2a <memset>
  htim1.Instance = TIM1;
 80024dc:	4c2e      	ldr	r4, [pc, #184]	; (8002598 <MX_TIM1_Init+0xe8>)
 80024de:	4b2f      	ldr	r3, [pc, #188]	; (800259c <MX_TIM1_Init+0xec>)
  htim1.Init.Period = 1000;
 80024e0:	22fa      	movs	r2, #250	; 0xfa
  htim1.Instance = TIM1;
 80024e2:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 960;
 80024e4:	23f0      	movs	r3, #240	; 0xf0
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ea:	2300      	movs	r3, #0
  htim1.Init.Period = 1000;
 80024ec:	0092      	lsls	r2, r2, #2
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ee:	60a3      	str	r3, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f0:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80024f2:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024f4:	0020      	movs	r0, r4
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024f6:	3380      	adds	r3, #128	; 0x80
  htim1.Init.Period = 1000;
 80024f8:	60e2      	str	r2, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024fa:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024fc:	f002 f858 	bl	80045b0 <HAL_TIM_Base_Init>
 8002500:	2800      	cmp	r0, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM1_Init+0x58>
    Error_Handler();
 8002504:	f7ff fc9c 	bl	8001e40 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002508:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800250a:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800250c:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800250e:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002510:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002512:	f002 fb77 	bl	8004c04 <HAL_TIM_ConfigClockSource>
 8002516:	2800      	cmp	r0, #0
 8002518:	d001      	beq.n	800251e <MX_TIM1_Init+0x6e>
    Error_Handler();
 800251a:	f7ff fc91 	bl	8001e40 <Error_Handler>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800251e:	0020      	movs	r0, r4
 8002520:	f002 f8a8 	bl	8004674 <HAL_TIM_OC_Init>
 8002524:	2800      	cmp	r0, #0
 8002526:	d001      	beq.n	800252c <MX_TIM1_Init+0x7c>
    Error_Handler();
 8002528:	f7ff fc8a 	bl	8001e40 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800252c:	2500      	movs	r5, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800252e:	4669      	mov	r1, sp
 8002530:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002532:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002534:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002536:	f002 fd69 	bl	800500c <HAL_TIMEx_MasterConfigSynchronization>
 800253a:	42a8      	cmp	r0, r5
 800253c:	d001      	beq.n	8002542 <MX_TIM1_Init+0x92>
    Error_Handler();
 800253e:	f7ff fc7f 	bl	8001e40 <Error_Handler>
  sConfigOC.Pulse = 500;
 8002542:	23fa      	movs	r3, #250	; 0xfa
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002548:	2208      	movs	r2, #8
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800254a:	3bf4      	subs	r3, #244	; 0xf4
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800254c:	a906      	add	r1, sp, #24
 800254e:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002550:	9506      	str	r5, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002552:	9508      	str	r5, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002554:	9509      	str	r5, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002556:	950a      	str	r5, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8002558:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCIDLESTATE_SET;
 800255a:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800255c:	f002 f9bc 	bl	80048d8 <HAL_TIM_OC_ConfigChannel>
 8002560:	2800      	cmp	r0, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM1_Init+0xb8>
    Error_Handler();
 8002564:	f7ff fc6c 	bl	8001e40 <Error_Handler>
  sBreakDeadTimeConfig.DeadTime = 0b01011111;
 8002568:	225f      	movs	r2, #95	; 0x5f
 800256a:	9210      	str	r2, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800256c:	2280      	movs	r2, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800256e:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002570:	0192      	lsls	r2, r2, #6
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002572:	a90d      	add	r1, sp, #52	; 0x34
 8002574:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002576:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002578:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800257a:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800257c:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800257e:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002580:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002582:	f002 fd8f 	bl	80050a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002586:	2800      	cmp	r0, #0
 8002588:	d001      	beq.n	800258e <MX_TIM1_Init+0xde>
    Error_Handler();
 800258a:	f7ff fc59 	bl	8001e40 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 800258e:	0020      	movs	r0, r4
 8002590:	f7ff ff2e 	bl	80023f0 <HAL_TIM_MspPostInit>
}
 8002594:	b015      	add	sp, #84	; 0x54
 8002596:	bd30      	pop	{r4, r5, pc}
 8002598:	200004e8 	.word	0x200004e8
 800259c:	40012c00 	.word	0x40012c00

080025a0 <MX_TIM3_Init>:
{
 80025a0:	b510      	push	{r4, lr}
 80025a2:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025a4:	2210      	movs	r2, #16
 80025a6:	2100      	movs	r1, #0
 80025a8:	a803      	add	r0, sp, #12
 80025aa:	f003 fa3e 	bl	8005a2a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ae:	2208      	movs	r2, #8
 80025b0:	2100      	movs	r1, #0
 80025b2:	a801      	add	r0, sp, #4
 80025b4:	f003 fa39 	bl	8005a2a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025b8:	221c      	movs	r2, #28
 80025ba:	2100      	movs	r1, #0
 80025bc:	a807      	add	r0, sp, #28
 80025be:	f003 fa34 	bl	8005a2a <memset>
  htim3.Instance = TIM3;
 80025c2:	4c26      	ldr	r4, [pc, #152]	; (800265c <MX_TIM3_Init+0xbc>)
 80025c4:	4b26      	ldr	r3, [pc, #152]	; (8002660 <MX_TIM3_Init+0xc0>)
  htim3.Init.Period = 1000;
 80025c6:	22fa      	movs	r2, #250	; 0xfa
  htim3.Instance = TIM3;
 80025c8:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 1;
 80025ca:	2301      	movs	r3, #1
 80025cc:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ce:	2300      	movs	r3, #0
  htim3.Init.Period = 1000;
 80025d0:	0092      	lsls	r2, r2, #2
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d2:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d4:	6123      	str	r3, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025d6:	0020      	movs	r0, r4
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025d8:	3380      	adds	r3, #128	; 0x80
  htim3.Init.Period = 1000;
 80025da:	60e2      	str	r2, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025dc:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025de:	f001 ffe7 	bl	80045b0 <HAL_TIM_Base_Init>
 80025e2:	2800      	cmp	r0, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM3_Init+0x4a>
    Error_Handler();
 80025e6:	f7ff fc2b 	bl	8001e40 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ea:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025ec:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ee:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025f0:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025f2:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025f4:	f002 fb06 	bl	8004c04 <HAL_TIM_ConfigClockSource>
 80025f8:	2800      	cmp	r0, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM3_Init+0x60>
    Error_Handler();
 80025fc:	f7ff fc20 	bl	8001e40 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002600:	0020      	movs	r0, r4
 8002602:	f002 f89d 	bl	8004740 <HAL_TIM_PWM_Init>
 8002606:	2800      	cmp	r0, #0
 8002608:	d001      	beq.n	800260e <MX_TIM3_Init+0x6e>
    Error_Handler();
 800260a:	f7ff fc19 	bl	8001e40 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800260e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002610:	a901      	add	r1, sp, #4
 8002612:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002614:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002616:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002618:	f002 fcf8 	bl	800500c <HAL_TIMEx_MasterConfigSynchronization>
 800261c:	2800      	cmp	r0, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM3_Init+0x84>
    Error_Handler();
 8002620:	f7ff fc0e 	bl	8001e40 <Error_Handler>
  sConfigOC.Pulse = 0;
 8002624:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002626:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002628:	a907      	add	r1, sp, #28
 800262a:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800262c:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 800262e:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002630:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002632:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002634:	f002 f9f8 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 8002638:	2800      	cmp	r0, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM3_Init+0xa0>
    Error_Handler();
 800263c:	f7ff fc00 	bl	8001e40 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002640:	2204      	movs	r2, #4
 8002642:	a907      	add	r1, sp, #28
 8002644:	0020      	movs	r0, r4
 8002646:	f002 f9ef 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 800264a:	2800      	cmp	r0, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM3_Init+0xb2>
    Error_Handler();
 800264e:	f7ff fbf7 	bl	8001e40 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8002652:	0020      	movs	r0, r4
 8002654:	f7ff fecc 	bl	80023f0 <HAL_TIM_MspPostInit>
}
 8002658:	b00e      	add	sp, #56	; 0x38
 800265a:	bd10      	pop	{r4, pc}
 800265c:	200004a8 	.word	0x200004a8
 8002660:	40000400 	.word	0x40000400

08002664 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8002664:	480b      	ldr	r0, [pc, #44]	; (8002694 <MX_USART1_UART_Init+0x30>)
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <MX_USART1_UART_Init+0x34>)
{
 8002668:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800266a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800266c:	23e1      	movs	r3, #225	; 0xe1
 800266e:	025b      	lsls	r3, r3, #9
 8002670:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002672:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002674:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002676:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002678:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800267a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800267c:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002680:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002682:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002684:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002686:	f003 f81d 	bl	80056c4 <HAL_UART_Init>
 800268a:	2800      	cmp	r0, #0
 800268c:	d001      	beq.n	8002692 <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 800268e:	f7ff fbd7 	bl	8001e40 <Error_Handler>
  }

}
 8002692:	bd10      	pop	{r4, pc}
 8002694:	20000630 	.word	0x20000630
 8002698:	40013800 	.word	0x40013800

0800269c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800269c:	b530      	push	{r4, r5, lr}
 800269e:	0005      	movs	r5, r0
 80026a0:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a2:	2214      	movs	r2, #20
 80026a4:	2100      	movs	r1, #0
 80026a6:	a803      	add	r0, sp, #12
 80026a8:	f003 f9bf 	bl	8005a2a <memset>
  if(uartHandle->Instance==USART1)
 80026ac:	4b2f      	ldr	r3, [pc, #188]	; (800276c <HAL_UART_MspInit+0xd0>)
 80026ae:	682a      	ldr	r2, [r5, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d159      	bne.n	8002768 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026b4:	2080      	movs	r0, #128	; 0x80
 80026b6:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <HAL_UART_MspInit+0xd4>)
 80026b8:	01c0      	lsls	r0, r0, #7
 80026ba:	6999      	ldr	r1, [r3, #24]
 80026bc:	4301      	orrs	r1, r0
 80026be:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c0:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 80026c2:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c4:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 80026c6:	4002      	ands	r2, r0
 80026c8:	9201      	str	r2, [sp, #4]
 80026ca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026cc:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ce:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d0:	430a      	orrs	r2, r1
 80026d2:	615a      	str	r2, [r3, #20]
 80026d4:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d8:	400b      	ands	r3, r1
 80026da:	9302      	str	r3, [sp, #8]
 80026dc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80026de:	2382      	movs	r3, #130	; 0x82
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026e8:	3301      	adds	r3, #1
 80026ea:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ec:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80026ee:	3b02      	subs	r3, #2
 80026f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f2:	f000 fecb 	bl	800348c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80026f6:	4c1f      	ldr	r4, [pc, #124]	; (8002774 <HAL_UART_MspInit+0xd8>)
 80026f8:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <HAL_UART_MspInit+0xdc>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026fa:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80026fc:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026fe:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002700:	0020      	movs	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002702:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002704:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002706:	60e2      	str	r2, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002708:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800270a:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800270c:	61a3      	str	r3, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800270e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002710:	f000 fca2 	bl	8003058 <HAL_DMA_Init>
 8002714:	2800      	cmp	r0, #0
 8002716:	d001      	beq.n	800271c <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8002718:	f7ff fb92 	bl	8001e40 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800271c:	4b17      	ldr	r3, [pc, #92]	; (800277c <HAL_UART_MspInit+0xe0>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800271e:	666c      	str	r4, [r5, #100]	; 0x64
 8002720:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002722:	4c17      	ldr	r4, [pc, #92]	; (8002780 <HAL_UART_MspInit+0xe4>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002724:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002726:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002728:	2310      	movs	r3, #16
 800272a:	6063      	str	r3, [r4, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800272c:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800272e:	0020      	movs	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002730:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002732:	60e2      	str	r2, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002734:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002736:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002738:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800273a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800273c:	f000 fc8c 	bl	8003058 <HAL_DMA_Init>
 8002740:	2800      	cmp	r0, #0
 8002742:	d001      	beq.n	8002748 <HAL_UART_MspInit+0xac>
    {
      Error_Handler();
 8002744:	f7ff fb7c 	bl	8001e40 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	4a0e      	ldr	r2, [pc, #56]	; (8002784 <HAL_UART_MspInit+0xe8>)
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	6811      	ldr	r1, [r2, #0]

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002750:	201b      	movs	r0, #27
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 8002752:	430b      	orrs	r3, r1
 8002754:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002756:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002758:	662c      	str	r4, [r5, #96]	; 0x60
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800275a:	0011      	movs	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800275c:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800275e:	f000 fbb9 	bl	8002ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002762:	201b      	movs	r0, #27
 8002764:	f000 fbf0 	bl	8002f48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002768:	b009      	add	sp, #36	; 0x24
 800276a:	bd30      	pop	{r4, r5, pc}
 800276c:	40013800 	.word	0x40013800
 8002770:	40021000 	.word	0x40021000
 8002774:	200005ec 	.word	0x200005ec
 8002778:	40020030 	.word	0x40020030
 800277c:	40020044 	.word	0x40020044
 8002780:	200005a8 	.word	0x200005a8
 8002784:	40010000 	.word	0x40010000

08002788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002788:	b510      	push	{r4, lr}
 800278a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800278c:	f001 fbf4 	bl	8003f78 <HAL_RCC_GetHCLKFreq>
 8002790:	21fa      	movs	r1, #250	; 0xfa
 8002792:	0089      	lsls	r1, r1, #2
 8002794:	f7fd fcc2 	bl	800011c <__udivsi3>
 8002798:	f000 fbe8 	bl	8002f6c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800279c:	2001      	movs	r0, #1
 800279e:	2200      	movs	r2, #0
 80027a0:	0021      	movs	r1, r4
 80027a2:	4240      	negs	r0, r0
 80027a4:	f000 fb96 	bl	8002ed4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80027a8:	2000      	movs	r0, #0
 80027aa:	bd10      	pop	{r4, pc}

080027ac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ac:	2310      	movs	r3, #16
 80027ae:	4a06      	ldr	r2, [pc, #24]	; (80027c8 <HAL_Init+0x1c>)
{
 80027b0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b2:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80027b4:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b6:	430b      	orrs	r3, r1
 80027b8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ba:	f7ff ffe5 	bl	8002788 <HAL_InitTick>
  HAL_MspInit();
 80027be:	f7ff fb41 	bl	8001e44 <HAL_MspInit>
}
 80027c2:	2000      	movs	r0, #0
 80027c4:	bd10      	pop	{r4, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	40022000 	.word	0x40022000

080027cc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80027cc:	4a02      	ldr	r2, [pc, #8]	; (80027d8 <HAL_IncTick+0xc>)
 80027ce:	6813      	ldr	r3, [r2, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	6013      	str	r3, [r2, #0]
}
 80027d4:	4770      	bx	lr
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	200006a0 	.word	0x200006a0

080027dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80027dc:	4b01      	ldr	r3, [pc, #4]	; (80027e4 <HAL_GetTick+0x8>)
 80027de:	6818      	ldr	r0, [r3, #0]
}
 80027e0:	4770      	bx	lr
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	200006a0 	.word	0x200006a0

080027e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80027e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80027ea:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80027ec:	f7ff fff6 	bl	80027dc <HAL_GetTick>
  uint32_t wait = Delay;
 80027f0:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f2:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80027f4:	1c63      	adds	r3, r4, #1
 80027f6:	1e5a      	subs	r2, r3, #1
 80027f8:	4193      	sbcs	r3, r2
 80027fa:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80027fc:	f7ff ffee 	bl	80027dc <HAL_GetTick>
 8002800:	1b40      	subs	r0, r0, r5
 8002802:	42a0      	cmp	r0, r4
 8002804:	d3fa      	bcc.n	80027fc <HAL_Delay+0x14>
  {
  }
}
 8002806:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08002808 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8002808:	2300      	movs	r3, #0
{
 800280a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800280c:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 800280e:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002810:	6803      	ldr	r3, [r0, #0]
{
 8002812:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	400a      	ands	r2, r1
 8002818:	2a01      	cmp	r2, #1
 800281a:	d107      	bne.n	800282c <ADC_Enable+0x24>
 800281c:	6819      	ldr	r1, [r3, #0]
 800281e:	4211      	tst	r1, r2
 8002820:	d001      	beq.n	8002826 <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002822:	2000      	movs	r0, #0
}
 8002824:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	0412      	lsls	r2, r2, #16
 800282a:	d4fa      	bmi.n	8002822 <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800282c:	6899      	ldr	r1, [r3, #8]
 800282e:	4a19      	ldr	r2, [pc, #100]	; (8002894 <ADC_Enable+0x8c>)
 8002830:	4211      	tst	r1, r2
 8002832:	d008      	beq.n	8002846 <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002834:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002836:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002838:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800283a:	4313      	orrs	r3, r2
 800283c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800283e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002840:	4303      	orrs	r3, r0
 8002842:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8002844:	e7ee      	b.n	8002824 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8002846:	2201      	movs	r2, #1
 8002848:	6899      	ldr	r1, [r3, #8]
 800284a:	430a      	orrs	r2, r1
 800284c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <ADC_Enable+0x90>)
 8002850:	4912      	ldr	r1, [pc, #72]	; (800289c <ADC_Enable+0x94>)
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	f7fd fc62 	bl	800011c <__udivsi3>
 8002858:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d115      	bne.n	800288c <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8002860:	f7ff ffbc 	bl	80027dc <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002864:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8002866:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	422b      	tst	r3, r5
 800286e:	d1d8      	bne.n	8002822 <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002870:	f7ff ffb4 	bl	80027dc <HAL_GetTick>
 8002874:	1b80      	subs	r0, r0, r6
 8002876:	2802      	cmp	r0, #2
 8002878:	d9f6      	bls.n	8002868 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287a:	2310      	movs	r3, #16
 800287c:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 800287e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002880:	4313      	orrs	r3, r2
 8002882:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002884:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002886:	432b      	orrs	r3, r5
 8002888:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800288a:	e7cb      	b.n	8002824 <ADC_Enable+0x1c>
      wait_loop_index--;
 800288c:	9b01      	ldr	r3, [sp, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	e7e2      	b.n	800285a <ADC_Enable+0x52>
 8002894:	80000017 	.word	0x80000017
 8002898:	20000234 	.word	0x20000234
 800289c:	000f4240 	.word	0x000f4240

080028a0 <HAL_ADC_Init>:
{
 80028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80028a4:	2001      	movs	r0, #1
  if(hadc == NULL)
 80028a6:	2c00      	cmp	r4, #0
 80028a8:	d100      	bne.n	80028ac <HAL_ADC_Init+0xc>
 80028aa:	e0f6      	b.n	8002a9a <HAL_ADC_Init+0x1fa>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80028ac:	4b8f      	ldr	r3, [pc, #572]	; (8002aec <HAL_ADC_Init+0x24c>)
 80028ae:	6822      	ldr	r2, [r4, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d004      	beq.n	80028be <HAL_ADC_Init+0x1e>
 80028b4:	2174      	movs	r1, #116	; 0x74
 80028b6:	488e      	ldr	r0, [pc, #568]	; (8002af0 <HAL_ADC_Init+0x250>)
 80028b8:	31ff      	adds	r1, #255	; 0xff
 80028ba:	f7ff fac2 	bl	8001e42 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80028be:	6863      	ldr	r3, [r4, #4]
 80028c0:	4a8c      	ldr	r2, [pc, #560]	; (8002af4 <HAL_ADC_Init+0x254>)
 80028c2:	4213      	tst	r3, r2
 80028c4:	d008      	beq.n	80028d8 <HAL_ADC_Init+0x38>
 80028c6:	2280      	movs	r2, #128	; 0x80
 80028c8:	0612      	lsls	r2, r2, #24
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d004      	beq.n	80028d8 <HAL_ADC_Init+0x38>
 80028ce:	21ba      	movs	r1, #186	; 0xba
 80028d0:	4887      	ldr	r0, [pc, #540]	; (8002af0 <HAL_ADC_Init+0x250>)
 80028d2:	0049      	lsls	r1, r1, #1
 80028d4:	f7ff fab5 	bl	8001e42 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80028d8:	2318      	movs	r3, #24
 80028da:	68a2      	ldr	r2, [r4, #8]
 80028dc:	439a      	bics	r2, r3
 80028de:	d004      	beq.n	80028ea <HAL_ADC_Init+0x4a>
 80028e0:	2176      	movs	r1, #118	; 0x76
 80028e2:	4883      	ldr	r0, [pc, #524]	; (8002af0 <HAL_ADC_Init+0x250>)
 80028e4:	31ff      	adds	r1, #255	; 0xff
 80028e6:	f7ff faac 	bl	8001e42 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 80028ea:	2320      	movs	r3, #32
 80028ec:	68e2      	ldr	r2, [r4, #12]
 80028ee:	439a      	bics	r2, r3
 80028f0:	d004      	beq.n	80028fc <HAL_ADC_Init+0x5c>
 80028f2:	21bb      	movs	r1, #187	; 0xbb
 80028f4:	487e      	ldr	r0, [pc, #504]	; (8002af0 <HAL_ADC_Init+0x250>)
 80028f6:	0049      	lsls	r1, r1, #1
 80028f8:	f7ff faa3 	bl	8001e42 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80028fc:	6923      	ldr	r3, [r4, #16]
 80028fe:	3b01      	subs	r3, #1
 8002900:	2b01      	cmp	r3, #1
 8002902:	d904      	bls.n	800290e <HAL_ADC_Init+0x6e>
 8002904:	2178      	movs	r1, #120	; 0x78
 8002906:	487a      	ldr	r0, [pc, #488]	; (8002af0 <HAL_ADC_Init+0x250>)
 8002908:	31ff      	adds	r1, #255	; 0xff
 800290a:	f7ff fa9a 	bl	8001e42 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800290e:	6a23      	ldr	r3, [r4, #32]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d904      	bls.n	800291e <HAL_ADC_Init+0x7e>
 8002914:	21bc      	movs	r1, #188	; 0xbc
 8002916:	4876      	ldr	r0, [pc, #472]	; (8002af0 <HAL_ADC_Init+0x250>)
 8002918:	0049      	lsls	r1, r1, #1
 800291a:	f7ff fa92 	bl	8001e42 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800291e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002920:	2b01      	cmp	r3, #1
 8002922:	d904      	bls.n	800292e <HAL_ADC_Init+0x8e>
 8002924:	217a      	movs	r1, #122	; 0x7a
 8002926:	4872      	ldr	r0, [pc, #456]	; (8002af0 <HAL_ADC_Init+0x250>)
 8002928:	31ff      	adds	r1, #255	; 0xff
 800292a:	f7ff fa8a 	bl	8001e42 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));   
 800292e:	4b72      	ldr	r3, [pc, #456]	; (8002af8 <HAL_ADC_Init+0x258>)
 8002930:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002932:	421a      	tst	r2, r3
 8002934:	d004      	beq.n	8002940 <HAL_ADC_Init+0xa0>
 8002936:	21bd      	movs	r1, #189	; 0xbd
 8002938:	486d      	ldr	r0, [pc, #436]	; (8002af0 <HAL_ADC_Init+0x250>)
 800293a:	0049      	lsls	r1, r1, #1
 800293c:	f7ff fa81 	bl	8001e42 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));   
 8002940:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002942:	2240      	movs	r2, #64	; 0x40
 8002944:	0019      	movs	r1, r3
 8002946:	4391      	bics	r1, r2
 8002948:	d00a      	beq.n	8002960 <HAL_ADC_Init+0xc0>
 800294a:	2bc0      	cmp	r3, #192	; 0xc0
 800294c:	d008      	beq.n	8002960 <HAL_ADC_Init+0xc0>
 800294e:	22c2      	movs	r2, #194	; 0xc2
 8002950:	32ff      	adds	r2, #255	; 0xff
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_ADC_Init+0xc0>
 8002956:	217c      	movs	r1, #124	; 0x7c
 8002958:	4865      	ldr	r0, [pc, #404]	; (8002af0 <HAL_ADC_Init+0x250>)
 800295a:	31ff      	adds	r1, #255	; 0xff
 800295c:	f7ff fa71 	bl	8001e42 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8002960:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002962:	2b01      	cmp	r3, #1
 8002964:	d904      	bls.n	8002970 <HAL_ADC_Init+0xd0>
 8002966:	21be      	movs	r1, #190	; 0xbe
 8002968:	4861      	ldr	r0, [pc, #388]	; (8002af0 <HAL_ADC_Init+0x250>)
 800296a:	0049      	lsls	r1, r1, #1
 800296c:	f7ff fa69 	bl	8001e42 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8002970:	2204      	movs	r2, #4
 8002972:	6963      	ldr	r3, [r4, #20]
 8002974:	3b04      	subs	r3, #4
 8002976:	4393      	bics	r3, r2
 8002978:	d004      	beq.n	8002984 <HAL_ADC_Init+0xe4>
 800297a:	217e      	movs	r1, #126	; 0x7e
 800297c:	485c      	ldr	r0, [pc, #368]	; (8002af0 <HAL_ADC_Init+0x250>)
 800297e:	31ff      	adds	r1, #255	; 0xff
 8002980:	f7ff fa5f 	bl	8001e42 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8002984:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002986:	2b01      	cmp	r3, #1
 8002988:	d904      	bls.n	8002994 <HAL_ADC_Init+0xf4>
 800298a:	21bf      	movs	r1, #191	; 0xbf
 800298c:	4858      	ldr	r0, [pc, #352]	; (8002af0 <HAL_ADC_Init+0x250>)
 800298e:	0049      	lsls	r1, r1, #1
 8002990:	f7ff fa57 	bl	8001e42 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8002994:	69a3      	ldr	r3, [r4, #24]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d904      	bls.n	80029a4 <HAL_ADC_Init+0x104>
 800299a:	2180      	movs	r1, #128	; 0x80
 800299c:	4854      	ldr	r0, [pc, #336]	; (8002af0 <HAL_ADC_Init+0x250>)
 800299e:	31ff      	adds	r1, #255	; 0xff
 80029a0:	f7ff fa4f 	bl	8001e42 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 80029a4:	69e3      	ldr	r3, [r4, #28]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d904      	bls.n	80029b4 <HAL_ADC_Init+0x114>
 80029aa:	21c0      	movs	r1, #192	; 0xc0
 80029ac:	4850      	ldr	r0, [pc, #320]	; (8002af0 <HAL_ADC_Init+0x250>)
 80029ae:	0049      	lsls	r1, r1, #1
 80029b0:	f7ff fa47 	bl	8001e42 <assert_failed>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_ADC_Init+0x128>
    hadc->Lock = HAL_UNLOCKED;
 80029ba:	0022      	movs	r2, r4
 80029bc:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 80029be:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 80029c0:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80029c2:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80029c4:	f7fe fa9e 	bl	8000f04 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80029ca:	06db      	lsls	r3, r3, #27
 80029cc:	d500      	bpl.n	80029d0 <HAL_ADC_Init+0x130>
 80029ce:	e079      	b.n	8002ac4 <HAL_ADC_Init+0x224>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80029d0:	2204      	movs	r2, #4
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	6898      	ldr	r0, [r3, #8]
 80029d6:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 80029d8:	d000      	beq.n	80029dc <HAL_ADC_Init+0x13c>
 80029da:	e073      	b.n	8002ac4 <HAL_ADC_Init+0x224>
    ADC_STATE_CLR_SET(hadc->State,
 80029dc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80029de:	4947      	ldr	r1, [pc, #284]	; (8002afc <HAL_ADC_Init+0x25c>)
 80029e0:	4011      	ands	r1, r2
 80029e2:	2202      	movs	r2, #2
 80029e4:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 80029e6:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80029e8:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	400a      	ands	r2, r1
 80029ee:	2a01      	cmp	r2, #1
 80029f0:	d000      	beq.n	80029f4 <HAL_ADC_Init+0x154>
 80029f2:	e06d      	b.n	8002ad0 <HAL_ADC_Init+0x230>
 80029f4:	6819      	ldr	r1, [r3, #0]
 80029f6:	4211      	tst	r1, r2
 80029f8:	d102      	bne.n	8002a00 <HAL_ADC_Init+0x160>
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	0412      	lsls	r2, r2, #16
 80029fe:	d567      	bpl.n	8002ad0 <HAL_ADC_Init+0x230>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	493f      	ldr	r1, [pc, #252]	; (8002b00 <HAL_ADC_Init+0x260>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8002a04:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002a06:	400a      	ands	r2, r1
 8002a08:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8002a0a:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8002a0c:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8002a0e:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8002a10:	69e2      	ldr	r2, [r4, #28]
 8002a12:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8002a14:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8002a16:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002a18:	3a01      	subs	r2, #1
 8002a1a:	1e56      	subs	r6, r2, #1
 8002a1c:	41b2      	sbcs	r2, r6
 8002a1e:	0316      	lsls	r6, r2, #12
 8002a20:	68e2      	ldr	r2, [r4, #12]
 8002a22:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8002a24:	6922      	ldr	r2, [r4, #16]
 8002a26:	430f      	orrs	r7, r1
 8002a28:	2a02      	cmp	r2, #2
 8002a2a:	d100      	bne.n	8002a2e <HAL_ADC_Init+0x18e>
 8002a2c:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8002a2e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a30:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8002a32:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8002a34:	433a      	orrs	r2, r7
 8002a36:	4332      	orrs	r2, r6
 8002a38:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a3a:	2901      	cmp	r1, #1
 8002a3c:	d104      	bne.n	8002a48 <HAL_ADC_Init+0x1a8>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a3e:	2d00      	cmp	r5, #0
 8002a40:	d12c      	bne.n	8002a9c <HAL_ADC_Init+0x1fc>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002a42:	2180      	movs	r1, #128	; 0x80
 8002a44:	0249      	lsls	r1, r1, #9
 8002a46:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a48:	20c2      	movs	r0, #194	; 0xc2
 8002a4a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002a4c:	30ff      	adds	r0, #255	; 0xff
 8002a4e:	4281      	cmp	r1, r0
 8002a50:	d002      	beq.n	8002a58 <HAL_ADC_Init+0x1b8>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002a52:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002a54:	4301      	orrs	r1, r0
 8002a56:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002a58:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002a5a:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002a5c:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002a5e:	4311      	orrs	r1, r2
 8002a60:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002a62:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002a64:	4281      	cmp	r1, r0
 8002a66:	d002      	beq.n	8002a6e <HAL_ADC_Init+0x1ce>
 8002a68:	1e48      	subs	r0, r1, #1
 8002a6a:	2806      	cmp	r0, #6
 8002a6c:	d807      	bhi.n	8002a7e <HAL_ADC_Init+0x1de>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002a6e:	2507      	movs	r5, #7
 8002a70:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002a72:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002a74:	43a8      	bics	r0, r5
 8002a76:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002a78:	6958      	ldr	r0, [r3, #20]
 8002a7a:	4301      	orrs	r1, r0
 8002a7c:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4920      	ldr	r1, [pc, #128]	; (8002b04 <HAL_ADC_Init+0x264>)
 8002a82:	400b      	ands	r3, r1
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d111      	bne.n	8002aac <HAL_ADC_Init+0x20c>
      ADC_CLEAR_ERRORCODE(hadc);
 8002a88:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002a8a:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8002a8c:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8002a8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a90:	4393      	bics	r3, r2
 8002a92:	001a      	movs	r2, r3
 8002a94:	2301      	movs	r3, #1
 8002a96:	4313      	orrs	r3, r2
 8002a98:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a9c:	2020      	movs	r0, #32
 8002a9e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002aa0:	4328      	orrs	r0, r5
 8002aa2:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002aa6:	4301      	orrs	r1, r0
 8002aa8:	64a1      	str	r1, [r4, #72]	; 0x48
 8002aaa:	e7cd      	b.n	8002a48 <HAL_ADC_Init+0x1a8>
      ADC_STATE_CLR_SET(hadc->State,
 8002aac:	2212      	movs	r2, #18
 8002aae:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab0:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002ab2:	4393      	bics	r3, r2
 8002ab4:	001a      	movs	r2, r3
 8002ab6:	2310      	movs	r3, #16
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002abc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002abe:	4303      	orrs	r3, r0
 8002ac0:	64a3      	str	r3, [r4, #72]	; 0x48
 8002ac2:	e7ea      	b.n	8002a9a <HAL_ADC_Init+0x1fa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8002ac8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aca:	4313      	orrs	r3, r2
 8002acc:	6463      	str	r3, [r4, #68]	; 0x44
 8002ace:	e7e4      	b.n	8002a9a <HAL_ADC_Init+0x1fa>
      MODIFY_REG(hadc->Instance->CFGR1,
 8002ad0:	2118      	movs	r1, #24
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	438a      	bics	r2, r1
 8002ad6:	68a1      	ldr	r1, [r4, #8]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002adc:	6919      	ldr	r1, [r3, #16]
 8002ade:	6862      	ldr	r2, [r4, #4]
 8002ae0:	0089      	lsls	r1, r1, #2
 8002ae2:	0889      	lsrs	r1, r1, #2
 8002ae4:	4311      	orrs	r1, r2
 8002ae6:	6119      	str	r1, [r3, #16]
 8002ae8:	e78a      	b.n	8002a00 <HAL_ADC_Init+0x160>
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	40012400 	.word	0x40012400
 8002af0:	08006435 	.word	0x08006435
 8002af4:	bfffffff 	.word	0xbfffffff
 8002af8:	fffff3ff 	.word	0xfffff3ff
 8002afc:	fffffefd 	.word	0xfffffefd
 8002b00:	fffe0219 	.word	0xfffe0219
 8002b04:	833fffe7 	.word	0x833fffe7

08002b08 <HAL_ADC_Start_DMA>:
{
 8002b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <HAL_ADC_Start_DMA+0x94>)
{
 8002b0c:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002b0e:	6802      	ldr	r2, [r0, #0]
{
 8002b10:	0004      	movs	r4, r0
 8002b12:	000f      	movs	r7, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d003      	beq.n	8002b20 <HAL_ADC_Start_DMA+0x18>
 8002b18:	4921      	ldr	r1, [pc, #132]	; (8002ba0 <HAL_ADC_Start_DMA+0x98>)
 8002b1a:	4822      	ldr	r0, [pc, #136]	; (8002ba4 <HAL_ADC_Start_DMA+0x9c>)
 8002b1c:	f7ff f991 	bl	8001e42 <assert_failed>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b20:	6823      	ldr	r3, [r4, #0]
    tmp_hal_status = HAL_BUSY;
 8002b22:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	075b      	lsls	r3, r3, #29
 8002b28:	d430      	bmi.n	8002b8c <HAL_ADC_Start_DMA+0x84>
    __HAL_LOCK(hadc);
 8002b2a:	0026      	movs	r6, r4
 8002b2c:	3640      	adds	r6, #64	; 0x40
 8002b2e:	7833      	ldrb	r3, [r6, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d02b      	beq.n	8002b8c <HAL_ADC_Start_DMA+0x84>
 8002b34:	2301      	movs	r3, #1
 8002b36:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002b38:	69e3      	ldr	r3, [r4, #28]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d127      	bne.n	8002b8e <HAL_ADC_Start_DMA+0x86>
      ADC_STATE_CLR_SET(hadc->State,
 8002b3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b40:	4a19      	ldr	r2, [pc, #100]	; (8002ba8 <HAL_ADC_Start_DMA+0xa0>)
      ADC_CLEAR_ERRORCODE(hadc);
 8002b42:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002b44:	401a      	ands	r2, r3
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	6463      	str	r3, [r4, #68]	; 0x44
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b4e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002b50:	4b16      	ldr	r3, [pc, #88]	; (8002bac <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 8002b52:	64a5      	str	r5, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8002b54:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b56:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b58:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b5a:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b5c:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <HAL_ADC_Start_DMA+0xac>)
 8002b60:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b62:	231c      	movs	r3, #28
 8002b64:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b66:	684a      	ldr	r2, [r1, #4]
 8002b68:	3b0c      	subs	r3, #12
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	68ca      	ldr	r2, [r1, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b76:	003a      	movs	r2, r7
 8002b78:	3140      	adds	r1, #64	; 0x40
 8002b7a:	9b01      	ldr	r3, [sp, #4]
 8002b7c:	f000 fb0e 	bl	800319c <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002b80:	2304      	movs	r3, #4
 8002b82:	0028      	movs	r0, r5
 8002b84:	6822      	ldr	r2, [r4, #0]
 8002b86:	6891      	ldr	r1, [r2, #8]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	6093      	str	r3, [r2, #8]
}
 8002b8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8002b8e:	0020      	movs	r0, r4
 8002b90:	f7ff fe3a 	bl	8002808 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002b94:	2800      	cmp	r0, #0
 8002b96:	d1f9      	bne.n	8002b8c <HAL_ADC_Start_DMA+0x84>
 8002b98:	e7d1      	b.n	8002b3e <HAL_ADC_Start_DMA+0x36>
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	40012400 	.word	0x40012400
 8002ba0:	000004bc 	.word	0x000004bc
 8002ba4:	08006435 	.word	0x08006435
 8002ba8:	fffff0fe 	.word	0xfffff0fe
 8002bac:	08002bbd 	.word	0x08002bbd
 8002bb0:	08002c2f 	.word	0x08002c2f
 8002bb4:	08002c3d 	.word	0x08002c3d

08002bb8 <HAL_ADC_ConvCpltCallback>:
 8002bb8:	4770      	bx	lr
	...

08002bbc <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bbc:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bbe:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002bc0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bc2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002bc4:	4211      	tst	r1, r2
 8002bc6:	d12a      	bne.n	8002c1e <ADC_DMAConvCplt+0x62>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002bc8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002bca:	32b1      	adds	r2, #177	; 0xb1
 8002bcc:	32ff      	adds	r2, #255	; 0xff
 8002bce:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002bd0:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002bd2:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	0109      	lsls	r1, r1, #4
 8002bd8:	68d0      	ldr	r0, [r2, #12]
 8002bda:	4208      	tst	r0, r1
 8002bdc:	d112      	bne.n	8002c04 <ADC_DMAConvCplt+0x48>
 8002bde:	6a19      	ldr	r1, [r3, #32]
 8002be0:	2900      	cmp	r1, #0
 8002be2:	d10f      	bne.n	8002c04 <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002be4:	6811      	ldr	r1, [r2, #0]
 8002be6:	0709      	lsls	r1, r1, #28
 8002be8:	d50c      	bpl.n	8002c04 <ADC_DMAConvCplt+0x48>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bea:	6891      	ldr	r1, [r2, #8]
 8002bec:	0749      	lsls	r1, r1, #29
 8002bee:	d40d      	bmi.n	8002c0c <ADC_DMAConvCplt+0x50>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002bf0:	200c      	movs	r0, #12
 8002bf2:	6851      	ldr	r1, [r2, #4]
 8002bf4:	4381      	bics	r1, r0
 8002bf6:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bfa:	490b      	ldr	r1, [pc, #44]	; (8002c28 <ADC_DMAConvCplt+0x6c>)
 8002bfc:	4011      	ands	r1, r2
 8002bfe:	2201      	movs	r2, #1
 8002c00:	430a      	orrs	r2, r1
 8002c02:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8002c04:	0018      	movs	r0, r3
 8002c06:	f7ff ffd7 	bl	8002bb8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002c0a:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002c10:	430a      	orrs	r2, r1
 8002c12:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c14:	2201      	movs	r2, #1
 8002c16:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	649a      	str	r2, [r3, #72]	; 0x48
 8002c1c:	e7f2      	b.n	8002c04 <ADC_DMAConvCplt+0x48>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4798      	blx	r3
}
 8002c24:	e7f1      	b.n	8002c0a <ADC_DMAConvCplt+0x4e>
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	fffffefe 	.word	0xfffffefe

08002c2c <HAL_ADC_ConvHalfCpltCallback>:
 8002c2c:	4770      	bx	lr

08002c2e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c2e:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002c30:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002c32:	f7ff fffb 	bl	8002c2c <HAL_ADC_ConvHalfCpltCallback>
}
 8002c36:	bd10      	pop	{r4, pc}

08002c38 <HAL_ADC_LevelOutOfWindowCallback>:
 8002c38:	4770      	bx	lr

08002c3a <HAL_ADC_ErrorCallback>:
}
 8002c3a:	4770      	bx	lr

08002c3c <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c3c:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c3e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002c40:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c42:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002c44:	4313      	orrs	r3, r2
 8002c46:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c48:	2304      	movs	r3, #4
 8002c4a:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8002c50:	f7ff fff3 	bl	8002c3a <HAL_ADC_ErrorCallback>
}
 8002c54:	bd10      	pop	{r4, pc}
	...

08002c58 <HAL_ADC_IRQHandler>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002c58:	4b42      	ldr	r3, [pc, #264]	; (8002d64 <HAL_ADC_IRQHandler+0x10c>)
 8002c5a:	6802      	ldr	r2, [r0, #0]
{
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	0004      	movs	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d003      	beq.n	8002c6c <HAL_ADC_IRQHandler+0x14>
 8002c64:	4940      	ldr	r1, [pc, #256]	; (8002d68 <HAL_ADC_IRQHandler+0x110>)
 8002c66:	4841      	ldr	r0, [pc, #260]	; (8002d6c <HAL_ADC_IRQHandler+0x114>)
 8002c68:	f7ff f8eb 	bl	8001e42 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002c6c:	6a23      	ldr	r3, [r4, #32]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d903      	bls.n	8002c7a <HAL_ADC_IRQHandler+0x22>
 8002c72:	493f      	ldr	r1, [pc, #252]	; (8002d70 <HAL_ADC_IRQHandler+0x118>)
 8002c74:	483d      	ldr	r0, [pc, #244]	; (8002d6c <HAL_ADC_IRQHandler+0x114>)
 8002c76:	f7ff f8e4 	bl	8001e42 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	6963      	ldr	r3, [r4, #20]
 8002c7e:	3b04      	subs	r3, #4
 8002c80:	4393      	bics	r3, r2
 8002c82:	d004      	beq.n	8002c8e <HAL_ADC_IRQHandler+0x36>
 8002c84:	21af      	movs	r1, #175	; 0xaf
 8002c86:	4839      	ldr	r0, [pc, #228]	; (8002d6c <HAL_ADC_IRQHandler+0x114>)
 8002c88:	00c9      	lsls	r1, r1, #3
 8002c8a:	f7ff f8da 	bl	8001e42 <assert_failed>
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002c8e:	2204      	movs	r2, #4
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	6819      	ldr	r1, [r3, #0]
 8002c94:	4211      	tst	r1, r2
 8002c96:	d002      	beq.n	8002c9e <HAL_ADC_IRQHandler+0x46>
 8002c98:	6859      	ldr	r1, [r3, #4]
 8002c9a:	4211      	tst	r1, r2
 8002c9c:	d106      	bne.n	8002cac <HAL_ADC_IRQHandler+0x54>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002ca2:	4211      	tst	r1, r2
 8002ca4:	d028      	beq.n	8002cf8 <HAL_ADC_IRQHandler+0xa0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	4211      	tst	r1, r2
 8002caa:	d025      	beq.n	8002cf8 <HAL_ADC_IRQHandler+0xa0>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cac:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002cae:	06d2      	lsls	r2, r2, #27
 8002cb0:	d404      	bmi.n	8002cbc <HAL_ADC_IRQHandler+0x64>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002cb6:	0092      	lsls	r2, r2, #2
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cbc:	22c0      	movs	r2, #192	; 0xc0
 8002cbe:	68d9      	ldr	r1, [r3, #12]
 8002cc0:	0112      	lsls	r2, r2, #4
 8002cc2:	4211      	tst	r1, r2
 8002cc4:	d112      	bne.n	8002cec <HAL_ADC_IRQHandler+0x94>
 8002cc6:	6a22      	ldr	r2, [r4, #32]
 8002cc8:	2a00      	cmp	r2, #0
 8002cca:	d10f      	bne.n	8002cec <HAL_ADC_IRQHandler+0x94>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	0712      	lsls	r2, r2, #28
 8002cd0:	d50c      	bpl.n	8002cec <HAL_ADC_IRQHandler+0x94>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	0752      	lsls	r2, r2, #29
 8002cd6:	d43c      	bmi.n	8002d52 <HAL_ADC_IRQHandler+0xfa>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002cd8:	210c      	movs	r1, #12
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	438a      	bics	r2, r1
 8002cde:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002ce0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ce2:	4a24      	ldr	r2, [pc, #144]	; (8002d74 <HAL_ADC_IRQHandler+0x11c>)
 8002ce4:	401a      	ands	r2, r3
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8002cec:	0020      	movs	r0, r4
 8002cee:	f7ff ff63 	bl	8002bb8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002cf2:	220c      	movs	r2, #12
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002cf8:	2580      	movs	r5, #128	; 0x80
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	422a      	tst	r2, r5
 8002d00:	d00c      	beq.n	8002d1c <HAL_ADC_IRQHandler+0xc4>
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	422b      	tst	r3, r5
 8002d06:	d009      	beq.n	8002d1c <HAL_ADC_IRQHandler+0xc4>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002d0c:	025b      	lsls	r3, r3, #9
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d12:	0020      	movs	r0, r4
 8002d14:	f7ff ff90 	bl	8002c38 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002d18:	6823      	ldr	r3, [r4, #0]
 8002d1a:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	6819      	ldr	r1, [r3, #0]
 8002d22:	4211      	tst	r1, r2
 8002d24:	d014      	beq.n	8002d50 <HAL_ADC_IRQHandler+0xf8>
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	4211      	tst	r1, r2
 8002d2a:	d011      	beq.n	8002d50 <HAL_ADC_IRQHandler+0xf8>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002d2c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002d2e:	2a01      	cmp	r2, #1
 8002d30:	d002      	beq.n	8002d38 <HAL_ADC_IRQHandler+0xe0>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002d32:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002d34:	07d2      	lsls	r2, r2, #31
 8002d36:	d508      	bpl.n	8002d4a <HAL_ADC_IRQHandler+0xf2>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d38:	2202      	movs	r2, #2
 8002d3a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 8002d3c:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d42:	2210      	movs	r2, #16
 8002d44:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8002d46:	f7ff ff78 	bl	8002c3a <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	601a      	str	r2, [r3, #0]
}
 8002d50:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d52:	2320      	movs	r3, #32
 8002d54:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002d56:	4313      	orrs	r3, r2
 8002d58:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	64a3      	str	r3, [r4, #72]	; 0x48
 8002d62:	e7c3      	b.n	8002cec <HAL_ADC_IRQHandler+0x94>
 8002d64:	40012400 	.word	0x40012400
 8002d68:	00000576 	.word	0x00000576
 8002d6c:	08006435 	.word	0x08006435
 8002d70:	00000577 	.word	0x00000577
 8002d74:	fffffefe 	.word	0xfffffefe

08002d78 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8002d78:	2300      	movs	r3, #0
{
 8002d7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002d7c:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002d7e:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002d80:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_ADC_ConfigChannel+0x128>)
{
 8002d82:	0004      	movs	r4, r0
 8002d84:	000d      	movs	r5, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d003      	beq.n	8002d92 <HAL_ADC_ConfigChannel+0x1a>
 8002d8a:	4946      	ldr	r1, [pc, #280]	; (8002ea4 <HAL_ADC_ConfigChannel+0x12c>)
 8002d8c:	4846      	ldr	r0, [pc, #280]	; (8002ea8 <HAL_ADC_ConfigChannel+0x130>)
 8002d8e:	f7ff f858 	bl	8001e42 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002d92:	682b      	ldr	r3, [r5, #0]
 8002d94:	2b11      	cmp	r3, #17
 8002d96:	d903      	bls.n	8002da0 <HAL_ADC_ConfigChannel+0x28>
 8002d98:	4944      	ldr	r1, [pc, #272]	; (8002eac <HAL_ADC_ConfigChannel+0x134>)
 8002d9a:	4843      	ldr	r0, [pc, #268]	; (8002ea8 <HAL_ADC_ConfigChannel+0x130>)
 8002d9c:	f7ff f851 	bl	8001e42 <assert_failed>
  assert_param(IS_ADC_RANK(sConfig->Rank));
 8002da0:	686b      	ldr	r3, [r5, #4]
 8002da2:	4a43      	ldr	r2, [pc, #268]	; (8002eb0 <HAL_ADC_ConfigChannel+0x138>)
 8002da4:	189b      	adds	r3, r3, r2
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d903      	bls.n	8002db2 <HAL_ADC_ConfigChannel+0x3a>
 8002daa:	4942      	ldr	r1, [pc, #264]	; (8002eb4 <HAL_ADC_ConfigChannel+0x13c>)
 8002dac:	483e      	ldr	r0, [pc, #248]	; (8002ea8 <HAL_ADC_ConfigChannel+0x130>)
 8002dae:	f7ff f848 	bl	8001e42 <assert_failed>
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002db2:	2280      	movs	r2, #128	; 0x80
 8002db4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002db6:	0552      	lsls	r2, r2, #21
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00c      	beq.n	8002dd6 <HAL_ADC_ConfigChannel+0x5e>
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	2b06      	cmp	r3, #6
 8002dc0:	d909      	bls.n	8002dd6 <HAL_ADC_ConfigChannel+0x5e>
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002dc2:	68ab      	ldr	r3, [r5, #8]
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d006      	beq.n	8002dd6 <HAL_ADC_ConfigChannel+0x5e>
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	2b06      	cmp	r3, #6
 8002dcc:	d903      	bls.n	8002dd6 <HAL_ADC_ConfigChannel+0x5e>
 8002dce:	493a      	ldr	r1, [pc, #232]	; (8002eb8 <HAL_ADC_ConfigChannel+0x140>)
 8002dd0:	4835      	ldr	r0, [pc, #212]	; (8002ea8 <HAL_ADC_ConfigChannel+0x130>)
 8002dd2:	f7ff f836 	bl	8001e42 <assert_failed>
  __HAL_LOCK(hadc);
 8002dd6:	0026      	movs	r6, r4
 8002dd8:	3640      	adds	r6, #64	; 0x40
 8002dda:	7833      	ldrb	r3, [r6, #0]
 8002ddc:	2002      	movs	r0, #2
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d02a      	beq.n	8002e38 <HAL_ADC_ConfigChannel+0xc0>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002de2:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(hadc);
 8002de4:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002de6:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 8002de8:	7030      	strb	r0, [r6, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002dea:	0752      	lsls	r2, r2, #29
 8002dec:	d452      	bmi.n	8002e94 <HAL_ADC_ConfigChannel+0x11c>
    if (sConfig->Rank != ADC_RANK_NONE)
 8002dee:	4933      	ldr	r1, [pc, #204]	; (8002ebc <HAL_ADC_ConfigChannel+0x144>)
 8002df0:	686f      	ldr	r7, [r5, #4]
 8002df2:	682a      	ldr	r2, [r5, #0]
 8002df4:	428f      	cmp	r7, r1
 8002df6:	d03b      	beq.n	8002e70 <HAL_ADC_ConfigChannel+0xf8>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002df8:	4090      	lsls	r0, r2
 8002dfa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002dfc:	4308      	orrs	r0, r1
 8002dfe:	6298      	str	r0, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e00:	2080      	movs	r0, #128	; 0x80
 8002e02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002e04:	0540      	lsls	r0, r0, #21
 8002e06:	4281      	cmp	r1, r0
 8002e08:	d00f      	beq.n	8002e2a <HAL_ADC_ConfigChannel+0xb2>
 8002e0a:	3901      	subs	r1, #1
 8002e0c:	2906      	cmp	r1, #6
 8002e0e:	d90c      	bls.n	8002e2a <HAL_ADC_ConfigChannel+0xb2>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002e10:	2007      	movs	r0, #7
 8002e12:	695c      	ldr	r4, [r3, #20]
 8002e14:	68a9      	ldr	r1, [r5, #8]
 8002e16:	4004      	ands	r4, r0
 8002e18:	42a1      	cmp	r1, r4
 8002e1a:	d006      	beq.n	8002e2a <HAL_ADC_ConfigChannel+0xb2>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002e1c:	695c      	ldr	r4, [r3, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002e1e:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002e20:	4384      	bics	r4, r0
 8002e22:	615c      	str	r4, [r3, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002e24:	695c      	ldr	r4, [r3, #20]
 8002e26:	4321      	orrs	r1, r4
 8002e28:	6159      	str	r1, [r3, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e2a:	0013      	movs	r3, r2
 8002e2c:	3b10      	subs	r3, #16
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d903      	bls.n	8002e3a <HAL_ADC_ConfigChannel+0xc2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e32:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002e34:	2300      	movs	r3, #0
 8002e36:	7033      	strb	r3, [r6, #0]
}
 8002e38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002e3a:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <HAL_ADC_ConfigChannel+0x148>)
 8002e3c:	2180      	movs	r1, #128	; 0x80
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	2a10      	cmp	r2, #16
 8002e42:	d013      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0xf4>
 8002e44:	03c9      	lsls	r1, r1, #15
 8002e46:	4301      	orrs	r1, r0
 8002e48:	6019      	str	r1, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e4a:	2a10      	cmp	r2, #16
 8002e4c:	d1f1      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0xba>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <HAL_ADC_ConfigChannel+0x14c>)
 8002e50:	491d      	ldr	r1, [pc, #116]	; (8002ec8 <HAL_ADC_ConfigChannel+0x150>)
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	f7fd f962 	bl	800011c <__udivsi3>
 8002e58:	230a      	movs	r3, #10
 8002e5a:	4358      	muls	r0, r3
 8002e5c:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8002e5e:	9b01      	ldr	r3, [sp, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0e6      	beq.n	8002e32 <HAL_ADC_ConfigChannel+0xba>
            wait_loop_index--;
 8002e64:	9b01      	ldr	r3, [sp, #4]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	e7f8      	b.n	8002e5e <HAL_ADC_ConfigChannel+0xe6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002e6c:	0409      	lsls	r1, r1, #16
 8002e6e:	e7ea      	b.n	8002e46 <HAL_ADC_ConfigChannel+0xce>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002e70:	4090      	lsls	r0, r2
 8002e72:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002e74:	4381      	bics	r1, r0
 8002e76:	6299      	str	r1, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e78:	0013      	movs	r3, r2
 8002e7a:	3b10      	subs	r3, #16
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d8d8      	bhi.n	8002e32 <HAL_ADC_ConfigChannel+0xba>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <HAL_ADC_ConfigChannel+0x148>)
 8002e82:	6819      	ldr	r1, [r3, #0]
 8002e84:	2a10      	cmp	r2, #16
 8002e86:	d003      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x118>
 8002e88:	4a10      	ldr	r2, [pc, #64]	; (8002ecc <HAL_ADC_ConfigChannel+0x154>)
 8002e8a:	400a      	ands	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	e7d0      	b.n	8002e32 <HAL_ADC_ConfigChannel+0xba>
 8002e90:	4a0f      	ldr	r2, [pc, #60]	; (8002ed0 <HAL_ADC_ConfigChannel+0x158>)
 8002e92:	e7fa      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x112>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e94:	2320      	movs	r3, #32
 8002e96:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	6463      	str	r3, [r4, #68]	; 0x44
 8002e9c:	e7ca      	b.n	8002e34 <HAL_ADC_ConfigChannel+0xbc>
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	40012400 	.word	0x40012400
 8002ea4:	00000651 	.word	0x00000651
 8002ea8:	08006435 	.word	0x08006435
 8002eac:	00000652 	.word	0x00000652
 8002eb0:	fffff000 	.word	0xfffff000
 8002eb4:	00000653 	.word	0x00000653
 8002eb8:	00000657 	.word	0x00000657
 8002ebc:	00001001 	.word	0x00001001
 8002ec0:	40012708 	.word	0x40012708
 8002ec4:	20000234 	.word	0x20000234
 8002ec8:	000f4240 	.word	0x000f4240
 8002ecc:	ffbfffff 	.word	0xffbfffff
 8002ed0:	ff7fffff 	.word	0xff7fffff

08002ed4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ed4:	b570      	push	{r4, r5, r6, lr}
 8002ed6:	0004      	movs	r4, r0
 8002ed8:	000d      	movs	r5, r1
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002eda:	2903      	cmp	r1, #3
 8002edc:	d903      	bls.n	8002ee6 <HAL_NVIC_SetPriority+0x12>
 8002ede:	219b      	movs	r1, #155	; 0x9b
 8002ee0:	4816      	ldr	r0, [pc, #88]	; (8002f3c <HAL_NVIC_SetPriority+0x68>)
 8002ee2:	f7fe ffae 	bl	8001e42 <assert_failed>
 8002ee6:	01a9      	lsls	r1, r5, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8002ee8:	2c00      	cmp	r4, #0
 8002eea:	da14      	bge.n	8002f16 <HAL_NVIC_SetPriority+0x42>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eec:	230f      	movs	r3, #15
 8002eee:	b2e4      	uxtb	r4, r4
 8002ef0:	4023      	ands	r3, r4
 8002ef2:	3b08      	subs	r3, #8
 8002ef4:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <HAL_NVIC_SetPriority+0x6c>)
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	189b      	adds	r3, r3, r2
 8002efc:	2203      	movs	r2, #3
 8002efe:	4014      	ands	r4, r2
 8002f00:	4094      	lsls	r4, r2
 8002f02:	32fc      	adds	r2, #252	; 0xfc
 8002f04:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f06:	400a      	ands	r2, r1
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f08:	40a5      	lsls	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f0a:	40a2      	lsls	r2, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f0c:	69d8      	ldr	r0, [r3, #28]
 8002f0e:	43a8      	bics	r0, r5
 8002f10:	4302      	orrs	r2, r0
 8002f12:	61da      	str	r2, [r3, #28]
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002f14:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f16:	2503      	movs	r5, #3
 8002f18:	08a3      	lsrs	r3, r4, #2
 8002f1a:	402c      	ands	r4, r5
 8002f1c:	40ac      	lsls	r4, r5
 8002f1e:	35fc      	adds	r5, #252	; 0xfc
 8002f20:	002e      	movs	r6, r5
 8002f22:	4a08      	ldr	r2, [pc, #32]	; (8002f44 <HAL_NVIC_SetPriority+0x70>)
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	189b      	adds	r3, r3, r2
 8002f28:	22c0      	movs	r2, #192	; 0xc0
 8002f2a:	40a6      	lsls	r6, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f2c:	4029      	ands	r1, r5
 8002f2e:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f30:	0092      	lsls	r2, r2, #2
 8002f32:	5898      	ldr	r0, [r3, r2]
 8002f34:	43b0      	bics	r0, r6
 8002f36:	4301      	orrs	r1, r0
 8002f38:	5099      	str	r1, [r3, r2]
 8002f3a:	e7eb      	b.n	8002f14 <HAL_NVIC_SetPriority+0x40>
 8002f3c:	0800646d 	.word	0x0800646d
 8002f40:	e000ed00 	.word	0xe000ed00
 8002f44:	e000e100 	.word	0xe000e100

08002f48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f48:	b510      	push	{r4, lr}
 8002f4a:	1e04      	subs	r4, r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002f4c:	da03      	bge.n	8002f56 <HAL_NVIC_EnableIRQ+0xe>
 8002f4e:	21ab      	movs	r1, #171	; 0xab
 8002f50:	4804      	ldr	r0, [pc, #16]	; (8002f64 <HAL_NVIC_EnableIRQ+0x1c>)
 8002f52:	f7fe ff76 	bl	8001e42 <assert_failed>
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002f56:	231f      	movs	r3, #31
 8002f58:	401c      	ands	r4, r3
 8002f5a:	3b1e      	subs	r3, #30
 8002f5c:	40a3      	lsls	r3, r4
 8002f5e:	4a02      	ldr	r2, [pc, #8]	; (8002f68 <HAL_NVIC_EnableIRQ+0x20>)
 8002f60:	6013      	str	r3, [r2, #0]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002f62:	bd10      	pop	{r4, pc}
 8002f64:	0800646d 	.word	0x0800646d
 8002f68:	e000e100 	.word	0xe000e100

08002f6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f6c:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <HAL_SYSTICK_Config+0x28>)
 8002f6e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f70:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d80d      	bhi.n	8002f92 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f76:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f78:	4a07      	ldr	r2, [pc, #28]	; (8002f98 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f7a:	4808      	ldr	r0, [pc, #32]	; (8002f9c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f7c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f7e:	6a03      	ldr	r3, [r0, #32]
 8002f80:	0609      	lsls	r1, r1, #24
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	0a1b      	lsrs	r3, r3, #8
 8002f86:	430b      	orrs	r3, r1
 8002f88:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f8a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f8c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f8e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f90:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002f92:	4770      	bx	lr
 8002f94:	00ffffff 	.word	0x00ffffff
 8002f98:	e000e010 	.word	0xe000e010
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and initialize the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	1e04      	subs	r4, r0, #0
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8002fa4:	d102      	bne.n	8002fac <HAL_CRC_Init+0xc>
  {
    return HAL_ERROR;
 8002fa6:	2501      	movs	r5, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 8002fa8:	0028      	movs	r0, r5
 8002faa:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8002fac:	4b27      	ldr	r3, [pc, #156]	; (800304c <HAL_CRC_Init+0xac>)
 8002fae:	6802      	ldr	r2, [r0, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d003      	beq.n	8002fbc <HAL_CRC_Init+0x1c>
 8002fb4:	2180      	movs	r1, #128	; 0x80
 8002fb6:	4826      	ldr	r0, [pc, #152]	; (8003050 <HAL_CRC_Init+0xb0>)
 8002fb8:	f7fe ff43 	bl	8001e42 <assert_failed>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 8002fbc:	7f63      	ldrb	r3, [r4, #29]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d103      	bne.n	8002fcc <HAL_CRC_Init+0x2c>
    hcrc->Lock = HAL_UNLOCKED;
 8002fc4:	7723      	strb	r3, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 8002fc6:	0020      	movs	r0, r4
 8002fc8:	f7fe f80e 	bl	8000fe8 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8002fcc:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8002fce:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8002fd0:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8002fd2:	f000 f83f 	bl	8003054 <HAL_CRCEx_Init>
 8002fd6:	1e05      	subs	r5, r0, #0
 8002fd8:	d1e5      	bne.n	8002fa6 <HAL_CRC_Init+0x6>
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8002fda:	7963      	ldrb	r3, [r4, #5]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d903      	bls.n	8002fe8 <HAL_CRC_Init+0x48>
 8002fe0:	2199      	movs	r1, #153	; 0x99
 8002fe2:	481b      	ldr	r0, [pc, #108]	; (8003050 <HAL_CRC_Init+0xb0>)
 8002fe4:	f7fe ff2d 	bl	8001e42 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002fe8:	7962      	ldrb	r2, [r4, #5]
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	2a00      	cmp	r2, #0
 8002fee:	d12a      	bne.n	8003046 <HAL_CRC_Init+0xa6>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8002ff0:	3a01      	subs	r2, #1
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002ff2:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
 8002ff4:	2360      	movs	r3, #96	; 0x60
 8002ff6:	6962      	ldr	r2, [r4, #20]
 8002ff8:	439a      	bics	r2, r3
 8002ffa:	d003      	beq.n	8003004 <HAL_CRC_Init+0x64>
 8002ffc:	21a5      	movs	r1, #165	; 0xa5
 8002ffe:	4814      	ldr	r0, [pc, #80]	; (8003050 <HAL_CRC_Init+0xb0>)
 8003000:	f7fe ff1f 	bl	8001e42 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8003004:	2160      	movs	r1, #96	; 0x60
 8003006:	6822      	ldr	r2, [r4, #0]
 8003008:	6893      	ldr	r3, [r2, #8]
 800300a:	438b      	bics	r3, r1
 800300c:	6961      	ldr	r1, [r4, #20]
 800300e:	430b      	orrs	r3, r1
 8003010:	6093      	str	r3, [r2, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	69a2      	ldr	r2, [r4, #24]
 8003016:	439a      	bics	r2, r3
 8003018:	d003      	beq.n	8003022 <HAL_CRC_Init+0x82>
 800301a:	21a9      	movs	r1, #169	; 0xa9
 800301c:	480c      	ldr	r0, [pc, #48]	; (8003050 <HAL_CRC_Init+0xb0>)
 800301e:	f7fe ff10 	bl	8001e42 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8003022:	2180      	movs	r1, #128	; 0x80
 8003024:	6822      	ldr	r2, [r4, #0]
 8003026:	6893      	ldr	r3, [r2, #8]
 8003028:	438b      	bics	r3, r1
 800302a:	69a1      	ldr	r1, [r4, #24]
 800302c:	430b      	orrs	r3, r1
 800302e:	6093      	str	r3, [r2, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8003030:	6a23      	ldr	r3, [r4, #32]
 8003032:	3b01      	subs	r3, #1
 8003034:	2b02      	cmp	r3, #2
 8003036:	d903      	bls.n	8003040 <HAL_CRC_Init+0xa0>
 8003038:	21ae      	movs	r1, #174	; 0xae
 800303a:	4805      	ldr	r0, [pc, #20]	; (8003050 <HAL_CRC_Init+0xb0>)
 800303c:	f7fe ff01 	bl	8001e42 <assert_failed>
  hcrc->State = HAL_CRC_STATE_READY;
 8003040:	2301      	movs	r3, #1
 8003042:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8003044:	e7b0      	b.n	8002fa8 <HAL_CRC_Init+0x8>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003046:	6922      	ldr	r2, [r4, #16]
 8003048:	e7d3      	b.n	8002ff2 <HAL_CRC_Init+0x52>
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	40023000 	.word	0x40023000
 8003050:	080064a8 	.word	0x080064a8

08003054 <HAL_CRCEx_Init>:
    }
  }
#endif /* defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F091xC) || defined (STM32F098xx) */    

   return HAL_OK;
}
 8003054:	2000      	movs	r0, #0
 8003056:	4770      	bx	lr

08003058 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003058:	b570      	push	{r4, r5, r6, lr}
 800305a:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 800305c:	2001      	movs	r0, #1
  if(NULL == hdma)
 800305e:	2c00      	cmp	r4, #0
 8003060:	d100      	bne.n	8003064 <HAL_DMA_Init+0xc>
 8003062:	e081      	b.n	8003168 <HAL_DMA_Init+0x110>
  }
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	4a41      	ldr	r2, [pc, #260]	; (800316c <HAL_DMA_Init+0x114>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00f      	beq.n	800308c <HAL_DMA_Init+0x34>
 800306c:	4a40      	ldr	r2, [pc, #256]	; (8003170 <HAL_DMA_Init+0x118>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00c      	beq.n	800308c <HAL_DMA_Init+0x34>
 8003072:	4a40      	ldr	r2, [pc, #256]	; (8003174 <HAL_DMA_Init+0x11c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d009      	beq.n	800308c <HAL_DMA_Init+0x34>
 8003078:	4a3f      	ldr	r2, [pc, #252]	; (8003178 <HAL_DMA_Init+0x120>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d006      	beq.n	800308c <HAL_DMA_Init+0x34>
 800307e:	4a3f      	ldr	r2, [pc, #252]	; (800317c <HAL_DMA_Init+0x124>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d003      	beq.n	800308c <HAL_DMA_Init+0x34>
 8003084:	21a5      	movs	r1, #165	; 0xa5
 8003086:	483e      	ldr	r0, [pc, #248]	; (8003180 <HAL_DMA_Init+0x128>)
 8003088:	f7fe fedb 	bl	8001e42 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800308c:	6863      	ldr	r3, [r4, #4]
 800308e:	2210      	movs	r2, #16
 8003090:	0019      	movs	r1, r3
 8003092:	4391      	bics	r1, r2
 8003094:	d007      	beq.n	80030a6 <HAL_DMA_Init+0x4e>
 8003096:	2280      	movs	r2, #128	; 0x80
 8003098:	01d2      	lsls	r2, r2, #7
 800309a:	4293      	cmp	r3, r2
 800309c:	d003      	beq.n	80030a6 <HAL_DMA_Init+0x4e>
 800309e:	21a6      	movs	r1, #166	; 0xa6
 80030a0:	4837      	ldr	r0, [pc, #220]	; (8003180 <HAL_DMA_Init+0x128>)
 80030a2:	f7fe fece 	bl	8001e42 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80030a6:	2340      	movs	r3, #64	; 0x40
 80030a8:	68a2      	ldr	r2, [r4, #8]
 80030aa:	439a      	bics	r2, r3
 80030ac:	d003      	beq.n	80030b6 <HAL_DMA_Init+0x5e>
 80030ae:	21a7      	movs	r1, #167	; 0xa7
 80030b0:	4833      	ldr	r0, [pc, #204]	; (8003180 <HAL_DMA_Init+0x128>)
 80030b2:	f7fe fec6 	bl	8001e42 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	68e2      	ldr	r2, [r4, #12]
 80030ba:	439a      	bics	r2, r3
 80030bc:	d003      	beq.n	80030c6 <HAL_DMA_Init+0x6e>
 80030be:	21a8      	movs	r1, #168	; 0xa8
 80030c0:	482f      	ldr	r0, [pc, #188]	; (8003180 <HAL_DMA_Init+0x128>)
 80030c2:	f7fe febe 	bl	8001e42 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80030c6:	6923      	ldr	r3, [r4, #16]
 80030c8:	4a2e      	ldr	r2, [pc, #184]	; (8003184 <HAL_DMA_Init+0x12c>)
 80030ca:	4213      	tst	r3, r2
 80030cc:	d007      	beq.n	80030de <HAL_DMA_Init+0x86>
 80030ce:	2280      	movs	r2, #128	; 0x80
 80030d0:	0092      	lsls	r2, r2, #2
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d003      	beq.n	80030de <HAL_DMA_Init+0x86>
 80030d6:	21a9      	movs	r1, #169	; 0xa9
 80030d8:	4829      	ldr	r0, [pc, #164]	; (8003180 <HAL_DMA_Init+0x128>)
 80030da:	f7fe feb2 	bl	8001e42 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80030de:	6963      	ldr	r3, [r4, #20]
 80030e0:	4a29      	ldr	r2, [pc, #164]	; (8003188 <HAL_DMA_Init+0x130>)
 80030e2:	4213      	tst	r3, r2
 80030e4:	d007      	beq.n	80030f6 <HAL_DMA_Init+0x9e>
 80030e6:	2280      	movs	r2, #128	; 0x80
 80030e8:	0112      	lsls	r2, r2, #4
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d003      	beq.n	80030f6 <HAL_DMA_Init+0x9e>
 80030ee:	21aa      	movs	r1, #170	; 0xaa
 80030f0:	4823      	ldr	r0, [pc, #140]	; (8003180 <HAL_DMA_Init+0x128>)
 80030f2:	f7fe fea6 	bl	8001e42 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80030f6:	2320      	movs	r3, #32
 80030f8:	69a2      	ldr	r2, [r4, #24]
 80030fa:	439a      	bics	r2, r3
 80030fc:	d003      	beq.n	8003106 <HAL_DMA_Init+0xae>
 80030fe:	21ab      	movs	r1, #171	; 0xab
 8003100:	481f      	ldr	r0, [pc, #124]	; (8003180 <HAL_DMA_Init+0x128>)
 8003102:	f7fe fe9e 	bl	8001e42 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003106:	4b21      	ldr	r3, [pc, #132]	; (800318c <HAL_DMA_Init+0x134>)
 8003108:	69e2      	ldr	r2, [r4, #28]
 800310a:	421a      	tst	r2, r3
 800310c:	d003      	beq.n	8003116 <HAL_DMA_Init+0xbe>
 800310e:	21ac      	movs	r1, #172	; 0xac
 8003110:	481b      	ldr	r0, [pc, #108]	; (8003180 <HAL_DMA_Init+0x128>)
 8003112:	f7fe fe96 	bl	8001e42 <assert_failed>
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003116:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003118:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800311a:	1ca5      	adds	r5, r4, #2
 800311c:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 800311e:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003120:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <HAL_DMA_Init+0x138>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003122:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003124:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8003126:	6863      	ldr	r3, [r4, #4]
 8003128:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800312a:	68e1      	ldr	r1, [r4, #12]
 800312c:	430b      	orrs	r3, r1
 800312e:	6921      	ldr	r1, [r4, #16]
 8003130:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003132:	6961      	ldr	r1, [r4, #20]
 8003134:	430b      	orrs	r3, r1
 8003136:	69a1      	ldr	r1, [r4, #24]
 8003138:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800313a:	69e1      	ldr	r1, [r4, #28]
 800313c:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 800313e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003140:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <HAL_DMA_Init+0x13c>)
 8003144:	2114      	movs	r1, #20
 8003146:	18c0      	adds	r0, r0, r3
 8003148:	f7fc ffe8 	bl	800011c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 800314c:	4b12      	ldr	r3, [pc, #72]	; (8003198 <HAL_DMA_Init+0x140>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800314e:	0080      	lsls	r0, r0, #2
 8003150:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003152:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8003154:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003156:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 8003158:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800315a:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800315c:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800315e:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003160:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8003162:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8003164:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8003166:	77e0      	strb	r0, [r4, #31]
}  
 8003168:	bd70      	pop	{r4, r5, r6, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	40020008 	.word	0x40020008
 8003170:	4002001c 	.word	0x4002001c
 8003174:	40020030 	.word	0x40020030
 8003178:	40020044 	.word	0x40020044
 800317c:	40020058 	.word	0x40020058
 8003180:	080064e0 	.word	0x080064e0
 8003184:	fffffeff 	.word	0xfffffeff
 8003188:	fffffbff 	.word	0xfffffbff
 800318c:	ffffcfff 	.word	0xffffcfff
 8003190:	ffffc00f 	.word	0xffffc00f
 8003194:	bffdfff8 	.word	0xbffdfff8
 8003198:	40020000 	.word	0x40020000

0800319c <HAL_DMA_Start_IT>:
{
 800319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319e:	0015      	movs	r5, r2
 80031a0:	001f      	movs	r7, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80031a2:	1e5a      	subs	r2, r3, #1
 80031a4:	4b21      	ldr	r3, [pc, #132]	; (800322c <HAL_DMA_Start_IT+0x90>)
{
 80031a6:	0004      	movs	r4, r0
 80031a8:	000e      	movs	r6, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d904      	bls.n	80031b8 <HAL_DMA_Start_IT+0x1c>
 80031ae:	21af      	movs	r1, #175	; 0xaf
 80031b0:	481f      	ldr	r0, [pc, #124]	; (8003230 <HAL_DMA_Start_IT+0x94>)
 80031b2:	0049      	lsls	r1, r1, #1
 80031b4:	f7fe fe45 	bl	8001e42 <assert_failed>
  __HAL_LOCK(hdma);
 80031b8:	1c63      	adds	r3, r4, #1
 80031ba:	7fda      	ldrb	r2, [r3, #31]
 80031bc:	2002      	movs	r0, #2
 80031be:	2a01      	cmp	r2, #1
 80031c0:	d026      	beq.n	8003210 <HAL_DMA_Start_IT+0x74>
 80031c2:	2201      	movs	r2, #1
 80031c4:	77da      	strb	r2, [r3, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 80031c6:	1822      	adds	r2, r4, r0
 80031c8:	4694      	mov	ip, r2
 80031ca:	7fd2      	ldrb	r2, [r2, #31]
 80031cc:	2100      	movs	r1, #0
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	2a01      	cmp	r2, #1
 80031d2:	d128      	bne.n	8003226 <HAL_DMA_Start_IT+0x8a>
  	hdma->State = HAL_DMA_STATE_BUSY;
 80031d4:	4663      	mov	r3, ip
 80031d6:	77d8      	strb	r0, [r3, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80031d8:	6823      	ldr	r3, [r4, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031da:	63a1      	str	r1, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80031dc:	6819      	ldr	r1, [r3, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80031de:	6c20      	ldr	r0, [r4, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80031e0:	4391      	bics	r1, r2
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80031e2:	4082      	lsls	r2, r0
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80031e4:	6019      	str	r1, [r3, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80031e6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80031e8:	604a      	str	r2, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031ea:	6862      	ldr	r2, [r4, #4]
  hdma->Instance->CNDTR = DataLength;
 80031ec:	605f      	str	r7, [r3, #4]
 80031ee:	6821      	ldr	r1, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031f0:	2a10      	cmp	r2, #16
 80031f2:	d10e      	bne.n	8003212 <HAL_DMA_Start_IT+0x76>
    hdma->Instance->CPAR = DstAddress;
 80031f4:	609d      	str	r5, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80031f6:	60de      	str	r6, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80031f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80031fa:	6818      	ldr	r0, [r3, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 80031fc:	2a00      	cmp	r2, #0
 80031fe:	d00b      	beq.n	8003218 <HAL_DMA_Start_IT+0x7c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003200:	220e      	movs	r2, #14
 8003202:	4302      	orrs	r2, r0
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003204:	601a      	str	r2, [r3, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003206:	2301      	movs	r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8003208:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800320a:	680a      	ldr	r2, [r1, #0]
 800320c:	4313      	orrs	r3, r2
 800320e:	600b      	str	r3, [r1, #0]
} 
 8003210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8003212:	609e      	str	r6, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003214:	60dd      	str	r5, [r3, #12]
 8003216:	e7ef      	b.n	80031f8 <HAL_DMA_Start_IT+0x5c>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003218:	220a      	movs	r2, #10
 800321a:	4302      	orrs	r2, r0
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800321c:	2004      	movs	r0, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800321e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4382      	bics	r2, r0
 8003224:	e7ee      	b.n	8003204 <HAL_DMA_Start_IT+0x68>
    __HAL_UNLOCK(hdma); 
 8003226:	77d9      	strb	r1, [r3, #31]
 8003228:	e7f2      	b.n	8003210 <HAL_DMA_Start_IT+0x74>
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	0000fffe 	.word	0x0000fffe
 8003230:	080064e0 	.word	0x080064e0

08003234 <HAL_DMA_Abort_IT>:
{  
 8003234:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003236:	1c84      	adds	r4, r0, #2
 8003238:	7fe3      	ldrb	r3, [r4, #31]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d004      	beq.n	8003248 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800323e:	2304      	movs	r3, #4
 8003240:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8003242:	3b03      	subs	r3, #3
}
 8003244:	0018      	movs	r0, r3
 8003246:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003248:	210e      	movs	r1, #14
 800324a:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800324c:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	438a      	bics	r2, r1
 8003252:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003254:	2201      	movs	r2, #1
 8003256:	6819      	ldr	r1, [r3, #0]
 8003258:	4391      	bics	r1, r2
 800325a:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800325c:	0011      	movs	r1, r2
 800325e:	40a9      	lsls	r1, r5
 8003260:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003262:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003264:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8003266:	2400      	movs	r4, #0
 8003268:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 800326a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800326c:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 800326e:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8003270:	42a2      	cmp	r2, r4
 8003272:	d0e7      	beq.n	8003244 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8003274:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003276:	0023      	movs	r3, r4
 8003278:	e7e4      	b.n	8003244 <HAL_DMA_Abort_IT+0x10>

0800327a <HAL_DMA_IRQHandler>:
{
 800327a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800327c:	2704      	movs	r7, #4
 800327e:	003e      	movs	r6, r7
 8003280:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003282:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003284:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003286:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003288:	6803      	ldr	r3, [r0, #0]
 800328a:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800328c:	422e      	tst	r6, r5
 800328e:	d00d      	beq.n	80032ac <HAL_DMA_IRQHandler+0x32>
 8003290:	423c      	tst	r4, r7
 8003292:	d00b      	beq.n	80032ac <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003294:	6819      	ldr	r1, [r3, #0]
 8003296:	0689      	lsls	r1, r1, #26
 8003298:	d402      	bmi.n	80032a0 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800329a:	6819      	ldr	r1, [r3, #0]
 800329c:	43b9      	bics	r1, r7
 800329e:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80032a0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80032a2:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d019      	beq.n	80032dc <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 80032a8:	4798      	blx	r3
}  
 80032aa:	e017      	b.n	80032dc <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80032ac:	2702      	movs	r7, #2
 80032ae:	003e      	movs	r6, r7
 80032b0:	408e      	lsls	r6, r1
 80032b2:	422e      	tst	r6, r5
 80032b4:	d013      	beq.n	80032de <HAL_DMA_IRQHandler+0x64>
 80032b6:	423c      	tst	r4, r7
 80032b8:	d011      	beq.n	80032de <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032ba:	6819      	ldr	r1, [r3, #0]
 80032bc:	0689      	lsls	r1, r1, #26
 80032be:	d406      	bmi.n	80032ce <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80032c0:	240a      	movs	r4, #10
 80032c2:	6819      	ldr	r1, [r3, #0]
 80032c4:	43a1      	bics	r1, r4
 80032c6:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80032c8:	2101      	movs	r1, #1
 80032ca:	19c3      	adds	r3, r0, r7
 80032cc:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80032ce:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 80032d0:	2200      	movs	r2, #0
 80032d2:	1c43      	adds	r3, r0, #1
 80032d4:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 80032d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d1e5      	bne.n	80032a8 <HAL_DMA_IRQHandler+0x2e>
}  
 80032dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80032de:	2608      	movs	r6, #8
 80032e0:	0037      	movs	r7, r6
 80032e2:	408f      	lsls	r7, r1
 80032e4:	423d      	tst	r5, r7
 80032e6:	d0f9      	beq.n	80032dc <HAL_DMA_IRQHandler+0x62>
 80032e8:	4234      	tst	r4, r6
 80032ea:	d0f7      	beq.n	80032dc <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80032ec:	250e      	movs	r5, #14
 80032ee:	681c      	ldr	r4, [r3, #0]
 80032f0:	43ac      	bics	r4, r5
 80032f2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80032f4:	2301      	movs	r3, #1
 80032f6:	001c      	movs	r4, r3
 80032f8:	408c      	lsls	r4, r1
 80032fa:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 80032fc:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032fe:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8003300:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8003302:	2200      	movs	r2, #0
 8003304:	18c3      	adds	r3, r0, r3
 8003306:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8003308:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800330a:	e7e5      	b.n	80032d8 <HAL_DMA_IRQHandler+0x5e>

0800330c <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800330c:	2110      	movs	r1, #16
 800330e:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <FLASH_SetErrorCode+0x34>)
{
 8003310:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003312:	68d8      	ldr	r0, [r3, #12]
  uint32_t flags = 0U;
 8003314:	2200      	movs	r2, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003316:	4208      	tst	r0, r1
 8003318:	d005      	beq.n	8003326 <FLASH_SetErrorCode+0x1a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800331a:	480a      	ldr	r0, [pc, #40]	; (8003344 <FLASH_SetErrorCode+0x38>)
 800331c:	3202      	adds	r2, #2
 800331e:	69c4      	ldr	r4, [r0, #28]
 8003320:	4322      	orrs	r2, r4
 8003322:	61c2      	str	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 8003324:	000a      	movs	r2, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003326:	2004      	movs	r0, #4
 8003328:	68d9      	ldr	r1, [r3, #12]
 800332a:	4201      	tst	r1, r0
 800332c:	d005      	beq.n	800333a <FLASH_SetErrorCode+0x2e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800332e:	2101      	movs	r1, #1
 8003330:	4c04      	ldr	r4, [pc, #16]	; (8003344 <FLASH_SetErrorCode+0x38>)
    flags |= FLASH_FLAG_PGERR;
 8003332:	4302      	orrs	r2, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003334:	69e5      	ldr	r5, [r4, #28]
 8003336:	4329      	orrs	r1, r5
 8003338:	61e1      	str	r1, [r4, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800333a:	60da      	str	r2, [r3, #12]
}  
 800333c:	bd30      	pop	{r4, r5, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	40022000 	.word	0x40022000
 8003344:	200006a8 	.word	0x200006a8

08003348 <HAL_FLASH_EndOfOperationCallback>:
 8003348:	4770      	bx	lr

0800334a <HAL_FLASH_OperationErrorCallback>:
}
 800334a:	4770      	bx	lr

0800334c <HAL_FLASH_IRQHandler>:
{
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800334e:	4d43      	ldr	r5, [pc, #268]	; (800345c <HAL_FLASH_IRQHandler+0x110>)
 8003350:	4c43      	ldr	r4, [pc, #268]	; (8003460 <HAL_FLASH_IRQHandler+0x114>)
 8003352:	68eb      	ldr	r3, [r5, #12]
 8003354:	06db      	lsls	r3, r3, #27
 8003356:	d402      	bmi.n	800335e <HAL_FLASH_IRQHandler+0x12>
 8003358:	68eb      	ldr	r3, [r5, #12]
 800335a:	075b      	lsls	r3, r3, #29
 800335c:	d50a      	bpl.n	8003374 <HAL_FLASH_IRQHandler+0x28>
    pFlash.Address = 0xFFFFFFFFU;
 800335e:	2301      	movs	r3, #1
    addresstmp = pFlash.Address;
 8003360:	68a6      	ldr	r6, [r4, #8]
    pFlash.Address = 0xFFFFFFFFU;
 8003362:	425b      	negs	r3, r3
 8003364:	60a3      	str	r3, [r4, #8]
    FLASH_SetErrorCode();
 8003366:	f7ff ffd1 	bl	800330c <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800336a:	0030      	movs	r0, r6
 800336c:	f7ff ffed 	bl	800334a <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003370:	2300      	movs	r3, #0
 8003372:	7023      	strb	r3, [r4, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003374:	2320      	movs	r3, #32
 8003376:	68ea      	ldr	r2, [r5, #12]
 8003378:	421a      	tst	r2, r3
 800337a:	d01a      	beq.n	80033b2 <HAL_FLASH_IRQHandler+0x66>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800337c:	60eb      	str	r3, [r5, #12]
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 800337e:	7823      	ldrb	r3, [r4, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d016      	beq.n	80033b2 <HAL_FLASH_IRQHandler+0x66>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8003384:	7823      	ldrb	r3, [r4, #0]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d128      	bne.n	80033dc <HAL_FLASH_IRQHandler+0x90>
        pFlash.DataRemaining--;
 800338a:	6863      	ldr	r3, [r4, #4]
 800338c:	3b01      	subs	r3, #1
 800338e:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 8003390:	6863      	ldr	r3, [r4, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01b      	beq.n	80033ce <HAL_FLASH_IRQHandler+0x82>
          addresstmp = pFlash.Address;
 8003396:	68a0      	ldr	r0, [r4, #8]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003398:	f7ff ffd6 	bl	8003348 <HAL_FLASH_EndOfOperationCallback>
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 800339c:	2380      	movs	r3, #128	; 0x80
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800339e:	2202      	movs	r2, #2
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 80033a0:	68a0      	ldr	r0, [r4, #8]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	18c0      	adds	r0, r0, r3
          pFlash.Address = addresstmp;
 80033a6:	60a0      	str	r0, [r4, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80033a8:	692b      	ldr	r3, [r5, #16]
 80033aa:	4393      	bics	r3, r2
 80033ac:	612b      	str	r3, [r5, #16]
          FLASH_PageErase(addresstmp);
 80033ae:	f000 f85b 	bl	8003468 <FLASH_PageErase>
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80033b2:	7823      	ldrb	r3, [r4, #0]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d108      	bne.n	80033cc <HAL_FLASH_IRQHandler+0x80>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 80033ba:	2107      	movs	r1, #7
 80033bc:	692a      	ldr	r2, [r5, #16]
 80033be:	438a      	bics	r2, r1
 80033c0:	612a      	str	r2, [r5, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 80033c2:	692a      	ldr	r2, [r5, #16]
 80033c4:	4927      	ldr	r1, [pc, #156]	; (8003464 <HAL_FLASH_IRQHandler+0x118>)
 80033c6:	400a      	ands	r2, r1
 80033c8:	612a      	str	r2, [r5, #16]
    __HAL_UNLOCK(&pFlash);
 80033ca:	7623      	strb	r3, [r4, #24]
}
 80033cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 80033ce:	2001      	movs	r0, #1
 80033d0:	4240      	negs	r0, r0
 80033d2:	60a0      	str	r0, [r4, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80033d4:	7023      	strb	r3, [r4, #0]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80033d6:	f7ff ffb7 	bl	8003348 <HAL_FLASH_EndOfOperationCallback>
 80033da:	e7ea      	b.n	80033b2 <HAL_FLASH_IRQHandler+0x66>
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80033dc:	7823      	ldrb	r3, [r4, #0]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d109      	bne.n	80033f6 <HAL_FLASH_IRQHandler+0xaa>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80033e2:	2204      	movs	r2, #4
 80033e4:	692b      	ldr	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0);
 80033e6:	2000      	movs	r0, #0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80033e8:	4393      	bics	r3, r2
 80033ea:	612b      	str	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0);
 80033ec:	f7ff ffac 	bl	8003348 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	7023      	strb	r3, [r4, #0]
 80033f4:	e7dd      	b.n	80033b2 <HAL_FLASH_IRQHandler+0x66>
        pFlash.DataRemaining--;
 80033f6:	6863      	ldr	r3, [r4, #4]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 80033fc:	6863      	ldr	r3, [r4, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d019      	beq.n	8003436 <HAL_FLASH_IRQHandler+0xea>
          pFlash.Address += 2;
 8003402:	68a3      	ldr	r3, [r4, #8]
 8003404:	3302      	adds	r3, #2
 8003406:	60a3      	str	r3, [r4, #8]
          addresstmp = pFlash.Address;
 8003408:	68a6      	ldr	r6, [r4, #8]
          pFlash.Data = (pFlash.Data >> 16U);
 800340a:	6920      	ldr	r0, [r4, #16]
 800340c:	6961      	ldr	r1, [r4, #20]
 800340e:	0c0b      	lsrs	r3, r1, #16
 8003410:	040f      	lsls	r7, r1, #16
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003412:	2101      	movs	r1, #1
          pFlash.Data = (pFlash.Data >> 16U);
 8003414:	0c02      	lsrs	r2, r0, #16
 8003416:	433a      	orrs	r2, r7
 8003418:	6122      	str	r2, [r4, #16]
 800341a:	6163      	str	r3, [r4, #20]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800341c:	692b      	ldr	r3, [r5, #16]
 800341e:	438b      	bics	r3, r1
 8003420:	612b      	str	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8003422:	6922      	ldr	r2, [r4, #16]
 8003424:	6963      	ldr	r3, [r4, #20]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003426:	2300      	movs	r3, #0
 8003428:	61e3      	str	r3, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800342a:	692b      	ldr	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 800342c:	b292      	uxth	r2, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800342e:	4319      	orrs	r1, r3
 8003430:	6129      	str	r1, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 8003432:	8032      	strh	r2, [r6, #0]
 8003434:	e7bd      	b.n	80033b2 <HAL_FLASH_IRQHandler+0x66>
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8003436:	7823      	ldrb	r3, [r4, #0]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d106      	bne.n	800344a <HAL_FLASH_IRQHandler+0xfe>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800343c:	68a0      	ldr	r0, [r4, #8]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 800343e:	f7ff ff83 	bl	8003348 <HAL_FLASH_EndOfOperationCallback>
          pFlash.Address = 0xFFFFFFFFU;
 8003442:	2301      	movs	r3, #1
 8003444:	425b      	negs	r3, r3
 8003446:	60a3      	str	r3, [r4, #8]
 8003448:	e7d2      	b.n	80033f0 <HAL_FLASH_IRQHandler+0xa4>
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 800344a:	7823      	ldrb	r3, [r4, #0]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 800344c:	68a0      	ldr	r0, [r4, #8]
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 800344e:	2b04      	cmp	r3, #4
 8003450:	d101      	bne.n	8003456 <HAL_FLASH_IRQHandler+0x10a>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8003452:	3802      	subs	r0, #2
 8003454:	e7f3      	b.n	800343e <HAL_FLASH_IRQHandler+0xf2>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8003456:	3806      	subs	r0, #6
 8003458:	e7f1      	b.n	800343e <HAL_FLASH_IRQHandler+0xf2>
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	40022000 	.word	0x40022000
 8003460:	200006a8 	.word	0x200006a8
 8003464:	ffffebff 	.word	0xffffebff

08003468 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003468:	2200      	movs	r2, #0
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <FLASH_PageErase+0x1c>)
 800346c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <FLASH_PageErase+0x20>)
 8003470:	3202      	adds	r2, #2
 8003472:	6919      	ldr	r1, [r3, #16]
 8003474:	430a      	orrs	r2, r1
 8003476:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003478:	2240      	movs	r2, #64	; 0x40
    WRITE_REG(FLASH->AR, PageAddress);
 800347a:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800347c:	6919      	ldr	r1, [r3, #16]
 800347e:	430a      	orrs	r2, r1
 8003480:	611a      	str	r2, [r3, #16]
}
 8003482:	4770      	bx	lr
 8003484:	200006a8 	.word	0x200006a8
 8003488:	40022000 	.word	0x40022000

0800348c <HAL_GPIO_Init>:
  uint32_t position = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800348c:	2390      	movs	r3, #144	; 0x90
{ 
 800348e:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003490:	05db      	lsls	r3, r3, #23
{ 
 8003492:	b087      	sub	sp, #28
 8003494:	0004      	movs	r4, r0
 8003496:	000d      	movs	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003498:	4298      	cmp	r0, r3
 800349a:	d00f      	beq.n	80034bc <HAL_GPIO_Init+0x30>
 800349c:	4b7b      	ldr	r3, [pc, #492]	; (800368c <HAL_GPIO_Init+0x200>)
 800349e:	4298      	cmp	r0, r3
 80034a0:	d00c      	beq.n	80034bc <HAL_GPIO_Init+0x30>
 80034a2:	4b7b      	ldr	r3, [pc, #492]	; (8003690 <HAL_GPIO_Init+0x204>)
 80034a4:	4298      	cmp	r0, r3
 80034a6:	d009      	beq.n	80034bc <HAL_GPIO_Init+0x30>
 80034a8:	4b7a      	ldr	r3, [pc, #488]	; (8003694 <HAL_GPIO_Init+0x208>)
 80034aa:	4298      	cmp	r0, r3
 80034ac:	d006      	beq.n	80034bc <HAL_GPIO_Init+0x30>
 80034ae:	4b7a      	ldr	r3, [pc, #488]	; (8003698 <HAL_GPIO_Init+0x20c>)
 80034b0:	4298      	cmp	r0, r3
 80034b2:	d003      	beq.n	80034bc <HAL_GPIO_Init+0x30>
 80034b4:	21c1      	movs	r1, #193	; 0xc1
 80034b6:	4879      	ldr	r0, [pc, #484]	; (800369c <HAL_GPIO_Init+0x210>)
 80034b8:	f7fe fcc3 	bl	8001e42 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80034bc:	682b      	ldr	r3, [r5, #0]
 80034be:	b29a      	uxth	r2, r3
 80034c0:	2a00      	cmp	r2, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_GPIO_Init+0x3c>
 80034c4:	0c1b      	lsrs	r3, r3, #16
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0x44>
 80034c8:	21c2      	movs	r1, #194	; 0xc2
 80034ca:	4874      	ldr	r0, [pc, #464]	; (800369c <HAL_GPIO_Init+0x210>)
 80034cc:	f7fe fcb9 	bl	8001e42 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80034d0:	686b      	ldr	r3, [r5, #4]
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d912      	bls.n	80034fc <HAL_GPIO_Init+0x70>
 80034d6:	001a      	movs	r2, r3
 80034d8:	3a11      	subs	r2, #17
 80034da:	2a01      	cmp	r2, #1
 80034dc:	d90e      	bls.n	80034fc <HAL_GPIO_Init+0x70>
 80034de:	4a70      	ldr	r2, [pc, #448]	; (80036a0 <HAL_GPIO_Init+0x214>)
 80034e0:	4970      	ldr	r1, [pc, #448]	; (80036a4 <HAL_GPIO_Init+0x218>)
 80034e2:	401a      	ands	r2, r3
 80034e4:	1852      	adds	r2, r2, r1
 80034e6:	4970      	ldr	r1, [pc, #448]	; (80036a8 <HAL_GPIO_Init+0x21c>)
 80034e8:	420a      	tst	r2, r1
 80034ea:	d007      	beq.n	80034fc <HAL_GPIO_Init+0x70>
 80034ec:	4a6f      	ldr	r2, [pc, #444]	; (80036ac <HAL_GPIO_Init+0x220>)
 80034ee:	189b      	adds	r3, r3, r2
 80034f0:	420b      	tst	r3, r1
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x70>
 80034f4:	21c3      	movs	r1, #195	; 0xc3
 80034f6:	4869      	ldr	r0, [pc, #420]	; (800369c <HAL_GPIO_Init+0x210>)
 80034f8:	f7fe fca3 	bl	8001e42 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 80034fc:	68ab      	ldr	r3, [r5, #8]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d903      	bls.n	800350a <HAL_GPIO_Init+0x7e>
 8003502:	21c4      	movs	r1, #196	; 0xc4
 8003504:	4865      	ldr	r0, [pc, #404]	; (800369c <HAL_GPIO_Init+0x210>)
 8003506:	f7fe fc9c 	bl	8001e42 <assert_failed>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800350a:	2300      	movs	r3, #0
        }
        EXTI->FTSR = temp;
      }
    }
    
    position++;
 800350c:	9301      	str	r3, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800350e:	682b      	ldr	r3, [r5, #0]
 8003510:	9901      	ldr	r1, [sp, #4]
 8003512:	001a      	movs	r2, r3
 8003514:	40ca      	lsrs	r2, r1
 8003516:	d101      	bne.n	800351c <HAL_GPIO_Init+0x90>
  } 
}
 8003518:	b007      	add	sp, #28
 800351a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800351c:	2201      	movs	r2, #1
 800351e:	9901      	ldr	r1, [sp, #4]
 8003520:	408a      	lsls	r2, r1
 8003522:	9203      	str	r2, [sp, #12]
 8003524:	401a      	ands	r2, r3
 8003526:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 8003528:	d100      	bne.n	800352c <HAL_GPIO_Init+0xa0>
 800352a:	e0ab      	b.n	8003684 <HAL_GPIO_Init+0x1f8>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800352c:	2210      	movs	r2, #16
 800352e:	686b      	ldr	r3, [r5, #4]
 8003530:	4393      	bics	r3, r2
 8003532:	2b02      	cmp	r3, #2
 8003534:	d122      	bne.n	800357c <HAL_GPIO_Init+0xf0>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003536:	2390      	movs	r3, #144	; 0x90
 8003538:	05db      	lsls	r3, r3, #23
 800353a:	429c      	cmp	r4, r3
 800353c:	d006      	beq.n	800354c <HAL_GPIO_Init+0xc0>
 800353e:	4b53      	ldr	r3, [pc, #332]	; (800368c <HAL_GPIO_Init+0x200>)
 8003540:	429c      	cmp	r4, r3
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0xc0>
 8003544:	21d3      	movs	r1, #211	; 0xd3
 8003546:	4855      	ldr	r0, [pc, #340]	; (800369c <HAL_GPIO_Init+0x210>)
 8003548:	f7fe fc7b 	bl	8001e42 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800354c:	692b      	ldr	r3, [r5, #16]
 800354e:	2b06      	cmp	r3, #6
 8003550:	d903      	bls.n	800355a <HAL_GPIO_Init+0xce>
 8003552:	21d4      	movs	r1, #212	; 0xd4
 8003554:	4851      	ldr	r0, [pc, #324]	; (800369c <HAL_GPIO_Init+0x210>)
 8003556:	f7fe fc74 	bl	8001e42 <assert_failed>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800355a:	2207      	movs	r2, #7
 800355c:	9801      	ldr	r0, [sp, #4]
        temp = GPIOx->AFR[position >> 3];
 800355e:	9b01      	ldr	r3, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8003560:	4002      	ands	r2, r0
 8003562:	200f      	movs	r0, #15
 8003564:	0092      	lsls	r2, r2, #2
 8003566:	4090      	lsls	r0, r2
        temp = GPIOx->AFR[position >> 3];
 8003568:	08db      	lsrs	r3, r3, #3
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	18e3      	adds	r3, r4, r3
 800356e:	6a19      	ldr	r1, [r3, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8003570:	4381      	bics	r1, r0
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8003572:	6928      	ldr	r0, [r5, #16]
 8003574:	4090      	lsls	r0, r2
 8003576:	0002      	movs	r2, r0
 8003578:	430a      	orrs	r2, r1
        GPIOx->AFR[position >> 3U] = temp;
 800357a:	621a      	str	r2, [r3, #32]
 800357c:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800357e:	686a      	ldr	r2, [r5, #4]
 8003580:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003582:	2303      	movs	r3, #3
 8003584:	001e      	movs	r6, r3
 8003586:	40be      	lsls	r6, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003588:	4013      	ands	r3, r2
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800358a:	43f6      	mvns	r6, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800358c:	40bb      	lsls	r3, r7
      temp = GPIOx->MODER;
 800358e:	6821      	ldr	r1, [r4, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003590:	4031      	ands	r1, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003592:	430b      	orrs	r3, r1
      GPIOx->MODER = temp;
 8003594:	6023      	str	r3, [r4, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003596:	2310      	movs	r3, #16
 8003598:	439a      	bics	r2, r3
 800359a:	3a01      	subs	r2, #1
 800359c:	2a01      	cmp	r2, #1
 800359e:	d819      	bhi.n	80035d4 <HAL_GPIO_Init+0x148>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80035a0:	68eb      	ldr	r3, [r5, #12]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d905      	bls.n	80035b2 <HAL_GPIO_Init+0x126>
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_Init+0x126>
 80035aa:	21e8      	movs	r1, #232	; 0xe8
 80035ac:	483b      	ldr	r0, [pc, #236]	; (800369c <HAL_GPIO_Init+0x210>)
 80035ae:	f7fe fc48 	bl	8001e42 <assert_failed>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80035b2:	68eb      	ldr	r3, [r5, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035b4:	2101      	movs	r1, #1
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80035b6:	40bb      	lsls	r3, r7
        temp = GPIOx->OSPEEDR; 
 80035b8:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035ba:	4032      	ands	r2, r6
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80035bc:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 80035be:	60a3      	str	r3, [r4, #8]
        temp = GPIOx->OTYPER;
 80035c0:	6862      	ldr	r2, [r4, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80035c2:	9b03      	ldr	r3, [sp, #12]
 80035c4:	439a      	bics	r2, r3
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035c6:	686b      	ldr	r3, [r5, #4]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	400b      	ands	r3, r1
 80035cc:	9901      	ldr	r1, [sp, #4]
 80035ce:	408b      	lsls	r3, r1
 80035d0:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 80035d2:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 80035d4:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80035d6:	6869      	ldr	r1, [r5, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035d8:	4033      	ands	r3, r6
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80035da:	68ae      	ldr	r6, [r5, #8]
 80035dc:	40be      	lsls	r6, r7
 80035de:	431e      	orrs	r6, r3
      GPIOx->PUPDR = temp;
 80035e0:	60e6      	str	r6, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80035e2:	00cb      	lsls	r3, r1, #3
 80035e4:	d54e      	bpl.n	8003684 <HAL_GPIO_Init+0x1f8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e6:	2001      	movs	r0, #1
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80035e8:	2603      	movs	r6, #3
 80035ea:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ec:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <HAL_GPIO_Init+0x224>)
 80035ee:	699a      	ldr	r2, [r3, #24]
 80035f0:	4302      	orrs	r2, r0
 80035f2:	619a      	str	r2, [r3, #24]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	4003      	ands	r3, r0
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80035f8:	9801      	ldr	r0, [sp, #4]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fa:	9305      	str	r3, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80035fc:	4030      	ands	r0, r6
 80035fe:	0080      	lsls	r0, r0, #2
 8003600:	4087      	lsls	r7, r0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003602:	9b05      	ldr	r3, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2];
 8003604:	9b01      	ldr	r3, [sp, #4]
 8003606:	089a      	lsrs	r2, r3, #2
 8003608:	4b2a      	ldr	r3, [pc, #168]	; (80036b4 <HAL_GPIO_Init+0x228>)
 800360a:	0092      	lsls	r2, r2, #2
 800360c:	18d2      	adds	r2, r2, r3
 800360e:	6893      	ldr	r3, [r2, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003610:	43bb      	bics	r3, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003612:	2790      	movs	r7, #144	; 0x90
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003614:	469c      	mov	ip, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003616:	05ff      	lsls	r7, r7, #23
 8003618:	2300      	movs	r3, #0
 800361a:	42bc      	cmp	r4, r7
 800361c:	d00c      	beq.n	8003638 <HAL_GPIO_Init+0x1ac>
 800361e:	4f1b      	ldr	r7, [pc, #108]	; (800368c <HAL_GPIO_Init+0x200>)
 8003620:	3301      	adds	r3, #1
 8003622:	42bc      	cmp	r4, r7
 8003624:	d008      	beq.n	8003638 <HAL_GPIO_Init+0x1ac>
 8003626:	4f1a      	ldr	r7, [pc, #104]	; (8003690 <HAL_GPIO_Init+0x204>)
 8003628:	3301      	adds	r3, #1
 800362a:	42bc      	cmp	r4, r7
 800362c:	d004      	beq.n	8003638 <HAL_GPIO_Init+0x1ac>
 800362e:	4f19      	ldr	r7, [pc, #100]	; (8003694 <HAL_GPIO_Init+0x208>)
 8003630:	199b      	adds	r3, r3, r6
 8003632:	42bc      	cmp	r4, r7
 8003634:	d100      	bne.n	8003638 <HAL_GPIO_Init+0x1ac>
 8003636:	0033      	movs	r3, r6
 8003638:	4083      	lsls	r3, r0
 800363a:	4660      	mov	r0, ip
 800363c:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2] = temp;
 800363e:	6093      	str	r3, [r2, #8]
        temp = EXTI->IMR;
 8003640:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <HAL_GPIO_Init+0x22c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003642:	9b02      	ldr	r3, [sp, #8]
        temp = EXTI->IMR;
 8003644:	6816      	ldr	r6, [r2, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003646:	43d8      	mvns	r0, r3
          SET_BIT(temp, iocurrent); 
 8003648:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800364a:	03cf      	lsls	r7, r1, #15
 800364c:	d401      	bmi.n	8003652 <HAL_GPIO_Init+0x1c6>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800364e:	0033      	movs	r3, r6
 8003650:	4003      	ands	r3, r0
        EXTI->IMR = temp;
 8003652:	6013      	str	r3, [r2, #0]
        temp = EXTI->EMR;
 8003654:	6856      	ldr	r6, [r2, #4]
          SET_BIT(temp, iocurrent); 
 8003656:	9b02      	ldr	r3, [sp, #8]
 8003658:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800365a:	038f      	lsls	r7, r1, #14
 800365c:	d401      	bmi.n	8003662 <HAL_GPIO_Init+0x1d6>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800365e:	0033      	movs	r3, r6
 8003660:	4003      	ands	r3, r0
        EXTI->EMR = temp;
 8003662:	6053      	str	r3, [r2, #4]
        temp = EXTI->RTSR;
 8003664:	6896      	ldr	r6, [r2, #8]
          SET_BIT(temp, iocurrent); 
 8003666:	9b02      	ldr	r3, [sp, #8]
 8003668:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800366a:	02cf      	lsls	r7, r1, #11
 800366c:	d401      	bmi.n	8003672 <HAL_GPIO_Init+0x1e6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800366e:	0033      	movs	r3, r6
 8003670:	4003      	ands	r3, r0
        EXTI->RTSR = temp;
 8003672:	6093      	str	r3, [r2, #8]
        temp = EXTI->FTSR;
 8003674:	68d6      	ldr	r6, [r2, #12]
          SET_BIT(temp, iocurrent); 
 8003676:	9b02      	ldr	r3, [sp, #8]
 8003678:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800367a:	0289      	lsls	r1, r1, #10
 800367c:	d401      	bmi.n	8003682 <HAL_GPIO_Init+0x1f6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800367e:	0033      	movs	r3, r6
 8003680:	4003      	ands	r3, r0
        EXTI->FTSR = temp;
 8003682:	60d3      	str	r3, [r2, #12]
    position++;
 8003684:	9b01      	ldr	r3, [sp, #4]
 8003686:	3301      	adds	r3, #1
 8003688:	e740      	b.n	800350c <HAL_GPIO_Init+0x80>
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	48000400 	.word	0x48000400
 8003690:	48000800 	.word	0x48000800
 8003694:	48000c00 	.word	0x48000c00
 8003698:	48001400 	.word	0x48001400
 800369c:	08006518 	.word	0x08006518
 80036a0:	ffdfffff 	.word	0xffdfffff
 80036a4:	efef0000 	.word	0xefef0000
 80036a8:	fffeffff 	.word	0xfffeffff
 80036ac:	efdf0000 	.word	0xefdf0000
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40010000 	.word	0x40010000
 80036b8:	40010400 	.word	0x40010400

080036bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	0005      	movs	r5, r0
 80036c0:	1e0c      	subs	r4, r1, #0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80036c2:	d104      	bne.n	80036ce <HAL_GPIO_ReadPin+0x12>
 80036c4:	218e      	movs	r1, #142	; 0x8e
 80036c6:	4805      	ldr	r0, [pc, #20]	; (80036dc <HAL_GPIO_ReadPin+0x20>)
 80036c8:	31ff      	adds	r1, #255	; 0xff
 80036ca:	f7fe fbba 	bl	8001e42 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036ce:	6928      	ldr	r0, [r5, #16]
 80036d0:	4020      	ands	r0, r4
 80036d2:	1e43      	subs	r3, r0, #1
 80036d4:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80036d6:	b2c0      	uxtb	r0, r0
  }
 80036d8:	bd70      	pop	{r4, r5, r6, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	08006518 	.word	0x08006518

080036e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e0:	b570      	push	{r4, r5, r6, lr}
 80036e2:	0005      	movs	r5, r0
 80036e4:	000c      	movs	r4, r1
 80036e6:	0016      	movs	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80036e8:	2900      	cmp	r1, #0
 80036ea:	d104      	bne.n	80036f6 <HAL_GPIO_WritePin+0x16>
 80036ec:	21d6      	movs	r1, #214	; 0xd6
 80036ee:	4808      	ldr	r0, [pc, #32]	; (8003710 <HAL_GPIO_WritePin+0x30>)
 80036f0:	0049      	lsls	r1, r1, #1
 80036f2:	f7fe fba6 	bl	8001e42 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80036f6:	2e01      	cmp	r6, #1
 80036f8:	d906      	bls.n	8003708 <HAL_GPIO_WritePin+0x28>
 80036fa:	21ae      	movs	r1, #174	; 0xae
 80036fc:	4804      	ldr	r0, [pc, #16]	; (8003710 <HAL_GPIO_WritePin+0x30>)
 80036fe:	31ff      	adds	r1, #255	; 0xff
 8003700:	f7fe fb9f 	bl	8001e42 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003704:	61ac      	str	r4, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003706:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
 8003708:	2e00      	cmp	r6, #0
 800370a:	d1fb      	bne.n	8003704 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800370c:	62ac      	str	r4, [r5, #40]	; 0x28
}
 800370e:	e7fa      	b.n	8003706 <HAL_GPIO_WritePin+0x26>
 8003710:	08006518 	.word	0x08006518

08003714 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003714:	b570      	push	{r4, r5, r6, lr}
 8003716:	0005      	movs	r5, r0
 8003718:	1e0c      	subs	r4, r1, #0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800371a:	d104      	bne.n	8003726 <HAL_GPIO_TogglePin+0x12>
 800371c:	21e1      	movs	r1, #225	; 0xe1
 800371e:	4804      	ldr	r0, [pc, #16]	; (8003730 <HAL_GPIO_TogglePin+0x1c>)
 8003720:	0049      	lsls	r1, r1, #1
 8003722:	f7fe fb8e 	bl	8001e42 <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 8003726:	696b      	ldr	r3, [r5, #20]
 8003728:	405c      	eors	r4, r3
 800372a:	616c      	str	r4, [r5, #20]
}
 800372c:	bd70      	pop	{r4, r5, r6, pc}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	08006518 	.word	0x08006518

08003734 <HAL_I2CEx_EnableFastModePlus>:
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));
 8003734:	0002      	movs	r2, r0
 8003736:	4b11      	ldr	r3, [pc, #68]	; (800377c <HAL_I2CEx_EnableFastModePlus+0x48>)
{
 8003738:	b513      	push	{r0, r1, r4, lr}
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));
 800373a:	401a      	ands	r2, r3
{
 800373c:	0004      	movs	r4, r0
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));
 800373e:	429a      	cmp	r2, r3
 8003740:	d008      	beq.n	8003754 <HAL_I2CEx_EnableFastModePlus+0x20>
 8003742:	23df      	movs	r3, #223	; 0xdf
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	4218      	tst	r0, r3
 8003748:	d109      	bne.n	800375e <HAL_I2CEx_EnableFastModePlus+0x2a>
 800374a:	0002      	movs	r2, r0
 800374c:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <HAL_I2CEx_EnableFastModePlus+0x4c>)
 800374e:	401a      	ands	r2, r3
 8003750:	429a      	cmp	r2, r3
 8003752:	d004      	beq.n	800375e <HAL_I2CEx_EnableFastModePlus+0x2a>
 8003754:	2194      	movs	r1, #148	; 0x94
 8003756:	480b      	ldr	r0, [pc, #44]	; (8003784 <HAL_I2CEx_EnableFastModePlus+0x50>)
 8003758:	0049      	lsls	r1, r1, #1
 800375a:	f7fe fb72 	bl	8001e42 <assert_failed>

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800375e:	2001      	movs	r0, #1
 8003760:	4a09      	ldr	r2, [pc, #36]	; (8003788 <HAL_I2CEx_EnableFastModePlus+0x54>)
 8003762:	6991      	ldr	r1, [r2, #24]
 8003764:	4301      	orrs	r1, r0
 8003766:	6191      	str	r1, [r2, #24]
 8003768:	6993      	ldr	r3, [r2, #24]
 800376a:	4003      	ands	r3, r0
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	9b01      	ldr	r3, [sp, #4]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_I2CEx_EnableFastModePlus+0x58>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4314      	orrs	r4, r2
 8003776:	601c      	str	r4, [r3, #0]
}
 8003778:	bd13      	pop	{r0, r1, r4, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	aaaa0000 	.word	0xaaaa0000
 8003780:	aaaa0200 	.word	0xaaaa0200
 8003784:	08006551 	.word	0x08006551
 8003788:	40021000 	.word	0x40021000
 800378c:	40010000 	.word	0x40010000

08003790 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003790:	b570      	push	{r4, r5, r6, lr}
 8003792:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
  {
    return HAL_ERROR;
 8003794:	2001      	movs	r0, #1
  if(hiwdg == NULL)
 8003796:	2c00      	cmp	r4, #0
 8003798:	d032      	beq.n	8003800 <HAL_IWDG_Init+0x70>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800379a:	4b1f      	ldr	r3, [pc, #124]	; (8003818 <HAL_IWDG_Init+0x88>)
 800379c:	6822      	ldr	r2, [r4, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d003      	beq.n	80037aa <HAL_IWDG_Init+0x1a>
 80037a2:	21b5      	movs	r1, #181	; 0xb5
 80037a4:	481d      	ldr	r0, [pc, #116]	; (800381c <HAL_IWDG_Init+0x8c>)
 80037a6:	f7fe fb4c 	bl	8001e42 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 80037aa:	6863      	ldr	r3, [r4, #4]
 80037ac:	2b06      	cmp	r3, #6
 80037ae:	d903      	bls.n	80037b8 <HAL_IWDG_Init+0x28>
 80037b0:	21b6      	movs	r1, #182	; 0xb6
 80037b2:	481a      	ldr	r0, [pc, #104]	; (800381c <HAL_IWDG_Init+0x8c>)
 80037b4:	f7fe fb45 	bl	8001e42 <assert_failed>
 80037b8:	4d19      	ldr	r5, [pc, #100]	; (8003820 <HAL_IWDG_Init+0x90>)
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 80037ba:	68a3      	ldr	r3, [r4, #8]
 80037bc:	42ab      	cmp	r3, r5
 80037be:	d903      	bls.n	80037c8 <HAL_IWDG_Init+0x38>
 80037c0:	21b7      	movs	r1, #183	; 0xb7
 80037c2:	4816      	ldr	r0, [pc, #88]	; (800381c <HAL_IWDG_Init+0x8c>)
 80037c4:	f7fe fb3d 	bl	8001e42 <assert_failed>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 80037c8:	68e3      	ldr	r3, [r4, #12]
 80037ca:	42ab      	cmp	r3, r5
 80037cc:	d903      	bls.n	80037d6 <HAL_IWDG_Init+0x46>
 80037ce:	21b8      	movs	r1, #184	; 0xb8
 80037d0:	4812      	ldr	r0, [pc, #72]	; (800381c <HAL_IWDG_Init+0x8c>)
 80037d2:	f7fe fb36 	bl	8001e42 <assert_failed>

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	4a12      	ldr	r2, [pc, #72]	; (8003824 <HAL_IWDG_Init+0x94>)
 80037da:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80037dc:	4a12      	ldr	r2, [pc, #72]	; (8003828 <HAL_IWDG_Init+0x98>)
 80037de:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80037e0:	6862      	ldr	r2, [r4, #4]
 80037e2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80037e4:	68a2      	ldr	r2, [r4, #8]
 80037e6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80037e8:	f7fe fff8 	bl	80027dc <HAL_GetTick>
 80037ec:	0005      	movs	r5, r0

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	68d8      	ldr	r0, [r3, #12]
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d105      	bne.n	8003802 <HAL_IWDG_Init+0x72>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 80037f6:	6919      	ldr	r1, [r3, #16]
 80037f8:	68e2      	ldr	r2, [r4, #12]
 80037fa:	4291      	cmp	r1, r2
 80037fc:	d008      	beq.n	8003810 <HAL_IWDG_Init+0x80>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80037fe:	611a      	str	r2, [r3, #16]
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 8003800:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003802:	f7fe ffeb 	bl	80027dc <HAL_GetTick>
 8003806:	1b40      	subs	r0, r0, r5
 8003808:	2827      	cmp	r0, #39	; 0x27
 800380a:	d9f0      	bls.n	80037ee <HAL_IWDG_Init+0x5e>
      return HAL_TIMEOUT;
 800380c:	2003      	movs	r0, #3
 800380e:	e7f7      	b.n	8003800 <HAL_IWDG_Init+0x70>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003810:	4a06      	ldr	r2, [pc, #24]	; (800382c <HAL_IWDG_Init+0x9c>)
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	e7f4      	b.n	8003800 <HAL_IWDG_Init+0x70>
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	40003000 	.word	0x40003000
 800381c:	0800658c 	.word	0x0800658c
 8003820:	00000fff 	.word	0x00000fff
 8003824:	0000cccc 	.word	0x0000cccc
 8003828:	00005555 	.word	0x00005555
 800382c:	0000aaaa 	.word	0x0000aaaa

08003830 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003830:	6803      	ldr	r3, [r0, #0]
 8003832:	4a02      	ldr	r2, [pc, #8]	; (800383c <HAL_IWDG_Refresh+0xc>)

  /* Return function status */
  return HAL_OK;
}
 8003834:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003836:	601a      	str	r2, [r3, #0]
}
 8003838:	4770      	bx	lr
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	0000aaaa 	.word	0x0000aaaa

08003840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003842:	0004      	movs	r4, r0
 8003844:	b085      	sub	sp, #20
   uint32_t tickstart = 0U;
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 8003846:	2800      	cmp	r0, #0
 8003848:	d104      	bne.n	8003854 <HAL_RCC_OscConfig+0x14>
 800384a:	2189      	movs	r1, #137	; 0x89
 800384c:	48b8      	ldr	r0, [pc, #736]	; (8003b30 <HAL_RCC_OscConfig+0x2f0>)
 800384e:	0049      	lsls	r1, r1, #1
 8003850:	f7fe faf7 	bl	8001e42 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d006      	beq.n	8003868 <HAL_RCC_OscConfig+0x28>
 800385a:	06db      	lsls	r3, r3, #27
 800385c:	d104      	bne.n	8003868 <HAL_RCC_OscConfig+0x28>
 800385e:	2114      	movs	r1, #20
 8003860:	48b3      	ldr	r0, [pc, #716]	; (8003b30 <HAL_RCC_OscConfig+0x2f0>)
 8003862:	31ff      	adds	r1, #255	; 0xff
 8003864:	f7fe faed 	bl	8001e42 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	07db      	lsls	r3, r3, #31
 800386c:	d448      	bmi.n	8003900 <HAL_RCC_OscConfig+0xc0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	079b      	lsls	r3, r3, #30
 8003872:	d500      	bpl.n	8003876 <HAL_RCC_OscConfig+0x36>
 8003874:	e0a5      	b.n	80039c2 <HAL_RCC_OscConfig+0x182>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	071b      	lsls	r3, r3, #28
 800387a:	d500      	bpl.n	800387e <HAL_RCC_OscConfig+0x3e>
 800387c:	e0f0      	b.n	8003a60 <HAL_RCC_OscConfig+0x220>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	075b      	lsls	r3, r3, #29
 8003882:	d500      	bpl.n	8003886 <HAL_RCC_OscConfig+0x46>
 8003884:	e11b      	b.n	8003abe <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	06db      	lsls	r3, r3, #27
 800388a:	d52b      	bpl.n	80038e4 <HAL_RCC_OscConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
 800388c:	6963      	ldr	r3, [r4, #20]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d906      	bls.n	80038a0 <HAL_RCC_OscConfig+0x60>
 8003892:	3305      	adds	r3, #5
 8003894:	d004      	beq.n	80038a0 <HAL_RCC_OscConfig+0x60>
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	48a5      	ldr	r0, [pc, #660]	; (8003b30 <HAL_RCC_OscConfig+0x2f0>)
 800389a:	0089      	lsls	r1, r1, #2
 800389c:	f7fe fad1 	bl	8001e42 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));
 80038a0:	69a3      	ldr	r3, [r4, #24]
 80038a2:	2b1f      	cmp	r3, #31
 80038a4:	d903      	bls.n	80038ae <HAL_RCC_OscConfig+0x6e>
 80038a6:	49a3      	ldr	r1, [pc, #652]	; (8003b34 <HAL_RCC_OscConfig+0x2f4>)
 80038a8:	48a1      	ldr	r0, [pc, #644]	; (8003b30 <HAL_RCC_OscConfig+0x2f0>)
 80038aa:	f7fe faca 	bl	8001e42 <assert_failed>

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80038ae:	6962      	ldr	r2, [r4, #20]
 80038b0:	4da1      	ldr	r5, [pc, #644]	; (8003b38 <HAL_RCC_OscConfig+0x2f8>)
 80038b2:	2304      	movs	r3, #4
 80038b4:	2a01      	cmp	r2, #1
 80038b6:	d000      	beq.n	80038ba <HAL_RCC_OscConfig+0x7a>
 80038b8:	e18d      	b.n	8003bd6 <HAL_RCC_OscConfig+0x396>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80038ba:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80038bc:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80038be:	430b      	orrs	r3, r1
 80038c0:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80038c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80038c4:	431a      	orrs	r2, r3
 80038c6:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80038c8:	f7fe ff88 	bl	80027dc <HAL_GetTick>
 80038cc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80038ce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80038d0:	4233      	tst	r3, r6
 80038d2:	d100      	bne.n	80038d6 <HAL_RCC_OscConfig+0x96>
 80038d4:	e178      	b.n	8003bc8 <HAL_RCC_OscConfig+0x388>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80038d6:	21f8      	movs	r1, #248	; 0xf8
 80038d8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80038da:	69a3      	ldr	r3, [r4, #24]
 80038dc:	438a      	bics	r2, r1
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4313      	orrs	r3, r2
 80038e2:	636b      	str	r3, [r5, #52]	; 0x34
  }
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80038e4:	6a23      	ldr	r3, [r4, #32]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d904      	bls.n	80038f4 <HAL_RCC_OscConfig+0xb4>
 80038ea:	219d      	movs	r1, #157	; 0x9d
 80038ec:	4890      	ldr	r0, [pc, #576]	; (8003b30 <HAL_RCC_OscConfig+0x2f0>)
 80038ee:	0089      	lsls	r1, r1, #2
 80038f0:	f7fe faa7 	bl	8001e42 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f4:	6a22      	ldr	r2, [r4, #32]
 80038f6:	2a00      	cmp	r2, #0
 80038f8:	d000      	beq.n	80038fc <HAL_RCC_OscConfig+0xbc>
 80038fa:	e187      	b.n	8003c0c <HAL_RCC_OscConfig+0x3cc>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80038fc:	2000      	movs	r0, #0
 80038fe:	e01d      	b.n	800393c <HAL_RCC_OscConfig+0xfc>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003900:	6863      	ldr	r3, [r4, #4]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d906      	bls.n	8003914 <HAL_RCC_OscConfig+0xd4>
 8003906:	2b05      	cmp	r3, #5
 8003908:	d004      	beq.n	8003914 <HAL_RCC_OscConfig+0xd4>
 800390a:	211a      	movs	r1, #26
 800390c:	4888      	ldr	r0, [pc, #544]	; (8003b30 <HAL_RCC_OscConfig+0x2f0>)
 800390e:	31ff      	adds	r1, #255	; 0xff
 8003910:	f7fe fa97 	bl	8001e42 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003914:	210c      	movs	r1, #12
 8003916:	4d88      	ldr	r5, [pc, #544]	; (8003b38 <HAL_RCC_OscConfig+0x2f8>)
 8003918:	686a      	ldr	r2, [r5, #4]
 800391a:	400a      	ands	r2, r1
 800391c:	2a04      	cmp	r2, #4
 800391e:	d006      	beq.n	800392e <HAL_RCC_OscConfig+0xee>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003920:	686b      	ldr	r3, [r5, #4]
 8003922:	400b      	ands	r3, r1
 8003924:	2b08      	cmp	r3, #8
 8003926:	d10b      	bne.n	8003940 <HAL_RCC_OscConfig+0x100>
 8003928:	686b      	ldr	r3, [r5, #4]
 800392a:	03db      	lsls	r3, r3, #15
 800392c:	d508      	bpl.n	8003940 <HAL_RCC_OscConfig+0x100>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392e:	682b      	ldr	r3, [r5, #0]
 8003930:	039b      	lsls	r3, r3, #14
 8003932:	d59c      	bpl.n	800386e <HAL_RCC_OscConfig+0x2e>
 8003934:	6863      	ldr	r3, [r4, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d199      	bne.n	800386e <HAL_RCC_OscConfig+0x2e>
        return HAL_ERROR;
 800393a:	2001      	movs	r0, #1
}
 800393c:	b005      	add	sp, #20
 800393e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003940:	6863      	ldr	r3, [r4, #4]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d114      	bne.n	8003970 <HAL_RCC_OscConfig+0x130>
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	682a      	ldr	r2, [r5, #0]
 800394a:	025b      	lsls	r3, r3, #9
 800394c:	4313      	orrs	r3, r2
 800394e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003950:	f7fe ff44 	bl	80027dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003954:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8003956:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003958:	02b6      	lsls	r6, r6, #10
 800395a:	682b      	ldr	r3, [r5, #0]
 800395c:	4233      	tst	r3, r6
 800395e:	d000      	beq.n	8003962 <HAL_RCC_OscConfig+0x122>
 8003960:	e785      	b.n	800386e <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003962:	f7fe ff3b 	bl	80027dc <HAL_GetTick>
 8003966:	1bc0      	subs	r0, r0, r7
 8003968:	2864      	cmp	r0, #100	; 0x64
 800396a:	d9f6      	bls.n	800395a <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 800396c:	2003      	movs	r0, #3
 800396e:	e7e5      	b.n	800393c <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003970:	2b00      	cmp	r3, #0
 8003972:	d116      	bne.n	80039a2 <HAL_RCC_OscConfig+0x162>
 8003974:	682b      	ldr	r3, [r5, #0]
 8003976:	4a71      	ldr	r2, [pc, #452]	; (8003b3c <HAL_RCC_OscConfig+0x2fc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003978:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800397a:	4013      	ands	r3, r2
 800397c:	602b      	str	r3, [r5, #0]
 800397e:	682b      	ldr	r3, [r5, #0]
 8003980:	4a6f      	ldr	r2, [pc, #444]	; (8003b40 <HAL_RCC_OscConfig+0x300>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003982:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003984:	4013      	ands	r3, r2
 8003986:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003988:	f7fe ff28 	bl	80027dc <HAL_GetTick>
 800398c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398e:	682b      	ldr	r3, [r5, #0]
 8003990:	4233      	tst	r3, r6
 8003992:	d100      	bne.n	8003996 <HAL_RCC_OscConfig+0x156>
 8003994:	e76b      	b.n	800386e <HAL_RCC_OscConfig+0x2e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003996:	f7fe ff21 	bl	80027dc <HAL_GetTick>
 800399a:	1bc0      	subs	r0, r0, r7
 800399c:	2864      	cmp	r0, #100	; 0x64
 800399e:	d9f6      	bls.n	800398e <HAL_RCC_OscConfig+0x14e>
 80039a0:	e7e4      	b.n	800396c <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a2:	2b05      	cmp	r3, #5
 80039a4:	d105      	bne.n	80039b2 <HAL_RCC_OscConfig+0x172>
 80039a6:	2380      	movs	r3, #128	; 0x80
 80039a8:	682a      	ldr	r2, [r5, #0]
 80039aa:	02db      	lsls	r3, r3, #11
 80039ac:	4313      	orrs	r3, r2
 80039ae:	602b      	str	r3, [r5, #0]
 80039b0:	e7c9      	b.n	8003946 <HAL_RCC_OscConfig+0x106>
 80039b2:	682b      	ldr	r3, [r5, #0]
 80039b4:	4a61      	ldr	r2, [pc, #388]	; (8003b3c <HAL_RCC_OscConfig+0x2fc>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	602b      	str	r3, [r5, #0]
 80039ba:	682b      	ldr	r3, [r5, #0]
 80039bc:	4a60      	ldr	r2, [pc, #384]	; (8003b40 <HAL_RCC_OscConfig+0x300>)
 80039be:	4013      	ands	r3, r2
 80039c0:	e7c5      	b.n	800394e <HAL_RCC_OscConfig+0x10e>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80039c2:	68e3      	ldr	r3, [r4, #12]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d904      	bls.n	80039d2 <HAL_RCC_OscConfig+0x192>
 80039c8:	214e      	movs	r1, #78	; 0x4e
 80039ca:	4859      	ldr	r0, [pc, #356]	; (8003b30 <HAL_RCC_OscConfig+0x2f0>)
 80039cc:	31ff      	adds	r1, #255	; 0xff
 80039ce:	f7fe fa38 	bl	8001e42 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80039d2:	6923      	ldr	r3, [r4, #16]
 80039d4:	2b1f      	cmp	r3, #31
 80039d6:	d904      	bls.n	80039e2 <HAL_RCC_OscConfig+0x1a2>
 80039d8:	21a7      	movs	r1, #167	; 0xa7
 80039da:	4855      	ldr	r0, [pc, #340]	; (8003b30 <HAL_RCC_OscConfig+0x2f0>)
 80039dc:	0049      	lsls	r1, r1, #1
 80039de:	f7fe fa30 	bl	8001e42 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80039e2:	220c      	movs	r2, #12
 80039e4:	4d54      	ldr	r5, [pc, #336]	; (8003b38 <HAL_RCC_OscConfig+0x2f8>)
 80039e6:	686b      	ldr	r3, [r5, #4]
 80039e8:	4213      	tst	r3, r2
 80039ea:	d006      	beq.n	80039fa <HAL_RCC_OscConfig+0x1ba>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80039ec:	686b      	ldr	r3, [r5, #4]
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d110      	bne.n	8003a16 <HAL_RCC_OscConfig+0x1d6>
 80039f4:	686b      	ldr	r3, [r5, #4]
 80039f6:	03db      	lsls	r3, r3, #15
 80039f8:	d40d      	bmi.n	8003a16 <HAL_RCC_OscConfig+0x1d6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fa:	682b      	ldr	r3, [r5, #0]
 80039fc:	079b      	lsls	r3, r3, #30
 80039fe:	d502      	bpl.n	8003a06 <HAL_RCC_OscConfig+0x1c6>
 8003a00:	68e3      	ldr	r3, [r4, #12]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d199      	bne.n	800393a <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a06:	21f8      	movs	r1, #248	; 0xf8
 8003a08:	682a      	ldr	r2, [r5, #0]
 8003a0a:	6923      	ldr	r3, [r4, #16]
 8003a0c:	438a      	bics	r2, r1
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4313      	orrs	r3, r2
 8003a12:	602b      	str	r3, [r5, #0]
 8003a14:	e72f      	b.n	8003876 <HAL_RCC_OscConfig+0x36>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a16:	68e2      	ldr	r2, [r4, #12]
 8003a18:	2301      	movs	r3, #1
 8003a1a:	2a00      	cmp	r2, #0
 8003a1c:	d00f      	beq.n	8003a3e <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_ENABLE();
 8003a1e:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a20:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8003a22:	4313      	orrs	r3, r2
 8003a24:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003a26:	f7fe fed9 	bl	80027dc <HAL_GetTick>
 8003a2a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	4233      	tst	r3, r6
 8003a30:	d1e9      	bne.n	8003a06 <HAL_RCC_OscConfig+0x1c6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a32:	f7fe fed3 	bl	80027dc <HAL_GetTick>
 8003a36:	1bc0      	subs	r0, r0, r7
 8003a38:	2802      	cmp	r0, #2
 8003a3a:	d9f7      	bls.n	8003a2c <HAL_RCC_OscConfig+0x1ec>
 8003a3c:	e796      	b.n	800396c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8003a3e:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a40:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8003a42:	439a      	bics	r2, r3
 8003a44:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8003a46:	f7fe fec9 	bl	80027dc <HAL_GetTick>
 8003a4a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4c:	682b      	ldr	r3, [r5, #0]
 8003a4e:	4233      	tst	r3, r6
 8003a50:	d100      	bne.n	8003a54 <HAL_RCC_OscConfig+0x214>
 8003a52:	e710      	b.n	8003876 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a54:	f7fe fec2 	bl	80027dc <HAL_GetTick>
 8003a58:	1bc0      	subs	r0, r0, r7
 8003a5a:	2802      	cmp	r0, #2
 8003a5c:	d9f6      	bls.n	8003a4c <HAL_RCC_OscConfig+0x20c>
 8003a5e:	e785      	b.n	800396c <HAL_RCC_OscConfig+0x12c>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003a60:	69e3      	ldr	r3, [r4, #28]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d904      	bls.n	8003a70 <HAL_RCC_OscConfig+0x230>
 8003a66:	21c7      	movs	r1, #199	; 0xc7
 8003a68:	4831      	ldr	r0, [pc, #196]	; (8003b30 <HAL_RCC_OscConfig+0x2f0>)
 8003a6a:	0049      	lsls	r1, r1, #1
 8003a6c:	f7fe f9e9 	bl	8001e42 <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a70:	69e2      	ldr	r2, [r4, #28]
 8003a72:	2301      	movs	r3, #1
 8003a74:	4d30      	ldr	r5, [pc, #192]	; (8003b38 <HAL_RCC_OscConfig+0x2f8>)
 8003a76:	2a00      	cmp	r2, #0
 8003a78:	d010      	beq.n	8003a9c <HAL_RCC_OscConfig+0x25c>
      __HAL_RCC_LSI_ENABLE();
 8003a7a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003a82:	f7fe feab 	bl	80027dc <HAL_GetTick>
 8003a86:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a88:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003a8a:	4233      	tst	r3, r6
 8003a8c:	d000      	beq.n	8003a90 <HAL_RCC_OscConfig+0x250>
 8003a8e:	e6f6      	b.n	800387e <HAL_RCC_OscConfig+0x3e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a90:	f7fe fea4 	bl	80027dc <HAL_GetTick>
 8003a94:	1bc0      	subs	r0, r0, r7
 8003a96:	2802      	cmp	r0, #2
 8003a98:	d9f6      	bls.n	8003a88 <HAL_RCC_OscConfig+0x248>
 8003a9a:	e767      	b.n	800396c <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_LSI_DISABLE();
 8003a9c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a9e:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8003aa0:	439a      	bics	r2, r3
 8003aa2:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003aa4:	f7fe fe9a 	bl	80027dc <HAL_GetTick>
 8003aa8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003aac:	4233      	tst	r3, r6
 8003aae:	d100      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x272>
 8003ab0:	e6e5      	b.n	800387e <HAL_RCC_OscConfig+0x3e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab2:	f7fe fe93 	bl	80027dc <HAL_GetTick>
 8003ab6:	1bc0      	subs	r0, r0, r7
 8003ab8:	2802      	cmp	r0, #2
 8003aba:	d9f6      	bls.n	8003aaa <HAL_RCC_OscConfig+0x26a>
 8003abc:	e756      	b.n	800396c <HAL_RCC_OscConfig+0x12c>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003abe:	68a3      	ldr	r3, [r4, #8]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d906      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x292>
 8003ac4:	2b05      	cmp	r3, #5
 8003ac6:	d004      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x292>
 8003ac8:	21dd      	movs	r1, #221	; 0xdd
 8003aca:	4819      	ldr	r0, [pc, #100]	; (8003b30 <HAL_RCC_OscConfig+0x2f0>)
 8003acc:	0049      	lsls	r1, r1, #1
 8003ace:	f7fe f9b8 	bl	8001e42 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad2:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003ad4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad6:	4d18      	ldr	r5, [pc, #96]	; (8003b38 <HAL_RCC_OscConfig+0x2f8>)
 8003ad8:	0552      	lsls	r2, r2, #21
 8003ada:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003adc:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ade:	4213      	tst	r3, r2
 8003ae0:	d108      	bne.n	8003af4 <HAL_RCC_OscConfig+0x2b4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae2:	69eb      	ldr	r3, [r5, #28]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61eb      	str	r3, [r5, #28]
 8003ae8:	69eb      	ldr	r3, [r5, #28]
 8003aea:	4013      	ands	r3, r2
 8003aec:	9303      	str	r3, [sp, #12]
 8003aee:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003af0:	2301      	movs	r3, #1
 8003af2:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af4:	2780      	movs	r7, #128	; 0x80
 8003af6:	4e13      	ldr	r6, [pc, #76]	; (8003b44 <HAL_RCC_OscConfig+0x304>)
 8003af8:	007f      	lsls	r7, r7, #1
 8003afa:	6833      	ldr	r3, [r6, #0]
 8003afc:	423b      	tst	r3, r7
 8003afe:	d006      	beq.n	8003b0e <HAL_RCC_OscConfig+0x2ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b00:	68a3      	ldr	r3, [r4, #8]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d120      	bne.n	8003b48 <HAL_RCC_OscConfig+0x308>
 8003b06:	6a2a      	ldr	r2, [r5, #32]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	622b      	str	r3, [r5, #32]
 8003b0c:	e03d      	b.n	8003b8a <HAL_RCC_OscConfig+0x34a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0e:	6833      	ldr	r3, [r6, #0]
 8003b10:	433b      	orrs	r3, r7
 8003b12:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003b14:	f7fe fe62 	bl	80027dc <HAL_GetTick>
 8003b18:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1a:	6833      	ldr	r3, [r6, #0]
 8003b1c:	423b      	tst	r3, r7
 8003b1e:	d1ef      	bne.n	8003b00 <HAL_RCC_OscConfig+0x2c0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b20:	f7fe fe5c 	bl	80027dc <HAL_GetTick>
 8003b24:	9b01      	ldr	r3, [sp, #4]
 8003b26:	1ac0      	subs	r0, r0, r3
 8003b28:	2864      	cmp	r0, #100	; 0x64
 8003b2a:	d9f6      	bls.n	8003b1a <HAL_RCC_OscConfig+0x2da>
 8003b2c:	e71e      	b.n	800396c <HAL_RCC_OscConfig+0x12c>
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	080065c5 	.word	0x080065c5
 8003b34:	00000201 	.word	0x00000201
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	fffeffff 	.word	0xfffeffff
 8003b40:	fffbffff 	.word	0xfffbffff
 8003b44:	40007000 	.word	0x40007000
 8003b48:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d114      	bne.n	8003b78 <HAL_RCC_OscConfig+0x338>
 8003b4e:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b50:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b52:	4393      	bics	r3, r2
 8003b54:	622b      	str	r3, [r5, #32]
 8003b56:	6a2b      	ldr	r3, [r5, #32]
 8003b58:	3203      	adds	r2, #3
 8003b5a:	4393      	bics	r3, r2
 8003b5c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003b5e:	f7fe fe3d 	bl	80027dc <HAL_GetTick>
 8003b62:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b64:	6a2b      	ldr	r3, [r5, #32]
 8003b66:	423b      	tst	r3, r7
 8003b68:	d025      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x376>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b6a:	f7fe fe37 	bl	80027dc <HAL_GetTick>
 8003b6e:	4b64      	ldr	r3, [pc, #400]	; (8003d00 <HAL_RCC_OscConfig+0x4c0>)
 8003b70:	1b80      	subs	r0, r0, r6
 8003b72:	4298      	cmp	r0, r3
 8003b74:	d9f6      	bls.n	8003b64 <HAL_RCC_OscConfig+0x324>
 8003b76:	e6f9      	b.n	800396c <HAL_RCC_OscConfig+0x12c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b78:	2b05      	cmp	r3, #5
 8003b7a:	d10b      	bne.n	8003b94 <HAL_RCC_OscConfig+0x354>
 8003b7c:	6a29      	ldr	r1, [r5, #32]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	430b      	orrs	r3, r1
 8003b82:	622b      	str	r3, [r5, #32]
 8003b84:	6a2b      	ldr	r3, [r5, #32]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8003b8a:	f7fe fe27 	bl	80027dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8003b90:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b92:	e00d      	b.n	8003bb0 <HAL_RCC_OscConfig+0x370>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b94:	6a2b      	ldr	r3, [r5, #32]
 8003b96:	4393      	bics	r3, r2
 8003b98:	2204      	movs	r2, #4
 8003b9a:	622b      	str	r3, [r5, #32]
 8003b9c:	6a2b      	ldr	r3, [r5, #32]
 8003b9e:	4393      	bics	r3, r2
 8003ba0:	e7b3      	b.n	8003b0a <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba2:	f7fe fe1b 	bl	80027dc <HAL_GetTick>
 8003ba6:	4b56      	ldr	r3, [pc, #344]	; (8003d00 <HAL_RCC_OscConfig+0x4c0>)
 8003ba8:	1b80      	subs	r0, r0, r6
 8003baa:	4298      	cmp	r0, r3
 8003bac:	d900      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x370>
 8003bae:	e6dd      	b.n	800396c <HAL_RCC_OscConfig+0x12c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb0:	6a2b      	ldr	r3, [r5, #32]
 8003bb2:	423b      	tst	r3, r7
 8003bb4:	d0f5      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x362>
    if(pwrclkchanged == SET)
 8003bb6:	9b00      	ldr	r3, [sp, #0]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d000      	beq.n	8003bbe <HAL_RCC_OscConfig+0x37e>
 8003bbc:	e663      	b.n	8003886 <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bbe:	69eb      	ldr	r3, [r5, #28]
 8003bc0:	4a50      	ldr	r2, [pc, #320]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61eb      	str	r3, [r5, #28]
 8003bc6:	e65e      	b.n	8003886 <HAL_RCC_OscConfig+0x46>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003bc8:	f7fe fe08 	bl	80027dc <HAL_GetTick>
 8003bcc:	1bc0      	subs	r0, r0, r7
 8003bce:	2802      	cmp	r0, #2
 8003bd0:	d800      	bhi.n	8003bd4 <HAL_RCC_OscConfig+0x394>
 8003bd2:	e67c      	b.n	80038ce <HAL_RCC_OscConfig+0x8e>
 8003bd4:	e6ca      	b.n	800396c <HAL_RCC_OscConfig+0x12c>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003bd6:	3205      	adds	r2, #5
 8003bd8:	d103      	bne.n	8003be2 <HAL_RCC_OscConfig+0x3a2>
      __HAL_RCC_HSI14ADC_ENABLE();
 8003bda:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003bdc:	439a      	bics	r2, r3
 8003bde:	636a      	str	r2, [r5, #52]	; 0x34
 8003be0:	e679      	b.n	80038d6 <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003be2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003be4:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003be6:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8003be8:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8003bea:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8003bec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003bee:	4393      	bics	r3, r2
 8003bf0:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003bf2:	f7fe fdf3 	bl	80027dc <HAL_GetTick>
 8003bf6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003bf8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003bfa:	4233      	tst	r3, r6
 8003bfc:	d100      	bne.n	8003c00 <HAL_RCC_OscConfig+0x3c0>
 8003bfe:	e671      	b.n	80038e4 <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003c00:	f7fe fdec 	bl	80027dc <HAL_GetTick>
 8003c04:	1bc0      	subs	r0, r0, r7
 8003c06:	2802      	cmp	r0, #2
 8003c08:	d9f6      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x3b8>
 8003c0a:	e6af      	b.n	800396c <HAL_RCC_OscConfig+0x12c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c0c:	210c      	movs	r1, #12
 8003c0e:	4d3e      	ldr	r5, [pc, #248]	; (8003d08 <HAL_RCC_OscConfig+0x4c8>)
      return HAL_ERROR;
 8003c10:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c12:	686b      	ldr	r3, [r5, #4]
 8003c14:	400b      	ands	r3, r1
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d100      	bne.n	8003c1c <HAL_RCC_OscConfig+0x3dc>
 8003c1a:	e68f      	b.n	800393c <HAL_RCC_OscConfig+0xfc>
 8003c1c:	4e3b      	ldr	r6, [pc, #236]	; (8003d0c <HAL_RCC_OscConfig+0x4cc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c1e:	2a02      	cmp	r2, #2
 8003c20:	d15b      	bne.n	8003cda <HAL_RCC_OscConfig+0x49a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003c22:	4b3b      	ldr	r3, [pc, #236]	; (8003d10 <HAL_RCC_OscConfig+0x4d0>)
 8003c24:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003c26:	421a      	tst	r2, r3
 8003c28:	d003      	beq.n	8003c32 <HAL_RCC_OscConfig+0x3f2>
 8003c2a:	493a      	ldr	r1, [pc, #232]	; (8003d14 <HAL_RCC_OscConfig+0x4d4>)
 8003c2c:	483a      	ldr	r0, [pc, #232]	; (8003d18 <HAL_RCC_OscConfig+0x4d8>)
 8003c2e:	f7fe f908 	bl	8001e42 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003c32:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003c34:	4939      	ldr	r1, [pc, #228]	; (8003d1c <HAL_RCC_OscConfig+0x4dc>)
 8003c36:	4b3a      	ldr	r3, [pc, #232]	; (8003d20 <HAL_RCC_OscConfig+0x4e0>)
 8003c38:	4011      	ands	r1, r2
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <HAL_RCC_OscConfig+0x426>
 8003c3e:	2080      	movs	r0, #128	; 0x80
 8003c40:	0340      	lsls	r0, r0, #13
 8003c42:	4283      	cmp	r3, r0
 8003c44:	d00f      	beq.n	8003c66 <HAL_RCC_OscConfig+0x426>
 8003c46:	2080      	movs	r0, #128	; 0x80
 8003c48:	0380      	lsls	r0, r0, #14
 8003c4a:	4283      	cmp	r3, r0
 8003c4c:	d00b      	beq.n	8003c66 <HAL_RCC_OscConfig+0x426>
 8003c4e:	23c0      	movs	r3, #192	; 0xc0
 8003c50:	039b      	lsls	r3, r3, #14
 8003c52:	4299      	cmp	r1, r3
 8003c54:	d007      	beq.n	8003c66 <HAL_RCC_OscConfig+0x426>
 8003c56:	23e0      	movs	r3, #224	; 0xe0
 8003c58:	039b      	lsls	r3, r3, #14
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d003      	beq.n	8003c66 <HAL_RCC_OscConfig+0x426>
 8003c5e:	4931      	ldr	r1, [pc, #196]	; (8003d24 <HAL_RCC_OscConfig+0x4e4>)
 8003c60:	482d      	ldr	r0, [pc, #180]	; (8003d18 <HAL_RCC_OscConfig+0x4d8>)
 8003c62:	f7fe f8ee 	bl	8001e42 <assert_failed>
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8003c66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c68:	2b0f      	cmp	r3, #15
 8003c6a:	d903      	bls.n	8003c74 <HAL_RCC_OscConfig+0x434>
 8003c6c:	492e      	ldr	r1, [pc, #184]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003c6e:	482a      	ldr	r0, [pc, #168]	; (8003d18 <HAL_RCC_OscConfig+0x4d8>)
 8003c70:	f7fe f8e7 	bl	8001e42 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	401e      	ands	r6, r3
 8003c78:	602e      	str	r6, [r5, #0]
        tickstart = HAL_GetTick();
 8003c7a:	f7fe fdaf 	bl	80027dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c7e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8003c80:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c82:	04b6      	lsls	r6, r6, #18
 8003c84:	682b      	ldr	r3, [r5, #0]
 8003c86:	4233      	tst	r3, r6
 8003c88:	d121      	bne.n	8003cce <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c8a:	220f      	movs	r2, #15
 8003c8c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003c8e:	4393      	bics	r3, r2
 8003c90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c92:	4313      	orrs	r3, r2
 8003c94:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003c96:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c9a:	686a      	ldr	r2, [r5, #4]
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	4923      	ldr	r1, [pc, #140]	; (8003d2c <HAL_RCC_OscConfig+0x4ec>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ca0:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca2:	400a      	ands	r2, r1
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003ca8:	2380      	movs	r3, #128	; 0x80
 8003caa:	682a      	ldr	r2, [r5, #0]
 8003cac:	045b      	lsls	r3, r3, #17
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003cb2:	f7fe fd93 	bl	80027dc <HAL_GetTick>
 8003cb6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cb8:	04a4      	lsls	r4, r4, #18
 8003cba:	682b      	ldr	r3, [r5, #0]
 8003cbc:	4223      	tst	r3, r4
 8003cbe:	d000      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x482>
 8003cc0:	e61c      	b.n	80038fc <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc2:	f7fe fd8b 	bl	80027dc <HAL_GetTick>
 8003cc6:	1b80      	subs	r0, r0, r6
 8003cc8:	2802      	cmp	r0, #2
 8003cca:	d9f6      	bls.n	8003cba <HAL_RCC_OscConfig+0x47a>
 8003ccc:	e64e      	b.n	800396c <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cce:	f7fe fd85 	bl	80027dc <HAL_GetTick>
 8003cd2:	1bc0      	subs	r0, r0, r7
 8003cd4:	2802      	cmp	r0, #2
 8003cd6:	d9d5      	bls.n	8003c84 <HAL_RCC_OscConfig+0x444>
 8003cd8:	e648      	b.n	800396c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_PLL_DISABLE();
 8003cda:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cdc:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003cde:	401e      	ands	r6, r3
 8003ce0:	602e      	str	r6, [r5, #0]
        tickstart = HAL_GetTick();
 8003ce2:	f7fe fd7b 	bl	80027dc <HAL_GetTick>
 8003ce6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce8:	04a4      	lsls	r4, r4, #18
 8003cea:	682b      	ldr	r3, [r5, #0]
 8003cec:	4223      	tst	r3, r4
 8003cee:	d100      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x4b2>
 8003cf0:	e604      	b.n	80038fc <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf2:	f7fe fd73 	bl	80027dc <HAL_GetTick>
 8003cf6:	1b80      	subs	r0, r0, r6
 8003cf8:	2802      	cmp	r0, #2
 8003cfa:	d9f6      	bls.n	8003cea <HAL_RCC_OscConfig+0x4aa>
 8003cfc:	e636      	b.n	800396c <HAL_RCC_OscConfig+0x12c>
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	00001388 	.word	0x00001388
 8003d04:	efffffff 	.word	0xefffffff
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	feffffff 	.word	0xfeffffff
 8003d10:	fffeffff 	.word	0xfffeffff
 8003d14:	0000027d 	.word	0x0000027d
 8003d18:	080065c5 	.word	0x080065c5
 8003d1c:	fffbffff 	.word	0xfffbffff
 8003d20:	fff3ffff 	.word	0xfff3ffff
 8003d24:	0000027e 	.word	0x0000027e
 8003d28:	0000027f 	.word	0x0000027f
 8003d2c:	ffc2ffff 	.word	0xffc2ffff

08003d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d30:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003d32:	4c14      	ldr	r4, [pc, #80]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8003d34:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003d36:	2210      	movs	r2, #16
 8003d38:	0021      	movs	r1, r4
 8003d3a:	4668      	mov	r0, sp
 8003d3c:	f001 fe6c 	bl	8005a18 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003d40:	0021      	movs	r1, r4
 8003d42:	ad04      	add	r5, sp, #16
 8003d44:	2210      	movs	r2, #16
 8003d46:	3110      	adds	r1, #16
 8003d48:	0028      	movs	r0, r5
 8003d4a:	f001 fe65 	bl	8005a18 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d4e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003d50:	4e0d      	ldr	r6, [pc, #52]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x58>)
 8003d52:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003d54:	401a      	ands	r2, r3
 8003d56:	2a08      	cmp	r2, #8
 8003d58:	d111      	bne.n	8003d7e <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003d5a:	200f      	movs	r0, #15
 8003d5c:	466a      	mov	r2, sp
 8003d5e:	0c99      	lsrs	r1, r3, #18
 8003d60:	4001      	ands	r1, r0
 8003d62:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003d64:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003d66:	4002      	ands	r2, r0
 8003d68:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d6a:	03db      	lsls	r3, r3, #15
 8003d6c:	d505      	bpl.n	8003d7a <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003d6e:	4807      	ldr	r0, [pc, #28]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x5c>)
 8003d70:	f7fc f9d4 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8003d74:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003d76:	b008      	add	sp, #32
 8003d78:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8003d7a:	4805      	ldr	r0, [pc, #20]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x60>)
 8003d7c:	e7fa      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8003d7e:	4803      	ldr	r0, [pc, #12]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8003d80:	e7f9      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x46>
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	080062d0 	.word	0x080062d0
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	007a1200 	.word	0x007a1200
 8003d90:	003d0900 	.word	0x003d0900

08003d94 <HAL_RCC_ClockConfig>:
{
 8003d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d96:	0004      	movs	r4, r0
 8003d98:	000f      	movs	r7, r1
  assert_param(RCC_ClkInitStruct != NULL);
 8003d9a:	2800      	cmp	r0, #0
 8003d9c:	d103      	bne.n	8003da6 <HAL_RCC_ClockConfig+0x12>
 8003d9e:	4968      	ldr	r1, [pc, #416]	; (8003f40 <HAL_RCC_ClockConfig+0x1ac>)
 8003da0:	4868      	ldr	r0, [pc, #416]	; (8003f44 <HAL_RCC_ClockConfig+0x1b0>)
 8003da2:	f7fe f84e 	bl	8001e42 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	075b      	lsls	r3, r3, #29
 8003daa:	d103      	bne.n	8003db4 <HAL_RCC_ClockConfig+0x20>
 8003dac:	4966      	ldr	r1, [pc, #408]	; (8003f48 <HAL_RCC_ClockConfig+0x1b4>)
 8003dae:	4865      	ldr	r0, [pc, #404]	; (8003f44 <HAL_RCC_ClockConfig+0x1b0>)
 8003db0:	f7fe f847 	bl	8001e42 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003db4:	2f01      	cmp	r7, #1
 8003db6:	d904      	bls.n	8003dc2 <HAL_RCC_ClockConfig+0x2e>
 8003db8:	21b7      	movs	r1, #183	; 0xb7
 8003dba:	4862      	ldr	r0, [pc, #392]	; (8003f44 <HAL_RCC_ClockConfig+0x1b0>)
 8003dbc:	0089      	lsls	r1, r1, #2
 8003dbe:	f7fe f840 	bl	8001e42 <assert_failed>
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	4d61      	ldr	r5, [pc, #388]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc6:	682b      	ldr	r3, [r5, #0]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	429f      	cmp	r7, r3
 8003dcc:	d81f      	bhi.n	8003e0e <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	079b      	lsls	r3, r3, #30
 8003dd2:	d426      	bmi.n	8003e22 <HAL_RCC_ClockConfig+0x8e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	07db      	lsls	r3, r3, #31
 8003dd8:	d445      	bmi.n	8003e66 <HAL_RCC_ClockConfig+0xd2>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003dda:	2301      	movs	r3, #1
 8003ddc:	682a      	ldr	r2, [r5, #0]
 8003dde:	401a      	ands	r2, r3
 8003de0:	4297      	cmp	r7, r2
 8003de2:	d200      	bcs.n	8003de6 <HAL_RCC_ClockConfig+0x52>
 8003de4:	e08a      	b.n	8003efc <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	4d59      	ldr	r5, [pc, #356]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	075b      	lsls	r3, r3, #29
 8003dec:	d500      	bpl.n	8003df0 <HAL_RCC_ClockConfig+0x5c>
 8003dee:	e08d      	b.n	8003f0c <HAL_RCC_ClockConfig+0x178>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003df0:	f7ff ff9e 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 8003df4:	686b      	ldr	r3, [r5, #4]
 8003df6:	4a57      	ldr	r2, [pc, #348]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	0f1b      	lsrs	r3, r3, #28
 8003dfc:	5cd3      	ldrb	r3, [r2, r3]
 8003dfe:	40d8      	lsrs	r0, r3
 8003e00:	4b55      	ldr	r3, [pc, #340]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e02:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003e04:	2000      	movs	r0, #0
 8003e06:	f7fe fcbf 	bl	8002788 <HAL_InitTick>
  return HAL_OK;
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_ClockConfig+0x8c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0e:	682b      	ldr	r3, [r5, #0]
 8003e10:	4393      	bics	r3, r2
 8003e12:	433b      	orrs	r3, r7
 8003e14:	602b      	str	r3, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e16:	682b      	ldr	r3, [r5, #0]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	429f      	cmp	r7, r3
 8003e1c:	d0d7      	beq.n	8003dce <HAL_RCC_ClockConfig+0x3a>
      return HAL_ERROR;
 8003e1e:	2001      	movs	r0, #1
}
 8003e20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003e22:	68a3      	ldr	r3, [r4, #8]
 8003e24:	2280      	movs	r2, #128	; 0x80
 8003e26:	0019      	movs	r1, r3
 8003e28:	4391      	bics	r1, r2
 8003e2a:	d014      	beq.n	8003e56 <HAL_RCC_ClockConfig+0xc2>
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	0019      	movs	r1, r3
 8003e30:	4391      	bics	r1, r2
 8003e32:	2990      	cmp	r1, #144	; 0x90
 8003e34:	d00f      	beq.n	8003e56 <HAL_RCC_ClockConfig+0xc2>
 8003e36:	2240      	movs	r2, #64	; 0x40
 8003e38:	0019      	movs	r1, r3
 8003e3a:	4391      	bics	r1, r2
 8003e3c:	29a0      	cmp	r1, #160	; 0xa0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCC_ClockConfig+0xc2>
 8003e40:	2210      	movs	r2, #16
 8003e42:	0019      	movs	r1, r3
 8003e44:	4391      	bics	r1, r2
 8003e46:	29c0      	cmp	r1, #192	; 0xc0
 8003e48:	d005      	beq.n	8003e56 <HAL_RCC_ClockConfig+0xc2>
 8003e4a:	2bf0      	cmp	r3, #240	; 0xf0
 8003e4c:	d003      	beq.n	8003e56 <HAL_RCC_ClockConfig+0xc2>
 8003e4e:	4943      	ldr	r1, [pc, #268]	; (8003f5c <HAL_RCC_ClockConfig+0x1c8>)
 8003e50:	483c      	ldr	r0, [pc, #240]	; (8003f44 <HAL_RCC_ClockConfig+0x1b0>)
 8003e52:	f7fd fff6 	bl	8001e42 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e56:	21f0      	movs	r1, #240	; 0xf0
 8003e58:	4a3d      	ldr	r2, [pc, #244]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	6853      	ldr	r3, [r2, #4]
 8003e5c:	438b      	bics	r3, r1
 8003e5e:	68a1      	ldr	r1, [r4, #8]
 8003e60:	430b      	orrs	r3, r1
 8003e62:	6053      	str	r3, [r2, #4]
 8003e64:	e7b6      	b.n	8003dd4 <HAL_RCC_ClockConfig+0x40>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003e66:	6863      	ldr	r3, [r4, #4]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d903      	bls.n	8003e74 <HAL_RCC_ClockConfig+0xe0>
 8003e6c:	493c      	ldr	r1, [pc, #240]	; (8003f60 <HAL_RCC_ClockConfig+0x1cc>)
 8003e6e:	4835      	ldr	r0, [pc, #212]	; (8003f44 <HAL_RCC_ClockConfig+0x1b0>)
 8003e70:	f7fd ffe7 	bl	8001e42 <assert_failed>
 8003e74:	4e36      	ldr	r6, [pc, #216]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e76:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e78:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7a:	2a01      	cmp	r2, #1
 8003e7c:	d11a      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	039b      	lsls	r3, r3, #14
 8003e80:	d5cd      	bpl.n	8003e1e <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e82:	2103      	movs	r1, #3
 8003e84:	6873      	ldr	r3, [r6, #4]
 8003e86:	438b      	bics	r3, r1
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003e8c:	f7fe fca6 	bl	80027dc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e90:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8003e92:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d115      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x130>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e98:	220c      	movs	r2, #12
 8003e9a:	6873      	ldr	r3, [r6, #4]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d09b      	beq.n	8003dda <HAL_RCC_ClockConfig+0x46>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea2:	f7fe fc9b 	bl	80027dc <HAL_GetTick>
 8003ea6:	9b01      	ldr	r3, [sp, #4]
 8003ea8:	1ac0      	subs	r0, r0, r3
 8003eaa:	4b2e      	ldr	r3, [pc, #184]	; (8003f64 <HAL_RCC_ClockConfig+0x1d0>)
 8003eac:	4298      	cmp	r0, r3
 8003eae:	d9f3      	bls.n	8003e98 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 8003eb0:	2003      	movs	r0, #3
 8003eb2:	e7b5      	b.n	8003e20 <HAL_RCC_ClockConfig+0x8c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eb4:	2a02      	cmp	r2, #2
 8003eb6:	d102      	bne.n	8003ebe <HAL_RCC_ClockConfig+0x12a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb8:	019b      	lsls	r3, r3, #6
 8003eba:	d4e2      	bmi.n	8003e82 <HAL_RCC_ClockConfig+0xee>
 8003ebc:	e7af      	b.n	8003e1e <HAL_RCC_ClockConfig+0x8a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ebe:	079b      	lsls	r3, r3, #30
 8003ec0:	d4df      	bmi.n	8003e82 <HAL_RCC_ClockConfig+0xee>
 8003ec2:	e7ac      	b.n	8003e1e <HAL_RCC_ClockConfig+0x8a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d013      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x15c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ec8:	220c      	movs	r2, #12
 8003eca:	6873      	ldr	r3, [r6, #4]
 8003ecc:	4213      	tst	r3, r2
 8003ece:	d100      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0x13e>
 8003ed0:	e783      	b.n	8003dda <HAL_RCC_ClockConfig+0x46>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed2:	f7fe fc83 	bl	80027dc <HAL_GetTick>
 8003ed6:	9b01      	ldr	r3, [sp, #4]
 8003ed8:	1ac0      	subs	r0, r0, r3
 8003eda:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <HAL_RCC_ClockConfig+0x1d0>)
 8003edc:	4298      	cmp	r0, r3
 8003ede:	d9f3      	bls.n	8003ec8 <HAL_RCC_ClockConfig+0x134>
 8003ee0:	e7e6      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x11c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee2:	f7fe fc7b 	bl	80027dc <HAL_GetTick>
 8003ee6:	9b01      	ldr	r3, [sp, #4]
 8003ee8:	1ac0      	subs	r0, r0, r3
 8003eea:	4b1e      	ldr	r3, [pc, #120]	; (8003f64 <HAL_RCC_ClockConfig+0x1d0>)
 8003eec:	4298      	cmp	r0, r3
 8003eee:	d8df      	bhi.n	8003eb0 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ef0:	220c      	movs	r2, #12
 8003ef2:	6873      	ldr	r3, [r6, #4]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d1f3      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0x14e>
 8003efa:	e76e      	b.n	8003dda <HAL_RCC_ClockConfig+0x46>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efc:	682a      	ldr	r2, [r5, #0]
 8003efe:	439a      	bics	r2, r3
 8003f00:	602a      	str	r2, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f02:	682a      	ldr	r2, [r5, #0]
 8003f04:	421a      	tst	r2, r3
 8003f06:	d000      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x176>
 8003f08:	e789      	b.n	8003e1e <HAL_RCC_ClockConfig+0x8a>
 8003f0a:	e76c      	b.n	8003de6 <HAL_RCC_ClockConfig+0x52>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003f0c:	68e3      	ldr	r3, [r4, #12]
 8003f0e:	4a16      	ldr	r2, [pc, #88]	; (8003f68 <HAL_RCC_ClockConfig+0x1d4>)
 8003f10:	4213      	tst	r3, r2
 8003f12:	d00d      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x19c>
 8003f14:	21a0      	movs	r1, #160	; 0xa0
 8003f16:	4a15      	ldr	r2, [pc, #84]	; (8003f6c <HAL_RCC_ClockConfig+0x1d8>)
 8003f18:	00c9      	lsls	r1, r1, #3
 8003f1a:	401a      	ands	r2, r3
 8003f1c:	428a      	cmp	r2, r1
 8003f1e:	d007      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x19c>
 8003f20:	22c0      	movs	r2, #192	; 0xc0
 8003f22:	00d2      	lsls	r2, r2, #3
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d003      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x19c>
 8003f28:	4911      	ldr	r1, [pc, #68]	; (8003f70 <HAL_RCC_ClockConfig+0x1dc>)
 8003f2a:	4806      	ldr	r0, [pc, #24]	; (8003f44 <HAL_RCC_ClockConfig+0x1b0>)
 8003f2c:	f7fd ff89 	bl	8001e42 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003f30:	686b      	ldr	r3, [r5, #4]
 8003f32:	4a10      	ldr	r2, [pc, #64]	; (8003f74 <HAL_RCC_ClockConfig+0x1e0>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	68e2      	ldr	r2, [r4, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	606b      	str	r3, [r5, #4]
 8003f3c:	e758      	b.n	8003df0 <HAL_RCC_ClockConfig+0x5c>
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	000002da 	.word	0x000002da
 8003f44:	080065c5 	.word	0x080065c5
 8003f48:	000002db 	.word	0x000002db
 8003f4c:	40022000 	.word	0x40022000
 8003f50:	40021000 	.word	0x40021000
 8003f54:	0800641d 	.word	0x0800641d
 8003f58:	20000234 	.word	0x20000234
 8003f5c:	000002f3 	.word	0x000002f3
 8003f60:	000002fa 	.word	0x000002fa
 8003f64:	00001388 	.word	0x00001388
 8003f68:	fffffbff 	.word	0xfffffbff
 8003f6c:	fffffdff 	.word	0xfffffdff
 8003f70:	00000363 	.word	0x00000363
 8003f74:	fffff8ff 	.word	0xfffff8ff

08003f78 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003f78:	4b01      	ldr	r3, [pc, #4]	; (8003f80 <HAL_RCC_GetHCLKFreq+0x8>)
 8003f7a:	6818      	ldr	r0, [r3, #0]
}
 8003f7c:	4770      	bx	lr
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	20000234 	.word	0x20000234

08003f84 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003f86:	4a05      	ldr	r2, [pc, #20]	; (8003f9c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	055b      	lsls	r3, r3, #21
 8003f8c:	0f5b      	lsrs	r3, r3, #29
 8003f8e:	5cd3      	ldrb	r3, [r2, r3]
 8003f90:	4a03      	ldr	r2, [pc, #12]	; (8003fa0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003f92:	6810      	ldr	r0, [r2, #0]
 8003f94:	40d8      	lsrs	r0, r3
}    
 8003f96:	4770      	bx	lr
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	0800642d 	.word	0x0800642d
 8003fa0:	20000234 	.word	0x20000234

08003fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  uint32_t temp_reg = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003fa6:	4b4c      	ldr	r3, [pc, #304]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fa8:	6802      	ldr	r2, [r0, #0]
{
 8003faa:	b085      	sub	sp, #20
 8003fac:	0005      	movs	r5, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d903      	bls.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x16>
 8003fb2:	217e      	movs	r1, #126	; 0x7e
 8003fb4:	4849      	ldr	r0, [pc, #292]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003fb6:	f7fd ff44 	bl	8001e42 <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fba:	682b      	ldr	r3, [r5, #0]
 8003fbc:	03db      	lsls	r3, r3, #15
 8003fbe:	d530      	bpl.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003fc0:	686b      	ldr	r3, [r5, #4]
 8003fc2:	4a47      	ldr	r2, [pc, #284]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003fc4:	4213      	tst	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8003fc8:	2184      	movs	r1, #132	; 0x84
 8003fca:	4844      	ldr	r0, [pc, #272]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003fcc:	f7fd ff39 	bl	8001e42 <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003fd2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd4:	4c43      	ldr	r4, [pc, #268]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003fd6:	0552      	lsls	r2, r2, #21
 8003fd8:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003fda:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fdc:	4213      	tst	r3, r2
 8003fde:	d108      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fe0:	69e3      	ldr	r3, [r4, #28]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61e3      	str	r3, [r4, #28]
 8003fe6:	69e3      	ldr	r3, [r4, #28]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	9303      	str	r3, [sp, #12]
 8003fec:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff2:	2780      	movs	r7, #128	; 0x80
 8003ff4:	4e3c      	ldr	r6, [pc, #240]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8003ff6:	007f      	lsls	r7, r7, #1
 8003ff8:	6833      	ldr	r3, [r6, #0]
 8003ffa:	423b      	tst	r3, r7
 8003ffc:	d038      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ffe:	22c0      	movs	r2, #192	; 0xc0
 8004000:	6a23      	ldr	r3, [r4, #32]
 8004002:	0092      	lsls	r2, r2, #2
 8004004:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004006:	d145      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xf0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004008:	6a23      	ldr	r3, [r4, #32]
 800400a:	4a35      	ldr	r2, [pc, #212]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800400c:	4013      	ands	r3, r2
 800400e:	686a      	ldr	r2, [r5, #4]
 8004010:	4313      	orrs	r3, r2
 8004012:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004014:	9b00      	ldr	r3, [sp, #0]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d103      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800401a:	69e3      	ldr	r3, [r4, #28]
 800401c:	4a33      	ldr	r2, [pc, #204]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800401e:	4013      	ands	r3, r2
 8004020:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004022:	682b      	ldr	r3, [r5, #0]
 8004024:	07db      	lsls	r3, r3, #31
 8004026:	d50d      	bpl.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004028:	68ab      	ldr	r3, [r5, #8]
 800402a:	2b03      	cmp	r3, #3
 800402c:	d903      	bls.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x92>
 800402e:	21cb      	movs	r1, #203	; 0xcb
 8004030:	482a      	ldr	r0, [pc, #168]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8004032:	f7fd ff06 	bl	8001e42 <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004036:	2103      	movs	r1, #3
 8004038:	4a2a      	ldr	r2, [pc, #168]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800403a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800403c:	438b      	bics	r3, r1
 800403e:	68a9      	ldr	r1, [r5, #8]
 8004040:	430b      	orrs	r3, r1
 8004042:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004044:	682b      	ldr	r3, [r5, #0]
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004046:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004048:	069b      	lsls	r3, r3, #26
 800404a:	d521      	bpl.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xec>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800404c:	2310      	movs	r3, #16
 800404e:	68ea      	ldr	r2, [r5, #12]
 8004050:	439a      	bics	r2, r3
 8004052:	4282      	cmp	r2, r0
 8004054:	d003      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xba>
 8004056:	21ef      	movs	r1, #239	; 0xef
 8004058:	4820      	ldr	r0, [pc, #128]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800405a:	f7fd fef2 	bl	8001e42 <assert_failed>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800405e:	2110      	movs	r1, #16
 8004060:	4a20      	ldr	r2, [pc, #128]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
  return HAL_OK;
 8004062:	2000      	movs	r0, #0
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004064:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004066:	438b      	bics	r3, r1
 8004068:	68e9      	ldr	r1, [r5, #12]
 800406a:	430b      	orrs	r3, r1
 800406c:	6313      	str	r3, [r2, #48]	; 0x30
 800406e:	e00f      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xec>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004070:	6833      	ldr	r3, [r6, #0]
 8004072:	433b      	orrs	r3, r7
 8004074:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004076:	f7fe fbb1 	bl	80027dc <HAL_GetTick>
 800407a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407c:	6833      	ldr	r3, [r6, #0]
 800407e:	423b      	tst	r3, r7
 8004080:	d1bd      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x5a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004082:	f7fe fbab 	bl	80027dc <HAL_GetTick>
 8004086:	9b01      	ldr	r3, [sp, #4]
 8004088:	1ac0      	subs	r0, r0, r3
 800408a:	2864      	cmp	r0, #100	; 0x64
 800408c:	d9f6      	bls.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd8>
          return HAL_TIMEOUT;
 800408e:	2003      	movs	r0, #3
}
 8004090:	b005      	add	sp, #20
 8004092:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004094:	6869      	ldr	r1, [r5, #4]
 8004096:	400a      	ands	r2, r1
 8004098:	4293      	cmp	r3, r2
 800409a:	d0b5      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x64>
      __HAL_RCC_BACKUPRESET_FORCE();
 800409c:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800409e:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80040a0:	6a20      	ldr	r0, [r4, #32]
 80040a2:	025b      	lsls	r3, r3, #9
 80040a4:	4303      	orrs	r3, r0
 80040a6:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040a8:	6a23      	ldr	r3, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040aa:	490d      	ldr	r1, [pc, #52]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040ac:	4810      	ldr	r0, [pc, #64]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040ae:	4011      	ands	r1, r2
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040b0:	4003      	ands	r3, r0
 80040b2:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80040b4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040b6:	07d3      	lsls	r3, r2, #31
 80040b8:	d5a6      	bpl.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x64>
        tickstart = HAL_GetTick();
 80040ba:	f7fe fb8f 	bl	80027dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040be:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80040c0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c2:	6a23      	ldr	r3, [r4, #32]
 80040c4:	423b      	tst	r3, r7
 80040c6:	d19f      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x64>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c8:	f7fe fb88 	bl	80027dc <HAL_GetTick>
 80040cc:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040ce:	1b80      	subs	r0, r0, r6
 80040d0:	4298      	cmp	r0, r3
 80040d2:	d9f6      	bls.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 80040d4:	e7db      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xea>
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	00010021 	.word	0x00010021
 80040dc:	080065fd 	.word	0x080065fd
 80040e0:	fffffcff 	.word	0xfffffcff
 80040e4:	40021000 	.word	0x40021000
 80040e8:	40007000 	.word	0x40007000
 80040ec:	efffffff 	.word	0xefffffff
 80040f0:	fffeffff 	.word	0xfffeffff
 80040f4:	00001388 	.word	0x00001388

080040f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040fa:	2201      	movs	r2, #1
 80040fc:	6a03      	ldr	r3, [r0, #32]
{
 80040fe:	0004      	movs	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004100:	4393      	bics	r3, r2
 8004102:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004104:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004106:	6847      	ldr	r7, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004108:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800410a:	3272      	adds	r2, #114	; 0x72
 800410c:	4393      	bics	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800410e:	680a      	ldr	r2, [r1, #0]
{
 8004110:	000e      	movs	r6, r1
  tmpccmrx |= OC_Config->OCMode;
 8004112:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004114:	2302      	movs	r3, #2
 8004116:	439d      	bics	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004118:	688b      	ldr	r3, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 800411a:	9201      	str	r2, [sp, #4]
  tmpccer |= OC_Config->OCPolarity;
 800411c:	431d      	orrs	r5, r3

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800411e:	4b1e      	ldr	r3, [pc, #120]	; (8004198 <TIM_OC1_SetConfig+0xa0>)
 8004120:	4298      	cmp	r0, r3
 8004122:	d005      	beq.n	8004130 <TIM_OC1_SetConfig+0x38>
 8004124:	4b1d      	ldr	r3, [pc, #116]	; (800419c <TIM_OC1_SetConfig+0xa4>)
 8004126:	4298      	cmp	r0, r3
 8004128:	d002      	beq.n	8004130 <TIM_OC1_SetConfig+0x38>
 800412a:	4b1d      	ldr	r3, [pc, #116]	; (80041a0 <TIM_OC1_SetConfig+0xa8>)
 800412c:	4298      	cmp	r0, r3
 800412e:	d12c      	bne.n	800418a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004130:	2308      	movs	r3, #8
 8004132:	68f2      	ldr	r2, [r6, #12]
 8004134:	439a      	bics	r2, r3
 8004136:	d003      	beq.n	8004140 <TIM_OC1_SetConfig+0x48>
 8004138:	491a      	ldr	r1, [pc, #104]	; (80041a4 <TIM_OC1_SetConfig+0xac>)
 800413a:	481b      	ldr	r0, [pc, #108]	; (80041a8 <TIM_OC1_SetConfig+0xb0>)
 800413c:	f7fd fe81 	bl	8001e42 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004140:	2308      	movs	r3, #8
 8004142:	439d      	bics	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004144:	68f3      	ldr	r3, [r6, #12]
 8004146:	431d      	orrs	r5, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004148:	2304      	movs	r3, #4
 800414a:	439d      	bics	r5, r3
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800414c:	4b12      	ldr	r3, [pc, #72]	; (8004198 <TIM_OC1_SetConfig+0xa0>)
 800414e:	429c      	cmp	r4, r3
 8004150:	d005      	beq.n	800415e <TIM_OC1_SetConfig+0x66>
 8004152:	4b12      	ldr	r3, [pc, #72]	; (800419c <TIM_OC1_SetConfig+0xa4>)
 8004154:	429c      	cmp	r4, r3
 8004156:	d002      	beq.n	800415e <TIM_OC1_SetConfig+0x66>
 8004158:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <TIM_OC1_SetConfig+0xa8>)
 800415a:	429c      	cmp	r4, r3
 800415c:	d115      	bne.n	800418a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800415e:	4b13      	ldr	r3, [pc, #76]	; (80041ac <TIM_OC1_SetConfig+0xb4>)
 8004160:	69b2      	ldr	r2, [r6, #24]
 8004162:	421a      	tst	r2, r3
 8004164:	d003      	beq.n	800416e <TIM_OC1_SetConfig+0x76>
 8004166:	4912      	ldr	r1, [pc, #72]	; (80041b0 <TIM_OC1_SetConfig+0xb8>)
 8004168:	480f      	ldr	r0, [pc, #60]	; (80041a8 <TIM_OC1_SetConfig+0xb0>)
 800416a:	f7fd fe6a 	bl	8001e42 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800416e:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <TIM_OC1_SetConfig+0xbc>)
 8004170:	6972      	ldr	r2, [r6, #20]
 8004172:	421a      	tst	r2, r3
 8004174:	d003      	beq.n	800417e <TIM_OC1_SetConfig+0x86>
 8004176:	4910      	ldr	r1, [pc, #64]	; (80041b8 <TIM_OC1_SetConfig+0xc0>)
 8004178:	480b      	ldr	r0, [pc, #44]	; (80041a8 <TIM_OC1_SetConfig+0xb0>)
 800417a:	f7fd fe62 	bl	8001e42 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800417e:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <TIM_OC1_SetConfig+0xc4>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004180:	69b2      	ldr	r2, [r6, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004182:	401f      	ands	r7, r3
    tmpcr2 |= OC_Config->OCNIdleState;
 8004184:	6973      	ldr	r3, [r6, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	431f      	orrs	r7, r3
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800418a:	9b01      	ldr	r3, [sp, #4]
  TIMx->CR2 = tmpcr2;
 800418c:	6067      	str	r7, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800418e:	61a3      	str	r3, [r4, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004190:	6873      	ldr	r3, [r6, #4]
 8004192:	6363      	str	r3, [r4, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004194:	6225      	str	r5, [r4, #32]
}
 8004196:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004198:	40012c00 	.word	0x40012c00
 800419c:	40014400 	.word	0x40014400
 80041a0:	40014800 	.word	0x40014800
 80041a4:	00001290 	.word	0x00001290
 80041a8:	08006638 	.word	0x08006638
 80041ac:	fffffdff 	.word	0xfffffdff
 80041b0:	0000129d 	.word	0x0000129d
 80041b4:	fffffeff 	.word	0xfffffeff
 80041b8:	0000129e 	.word	0x0000129e
 80041bc:	fffffcff 	.word	0xfffffcff

080041c0 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c2:	000f      	movs	r7, r1
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041c4:	2173      	movs	r1, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041c6:	6a03      	ldr	r3, [r0, #32]
 80041c8:	4a25      	ldr	r2, [pc, #148]	; (8004260 <TIM_OC3_SetConfig+0xa0>)
{
 80041ca:	b085      	sub	sp, #20
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041cc:	4013      	ands	r3, r2
 80041ce:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80041d0:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80041d2:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80041d4:	69c3      	ldr	r3, [r0, #28]
{
 80041d6:	0005      	movs	r5, r0
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041d8:	438b      	bics	r3, r1
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041da:	6839      	ldr	r1, [r7, #0]
 80041dc:	9202      	str	r2, [sp, #8]
 80041de:	4319      	orrs	r1, r3
 80041e0:	9101      	str	r1, [sp, #4]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041e2:	68bb      	ldr	r3, [r7, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80041e4:	491f      	ldr	r1, [pc, #124]	; (8004264 <TIM_OC3_SetConfig+0xa4>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041e6:	021b      	lsls	r3, r3, #8
  tmpccer &= ~TIM_CCER_CC3P;
 80041e8:	400c      	ands	r4, r1
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041ea:	431c      	orrs	r4, r3

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ec:	4b1e      	ldr	r3, [pc, #120]	; (8004268 <TIM_OC3_SetConfig+0xa8>)
 80041ee:	9103      	str	r1, [sp, #12]
 80041f0:	4298      	cmp	r0, r3
 80041f2:	d126      	bne.n	8004242 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80041f4:	2308      	movs	r3, #8
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	439a      	bics	r2, r3
 80041fa:	d003      	beq.n	8004204 <TIM_OC3_SetConfig+0x44>
 80041fc:	491b      	ldr	r1, [pc, #108]	; (800426c <TIM_OC3_SetConfig+0xac>)
 80041fe:	481c      	ldr	r0, [pc, #112]	; (8004270 <TIM_OC3_SetConfig+0xb0>)
 8004200:	f7fd fe1f 	bl	8001e42 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004204:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <TIM_OC3_SetConfig+0xb4>)
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004206:	68fa      	ldr	r2, [r7, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004208:	4023      	ands	r3, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800420a:	0214      	lsls	r4, r2, #8
 800420c:	431c      	orrs	r4, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800420e:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <TIM_OC3_SetConfig+0xb8>)
 8004210:	401c      	ands	r4, r3
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	9a03      	ldr	r2, [sp, #12]
 8004216:	4213      	tst	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_OC3_SetConfig+0x62>
 800421a:	4918      	ldr	r1, [pc, #96]	; (800427c <TIM_OC3_SetConfig+0xbc>)
 800421c:	4814      	ldr	r0, [pc, #80]	; (8004270 <TIM_OC3_SetConfig+0xb0>)
 800421e:	f7fd fe10 	bl	8001e42 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	9a02      	ldr	r2, [sp, #8]
 8004226:	4213      	tst	r3, r2
 8004228:	d003      	beq.n	8004232 <TIM_OC3_SetConfig+0x72>
 800422a:	4915      	ldr	r1, [pc, #84]	; (8004280 <TIM_OC3_SetConfig+0xc0>)
 800422c:	4810      	ldr	r0, [pc, #64]	; (8004270 <TIM_OC3_SetConfig+0xb0>)
 800422e:	f7fd fe08 	bl	8001e42 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004232:	4b14      	ldr	r3, [pc, #80]	; (8004284 <TIM_OC3_SetConfig+0xc4>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004234:	697a      	ldr	r2, [r7, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004236:	4033      	ands	r3, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004238:	69be      	ldr	r6, [r7, #24]
 800423a:	4316      	orrs	r6, r2
 800423c:	0136      	lsls	r6, r6, #4
 800423e:	431e      	orrs	r6, r3
 8004240:	e005      	b.n	800424e <TIM_OC3_SetConfig+0x8e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004242:	4b11      	ldr	r3, [pc, #68]	; (8004288 <TIM_OC3_SetConfig+0xc8>)
 8004244:	4298      	cmp	r0, r3
 8004246:	d0e4      	beq.n	8004212 <TIM_OC3_SetConfig+0x52>
 8004248:	4b10      	ldr	r3, [pc, #64]	; (800428c <TIM_OC3_SetConfig+0xcc>)
 800424a:	429d      	cmp	r5, r3
 800424c:	d0e1      	beq.n	8004212 <TIM_OC3_SetConfig+0x52>

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800424e:	9b01      	ldr	r3, [sp, #4]
  TIMx->CR2 = tmpcr2;
 8004250:	606e      	str	r6, [r5, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004252:	61eb      	str	r3, [r5, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	63eb      	str	r3, [r5, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004258:	622c      	str	r4, [r5, #32]
}
 800425a:	b005      	add	sp, #20
 800425c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	fffffeff 	.word	0xfffffeff
 8004264:	fffffdff 	.word	0xfffffdff
 8004268:	40012c00 	.word	0x40012c00
 800426c:	00001325 	.word	0x00001325
 8004270:	08006638 	.word	0x08006638
 8004274:	fffff7ff 	.word	0xfffff7ff
 8004278:	fffffbff 	.word	0xfffffbff
 800427c:	00001332 	.word	0x00001332
 8004280:	00001333 	.word	0x00001333
 8004284:	ffffcfff 	.word	0xffffcfff
 8004288:	40014400 	.word	0x40014400
 800428c:	40014800 	.word	0x40014800

08004290 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004292:	6a03      	ldr	r3, [r0, #32]
 8004294:	4a17      	ldr	r2, [pc, #92]	; (80042f4 <TIM_OC4_SetConfig+0x64>)
{
 8004296:	0004      	movs	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004298:	4013      	ands	r3, r2
 800429a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800429e:	4a16      	ldr	r2, [pc, #88]	; (80042f8 <TIM_OC4_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 80042a0:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80042a2:	69c7      	ldr	r7, [r0, #28]
{
 80042a4:	000e      	movs	r6, r1
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042a6:	4017      	ands	r7, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a8:	680a      	ldr	r2, [r1, #0]
 80042aa:	0212      	lsls	r2, r2, #8
 80042ac:	4317      	orrs	r7, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042ae:	4a13      	ldr	r2, [pc, #76]	; (80042fc <TIM_OC4_SetConfig+0x6c>)
 80042b0:	4013      	ands	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042b2:	688a      	ldr	r2, [r1, #8]
 80042b4:	0312      	lsls	r2, r2, #12
 80042b6:	431a      	orrs	r2, r3

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80042b8:	4b11      	ldr	r3, [pc, #68]	; (8004300 <TIM_OC4_SetConfig+0x70>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042ba:	9201      	str	r2, [sp, #4]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80042bc:	4298      	cmp	r0, r3
 80042be:	d005      	beq.n	80042cc <TIM_OC4_SetConfig+0x3c>
 80042c0:	4b10      	ldr	r3, [pc, #64]	; (8004304 <TIM_OC4_SetConfig+0x74>)
 80042c2:	4298      	cmp	r0, r3
 80042c4:	d002      	beq.n	80042cc <TIM_OC4_SetConfig+0x3c>
 80042c6:	4b10      	ldr	r3, [pc, #64]	; (8004308 <TIM_OC4_SetConfig+0x78>)
 80042c8:	4298      	cmp	r0, r3
 80042ca:	d10c      	bne.n	80042e6 <TIM_OC4_SetConfig+0x56>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <TIM_OC4_SetConfig+0x7c>)
 80042ce:	6972      	ldr	r2, [r6, #20]
 80042d0:	421a      	tst	r2, r3
 80042d2:	d003      	beq.n	80042dc <TIM_OC4_SetConfig+0x4c>
 80042d4:	490e      	ldr	r1, [pc, #56]	; (8004310 <TIM_OC4_SetConfig+0x80>)
 80042d6:	480f      	ldr	r0, [pc, #60]	; (8004314 <TIM_OC4_SetConfig+0x84>)
 80042d8:	f7fd fdb3 	bl	8001e42 <assert_failed>

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042dc:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <TIM_OC4_SetConfig+0x88>)
 80042de:	401d      	ands	r5, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042e0:	6973      	ldr	r3, [r6, #20]
 80042e2:	019b      	lsls	r3, r3, #6
 80042e4:	431d      	orrs	r5, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042e6:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 80042e8:	6065      	str	r5, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 80042ea:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80042ec:	6423      	str	r3, [r4, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ee:	9b01      	ldr	r3, [sp, #4]
 80042f0:	6223      	str	r3, [r4, #32]
}
 80042f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80042f4:	ffffefff 	.word	0xffffefff
 80042f8:	ffff8cff 	.word	0xffff8cff
 80042fc:	ffffdfff 	.word	0xffffdfff
 8004300:	40012c00 	.word	0x40012c00
 8004304:	40014400 	.word	0x40014400
 8004308:	40014800 	.word	0x40014800
 800430c:	fffffeff 	.word	0xfffffeff
 8004310:	00001370 	.word	0x00001370
 8004314:	08006638 	.word	0x08006638
 8004318:	ffffbfff 	.word	0xffffbfff

0800431c <HAL_TIM_Base_Start>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800431c:	6803      	ldr	r3, [r0, #0]
 800431e:	4a11      	ldr	r2, [pc, #68]	; (8004364 <HAL_TIM_Base_Start+0x48>)
{
 8004320:	b510      	push	{r4, lr}
 8004322:	0004      	movs	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004324:	4293      	cmp	r3, r2
 8004326:	d010      	beq.n	800434a <HAL_TIM_Base_Start+0x2e>
 8004328:	4a0f      	ldr	r2, [pc, #60]	; (8004368 <HAL_TIM_Base_Start+0x4c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00d      	beq.n	800434a <HAL_TIM_Base_Start+0x2e>
 800432e:	4a0f      	ldr	r2, [pc, #60]	; (800436c <HAL_TIM_Base_Start+0x50>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00a      	beq.n	800434a <HAL_TIM_Base_Start+0x2e>
 8004334:	4a0e      	ldr	r2, [pc, #56]	; (8004370 <HAL_TIM_Base_Start+0x54>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d007      	beq.n	800434a <HAL_TIM_Base_Start+0x2e>
 800433a:	4a0e      	ldr	r2, [pc, #56]	; (8004374 <HAL_TIM_Base_Start+0x58>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d004      	beq.n	800434a <HAL_TIM_Base_Start+0x2e>
 8004340:	2198      	movs	r1, #152	; 0x98
 8004342:	480d      	ldr	r0, [pc, #52]	; (8004378 <HAL_TIM_Base_Start+0x5c>)
 8004344:	0049      	lsls	r1, r1, #1
 8004346:	f7fd fd7c 	bl	8001e42 <assert_failed>
  htim->State= HAL_TIM_STATE_BUSY;
 800434a:	0022      	movs	r2, r4
 800434c:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 800434e:	2101      	movs	r1, #1
 8004350:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8004352:	323d      	adds	r2, #61	; 0x3d
 8004354:	7013      	strb	r3, [r2, #0]
  __HAL_TIM_ENABLE(htim);
 8004356:	6803      	ldr	r3, [r0, #0]
 8004358:	430b      	orrs	r3, r1
 800435a:	6003      	str	r3, [r0, #0]
}
 800435c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800435e:	7011      	strb	r1, [r2, #0]
}
 8004360:	bd10      	pop	{r4, pc}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	40012c00 	.word	0x40012c00
 8004368:	40000400 	.word	0x40000400
 800436c:	40002000 	.word	0x40002000
 8004370:	40014400 	.word	0x40014400
 8004374:	40014800 	.word	0x40014800
 8004378:	08006638 	.word	0x08006638

0800437c <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800437c:	6803      	ldr	r3, [r0, #0]
 800437e:	4a10      	ldr	r2, [pc, #64]	; (80043c0 <HAL_TIM_Base_Start_IT+0x44>)
{
 8004380:	b510      	push	{r4, lr}
 8004382:	0004      	movs	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004384:	4293      	cmp	r3, r2
 8004386:	d010      	beq.n	80043aa <HAL_TIM_Base_Start_IT+0x2e>
 8004388:	4a0e      	ldr	r2, [pc, #56]	; (80043c4 <HAL_TIM_Base_Start_IT+0x48>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00d      	beq.n	80043aa <HAL_TIM_Base_Start_IT+0x2e>
 800438e:	4a0e      	ldr	r2, [pc, #56]	; (80043c8 <HAL_TIM_Base_Start_IT+0x4c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00a      	beq.n	80043aa <HAL_TIM_Base_Start_IT+0x2e>
 8004394:	4a0d      	ldr	r2, [pc, #52]	; (80043cc <HAL_TIM_Base_Start_IT+0x50>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d007      	beq.n	80043aa <HAL_TIM_Base_Start_IT+0x2e>
 800439a:	4a0d      	ldr	r2, [pc, #52]	; (80043d0 <HAL_TIM_Base_Start_IT+0x54>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d004      	beq.n	80043aa <HAL_TIM_Base_Start_IT+0x2e>
 80043a0:	21af      	movs	r1, #175	; 0xaf
 80043a2:	480c      	ldr	r0, [pc, #48]	; (80043d4 <HAL_TIM_Base_Start_IT+0x58>)
 80043a4:	0049      	lsls	r1, r1, #1
 80043a6:	f7fd fd4c 	bl	8001e42 <assert_failed>
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043aa:	2201      	movs	r2, #1
 80043ac:	6823      	ldr	r3, [r4, #0]
}
 80043ae:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043b0:	68d9      	ldr	r1, [r3, #12]
 80043b2:	4311      	orrs	r1, r2
 80043b4:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80043b6:	6819      	ldr	r1, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]
}
 80043bc:	bd10      	pop	{r4, pc}
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	40000400 	.word	0x40000400
 80043c8:	40002000 	.word	0x40002000
 80043cc:	40014400 	.word	0x40014400
 80043d0:	40014800 	.word	0x40014800
 80043d4:	08006638 	.word	0x08006638

080043d8 <HAL_TIM_OC_MspInit>:
 80043d8:	4770      	bx	lr

080043da <HAL_TIM_PWM_MspInit>:
 80043da:	4770      	bx	lr

080043dc <HAL_TIM_PeriodElapsedCallback>:
 80043dc:	4770      	bx	lr

080043de <HAL_TIM_OC_DelayElapsedCallback>:
 80043de:	4770      	bx	lr

080043e0 <HAL_TIM_IC_CaptureCallback>:
 80043e0:	4770      	bx	lr

080043e2 <HAL_TIM_PWM_PulseFinishedCallback>:
 80043e2:	4770      	bx	lr

080043e4 <HAL_TIM_TriggerCallback>:
 80043e4:	4770      	bx	lr

080043e6 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043e6:	2202      	movs	r2, #2
 80043e8:	6803      	ldr	r3, [r0, #0]
{
 80043ea:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043ec:	6919      	ldr	r1, [r3, #16]
{
 80043ee:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043f0:	4211      	tst	r1, r2
 80043f2:	d00e      	beq.n	8004412 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80043f4:	68d9      	ldr	r1, [r3, #12]
 80043f6:	4211      	tst	r1, r2
 80043f8:	d00b      	beq.n	8004412 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043fa:	3a05      	subs	r2, #5
 80043fc:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043fe:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004400:	3204      	adds	r2, #4
 8004402:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004404:	079b      	lsls	r3, r3, #30
 8004406:	d100      	bne.n	800440a <HAL_TIM_IRQHandler+0x24>
 8004408:	e079      	b.n	80044fe <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 800440a:	f7ff ffe9 	bl	80043e0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	2300      	movs	r3, #0
 8004410:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004412:	2204      	movs	r2, #4
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	6919      	ldr	r1, [r3, #16]
 8004418:	4211      	tst	r1, r2
 800441a:	d010      	beq.n	800443e <HAL_TIM_IRQHandler+0x58>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800441c:	68d9      	ldr	r1, [r3, #12]
 800441e:	4211      	tst	r1, r2
 8004420:	d00d      	beq.n	800443e <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004422:	3a09      	subs	r2, #9
 8004424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004426:	3207      	adds	r2, #7
 8004428:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800442a:	699a      	ldr	r2, [r3, #24]
 800442c:	23c0      	movs	r3, #192	; 0xc0
 800442e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004430:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004432:	421a      	tst	r2, r3
 8004434:	d069      	beq.n	800450a <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8004436:	f7ff ffd3 	bl	80043e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	2300      	movs	r3, #0
 800443c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800443e:	2208      	movs	r2, #8
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	6919      	ldr	r1, [r3, #16]
 8004444:	4211      	tst	r1, r2
 8004446:	d00e      	beq.n	8004466 <HAL_TIM_IRQHandler+0x80>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004448:	68d9      	ldr	r1, [r3, #12]
 800444a:	4211      	tst	r1, r2
 800444c:	d00b      	beq.n	8004466 <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800444e:	3a11      	subs	r2, #17
 8004450:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004452:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004454:	320d      	adds	r2, #13
 8004456:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004458:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800445a:	079b      	lsls	r3, r3, #30
 800445c:	d05b      	beq.n	8004516 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 800445e:	f7ff ffbf 	bl	80043e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004462:	2300      	movs	r3, #0
 8004464:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004466:	2210      	movs	r2, #16
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	6919      	ldr	r1, [r3, #16]
 800446c:	4211      	tst	r1, r2
 800446e:	d010      	beq.n	8004492 <HAL_TIM_IRQHandler+0xac>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004470:	68d9      	ldr	r1, [r3, #12]
 8004472:	4211      	tst	r1, r2
 8004474:	d00d      	beq.n	8004492 <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004476:	3a21      	subs	r2, #33	; 0x21
 8004478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800447a:	3219      	adds	r2, #25
 800447c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800447e:	69da      	ldr	r2, [r3, #28]
 8004480:	23c0      	movs	r3, #192	; 0xc0
 8004482:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004484:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004486:	421a      	tst	r2, r3
 8004488:	d04b      	beq.n	8004522 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 800448a:	f7ff ffa9 	bl	80043e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448e:	2300      	movs	r3, #0
 8004490:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004492:	2201      	movs	r2, #1
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	6919      	ldr	r1, [r3, #16]
 8004498:	4211      	tst	r1, r2
 800449a:	d007      	beq.n	80044ac <HAL_TIM_IRQHandler+0xc6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800449c:	68d9      	ldr	r1, [r3, #12]
 800449e:	4211      	tst	r1, r2
 80044a0:	d004      	beq.n	80044ac <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044a2:	3a03      	subs	r2, #3
 80044a4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80044a6:	0020      	movs	r0, r4
 80044a8:	f7ff ff98 	bl	80043dc <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044ac:	2280      	movs	r2, #128	; 0x80
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	6919      	ldr	r1, [r3, #16]
 80044b2:	4211      	tst	r1, r2
 80044b4:	d008      	beq.n	80044c8 <HAL_TIM_IRQHandler+0xe2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80044b6:	68d9      	ldr	r1, [r3, #12]
 80044b8:	4211      	tst	r1, r2
 80044ba:	d005      	beq.n	80044c8 <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044bc:	3a02      	subs	r2, #2
 80044be:	3aff      	subs	r2, #255	; 0xff
 80044c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80044c2:	0020      	movs	r0, r4
 80044c4:	f000 fe87 	bl	80051d6 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044c8:	2240      	movs	r2, #64	; 0x40
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	6919      	ldr	r1, [r3, #16]
 80044ce:	4211      	tst	r1, r2
 80044d0:	d007      	beq.n	80044e2 <HAL_TIM_IRQHandler+0xfc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80044d2:	68d9      	ldr	r1, [r3, #12]
 80044d4:	4211      	tst	r1, r2
 80044d6:	d004      	beq.n	80044e2 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044d8:	3a81      	subs	r2, #129	; 0x81
 80044da:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80044dc:	0020      	movs	r0, r4
 80044de:	f7ff ff81 	bl	80043e4 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044e2:	2220      	movs	r2, #32
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	6919      	ldr	r1, [r3, #16]
 80044e8:	4211      	tst	r1, r2
 80044ea:	d007      	beq.n	80044fc <HAL_TIM_IRQHandler+0x116>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80044ec:	68d9      	ldr	r1, [r3, #12]
 80044ee:	4211      	tst	r1, r2
 80044f0:	d004      	beq.n	80044fc <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044f2:	3a41      	subs	r2, #65	; 0x41
 80044f4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80044f6:	0020      	movs	r0, r4
 80044f8:	f000 fe6c 	bl	80051d4 <HAL_TIMEx_CommutationCallback>
}
 80044fc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fe:	f7ff ff6e 	bl	80043de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004502:	0020      	movs	r0, r4
 8004504:	f7ff ff6d 	bl	80043e2 <HAL_TIM_PWM_PulseFinishedCallback>
 8004508:	e781      	b.n	800440e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450a:	f7ff ff68 	bl	80043de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450e:	0020      	movs	r0, r4
 8004510:	f7ff ff67 	bl	80043e2 <HAL_TIM_PWM_PulseFinishedCallback>
 8004514:	e791      	b.n	800443a <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	f7ff ff62 	bl	80043de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451a:	0020      	movs	r0, r4
 800451c:	f7ff ff61 	bl	80043e2 <HAL_TIM_PWM_PulseFinishedCallback>
 8004520:	e79f      	b.n	8004462 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004522:	f7ff ff5c 	bl	80043de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004526:	0020      	movs	r0, r4
 8004528:	f7ff ff5b 	bl	80043e2 <HAL_TIM_PWM_PulseFinishedCallback>
 800452c:	e7af      	b.n	800448e <HAL_TIM_IRQHandler+0xa8>
	...

08004530 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004530:	4a19      	ldr	r2, [pc, #100]	; (8004598 <TIM_Base_SetConfig+0x68>)
{
 8004532:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8004534:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004536:	4290      	cmp	r0, r2
 8004538:	d002      	beq.n	8004540 <TIM_Base_SetConfig+0x10>
 800453a:	4c18      	ldr	r4, [pc, #96]	; (800459c <TIM_Base_SetConfig+0x6c>)
 800453c:	42a0      	cmp	r0, r4
 800453e:	d108      	bne.n	8004552 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004540:	2470      	movs	r4, #112	; 0x70
 8004542:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004544:	684c      	ldr	r4, [r1, #4]
 8004546:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004548:	4290      	cmp	r0, r2
 800454a:	d00b      	beq.n	8004564 <TIM_Base_SetConfig+0x34>
 800454c:	4c13      	ldr	r4, [pc, #76]	; (800459c <TIM_Base_SetConfig+0x6c>)
 800454e:	42a0      	cmp	r0, r4
 8004550:	d008      	beq.n	8004564 <TIM_Base_SetConfig+0x34>
 8004552:	4c13      	ldr	r4, [pc, #76]	; (80045a0 <TIM_Base_SetConfig+0x70>)
 8004554:	42a0      	cmp	r0, r4
 8004556:	d005      	beq.n	8004564 <TIM_Base_SetConfig+0x34>
 8004558:	4c12      	ldr	r4, [pc, #72]	; (80045a4 <TIM_Base_SetConfig+0x74>)
 800455a:	42a0      	cmp	r0, r4
 800455c:	d002      	beq.n	8004564 <TIM_Base_SetConfig+0x34>
 800455e:	4c12      	ldr	r4, [pc, #72]	; (80045a8 <TIM_Base_SetConfig+0x78>)
 8004560:	42a0      	cmp	r0, r4
 8004562:	d103      	bne.n	800456c <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004564:	4c11      	ldr	r4, [pc, #68]	; (80045ac <TIM_Base_SetConfig+0x7c>)
 8004566:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004568:	68cc      	ldr	r4, [r1, #12]
 800456a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800456c:	2480      	movs	r4, #128	; 0x80
 800456e:	43a3      	bics	r3, r4
 8004570:	694c      	ldr	r4, [r1, #20]
 8004572:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8004574:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004576:	688b      	ldr	r3, [r1, #8]
 8004578:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800457a:	680b      	ldr	r3, [r1, #0]
 800457c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800457e:	4290      	cmp	r0, r2
 8004580:	d005      	beq.n	800458e <TIM_Base_SetConfig+0x5e>
 8004582:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <TIM_Base_SetConfig+0x74>)
 8004584:	4298      	cmp	r0, r3
 8004586:	d002      	beq.n	800458e <TIM_Base_SetConfig+0x5e>
 8004588:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <TIM_Base_SetConfig+0x78>)
 800458a:	4298      	cmp	r0, r3
 800458c:	d101      	bne.n	8004592 <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 800458e:	690b      	ldr	r3, [r1, #16]
 8004590:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004592:	2301      	movs	r3, #1
 8004594:	6143      	str	r3, [r0, #20]
}
 8004596:	bd10      	pop	{r4, pc}
 8004598:	40012c00 	.word	0x40012c00
 800459c:	40000400 	.word	0x40000400
 80045a0:	40002000 	.word	0x40002000
 80045a4:	40014400 	.word	0x40014400
 80045a8:	40014800 	.word	0x40014800
 80045ac:	fffffcff 	.word	0xfffffcff

080045b0 <HAL_TIM_Base_Init>:
{
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80045b4:	2001      	movs	r0, #1
  if(htim == NULL)
 80045b6:	2c00      	cmp	r4, #0
 80045b8:	d04c      	beq.n	8004654 <HAL_TIM_Base_Init+0xa4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	4a26      	ldr	r2, [pc, #152]	; (8004658 <HAL_TIM_Base_Init+0xa8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00f      	beq.n	80045e2 <HAL_TIM_Base_Init+0x32>
 80045c2:	4a26      	ldr	r2, [pc, #152]	; (800465c <HAL_TIM_Base_Init+0xac>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00c      	beq.n	80045e2 <HAL_TIM_Base_Init+0x32>
 80045c8:	4a25      	ldr	r2, [pc, #148]	; (8004660 <HAL_TIM_Base_Init+0xb0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d009      	beq.n	80045e2 <HAL_TIM_Base_Init+0x32>
 80045ce:	4a25      	ldr	r2, [pc, #148]	; (8004664 <HAL_TIM_Base_Init+0xb4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d006      	beq.n	80045e2 <HAL_TIM_Base_Init+0x32>
 80045d4:	4a24      	ldr	r2, [pc, #144]	; (8004668 <HAL_TIM_Base_Init+0xb8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d003      	beq.n	80045e2 <HAL_TIM_Base_Init+0x32>
 80045da:	21d4      	movs	r1, #212	; 0xd4
 80045dc:	4823      	ldr	r0, [pc, #140]	; (800466c <HAL_TIM_Base_Init+0xbc>)
 80045de:	f7fd fc30 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80045e2:	68a3      	ldr	r3, [r4, #8]
 80045e4:	2210      	movs	r2, #16
 80045e6:	0019      	movs	r1, r3
 80045e8:	4391      	bics	r1, r2
 80045ea:	d00a      	beq.n	8004602 <HAL_TIM_Base_Init+0x52>
 80045ec:	2240      	movs	r2, #64	; 0x40
 80045ee:	0019      	movs	r1, r3
 80045f0:	4391      	bics	r1, r2
 80045f2:	2920      	cmp	r1, #32
 80045f4:	d005      	beq.n	8004602 <HAL_TIM_Base_Init+0x52>
 80045f6:	2b40      	cmp	r3, #64	; 0x40
 80045f8:	d003      	beq.n	8004602 <HAL_TIM_Base_Init+0x52>
 80045fa:	21d5      	movs	r1, #213	; 0xd5
 80045fc:	481b      	ldr	r0, [pc, #108]	; (800466c <HAL_TIM_Base_Init+0xbc>)
 80045fe:	f7fd fc20 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004602:	6923      	ldr	r3, [r4, #16]
 8004604:	4a1a      	ldr	r2, [pc, #104]	; (8004670 <HAL_TIM_Base_Init+0xc0>)
 8004606:	4213      	tst	r3, r2
 8004608:	d007      	beq.n	800461a <HAL_TIM_Base_Init+0x6a>
 800460a:	2280      	movs	r2, #128	; 0x80
 800460c:	0092      	lsls	r2, r2, #2
 800460e:	4293      	cmp	r3, r2
 8004610:	d003      	beq.n	800461a <HAL_TIM_Base_Init+0x6a>
 8004612:	21d6      	movs	r1, #214	; 0xd6
 8004614:	4815      	ldr	r0, [pc, #84]	; (800466c <HAL_TIM_Base_Init+0xbc>)
 8004616:	f7fd fc14 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800461a:	2380      	movs	r3, #128	; 0x80
 800461c:	69a2      	ldr	r2, [r4, #24]
 800461e:	439a      	bics	r2, r3
 8004620:	d003      	beq.n	800462a <HAL_TIM_Base_Init+0x7a>
 8004622:	21d7      	movs	r1, #215	; 0xd7
 8004624:	4811      	ldr	r0, [pc, #68]	; (800466c <HAL_TIM_Base_Init+0xbc>)
 8004626:	f7fd fc0c 	bl	8001e42 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 800462a:	0025      	movs	r5, r4
 800462c:	353d      	adds	r5, #61	; 0x3d
 800462e:	782b      	ldrb	r3, [r5, #0]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8004636:	0022      	movs	r2, r4
 8004638:	323c      	adds	r2, #60	; 0x3c
 800463a:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 800463c:	0020      	movs	r0, r4
 800463e:	f7fd fe79 	bl	8002334 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8004642:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004644:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8004646:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004648:	1d21      	adds	r1, r4, #4
 800464a:	f7ff ff71 	bl	8004530 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800464e:	2301      	movs	r3, #1
  return HAL_OK;
 8004650:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8004652:	702b      	strb	r3, [r5, #0]
}
 8004654:	bd70      	pop	{r4, r5, r6, pc}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	40012c00 	.word	0x40012c00
 800465c:	40000400 	.word	0x40000400
 8004660:	40002000 	.word	0x40002000
 8004664:	40014400 	.word	0x40014400
 8004668:	40014800 	.word	0x40014800
 800466c:	08006638 	.word	0x08006638
 8004670:	fffffeff 	.word	0xfffffeff

08004674 <HAL_TIM_OC_Init>:
{
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004678:	2001      	movs	r0, #1
  if(htim == NULL)
 800467a:	2c00      	cmp	r4, #0
 800467c:	d050      	beq.n	8004720 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	4a28      	ldr	r2, [pc, #160]	; (8004724 <HAL_TIM_OC_Init+0xb0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d010      	beq.n	80046a8 <HAL_TIM_OC_Init+0x34>
 8004686:	4a28      	ldr	r2, [pc, #160]	; (8004728 <HAL_TIM_OC_Init+0xb4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00d      	beq.n	80046a8 <HAL_TIM_OC_Init+0x34>
 800468c:	4a27      	ldr	r2, [pc, #156]	; (800472c <HAL_TIM_OC_Init+0xb8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00a      	beq.n	80046a8 <HAL_TIM_OC_Init+0x34>
 8004692:	4a27      	ldr	r2, [pc, #156]	; (8004730 <HAL_TIM_OC_Init+0xbc>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d007      	beq.n	80046a8 <HAL_TIM_OC_Init+0x34>
 8004698:	4a26      	ldr	r2, [pc, #152]	; (8004734 <HAL_TIM_OC_Init+0xc0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d004      	beq.n	80046a8 <HAL_TIM_OC_Init+0x34>
 800469e:	21f5      	movs	r1, #245	; 0xf5
 80046a0:	4825      	ldr	r0, [pc, #148]	; (8004738 <HAL_TIM_OC_Init+0xc4>)
 80046a2:	0049      	lsls	r1, r1, #1
 80046a4:	f7fd fbcd 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80046a8:	68a3      	ldr	r3, [r4, #8]
 80046aa:	2210      	movs	r2, #16
 80046ac:	0019      	movs	r1, r3
 80046ae:	4391      	bics	r1, r2
 80046b0:	d00b      	beq.n	80046ca <HAL_TIM_OC_Init+0x56>
 80046b2:	2240      	movs	r2, #64	; 0x40
 80046b4:	0019      	movs	r1, r3
 80046b6:	4391      	bics	r1, r2
 80046b8:	2920      	cmp	r1, #32
 80046ba:	d006      	beq.n	80046ca <HAL_TIM_OC_Init+0x56>
 80046bc:	2b40      	cmp	r3, #64	; 0x40
 80046be:	d004      	beq.n	80046ca <HAL_TIM_OC_Init+0x56>
 80046c0:	21ec      	movs	r1, #236	; 0xec
 80046c2:	481d      	ldr	r0, [pc, #116]	; (8004738 <HAL_TIM_OC_Init+0xc4>)
 80046c4:	31ff      	adds	r1, #255	; 0xff
 80046c6:	f7fd fbbc 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80046ca:	6923      	ldr	r3, [r4, #16]
 80046cc:	4a1b      	ldr	r2, [pc, #108]	; (800473c <HAL_TIM_OC_Init+0xc8>)
 80046ce:	4213      	tst	r3, r2
 80046d0:	d008      	beq.n	80046e4 <HAL_TIM_OC_Init+0x70>
 80046d2:	2280      	movs	r2, #128	; 0x80
 80046d4:	0092      	lsls	r2, r2, #2
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d004      	beq.n	80046e4 <HAL_TIM_OC_Init+0x70>
 80046da:	21f6      	movs	r1, #246	; 0xf6
 80046dc:	4816      	ldr	r0, [pc, #88]	; (8004738 <HAL_TIM_OC_Init+0xc4>)
 80046de:	0049      	lsls	r1, r1, #1
 80046e0:	f7fd fbaf 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	69a2      	ldr	r2, [r4, #24]
 80046e8:	439a      	bics	r2, r3
 80046ea:	d004      	beq.n	80046f6 <HAL_TIM_OC_Init+0x82>
 80046ec:	21ee      	movs	r1, #238	; 0xee
 80046ee:	4812      	ldr	r0, [pc, #72]	; (8004738 <HAL_TIM_OC_Init+0xc4>)
 80046f0:	31ff      	adds	r1, #255	; 0xff
 80046f2:	f7fd fba6 	bl	8001e42 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80046f6:	0025      	movs	r5, r4
 80046f8:	353d      	adds	r5, #61	; 0x3d
 80046fa:	782b      	ldrb	r3, [r5, #0]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d105      	bne.n	800470e <HAL_TIM_OC_Init+0x9a>
    htim->Lock = HAL_UNLOCKED;
 8004702:	0022      	movs	r2, r4
 8004704:	323c      	adds	r2, #60	; 0x3c
 8004706:	7013      	strb	r3, [r2, #0]
    HAL_TIM_OC_MspInit(htim);
 8004708:	0020      	movs	r0, r4
 800470a:	f7ff fe65 	bl	80043d8 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800470e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004710:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8004712:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004714:	1d21      	adds	r1, r4, #4
 8004716:	f7ff ff0b 	bl	8004530 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800471a:	2301      	movs	r3, #1
  return HAL_OK;
 800471c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800471e:	702b      	strb	r3, [r5, #0]
}
 8004720:	bd70      	pop	{r4, r5, r6, pc}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	40012c00 	.word	0x40012c00
 8004728:	40000400 	.word	0x40000400
 800472c:	40002000 	.word	0x40002000
 8004730:	40014400 	.word	0x40014400
 8004734:	40014800 	.word	0x40014800
 8004738:	08006638 	.word	0x08006638
 800473c:	fffffeff 	.word	0xfffffeff

08004740 <HAL_TIM_PWM_Init>:
{
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004744:	2001      	movs	r0, #1
  if(htim == NULL)
 8004746:	2c00      	cmp	r4, #0
 8004748:	d04d      	beq.n	80047e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	4a26      	ldr	r2, [pc, #152]	; (80047e8 <HAL_TIM_PWM_Init+0xa8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00f      	beq.n	8004772 <HAL_TIM_PWM_Init+0x32>
 8004752:	4a26      	ldr	r2, [pc, #152]	; (80047ec <HAL_TIM_PWM_Init+0xac>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00c      	beq.n	8004772 <HAL_TIM_PWM_Init+0x32>
 8004758:	4a25      	ldr	r2, [pc, #148]	; (80047f0 <HAL_TIM_PWM_Init+0xb0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d009      	beq.n	8004772 <HAL_TIM_PWM_Init+0x32>
 800475e:	4a25      	ldr	r2, [pc, #148]	; (80047f4 <HAL_TIM_PWM_Init+0xb4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d006      	beq.n	8004772 <HAL_TIM_PWM_Init+0x32>
 8004764:	4a24      	ldr	r2, [pc, #144]	; (80047f8 <HAL_TIM_PWM_Init+0xb8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d003      	beq.n	8004772 <HAL_TIM_PWM_Init+0x32>
 800476a:	4924      	ldr	r1, [pc, #144]	; (80047fc <HAL_TIM_PWM_Init+0xbc>)
 800476c:	4824      	ldr	r0, [pc, #144]	; (8004800 <HAL_TIM_PWM_Init+0xc0>)
 800476e:	f7fd fb68 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004772:	68a3      	ldr	r3, [r4, #8]
 8004774:	2210      	movs	r2, #16
 8004776:	0019      	movs	r1, r3
 8004778:	4391      	bics	r1, r2
 800477a:	d00a      	beq.n	8004792 <HAL_TIM_PWM_Init+0x52>
 800477c:	2240      	movs	r2, #64	; 0x40
 800477e:	0019      	movs	r1, r3
 8004780:	4391      	bics	r1, r2
 8004782:	2920      	cmp	r1, #32
 8004784:	d005      	beq.n	8004792 <HAL_TIM_PWM_Init+0x52>
 8004786:	2b40      	cmp	r3, #64	; 0x40
 8004788:	d003      	beq.n	8004792 <HAL_TIM_PWM_Init+0x52>
 800478a:	491e      	ldr	r1, [pc, #120]	; (8004804 <HAL_TIM_PWM_Init+0xc4>)
 800478c:	481c      	ldr	r0, [pc, #112]	; (8004800 <HAL_TIM_PWM_Init+0xc0>)
 800478e:	f7fd fb58 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004792:	6923      	ldr	r3, [r4, #16]
 8004794:	4a1c      	ldr	r2, [pc, #112]	; (8004808 <HAL_TIM_PWM_Init+0xc8>)
 8004796:	4213      	tst	r3, r2
 8004798:	d007      	beq.n	80047aa <HAL_TIM_PWM_Init+0x6a>
 800479a:	2280      	movs	r2, #128	; 0x80
 800479c:	0092      	lsls	r2, r2, #2
 800479e:	4293      	cmp	r3, r2
 80047a0:	d003      	beq.n	80047aa <HAL_TIM_PWM_Init+0x6a>
 80047a2:	491a      	ldr	r1, [pc, #104]	; (800480c <HAL_TIM_PWM_Init+0xcc>)
 80047a4:	4816      	ldr	r0, [pc, #88]	; (8004800 <HAL_TIM_PWM_Init+0xc0>)
 80047a6:	f7fd fb4c 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80047aa:	2380      	movs	r3, #128	; 0x80
 80047ac:	69a2      	ldr	r2, [r4, #24]
 80047ae:	439a      	bics	r2, r3
 80047b0:	d004      	beq.n	80047bc <HAL_TIM_PWM_Init+0x7c>
 80047b2:	21fa      	movs	r1, #250	; 0xfa
 80047b4:	4812      	ldr	r0, [pc, #72]	; (8004800 <HAL_TIM_PWM_Init+0xc0>)
 80047b6:	0089      	lsls	r1, r1, #2
 80047b8:	f7fd fb43 	bl	8001e42 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80047bc:	0025      	movs	r5, r4
 80047be:	353d      	adds	r5, #61	; 0x3d
 80047c0:	782b      	ldrb	r3, [r5, #0]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d105      	bne.n	80047d4 <HAL_TIM_PWM_Init+0x94>
    htim->Lock = HAL_UNLOCKED;
 80047c8:	0022      	movs	r2, r4
 80047ca:	323c      	adds	r2, #60	; 0x3c
 80047cc:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 80047ce:	0020      	movs	r0, r4
 80047d0:	f7ff fe03 	bl	80043da <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80047d4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80047d8:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047da:	1d21      	adds	r1, r4, #4
 80047dc:	f7ff fea8 	bl	8004530 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80047e0:	2301      	movs	r3, #1
  return HAL_OK;
 80047e2:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80047e4:	702b      	strb	r3, [r5, #0]
}
 80047e6:	bd70      	pop	{r4, r5, r6, pc}
 80047e8:	40012c00 	.word	0x40012c00
 80047ec:	40000400 	.word	0x40000400
 80047f0:	40002000 	.word	0x40002000
 80047f4:	40014400 	.word	0x40014400
 80047f8:	40014800 	.word	0x40014800
 80047fc:	000003e5 	.word	0x000003e5
 8004800:	08006638 	.word	0x08006638
 8004804:	000003e6 	.word	0x000003e6
 8004808:	fffffeff 	.word	0xfffffeff
 800480c:	000003e7 	.word	0x000003e7

08004810 <TIM_OC2_SetConfig>:
{
 8004810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004812:	2210      	movs	r2, #16
 8004814:	6a03      	ldr	r3, [r0, #32]
{
 8004816:	0004      	movs	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004818:	4393      	bics	r3, r2
 800481a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800481c:	6a06      	ldr	r6, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800481e:	4a23      	ldr	r2, [pc, #140]	; (80048ac <TIM_OC2_SetConfig+0x9c>)
  tmpcr2 =  TIMx->CR2;
 8004820:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004822:	6983      	ldr	r3, [r0, #24]
{
 8004824:	000f      	movs	r7, r1
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004826:	4013      	ands	r3, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004828:	680a      	ldr	r2, [r1, #0]
 800482a:	0212      	lsls	r2, r2, #8
 800482c:	431a      	orrs	r2, r3
  tmpccer &= ~TIM_CCER_CC2P;
 800482e:	2320      	movs	r3, #32
 8004830:	439e      	bics	r6, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004832:	688b      	ldr	r3, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004834:	9201      	str	r2, [sp, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	431e      	orrs	r6, r3
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800483a:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <TIM_OC2_SetConfig+0xa0>)
 800483c:	4298      	cmp	r0, r3
 800483e:	d127      	bne.n	8004890 <TIM_OC2_SetConfig+0x80>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004840:	2308      	movs	r3, #8
 8004842:	68ca      	ldr	r2, [r1, #12]
 8004844:	439a      	bics	r2, r3
 8004846:	d003      	beq.n	8004850 <TIM_OC2_SetConfig+0x40>
 8004848:	491a      	ldr	r1, [pc, #104]	; (80048b4 <TIM_OC2_SetConfig+0xa4>)
 800484a:	481b      	ldr	r0, [pc, #108]	; (80048b8 <TIM_OC2_SetConfig+0xa8>)
 800484c:	f7fd faf9 	bl	8001e42 <assert_failed>
    tmpccer &= ~TIM_CCER_CC2NP;
 8004850:	2380      	movs	r3, #128	; 0x80
 8004852:	439e      	bics	r6, r3
 8004854:	0033      	movs	r3, r6
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	0116      	lsls	r6, r2, #4
 800485a:	431e      	orrs	r6, r3
    tmpccer &= ~TIM_CCER_CC2NE;
 800485c:	2340      	movs	r3, #64	; 0x40
 800485e:	439e      	bics	r6, r3
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004860:	4b16      	ldr	r3, [pc, #88]	; (80048bc <TIM_OC2_SetConfig+0xac>)
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	421a      	tst	r2, r3
 8004866:	d003      	beq.n	8004870 <TIM_OC2_SetConfig+0x60>
 8004868:	4915      	ldr	r1, [pc, #84]	; (80048c0 <TIM_OC2_SetConfig+0xb0>)
 800486a:	4813      	ldr	r0, [pc, #76]	; (80048b8 <TIM_OC2_SetConfig+0xa8>)
 800486c:	f7fd fae9 	bl	8001e42 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004870:	4b14      	ldr	r3, [pc, #80]	; (80048c4 <TIM_OC2_SetConfig+0xb4>)
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	421a      	tst	r2, r3
 8004876:	d003      	beq.n	8004880 <TIM_OC2_SetConfig+0x70>
 8004878:	4913      	ldr	r1, [pc, #76]	; (80048c8 <TIM_OC2_SetConfig+0xb8>)
 800487a:	480f      	ldr	r0, [pc, #60]	; (80048b8 <TIM_OC2_SetConfig+0xa8>)
 800487c:	f7fd fae1 	bl	8001e42 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004880:	4b12      	ldr	r3, [pc, #72]	; (80048cc <TIM_OC2_SetConfig+0xbc>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004882:	697a      	ldr	r2, [r7, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004884:	402b      	ands	r3, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004886:	69bd      	ldr	r5, [r7, #24]
 8004888:	4315      	orrs	r5, r2
 800488a:	00ad      	lsls	r5, r5, #2
 800488c:	431d      	orrs	r5, r3
 800488e:	e005      	b.n	800489c <TIM_OC2_SetConfig+0x8c>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004890:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <TIM_OC2_SetConfig+0xc0>)
 8004892:	4298      	cmp	r0, r3
 8004894:	d0e4      	beq.n	8004860 <TIM_OC2_SetConfig+0x50>
 8004896:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <TIM_OC2_SetConfig+0xc4>)
 8004898:	429c      	cmp	r4, r3
 800489a:	d0e1      	beq.n	8004860 <TIM_OC2_SetConfig+0x50>
  TIMx->CCMR1 = tmpccmrx;
 800489c:	9b01      	ldr	r3, [sp, #4]
  TIMx->CR2 = tmpcr2;
 800489e:	6065      	str	r5, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 80048a0:	61a3      	str	r3, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80048a6:	6226      	str	r6, [r4, #32]
}
 80048a8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	ffff8cff 	.word	0xffff8cff
 80048b0:	40012c00 	.word	0x40012c00
 80048b4:	000012da 	.word	0x000012da
 80048b8:	08006638 	.word	0x08006638
 80048bc:	fffffdff 	.word	0xfffffdff
 80048c0:	000012e8 	.word	0x000012e8
 80048c4:	fffffeff 	.word	0xfffffeff
 80048c8:	000012e9 	.word	0x000012e9
 80048cc:	fffff3ff 	.word	0xfffff3ff
 80048d0:	40014400 	.word	0x40014400
 80048d4:	40014800 	.word	0x40014800

080048d8 <HAL_TIM_OC_ConfigChannel>:
{
 80048d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048da:	0004      	movs	r4, r0
 80048dc:	000d      	movs	r5, r1
 80048de:	0016      	movs	r6, r2
  assert_param(IS_TIM_CHANNELS(Channel));
 80048e0:	2a18      	cmp	r2, #24
 80048e2:	d803      	bhi.n	80048ec <HAL_TIM_OC_ConfigChannel+0x14>
 80048e4:	4b42      	ldr	r3, [pc, #264]	; (80049f0 <HAL_TIM_OC_ConfigChannel+0x118>)
 80048e6:	40d3      	lsrs	r3, r2
 80048e8:	07db      	lsls	r3, r3, #31
 80048ea:	d403      	bmi.n	80048f4 <HAL_TIM_OC_ConfigChannel+0x1c>
 80048ec:	4941      	ldr	r1, [pc, #260]	; (80049f4 <HAL_TIM_OC_ConfigChannel+0x11c>)
 80048ee:	4842      	ldr	r0, [pc, #264]	; (80049f8 <HAL_TIM_OC_ConfigChannel+0x120>)
 80048f0:	f7fd faa7 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 80048f4:	682b      	ldr	r3, [r5, #0]
 80048f6:	2210      	movs	r2, #16
 80048f8:	0019      	movs	r1, r3
 80048fa:	4391      	bics	r1, r2
 80048fc:	000a      	movs	r2, r1
 80048fe:	2130      	movs	r1, #48	; 0x30
 8004900:	438b      	bics	r3, r1
 8004902:	d005      	beq.n	8004910 <HAL_TIM_OC_ConfigChannel+0x38>
 8004904:	2a40      	cmp	r2, #64	; 0x40
 8004906:	d003      	beq.n	8004910 <HAL_TIM_OC_ConfigChannel+0x38>
 8004908:	493c      	ldr	r1, [pc, #240]	; (80049fc <HAL_TIM_OC_ConfigChannel+0x124>)
 800490a:	483b      	ldr	r0, [pc, #236]	; (80049f8 <HAL_TIM_OC_ConfigChannel+0x120>)
 800490c:	f7fd fa99 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8004910:	2302      	movs	r3, #2
 8004912:	68aa      	ldr	r2, [r5, #8]
 8004914:	439a      	bics	r2, r3
 8004916:	d003      	beq.n	8004920 <HAL_TIM_OC_ConfigChannel+0x48>
 8004918:	4939      	ldr	r1, [pc, #228]	; (8004a00 <HAL_TIM_OC_ConfigChannel+0x128>)
 800491a:	4837      	ldr	r0, [pc, #220]	; (80049f8 <HAL_TIM_OC_ConfigChannel+0x120>)
 800491c:	f7fd fa91 	bl	8001e42 <assert_failed>
  __HAL_LOCK(htim);
 8004920:	0027      	movs	r7, r4
 8004922:	2302      	movs	r3, #2
 8004924:	373c      	adds	r7, #60	; 0x3c
 8004926:	783a      	ldrb	r2, [r7, #0]
 8004928:	0018      	movs	r0, r3
 800492a:	2a01      	cmp	r2, #1
 800492c:	d02e      	beq.n	800498c <HAL_TIM_OC_ConfigChannel+0xb4>
 800492e:	2201      	movs	r2, #1
 8004930:	703a      	strb	r2, [r7, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004932:	0022      	movs	r2, r4
 8004934:	323d      	adds	r2, #61	; 0x3d
 8004936:	9201      	str	r2, [sp, #4]
 8004938:	7013      	strb	r3, [r2, #0]
  switch (Channel)
 800493a:	2e0c      	cmp	r6, #12
 800493c:	d821      	bhi.n	8004982 <HAL_TIM_OC_ConfigChannel+0xaa>
 800493e:	0030      	movs	r0, r6
 8004940:	f7fb fbe2 	bl	8000108 <__gnu_thumb1_case_uqi>
 8004944:	1f1f1f07 	.word	0x1f1f1f07
 8004948:	1f1f1f25 	.word	0x1f1f1f25
 800494c:	1f1f1f35 	.word	0x1f1f1f35
 8004950:	45          	.byte	0x45
 8004951:	00          	.byte	0x00
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	4a2b      	ldr	r2, [pc, #172]	; (8004a04 <HAL_TIM_OC_ConfigChannel+0x12c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00f      	beq.n	800497a <HAL_TIM_OC_ConfigChannel+0xa2>
 800495a:	4a2b      	ldr	r2, [pc, #172]	; (8004a08 <HAL_TIM_OC_ConfigChannel+0x130>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00c      	beq.n	800497a <HAL_TIM_OC_ConfigChannel+0xa2>
 8004960:	4a2a      	ldr	r2, [pc, #168]	; (8004a0c <HAL_TIM_OC_ConfigChannel+0x134>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d009      	beq.n	800497a <HAL_TIM_OC_ConfigChannel+0xa2>
 8004966:	4a2a      	ldr	r2, [pc, #168]	; (8004a10 <HAL_TIM_OC_ConfigChannel+0x138>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d006      	beq.n	800497a <HAL_TIM_OC_ConfigChannel+0xa2>
 800496c:	4a29      	ldr	r2, [pc, #164]	; (8004a14 <HAL_TIM_OC_ConfigChannel+0x13c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d003      	beq.n	800497a <HAL_TIM_OC_ConfigChannel+0xa2>
 8004972:	4929      	ldr	r1, [pc, #164]	; (8004a18 <HAL_TIM_OC_ConfigChannel+0x140>)
 8004974:	4820      	ldr	r0, [pc, #128]	; (80049f8 <HAL_TIM_OC_ConfigChannel+0x120>)
 8004976:	f7fd fa64 	bl	8001e42 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800497a:	0029      	movs	r1, r5
 800497c:	6820      	ldr	r0, [r4, #0]
 800497e:	f7ff fbbb 	bl	80040f8 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004982:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004984:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004986:	9a01      	ldr	r2, [sp, #4]
 8004988:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(htim);
 800498a:	7038      	strb	r0, [r7, #0]
}
 800498c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	4a1c      	ldr	r2, [pc, #112]	; (8004a04 <HAL_TIM_OC_ConfigChannel+0x12c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d006      	beq.n	80049a4 <HAL_TIM_OC_ConfigChannel+0xcc>
 8004996:	4a1c      	ldr	r2, [pc, #112]	; (8004a08 <HAL_TIM_OC_ConfigChannel+0x130>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d003      	beq.n	80049a4 <HAL_TIM_OC_ConfigChannel+0xcc>
 800499c:	491f      	ldr	r1, [pc, #124]	; (8004a1c <HAL_TIM_OC_ConfigChannel+0x144>)
 800499e:	4816      	ldr	r0, [pc, #88]	; (80049f8 <HAL_TIM_OC_ConfigChannel+0x120>)
 80049a0:	f7fd fa4f 	bl	8001e42 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049a4:	0029      	movs	r1, r5
 80049a6:	6820      	ldr	r0, [r4, #0]
 80049a8:	f7ff ff32 	bl	8004810 <TIM_OC2_SetConfig>
    break;
 80049ac:	e7e9      	b.n	8004982 <HAL_TIM_OC_ConfigChannel+0xaa>
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <HAL_TIM_OC_ConfigChannel+0x12c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d006      	beq.n	80049c4 <HAL_TIM_OC_ConfigChannel+0xec>
 80049b6:	4a14      	ldr	r2, [pc, #80]	; (8004a08 <HAL_TIM_OC_ConfigChannel+0x130>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d003      	beq.n	80049c4 <HAL_TIM_OC_ConfigChannel+0xec>
 80049bc:	4918      	ldr	r1, [pc, #96]	; (8004a20 <HAL_TIM_OC_ConfigChannel+0x148>)
 80049be:	480e      	ldr	r0, [pc, #56]	; (80049f8 <HAL_TIM_OC_ConfigChannel+0x120>)
 80049c0:	f7fd fa3f 	bl	8001e42 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049c4:	0029      	movs	r1, r5
 80049c6:	6820      	ldr	r0, [r4, #0]
 80049c8:	f7ff fbfa 	bl	80041c0 <TIM_OC3_SetConfig>
    break;
 80049cc:	e7d9      	b.n	8004982 <HAL_TIM_OC_ConfigChannel+0xaa>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	4a0c      	ldr	r2, [pc, #48]	; (8004a04 <HAL_TIM_OC_ConfigChannel+0x12c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d006      	beq.n	80049e4 <HAL_TIM_OC_ConfigChannel+0x10c>
 80049d6:	4a0c      	ldr	r2, [pc, #48]	; (8004a08 <HAL_TIM_OC_ConfigChannel+0x130>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d003      	beq.n	80049e4 <HAL_TIM_OC_ConfigChannel+0x10c>
 80049dc:	4911      	ldr	r1, [pc, #68]	; (8004a24 <HAL_TIM_OC_ConfigChannel+0x14c>)
 80049de:	4806      	ldr	r0, [pc, #24]	; (80049f8 <HAL_TIM_OC_ConfigChannel+0x120>)
 80049e0:	f7fd fa2f 	bl	8001e42 <assert_failed>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049e4:	0029      	movs	r1, r5
 80049e6:	6820      	ldr	r0, [r4, #0]
 80049e8:	f7ff fc52 	bl	8004290 <TIM_OC4_SetConfig>
    break;
 80049ec:	e7c9      	b.n	8004982 <HAL_TIM_OC_ConfigChannel+0xaa>
 80049ee:	46c0      	nop			; (mov r8, r8)
 80049f0:	01001111 	.word	0x01001111
 80049f4:	00000b77 	.word	0x00000b77
 80049f8:	08006638 	.word	0x08006638
 80049fc:	00000b78 	.word	0x00000b78
 8004a00:	00000b79 	.word	0x00000b79
 8004a04:	40012c00 	.word	0x40012c00
 8004a08:	40000400 	.word	0x40000400
 8004a0c:	40002000 	.word	0x40002000
 8004a10:	40014400 	.word	0x40014400
 8004a14:	40014800 	.word	0x40014800
 8004a18:	00000b84 	.word	0x00000b84
 8004a1c:	00000b8c 	.word	0x00000b8c
 8004a20:	00000b94 	.word	0x00000b94
 8004a24:	00000b9c 	.word	0x00000b9c

08004a28 <HAL_TIM_PWM_ConfigChannel>:
{
 8004a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004a2a:	0007      	movs	r7, r0
 8004a2c:	373c      	adds	r7, #60	; 0x3c
 8004a2e:	783b      	ldrb	r3, [r7, #0]
{
 8004a30:	0004      	movs	r4, r0
 8004a32:	000d      	movs	r5, r1
 8004a34:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 8004a36:	2002      	movs	r0, #2
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d061      	beq.n	8004b00 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	703b      	strb	r3, [r7, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
 8004a40:	2a18      	cmp	r2, #24
 8004a42:	d803      	bhi.n	8004a4c <HAL_TIM_PWM_ConfigChannel+0x24>
 8004a44:	4a5a      	ldr	r2, [pc, #360]	; (8004bb0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004a46:	40f2      	lsrs	r2, r6
 8004a48:	4393      	bics	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <HAL_TIM_PWM_ConfigChannel+0x2c>
 8004a4c:	4959      	ldr	r1, [pc, #356]	; (8004bb4 <HAL_TIM_PWM_ConfigChannel+0x18c>)
 8004a4e:	485a      	ldr	r0, [pc, #360]	; (8004bb8 <HAL_TIM_PWM_ConfigChannel+0x190>)
 8004a50:	f7fd f9f7 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8004a54:	2310      	movs	r3, #16
 8004a56:	682a      	ldr	r2, [r5, #0]
 8004a58:	439a      	bics	r2, r3
 8004a5a:	2a60      	cmp	r2, #96	; 0x60
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_PWM_ConfigChannel+0x3e>
 8004a5e:	4957      	ldr	r1, [pc, #348]	; (8004bbc <HAL_TIM_PWM_ConfigChannel+0x194>)
 8004a60:	4855      	ldr	r0, [pc, #340]	; (8004bb8 <HAL_TIM_PWM_ConfigChannel+0x190>)
 8004a62:	f7fd f9ee 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8004a66:	2302      	movs	r3, #2
 8004a68:	68aa      	ldr	r2, [r5, #8]
 8004a6a:	439a      	bics	r2, r3
 8004a6c:	d004      	beq.n	8004a78 <HAL_TIM_PWM_ConfigChannel+0x50>
 8004a6e:	21c2      	movs	r1, #194	; 0xc2
 8004a70:	4851      	ldr	r0, [pc, #324]	; (8004bb8 <HAL_TIM_PWM_ConfigChannel+0x190>)
 8004a72:	0109      	lsls	r1, r1, #4
 8004a74:	f7fd f9e5 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8004a78:	2304      	movs	r3, #4
 8004a7a:	692a      	ldr	r2, [r5, #16]
 8004a7c:	439a      	bics	r2, r3
 8004a7e:	d003      	beq.n	8004a88 <HAL_TIM_PWM_ConfigChannel+0x60>
 8004a80:	494f      	ldr	r1, [pc, #316]	; (8004bc0 <HAL_TIM_PWM_ConfigChannel+0x198>)
 8004a82:	484d      	ldr	r0, [pc, #308]	; (8004bb8 <HAL_TIM_PWM_ConfigChannel+0x190>)
 8004a84:	f7fd f9dd 	bl	8001e42 <assert_failed>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a88:	0023      	movs	r3, r4
 8004a8a:	333d      	adds	r3, #61	; 0x3d
 8004a8c:	9301      	str	r3, [sp, #4]
 8004a8e:	2302      	movs	r3, #2
 8004a90:	9a01      	ldr	r2, [sp, #4]
 8004a92:	7013      	strb	r3, [r2, #0]
  switch (Channel)
 8004a94:	2e0c      	cmp	r6, #12
 8004a96:	d82e      	bhi.n	8004af6 <HAL_TIM_PWM_ConfigChannel+0xce>
 8004a98:	0030      	movs	r0, r6
 8004a9a:	f7fb fb35 	bl	8000108 <__gnu_thumb1_case_uqi>
 8004a9e:	2c07      	.short	0x2c07
 8004aa0:	2c322c2c 	.word	0x2c322c2c
 8004aa4:	2c4f2c2c 	.word	0x2c4f2c2c
 8004aa8:	2c2c      	.short	0x2c2c
 8004aaa:	6c          	.byte	0x6c
 8004aab:	00          	.byte	0x00
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	4a45      	ldr	r2, [pc, #276]	; (8004bc4 <HAL_TIM_PWM_ConfigChannel+0x19c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00f      	beq.n	8004ad4 <HAL_TIM_PWM_ConfigChannel+0xac>
 8004ab4:	4a44      	ldr	r2, [pc, #272]	; (8004bc8 <HAL_TIM_PWM_ConfigChannel+0x1a0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00c      	beq.n	8004ad4 <HAL_TIM_PWM_ConfigChannel+0xac>
 8004aba:	4a44      	ldr	r2, [pc, #272]	; (8004bcc <HAL_TIM_PWM_ConfigChannel+0x1a4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d009      	beq.n	8004ad4 <HAL_TIM_PWM_ConfigChannel+0xac>
 8004ac0:	4a43      	ldr	r2, [pc, #268]	; (8004bd0 <HAL_TIM_PWM_ConfigChannel+0x1a8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d006      	beq.n	8004ad4 <HAL_TIM_PWM_ConfigChannel+0xac>
 8004ac6:	4a43      	ldr	r2, [pc, #268]	; (8004bd4 <HAL_TIM_PWM_ConfigChannel+0x1ac>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d003      	beq.n	8004ad4 <HAL_TIM_PWM_ConfigChannel+0xac>
 8004acc:	4942      	ldr	r1, [pc, #264]	; (8004bd8 <HAL_TIM_PWM_ConfigChannel+0x1b0>)
 8004ace:	483a      	ldr	r0, [pc, #232]	; (8004bb8 <HAL_TIM_PWM_ConfigChannel+0x190>)
 8004ad0:	f7fd f9b7 	bl	8001e42 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ad4:	0029      	movs	r1, r5
 8004ad6:	6820      	ldr	r0, [r4, #0]
 8004ad8:	f7ff fb0e 	bl	80040f8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004adc:	2208      	movs	r2, #8
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	6999      	ldr	r1, [r3, #24]
 8004ae2:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ae4:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	438a      	bics	r2, r1
 8004aec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004aee:	699a      	ldr	r2, [r3, #24]
 8004af0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004af2:	430a      	orrs	r2, r1
 8004af4:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8004af6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004af8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004afa:	9a01      	ldr	r2, [sp, #4]
 8004afc:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(htim);
 8004afe:	7038      	strb	r0, [r7, #0]
}
 8004b00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	4a2f      	ldr	r2, [pc, #188]	; (8004bc4 <HAL_TIM_PWM_ConfigChannel+0x19c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d006      	beq.n	8004b18 <HAL_TIM_PWM_ConfigChannel+0xf0>
 8004b0a:	4a2f      	ldr	r2, [pc, #188]	; (8004bc8 <HAL_TIM_PWM_ConfigChannel+0x1a0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d003      	beq.n	8004b18 <HAL_TIM_PWM_ConfigChannel+0xf0>
 8004b10:	4932      	ldr	r1, [pc, #200]	; (8004bdc <HAL_TIM_PWM_ConfigChannel+0x1b4>)
 8004b12:	4829      	ldr	r0, [pc, #164]	; (8004bb8 <HAL_TIM_PWM_ConfigChannel+0x190>)
 8004b14:	f7fd f995 	bl	8001e42 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b18:	0029      	movs	r1, r5
 8004b1a:	6820      	ldr	r0, [r4, #0]
 8004b1c:	f7ff fe78 	bl	8004810 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b20:	2280      	movs	r2, #128	; 0x80
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	0112      	lsls	r2, r2, #4
 8004b26:	6999      	ldr	r1, [r3, #24]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	492c      	ldr	r1, [pc, #176]	; (8004be0 <HAL_TIM_PWM_ConfigChannel+0x1b8>)
 8004b30:	400a      	ands	r2, r1
 8004b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b34:	692a      	ldr	r2, [r5, #16]
 8004b36:	6999      	ldr	r1, [r3, #24]
 8004b38:	0212      	lsls	r2, r2, #8
 8004b3a:	e7da      	b.n	8004af2 <HAL_TIM_PWM_ConfigChannel+0xca>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	4a21      	ldr	r2, [pc, #132]	; (8004bc4 <HAL_TIM_PWM_ConfigChannel+0x19c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d006      	beq.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x12a>
 8004b44:	4a20      	ldr	r2, [pc, #128]	; (8004bc8 <HAL_TIM_PWM_ConfigChannel+0x1a0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d003      	beq.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x12a>
 8004b4a:	4926      	ldr	r1, [pc, #152]	; (8004be4 <HAL_TIM_PWM_ConfigChannel+0x1bc>)
 8004b4c:	481a      	ldr	r0, [pc, #104]	; (8004bb8 <HAL_TIM_PWM_ConfigChannel+0x190>)
 8004b4e:	f7fd f978 	bl	8001e42 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b52:	0029      	movs	r1, r5
 8004b54:	6820      	ldr	r0, [r4, #0]
 8004b56:	f7ff fb33 	bl	80041c0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b5a:	2208      	movs	r2, #8
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	69d9      	ldr	r1, [r3, #28]
 8004b60:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b62:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	438a      	bics	r2, r1
 8004b6a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b6c:	69da      	ldr	r2, [r3, #28]
 8004b6e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b70:	430a      	orrs	r2, r1
 8004b72:	61da      	str	r2, [r3, #28]
    break;
 8004b74:	e7bf      	b.n	8004af6 <HAL_TIM_PWM_ConfigChannel+0xce>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	4a12      	ldr	r2, [pc, #72]	; (8004bc4 <HAL_TIM_PWM_ConfigChannel+0x19c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d006      	beq.n	8004b8c <HAL_TIM_PWM_ConfigChannel+0x164>
 8004b7e:	4a12      	ldr	r2, [pc, #72]	; (8004bc8 <HAL_TIM_PWM_ConfigChannel+0x1a0>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d003      	beq.n	8004b8c <HAL_TIM_PWM_ConfigChannel+0x164>
 8004b84:	4918      	ldr	r1, [pc, #96]	; (8004be8 <HAL_TIM_PWM_ConfigChannel+0x1c0>)
 8004b86:	480c      	ldr	r0, [pc, #48]	; (8004bb8 <HAL_TIM_PWM_ConfigChannel+0x190>)
 8004b88:	f7fd f95b 	bl	8001e42 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b8c:	0029      	movs	r1, r5
 8004b8e:	6820      	ldr	r0, [r4, #0]
 8004b90:	f7ff fb7e 	bl	8004290 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b94:	2280      	movs	r2, #128	; 0x80
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	0112      	lsls	r2, r2, #4
 8004b9a:	69d9      	ldr	r1, [r3, #28]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ba0:	69da      	ldr	r2, [r3, #28]
 8004ba2:	490f      	ldr	r1, [pc, #60]	; (8004be0 <HAL_TIM_PWM_ConfigChannel+0x1b8>)
 8004ba4:	400a      	ands	r2, r1
 8004ba6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ba8:	692a      	ldr	r2, [r5, #16]
 8004baa:	69d9      	ldr	r1, [r3, #28]
 8004bac:	0212      	lsls	r2, r2, #8
 8004bae:	e7df      	b.n	8004b70 <HAL_TIM_PWM_ConfigChannel+0x148>
 8004bb0:	01001111 	.word	0x01001111
 8004bb4:	00000c1e 	.word	0x00000c1e
 8004bb8:	08006638 	.word	0x08006638
 8004bbc:	00000c1f 	.word	0x00000c1f
 8004bc0:	00000c21 	.word	0x00000c21
 8004bc4:	40012c00 	.word	0x40012c00
 8004bc8:	40000400 	.word	0x40000400
 8004bcc:	40002000 	.word	0x40002000
 8004bd0:	40014400 	.word	0x40014400
 8004bd4:	40014800 	.word	0x40014800
 8004bd8:	00000c29 	.word	0x00000c29
 8004bdc:	00000c38 	.word	0x00000c38
 8004be0:	fffffbff 	.word	0xfffffbff
 8004be4:	00000c47 	.word	0x00000c47
 8004be8:	00000c56 	.word	0x00000c56

08004bec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bec:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8004bee:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf0:	4d03      	ldr	r5, [pc, #12]	; (8004c00 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf6:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bfc:	6083      	str	r3, [r0, #8]
}
 8004bfe:	bd30      	pop	{r4, r5, pc}
 8004c00:	ffff00ff 	.word	0xffff00ff

08004c04 <HAL_TIM_ConfigClockSource>:
{
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004c06:	0006      	movs	r6, r0
 8004c08:	2302      	movs	r3, #2
 8004c0a:	363c      	adds	r6, #60	; 0x3c
 8004c0c:	7832      	ldrb	r2, [r6, #0]
{
 8004c0e:	0005      	movs	r5, r0
 8004c10:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8004c12:	0018      	movs	r0, r3
 8004c14:	2a01      	cmp	r2, #1
 8004c16:	d028      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x66>
  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	002f      	movs	r7, r5
  __HAL_LOCK(htim);
 8004c1a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 8004c1e:	7032      	strb	r2, [r6, #0]
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8004c20:	4aa0      	ldr	r2, [pc, #640]	; (8004ea4 <HAL_TIM_ConfigClockSource+0x2a0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004c22:	703b      	strb	r3, [r7, #0]
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8004c24:	680b      	ldr	r3, [r1, #0]
 8004c26:	1899      	adds	r1, r3, r2
 8004c28:	4a9f      	ldr	r2, [pc, #636]	; (8004ea8 <HAL_TIM_ConfigClockSource+0x2a4>)
 8004c2a:	4211      	tst	r1, r2
 8004c2c:	d008      	beq.n	8004c40 <HAL_TIM_ConfigClockSource+0x3c>
 8004c2e:	2230      	movs	r2, #48	; 0x30
 8004c30:	4393      	bics	r3, r2
 8004c32:	d005      	beq.n	8004c40 <HAL_TIM_ConfigClockSource+0x3c>
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d003      	beq.n	8004c40 <HAL_TIM_ConfigClockSource+0x3c>
 8004c38:	499c      	ldr	r1, [pc, #624]	; (8004eac <HAL_TIM_ConfigClockSource+0x2a8>)
 8004c3a:	489d      	ldr	r0, [pc, #628]	; (8004eb0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004c3c:	f7fd f901 	bl	8001e42 <assert_failed>
  tmpsmcr = htim->Instance->SMCR;
 8004c40:	682b      	ldr	r3, [r5, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c42:	499c      	ldr	r1, [pc, #624]	; (8004eb4 <HAL_TIM_ConfigClockSource+0x2b0>)
  tmpsmcr = htim->Instance->SMCR;
 8004c44:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c46:	400a      	ands	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 8004c48:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8004c4a:	6822      	ldr	r2, [r4, #0]
 8004c4c:	2a40      	cmp	r2, #64	; 0x40
 8004c4e:	d100      	bne.n	8004c52 <HAL_TIM_ConfigClockSource+0x4e>
 8004c50:	e15c      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x308>
 8004c52:	d821      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x94>
 8004c54:	2a10      	cmp	r2, #16
 8004c56:	d100      	bne.n	8004c5a <HAL_TIM_ConfigClockSource+0x56>
 8004c58:	e1a3      	b.n	8004fa2 <HAL_TIM_ConfigClockSource+0x39e>
 8004c5a:	d807      	bhi.n	8004c6c <HAL_TIM_ConfigClockSource+0x68>
 8004c5c:	2a00      	cmp	r2, #0
 8004c5e:	d100      	bne.n	8004c62 <HAL_TIM_ConfigClockSource+0x5e>
 8004c60:	e18c      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x378>
  htim->State = HAL_TIM_STATE_READY;
 8004c62:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004c64:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004c66:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 8004c68:	7030      	strb	r0, [r6, #0]
}
 8004c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8004c6c:	2a20      	cmp	r2, #32
 8004c6e:	d100      	bne.n	8004c72 <HAL_TIM_ConfigClockSource+0x6e>
 8004c70:	e1a8      	b.n	8004fc4 <HAL_TIM_ConfigClockSource+0x3c0>
 8004c72:	2a30      	cmp	r2, #48	; 0x30
 8004c74:	d1f5      	bne.n	8004c62 <HAL_TIM_ConfigClockSource+0x5e>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8004c76:	4a90      	ldr	r2, [pc, #576]	; (8004eb8 <HAL_TIM_ConfigClockSource+0x2b4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d006      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x86>
 8004c7c:	4a8f      	ldr	r2, [pc, #572]	; (8004ebc <HAL_TIM_ConfigClockSource+0x2b8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d003      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x86>
 8004c82:	498f      	ldr	r1, [pc, #572]	; (8004ec0 <HAL_TIM_ConfigClockSource+0x2bc>)
 8004c84:	488a      	ldr	r0, [pc, #552]	; (8004eb0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004c86:	f7fd f8dc 	bl	8001e42 <assert_failed>
   tmpsmcr &= ~TIM_SMCR_TS;
 8004c8a:	2270      	movs	r2, #112	; 0x70
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8004c8c:	6829      	ldr	r1, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 8004c8e:	688b      	ldr	r3, [r1, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004c90:	4393      	bics	r3, r2
 8004c92:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004c94:	2337      	movs	r3, #55	; 0x37
 8004c96:	e181      	b.n	8004f9c <HAL_TIM_ConfigClockSource+0x398>
  switch (sClockSourceConfig->ClockSource)
 8004c98:	2a70      	cmp	r2, #112	; 0x70
 8004c9a:	d100      	bne.n	8004c9e <HAL_TIM_ConfigClockSource+0x9a>
 8004c9c:	e093      	b.n	8004dc6 <HAL_TIM_ConfigClockSource+0x1c2>
 8004c9e:	d83d      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x118>
 8004ca0:	2a50      	cmp	r2, #80	; 0x50
 8004ca2:	d100      	bne.n	8004ca6 <HAL_TIM_ConfigClockSource+0xa2>
 8004ca4:	e0c2      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x228>
 8004ca6:	2a60      	cmp	r2, #96	; 0x60
 8004ca8:	d1db      	bne.n	8004c62 <HAL_TIM_ConfigClockSource+0x5e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004caa:	4a83      	ldr	r2, [pc, #524]	; (8004eb8 <HAL_TIM_ConfigClockSource+0x2b4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d006      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0xba>
 8004cb0:	4a82      	ldr	r2, [pc, #520]	; (8004ebc <HAL_TIM_ConfigClockSource+0x2b8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d003      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0xba>
 8004cb6:	4983      	ldr	r1, [pc, #524]	; (8004ec4 <HAL_TIM_ConfigClockSource+0x2c0>)
 8004cb8:	487d      	ldr	r0, [pc, #500]	; (8004eb0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004cba:	f7fd f8c2 	bl	8001e42 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004cbe:	2280      	movs	r2, #128	; 0x80
 8004cc0:	6863      	ldr	r3, [r4, #4]
 8004cc2:	0212      	lsls	r2, r2, #8
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d009      	beq.n	8004cdc <HAL_TIM_ConfigClockSource+0xd8>
 8004cc8:	2202      	movs	r2, #2
 8004cca:	0019      	movs	r1, r3
 8004ccc:	4391      	bics	r1, r2
 8004cce:	d005      	beq.n	8004cdc <HAL_TIM_ConfigClockSource+0xd8>
 8004cd0:	2b0a      	cmp	r3, #10
 8004cd2:	d003      	beq.n	8004cdc <HAL_TIM_ConfigClockSource+0xd8>
 8004cd4:	497c      	ldr	r1, [pc, #496]	; (8004ec8 <HAL_TIM_ConfigClockSource+0x2c4>)
 8004cd6:	4876      	ldr	r0, [pc, #472]	; (8004eb0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004cd8:	f7fd f8b3 	bl	8001e42 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004cdc:	68e3      	ldr	r3, [r4, #12]
 8004cde:	2b0f      	cmp	r3, #15
 8004ce0:	d903      	bls.n	8004cea <HAL_TIM_ConfigClockSource+0xe6>
 8004ce2:	497a      	ldr	r1, [pc, #488]	; (8004ecc <HAL_TIM_ConfigClockSource+0x2c8>)
 8004ce4:	4872      	ldr	r0, [pc, #456]	; (8004eb0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004ce6:	f7fd f8ac 	bl	8001e42 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cea:	6862      	ldr	r2, [r4, #4]
 8004cec:	68e1      	ldr	r1, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cee:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cf0:	682b      	ldr	r3, [r5, #0]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cf2:	4d77      	ldr	r5, [pc, #476]	; (8004ed0 <HAL_TIM_ConfigClockSource+0x2cc>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf4:	6a18      	ldr	r0, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cf6:	0309      	lsls	r1, r1, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf8:	43a0      	bics	r0, r4
 8004cfa:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cfc:	699c      	ldr	r4, [r3, #24]
  tmpccer = TIMx->CCER;
 8004cfe:	6a18      	ldr	r0, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d00:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d02:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d04:	24a0      	movs	r4, #160	; 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 8004d06:	6199      	str	r1, [r3, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004d08:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d0a:	43a0      	bics	r0, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d0c:	0112      	lsls	r2, r2, #4
 8004d0e:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 8004d10:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8004d12:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004d14:	438a      	bics	r2, r1
 8004d16:	0011      	movs	r1, r2
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004d18:	2267      	movs	r2, #103	; 0x67
 8004d1a:	e0bf      	b.n	8004e9c <HAL_TIM_ConfigClockSource+0x298>
  switch (sClockSourceConfig->ClockSource)
 8004d1c:	2180      	movs	r1, #128	; 0x80
 8004d1e:	0149      	lsls	r1, r1, #5
 8004d20:	428a      	cmp	r2, r1
 8004d22:	d037      	beq.n	8004d94 <HAL_TIM_ConfigClockSource+0x190>
 8004d24:	2180      	movs	r1, #128	; 0x80
 8004d26:	0189      	lsls	r1, r1, #6
 8004d28:	428a      	cmp	r2, r1
 8004d2a:	d19a      	bne.n	8004c62 <HAL_TIM_ConfigClockSource+0x5e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8004d2c:	4a62      	ldr	r2, [pc, #392]	; (8004eb8 <HAL_TIM_ConfigClockSource+0x2b4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d006      	beq.n	8004d40 <HAL_TIM_ConfigClockSource+0x13c>
 8004d32:	4a62      	ldr	r2, [pc, #392]	; (8004ebc <HAL_TIM_ConfigClockSource+0x2b8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d003      	beq.n	8004d40 <HAL_TIM_ConfigClockSource+0x13c>
 8004d38:	4966      	ldr	r1, [pc, #408]	; (8004ed4 <HAL_TIM_ConfigClockSource+0x2d0>)
 8004d3a:	485d      	ldr	r0, [pc, #372]	; (8004eb0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004d3c:	f7fd f881 	bl	8001e42 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004d40:	4b65      	ldr	r3, [pc, #404]	; (8004ed8 <HAL_TIM_ConfigClockSource+0x2d4>)
 8004d42:	68a2      	ldr	r2, [r4, #8]
 8004d44:	421a      	tst	r2, r3
 8004d46:	d003      	beq.n	8004d50 <HAL_TIM_ConfigClockSource+0x14c>
 8004d48:	4964      	ldr	r1, [pc, #400]	; (8004edc <HAL_TIM_ConfigClockSource+0x2d8>)
 8004d4a:	4859      	ldr	r0, [pc, #356]	; (8004eb0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004d4c:	f7fd f879 	bl	8001e42 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004d50:	2280      	movs	r2, #128	; 0x80
 8004d52:	6863      	ldr	r3, [r4, #4]
 8004d54:	0212      	lsls	r2, r2, #8
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00a      	beq.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	0019      	movs	r1, r3
 8004d5e:	4391      	bics	r1, r2
 8004d60:	d006      	beq.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d62:	2b0a      	cmp	r3, #10
 8004d64:	d004      	beq.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d66:	21ff      	movs	r1, #255	; 0xff
 8004d68:	4851      	ldr	r0, [pc, #324]	; (8004eb0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004d6a:	0109      	lsls	r1, r1, #4
 8004d6c:	f7fd f869 	bl	8001e42 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004d70:	68e3      	ldr	r3, [r4, #12]
 8004d72:	2b0f      	cmp	r3, #15
 8004d74:	d903      	bls.n	8004d7e <HAL_TIM_ConfigClockSource+0x17a>
 8004d76:	495a      	ldr	r1, [pc, #360]	; (8004ee0 <HAL_TIM_ConfigClockSource+0x2dc>)
 8004d78:	484d      	ldr	r0, [pc, #308]	; (8004eb0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004d7a:	f7fd f862 	bl	8001e42 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8004d7e:	68e3      	ldr	r3, [r4, #12]
 8004d80:	6862      	ldr	r2, [r4, #4]
 8004d82:	68a1      	ldr	r1, [r4, #8]
 8004d84:	6828      	ldr	r0, [r5, #0]
 8004d86:	f7ff ff31 	bl	8004bec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d8a:	2380      	movs	r3, #128	; 0x80
 8004d8c:	682a      	ldr	r2, [r5, #0]
 8004d8e:	01db      	lsls	r3, r3, #7
 8004d90:	6891      	ldr	r1, [r2, #8]
 8004d92:	e049      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x224>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004d94:	4a48      	ldr	r2, [pc, #288]	; (8004eb8 <HAL_TIM_ConfigClockSource+0x2b4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00f      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0x1b6>
 8004d9a:	4a48      	ldr	r2, [pc, #288]	; (8004ebc <HAL_TIM_ConfigClockSource+0x2b8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00c      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0x1b6>
 8004da0:	4a50      	ldr	r2, [pc, #320]	; (8004ee4 <HAL_TIM_ConfigClockSource+0x2e0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d009      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0x1b6>
 8004da6:	4a50      	ldr	r2, [pc, #320]	; (8004ee8 <HAL_TIM_ConfigClockSource+0x2e4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d006      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0x1b6>
 8004dac:	4a4f      	ldr	r2, [pc, #316]	; (8004eec <HAL_TIM_ConfigClockSource+0x2e8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d003      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0x1b6>
 8004db2:	494f      	ldr	r1, [pc, #316]	; (8004ef0 <HAL_TIM_ConfigClockSource+0x2ec>)
 8004db4:	483e      	ldr	r0, [pc, #248]	; (8004eb0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004db6:	f7fd f844 	bl	8001e42 <assert_failed>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004dba:	2107      	movs	r1, #7
 8004dbc:	682a      	ldr	r2, [r5, #0]
 8004dbe:	6893      	ldr	r3, [r2, #8]
 8004dc0:	438b      	bics	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8004dc2:	6093      	str	r3, [r2, #8]
    break;
 8004dc4:	e74d      	b.n	8004c62 <HAL_TIM_ConfigClockSource+0x5e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8004dc6:	4a3c      	ldr	r2, [pc, #240]	; (8004eb8 <HAL_TIM_ConfigClockSource+0x2b4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d006      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x1d6>
 8004dcc:	4a3b      	ldr	r2, [pc, #236]	; (8004ebc <HAL_TIM_ConfigClockSource+0x2b8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d003      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x1d6>
 8004dd2:	4948      	ldr	r1, [pc, #288]	; (8004ef4 <HAL_TIM_ConfigClockSource+0x2f0>)
 8004dd4:	4836      	ldr	r0, [pc, #216]	; (8004eb0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004dd6:	f7fd f834 	bl	8001e42 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004dda:	4b3f      	ldr	r3, [pc, #252]	; (8004ed8 <HAL_TIM_ConfigClockSource+0x2d4>)
 8004ddc:	68a2      	ldr	r2, [r4, #8]
 8004dde:	421a      	tst	r2, r3
 8004de0:	d003      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x1e6>
 8004de2:	4945      	ldr	r1, [pc, #276]	; (8004ef8 <HAL_TIM_ConfigClockSource+0x2f4>)
 8004de4:	4832      	ldr	r0, [pc, #200]	; (8004eb0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004de6:	f7fd f82c 	bl	8001e42 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004dea:	2280      	movs	r2, #128	; 0x80
 8004dec:	6863      	ldr	r3, [r4, #4]
 8004dee:	0212      	lsls	r2, r2, #8
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d009      	beq.n	8004e08 <HAL_TIM_ConfigClockSource+0x204>
 8004df4:	2202      	movs	r2, #2
 8004df6:	0019      	movs	r1, r3
 8004df8:	4391      	bics	r1, r2
 8004dfa:	d005      	beq.n	8004e08 <HAL_TIM_ConfigClockSource+0x204>
 8004dfc:	2b0a      	cmp	r3, #10
 8004dfe:	d003      	beq.n	8004e08 <HAL_TIM_ConfigClockSource+0x204>
 8004e00:	493e      	ldr	r1, [pc, #248]	; (8004efc <HAL_TIM_ConfigClockSource+0x2f8>)
 8004e02:	482b      	ldr	r0, [pc, #172]	; (8004eb0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004e04:	f7fd f81d 	bl	8001e42 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004e08:	68e3      	ldr	r3, [r4, #12]
 8004e0a:	2b0f      	cmp	r3, #15
 8004e0c:	d903      	bls.n	8004e16 <HAL_TIM_ConfigClockSource+0x212>
 8004e0e:	493c      	ldr	r1, [pc, #240]	; (8004f00 <HAL_TIM_ConfigClockSource+0x2fc>)
 8004e10:	4827      	ldr	r0, [pc, #156]	; (8004eb0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004e12:	f7fd f816 	bl	8001e42 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8004e16:	68e3      	ldr	r3, [r4, #12]
 8004e18:	6862      	ldr	r2, [r4, #4]
 8004e1a:	68a1      	ldr	r1, [r4, #8]
 8004e1c:	6828      	ldr	r0, [r5, #0]
 8004e1e:	f7ff fee5 	bl	8004bec <TIM_ETR_SetConfig>
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e22:	2177      	movs	r1, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8004e24:	682a      	ldr	r2, [r5, #0]
 8004e26:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	e7ca      	b.n	8004dc2 <HAL_TIM_ConfigClockSource+0x1be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004e2c:	4a22      	ldr	r2, [pc, #136]	; (8004eb8 <HAL_TIM_ConfigClockSource+0x2b4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d007      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x23e>
 8004e32:	4a22      	ldr	r2, [pc, #136]	; (8004ebc <HAL_TIM_ConfigClockSource+0x2b8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x23e>
 8004e38:	2180      	movs	r1, #128	; 0x80
 8004e3a:	481d      	ldr	r0, [pc, #116]	; (8004eb0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004e3c:	0149      	lsls	r1, r1, #5
 8004e3e:	f7fd f800 	bl	8001e42 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004e42:	2280      	movs	r2, #128	; 0x80
 8004e44:	6863      	ldr	r3, [r4, #4]
 8004e46:	0212      	lsls	r2, r2, #8
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d009      	beq.n	8004e60 <HAL_TIM_ConfigClockSource+0x25c>
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	0019      	movs	r1, r3
 8004e50:	4391      	bics	r1, r2
 8004e52:	d005      	beq.n	8004e60 <HAL_TIM_ConfigClockSource+0x25c>
 8004e54:	2b0a      	cmp	r3, #10
 8004e56:	d003      	beq.n	8004e60 <HAL_TIM_ConfigClockSource+0x25c>
 8004e58:	492a      	ldr	r1, [pc, #168]	; (8004f04 <HAL_TIM_ConfigClockSource+0x300>)
 8004e5a:	4815      	ldr	r0, [pc, #84]	; (8004eb0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004e5c:	f7fc fff1 	bl	8001e42 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004e60:	68e3      	ldr	r3, [r4, #12]
 8004e62:	2b0f      	cmp	r3, #15
 8004e64:	d903      	bls.n	8004e6e <HAL_TIM_ConfigClockSource+0x26a>
 8004e66:	4928      	ldr	r1, [pc, #160]	; (8004f08 <HAL_TIM_ConfigClockSource+0x304>)
 8004e68:	4811      	ldr	r0, [pc, #68]	; (8004eb0 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004e6a:	f7fc ffea 	bl	8001e42 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6e:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e70:	2501      	movs	r5, #1
  tmpccer = TIMx->CCER;
 8004e72:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e74:	6861      	ldr	r1, [r4, #4]
 8004e76:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e78:	6a1c      	ldr	r4, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e7a:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e7c:	43ac      	bics	r4, r5
 8004e7e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e80:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e82:	35ef      	adds	r5, #239	; 0xef
 8004e84:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e86:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e88:	240a      	movs	r4, #10
 8004e8a:	43a0      	bics	r0, r4
  tmpccer |= TIM_ICPolarity;
 8004e8c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e90:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004e92:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8004e94:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004e96:	438a      	bics	r2, r1
 8004e98:	0011      	movs	r1, r2
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004e9a:	2257      	movs	r2, #87	; 0x57
 8004e9c:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8004e9e:	609a      	str	r2, [r3, #8]
 8004ea0:	e6df      	b.n	8004c62 <HAL_TIM_ConfigClockSource+0x5e>
 8004ea2:	46c0      	nop			; (mov r8, r8)
 8004ea4:	fffff000 	.word	0xfffff000
 8004ea8:	ffffefff 	.word	0xffffefff
 8004eac:	00000fbd 	.word	0x00000fbd
 8004eb0:	08006638 	.word	0x08006638
 8004eb4:	ffff0088 	.word	0xffff0088
 8004eb8:	40012c00 	.word	0x40012c00
 8004ebc:	40000400 	.word	0x40000400
 8004ec0:	00001045 	.word	0x00001045
 8004ec4:	0000100f 	.word	0x0000100f
 8004ec8:	00001012 	.word	0x00001012
 8004ecc:	00001013 	.word	0x00001013
 8004ed0:	ffff0fff 	.word	0xffff0fff
 8004ed4:	00000fec 	.word	0x00000fec
 8004ed8:	ffffcfff 	.word	0xffffcfff
 8004edc:	00000fef 	.word	0x00000fef
 8004ee0:	00000ff1 	.word	0x00000ff1
 8004ee4:	40002000 	.word	0x40002000
 8004ee8:	40014400 	.word	0x40014400
 8004eec:	40014800 	.word	0x40014800
 8004ef0:	00000fc9 	.word	0x00000fc9
 8004ef4:	00000fd2 	.word	0x00000fd2
 8004ef8:	00000fd5 	.word	0x00000fd5
 8004efc:	00000fd6 	.word	0x00000fd6
 8004f00:	00000fd7 	.word	0x00000fd7
 8004f04:	00001003 	.word	0x00001003
 8004f08:	00001004 	.word	0x00001004
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004f0c:	4a36      	ldr	r2, [pc, #216]	; (8004fe8 <HAL_TIM_ConfigClockSource+0x3e4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d006      	beq.n	8004f20 <HAL_TIM_ConfigClockSource+0x31c>
 8004f12:	4a36      	ldr	r2, [pc, #216]	; (8004fec <HAL_TIM_ConfigClockSource+0x3e8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <HAL_TIM_ConfigClockSource+0x31c>
 8004f18:	4935      	ldr	r1, [pc, #212]	; (8004ff0 <HAL_TIM_ConfigClockSource+0x3ec>)
 8004f1a:	4836      	ldr	r0, [pc, #216]	; (8004ff4 <HAL_TIM_ConfigClockSource+0x3f0>)
 8004f1c:	f7fc ff91 	bl	8001e42 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004f20:	2280      	movs	r2, #128	; 0x80
 8004f22:	6863      	ldr	r3, [r4, #4]
 8004f24:	0212      	lsls	r2, r2, #8
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d009      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x33a>
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	0019      	movs	r1, r3
 8004f2e:	4391      	bics	r1, r2
 8004f30:	d005      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x33a>
 8004f32:	2b0a      	cmp	r3, #10
 8004f34:	d003      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x33a>
 8004f36:	4930      	ldr	r1, [pc, #192]	; (8004ff8 <HAL_TIM_ConfigClockSource+0x3f4>)
 8004f38:	482e      	ldr	r0, [pc, #184]	; (8004ff4 <HAL_TIM_ConfigClockSource+0x3f0>)
 8004f3a:	f7fc ff82 	bl	8001e42 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004f3e:	68e3      	ldr	r3, [r4, #12]
 8004f40:	2b0f      	cmp	r3, #15
 8004f42:	d903      	bls.n	8004f4c <HAL_TIM_ConfigClockSource+0x348>
 8004f44:	492d      	ldr	r1, [pc, #180]	; (8004ffc <HAL_TIM_ConfigClockSource+0x3f8>)
 8004f46:	482b      	ldr	r0, [pc, #172]	; (8004ff4 <HAL_TIM_ConfigClockSource+0x3f0>)
 8004f48:	f7fc ff7b 	bl	8001e42 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4c:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f4e:	2501      	movs	r5, #1
  tmpccer = TIMx->CCER;
 8004f50:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f52:	6861      	ldr	r1, [r4, #4]
 8004f54:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f56:	6a1c      	ldr	r4, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f58:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f5a:	43ac      	bics	r4, r5
 8004f5c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f5e:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f60:	35ef      	adds	r5, #239	; 0xef
 8004f62:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f64:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f66:	240a      	movs	r4, #10
 8004f68:	43a0      	bics	r0, r4
  tmpccer |= TIM_ICPolarity;
 8004f6a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004f6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f6e:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004f70:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8004f72:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004f74:	438a      	bics	r2, r1
 8004f76:	0011      	movs	r1, r2
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004f78:	2247      	movs	r2, #71	; 0x47
 8004f7a:	e78f      	b.n	8004e9c <HAL_TIM_ConfigClockSource+0x298>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8004f7c:	4a1a      	ldr	r2, [pc, #104]	; (8004fe8 <HAL_TIM_ConfigClockSource+0x3e4>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d006      	beq.n	8004f90 <HAL_TIM_ConfigClockSource+0x38c>
 8004f82:	4a1a      	ldr	r2, [pc, #104]	; (8004fec <HAL_TIM_ConfigClockSource+0x3e8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d003      	beq.n	8004f90 <HAL_TIM_ConfigClockSource+0x38c>
 8004f88:	491d      	ldr	r1, [pc, #116]	; (8005000 <HAL_TIM_ConfigClockSource+0x3fc>)
 8004f8a:	481a      	ldr	r0, [pc, #104]	; (8004ff4 <HAL_TIM_ConfigClockSource+0x3f0>)
 8004f8c:	f7fc ff59 	bl	8001e42 <assert_failed>
   tmpsmcr &= ~TIM_SMCR_TS;
 8004f90:	2270      	movs	r2, #112	; 0x70
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8004f92:	6829      	ldr	r1, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 8004f94:	688b      	ldr	r3, [r1, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004f96:	4393      	bics	r3, r2
 8004f98:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004f9a:	2307      	movs	r3, #7
 8004f9c:	4313      	orrs	r3, r2
   TIMx->SMCR = tmpsmcr;
 8004f9e:	608b      	str	r3, [r1, #8]
 8004fa0:	e65f      	b.n	8004c62 <HAL_TIM_ConfigClockSource+0x5e>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8004fa2:	4a11      	ldr	r2, [pc, #68]	; (8004fe8 <HAL_TIM_ConfigClockSource+0x3e4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d006      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x3b2>
 8004fa8:	4a10      	ldr	r2, [pc, #64]	; (8004fec <HAL_TIM_ConfigClockSource+0x3e8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d003      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x3b2>
 8004fae:	4915      	ldr	r1, [pc, #84]	; (8005004 <HAL_TIM_ConfigClockSource+0x400>)
 8004fb0:	4810      	ldr	r0, [pc, #64]	; (8004ff4 <HAL_TIM_ConfigClockSource+0x3f0>)
 8004fb2:	f7fc ff46 	bl	8001e42 <assert_failed>
   tmpsmcr &= ~TIM_SMCR_TS;
 8004fb6:	2270      	movs	r2, #112	; 0x70
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8004fb8:	6829      	ldr	r1, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 8004fba:	688b      	ldr	r3, [r1, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004fbc:	4393      	bics	r3, r2
 8004fbe:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004fc0:	2317      	movs	r3, #23
 8004fc2:	e7eb      	b.n	8004f9c <HAL_TIM_ConfigClockSource+0x398>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8004fc4:	4a08      	ldr	r2, [pc, #32]	; (8004fe8 <HAL_TIM_ConfigClockSource+0x3e4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d006      	beq.n	8004fd8 <HAL_TIM_ConfigClockSource+0x3d4>
 8004fca:	4a08      	ldr	r2, [pc, #32]	; (8004fec <HAL_TIM_ConfigClockSource+0x3e8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <HAL_TIM_ConfigClockSource+0x3d4>
 8004fd0:	490d      	ldr	r1, [pc, #52]	; (8005008 <HAL_TIM_ConfigClockSource+0x404>)
 8004fd2:	4808      	ldr	r0, [pc, #32]	; (8004ff4 <HAL_TIM_ConfigClockSource+0x3f0>)
 8004fd4:	f7fc ff35 	bl	8001e42 <assert_failed>
   tmpsmcr &= ~TIM_SMCR_TS;
 8004fd8:	2270      	movs	r2, #112	; 0x70
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8004fda:	6829      	ldr	r1, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 8004fdc:	688b      	ldr	r3, [r1, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004fde:	4393      	bics	r3, r2
 8004fe0:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004fe2:	2327      	movs	r3, #39	; 0x27
 8004fe4:	e7da      	b.n	8004f9c <HAL_TIM_ConfigClockSource+0x398>
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	40012c00 	.word	0x40012c00
 8004fec:	40000400 	.word	0x40000400
 8004ff0:	0000101e 	.word	0x0000101e
 8004ff4:	08006638 	.word	0x08006638
 8004ff8:	00001021 	.word	0x00001021
 8004ffc:	00001022 	.word	0x00001022
 8005000:	0000102d 	.word	0x0000102d
 8005004:	00001035 	.word	0x00001035
 8005008:	0000103d 	.word	0x0000103d

0800500c <HAL_TIMEx_MasterConfigSynchronization>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800500c:	6803      	ldr	r3, [r0, #0]
 800500e:	4a1f      	ldr	r2, [pc, #124]	; (800508c <HAL_TIMEx_MasterConfigSynchronization+0x80>)
{
 8005010:	b570      	push	{r4, r5, r6, lr}
 8005012:	0005      	movs	r5, r0
 8005014:	000c      	movs	r4, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8005016:	4293      	cmp	r3, r2
 8005018:	d006      	beq.n	8005028 <HAL_TIMEx_MasterConfigSynchronization+0x1c>
 800501a:	4a1d      	ldr	r2, [pc, #116]	; (8005090 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <HAL_TIMEx_MasterConfigSynchronization+0x1c>
 8005020:	491c      	ldr	r1, [pc, #112]	; (8005094 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8005022:	481d      	ldr	r0, [pc, #116]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8005024:	f7fc ff0d 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8005028:	2330      	movs	r3, #48	; 0x30
 800502a:	6822      	ldr	r2, [r4, #0]
 800502c:	439a      	bics	r2, r3
 800502e:	d005      	beq.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x30>
 8005030:	2a40      	cmp	r2, #64	; 0x40
 8005032:	d003      	beq.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x30>
 8005034:	4919      	ldr	r1, [pc, #100]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8005036:	4818      	ldr	r0, [pc, #96]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8005038:	f7fc ff03 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800503c:	2380      	movs	r3, #128	; 0x80
 800503e:	6862      	ldr	r2, [r4, #4]
 8005040:	439a      	bics	r2, r3
 8005042:	d003      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8005044:	4916      	ldr	r1, [pc, #88]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8005046:	4814      	ldr	r0, [pc, #80]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8005048:	f7fc fefb 	bl	8001e42 <assert_failed>

  __HAL_LOCK(htim);
 800504c:	0029      	movs	r1, r5
 800504e:	313c      	adds	r1, #60	; 0x3c
 8005050:	780b      	ldrb	r3, [r1, #0]
 8005052:	2002      	movs	r0, #2
 8005054:	2b01      	cmp	r3, #1
 8005056:	d017      	beq.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0x7c>

  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	002e      	movs	r6, r5

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800505a:	682b      	ldr	r3, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	363d      	adds	r6, #61	; 0x3d
 800505e:	7030      	strb	r0, [r6, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	306e      	adds	r0, #110	; 0x6e
 8005064:	4382      	bics	r2, r0
 8005066:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	6820      	ldr	r0, [r4, #0]
 800506c:	4302      	orrs	r2, r0

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800506e:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8005070:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	4382      	bics	r2, r0
 8005076:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	6860      	ldr	r0, [r4, #4]
 800507c:	4302      	orrs	r2, r0
 800507e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005080:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005082:	2301      	movs	r3, #1
 8005084:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8005086:	7008      	strb	r0, [r1, #0]

  return HAL_OK;
}
 8005088:	bd70      	pop	{r4, r5, r6, pc}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	40012c00 	.word	0x40012c00
 8005090:	40000400 	.word	0x40000400
 8005094:	00000649 	.word	0x00000649
 8005098:	08006670 	.word	0x08006670
 800509c:	0000064a 	.word	0x0000064a
 80050a0:	0000064b 	.word	0x0000064b

080050a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpbdtr = 0;
   
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80050a6:	4a39      	ldr	r2, [pc, #228]	; (800518c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>)
 80050a8:	6803      	ldr	r3, [r0, #0]
{
 80050aa:	0005      	movs	r5, r0
 80050ac:	000c      	movs	r4, r1
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00a      	beq.n	80050c8 <HAL_TIMEx_ConfigBreakDeadTime+0x24>
 80050b2:	4a37      	ldr	r2, [pc, #220]	; (8005190 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d007      	beq.n	80050c8 <HAL_TIMEx_ConfigBreakDeadTime+0x24>
 80050b8:	4a36      	ldr	r2, [pc, #216]	; (8005194 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d004      	beq.n	80050c8 <HAL_TIMEx_ConfigBreakDeadTime+0x24>
 80050be:	21ce      	movs	r1, #206	; 0xce
 80050c0:	4835      	ldr	r0, [pc, #212]	; (8005198 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80050c2:	00c9      	lsls	r1, r1, #3
 80050c4:	f7fc febd 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	4a34      	ldr	r2, [pc, #208]	; (800519c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80050cc:	4213      	tst	r3, r2
 80050ce:	d003      	beq.n	80050d8 <HAL_TIMEx_ConfigBreakDeadTime+0x34>
 80050d0:	4933      	ldr	r1, [pc, #204]	; (80051a0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 80050d2:	4831      	ldr	r0, [pc, #196]	; (8005198 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80050d4:	f7fc feb5 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80050d8:	6863      	ldr	r3, [r4, #4]
 80050da:	4a32      	ldr	r2, [pc, #200]	; (80051a4 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80050dc:	4213      	tst	r3, r2
 80050de:	d003      	beq.n	80050e8 <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 80050e0:	4931      	ldr	r1, [pc, #196]	; (80051a8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80050e2:	482d      	ldr	r0, [pc, #180]	; (8005198 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80050e4:	f7fc fead 	bl	8001e42 <assert_failed>
 80050e8:	4f30      	ldr	r7, [pc, #192]	; (80051ac <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80050ea:	68a3      	ldr	r3, [r4, #8]
 80050ec:	423b      	tst	r3, r7
 80050ee:	d003      	beq.n	80050f8 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 80050f0:	492f      	ldr	r1, [pc, #188]	; (80051b0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80050f2:	4829      	ldr	r0, [pc, #164]	; (8005198 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80050f4:	f7fc fea5 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 80050f8:	68e3      	ldr	r3, [r4, #12]
 80050fa:	2bff      	cmp	r3, #255	; 0xff
 80050fc:	d903      	bls.n	8005106 <HAL_TIMEx_ConfigBreakDeadTime+0x62>
 80050fe:	492d      	ldr	r1, [pc, #180]	; (80051b4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005100:	4825      	ldr	r0, [pc, #148]	; (8005198 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005102:	f7fc fe9e 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8005106:	6923      	ldr	r3, [r4, #16]
 8005108:	4a2b      	ldr	r2, [pc, #172]	; (80051b8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800510a:	4213      	tst	r3, r2
 800510c:	d003      	beq.n	8005116 <HAL_TIMEx_ConfigBreakDeadTime+0x72>
 800510e:	492b      	ldr	r1, [pc, #172]	; (80051bc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005110:	4821      	ldr	r0, [pc, #132]	; (8005198 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005112:	f7fc fe96 	bl	8001e42 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8005116:	6963      	ldr	r3, [r4, #20]
 8005118:	4a29      	ldr	r2, [pc, #164]	; (80051c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800511a:	4213      	tst	r3, r2
 800511c:	d003      	beq.n	8005126 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800511e:	4929      	ldr	r1, [pc, #164]	; (80051c4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005120:	481d      	ldr	r0, [pc, #116]	; (8005198 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005122:	f7fc fe8e 	bl	8001e42 <assert_failed>
 8005126:	4e28      	ldr	r6, [pc, #160]	; (80051c8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8005128:	69a3      	ldr	r3, [r4, #24]
 800512a:	4233      	tst	r3, r6
 800512c:	d003      	beq.n	8005136 <HAL_TIMEx_ConfigBreakDeadTime+0x92>
 800512e:	4927      	ldr	r1, [pc, #156]	; (80051cc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005130:	4819      	ldr	r0, [pc, #100]	; (8005198 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005132:	f7fc fe86 	bl	8001e42 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8005136:	002b      	movs	r3, r5
 8005138:	333c      	adds	r3, #60	; 0x3c
 800513a:	781a      	ldrb	r2, [r3, #0]
 800513c:	2002      	movs	r0, #2
 800513e:	2a01      	cmp	r2, #1
 8005140:	d022      	beq.n	8005188 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>

  htim->State = HAL_TIM_STATE_BUSY;
 8005142:	002a      	movs	r2, r5
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005144:	68e1      	ldr	r1, [r4, #12]
  htim->State = HAL_TIM_STATE_BUSY;
 8005146:	323d      	adds	r2, #61	; 0x3d
 8005148:	7010      	strb	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800514a:	68a0      	ldr	r0, [r4, #8]
 800514c:	4039      	ands	r1, r7
 800514e:	4301      	orrs	r1, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005150:	4814      	ldr	r0, [pc, #80]	; (80051a4 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8005152:	4001      	ands	r1, r0
 8005154:	6860      	ldr	r0, [r4, #4]
 8005156:	4301      	orrs	r1, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005158:	4810      	ldr	r0, [pc, #64]	; (800519c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800515a:	4001      	ands	r1, r0
 800515c:	6820      	ldr	r0, [r4, #0]
 800515e:	4301      	orrs	r1, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005160:	4815      	ldr	r0, [pc, #84]	; (80051b8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005162:	4001      	ands	r1, r0
 8005164:	6920      	ldr	r0, [r4, #16]
 8005166:	4301      	orrs	r1, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005168:	4815      	ldr	r0, [pc, #84]	; (80051c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800516a:	4001      	ands	r1, r0
 800516c:	6960      	ldr	r0, [r4, #20]
 800516e:	4301      	orrs	r1, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005170:	400e      	ands	r6, r1
 8005172:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005174:	4816      	ldr	r0, [pc, #88]	; (80051d0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005176:	430e      	orrs	r6, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005178:	4006      	ands	r6, r0
 800517a:	430e      	orrs	r6, r1
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800517c:	6829      	ldr	r1, [r5, #0]
  
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800517e:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 8005180:	644e      	str	r6, [r1, #68]	; 0x44
  htim->State = HAL_TIM_STATE_READY;
 8005182:	2101      	movs	r1, #1
 8005184:	7011      	strb	r1, [r2, #0]
  __HAL_UNLOCK(htim);
 8005186:	7018      	strb	r0, [r3, #0]

  return HAL_OK;
}
 8005188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	40012c00 	.word	0x40012c00
 8005190:	40014400 	.word	0x40014400
 8005194:	40014800 	.word	0x40014800
 8005198:	08006670 	.word	0x08006670
 800519c:	fffff7ff 	.word	0xfffff7ff
 80051a0:	00000671 	.word	0x00000671
 80051a4:	fffffbff 	.word	0xfffffbff
 80051a8:	00000672 	.word	0x00000672
 80051ac:	fffffcff 	.word	0xfffffcff
 80051b0:	00000673 	.word	0x00000673
 80051b4:	00000674 	.word	0x00000674
 80051b8:	ffffefff 	.word	0xffffefff
 80051bc:	00000675 	.word	0x00000675
 80051c0:	ffffdfff 	.word	0xffffdfff
 80051c4:	00000676 	.word	0x00000676
 80051c8:	ffffbfff 	.word	0xffffbfff
 80051cc:	00000677 	.word	0x00000677
 80051d0:	ffff7fff 	.word	0xffff7fff

080051d4 <HAL_TIMEx_CommutationCallback>:
 80051d4:	4770      	bx	lr

080051d6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051d6:	4770      	bx	lr

080051d8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d8:	6803      	ldr	r3, [r0, #0]
 80051da:	4906      	ldr	r1, [pc, #24]	; (80051f4 <UART_EndRxTransfer+0x1c>)
 80051dc:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051de:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051e0:	400a      	ands	r2, r1
 80051e2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	3123      	adds	r1, #35	; 0x23
 80051e8:	31ff      	adds	r1, #255	; 0xff
 80051ea:	438a      	bics	r2, r1
 80051ec:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80051ee:	2320      	movs	r3, #32
 80051f0:	7003      	strb	r3, [r0, #0]
}
 80051f2:	4770      	bx	lr
 80051f4:	fffffedf 	.word	0xfffffedf

080051f8 <HAL_UART_Transmit_DMA>:
{
 80051f8:	0013      	movs	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80051fa:	0002      	movs	r2, r0
{
 80051fc:	b570      	push	{r4, r5, r6, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 80051fe:	3269      	adds	r2, #105	; 0x69
 8005200:	7814      	ldrb	r4, [r2, #0]
{
 8005202:	0005      	movs	r5, r0
    return HAL_BUSY;
 8005204:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8005206:	2c20      	cmp	r4, #32
 8005208:	d134      	bne.n	8005274 <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 800520a:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800520c:	2900      	cmp	r1, #0
 800520e:	d031      	beq.n	8005274 <HAL_UART_Transmit_DMA+0x7c>
 8005210:	2b00      	cmp	r3, #0
 8005212:	d02f      	beq.n	8005274 <HAL_UART_Transmit_DMA+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005214:	2480      	movs	r4, #128	; 0x80
 8005216:	68ae      	ldr	r6, [r5, #8]
 8005218:	0164      	lsls	r4, r4, #5
 800521a:	42a6      	cmp	r6, r4
 800521c:	d104      	bne.n	8005228 <HAL_UART_Transmit_DMA+0x30>
 800521e:	692c      	ldr	r4, [r5, #16]
 8005220:	2c00      	cmp	r4, #0
 8005222:	d101      	bne.n	8005228 <HAL_UART_Transmit_DMA+0x30>
      if((((uint32_t)pData)&1U) != 0U)
 8005224:	4201      	tst	r1, r0
 8005226:	d125      	bne.n	8005274 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8005228:	002e      	movs	r6, r5
 800522a:	3668      	adds	r6, #104	; 0x68
 800522c:	7834      	ldrb	r4, [r6, #0]
    return HAL_BUSY;
 800522e:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8005230:	2c01      	cmp	r4, #1
 8005232:	d01f      	beq.n	8005274 <HAL_UART_Transmit_DMA+0x7c>
 8005234:	3801      	subs	r0, #1
 8005236:	7030      	strb	r0, [r6, #0]
    huart->TxXferSize = Size;
 8005238:	0028      	movs	r0, r5
 800523a:	3050      	adds	r0, #80	; 0x50
    huart->pTxBuffPtr = pData;
 800523c:	64e9      	str	r1, [r5, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523e:	2400      	movs	r4, #0
    huart->TxXferSize = Size;
 8005240:	8003      	strh	r3, [r0, #0]
    huart->TxXferCount = Size;
 8005242:	8043      	strh	r3, [r0, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005244:	2021      	movs	r0, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005246:	66ec      	str	r4, [r5, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005248:	7010      	strb	r0, [r2, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800524a:	6e28      	ldr	r0, [r5, #96]	; 0x60
 800524c:	4a0a      	ldr	r2, [pc, #40]	; (8005278 <HAL_UART_Transmit_DMA+0x80>)
    huart->hdmatx->XferAbortCallback = NULL;
 800524e:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005250:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005252:	4a0a      	ldr	r2, [pc, #40]	; (800527c <HAL_UART_Transmit_DMA+0x84>)
 8005254:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005256:	4a0a      	ldr	r2, [pc, #40]	; (8005280 <HAL_UART_Transmit_DMA+0x88>)
 8005258:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 800525a:	682a      	ldr	r2, [r5, #0]
 800525c:	3228      	adds	r2, #40	; 0x28
 800525e:	f7fd ff9d 	bl	800319c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005262:	2240      	movs	r2, #64	; 0x40
    return HAL_OK;
 8005264:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005266:	682b      	ldr	r3, [r5, #0]
 8005268:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800526a:	6899      	ldr	r1, [r3, #8]
 800526c:	1892      	adds	r2, r2, r2
 800526e:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 8005270:	7034      	strb	r4, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005272:	609a      	str	r2, [r3, #8]
}
 8005274:	bd70      	pop	{r4, r5, r6, pc}
 8005276:	46c0      	nop			; (mov r8, r8)
 8005278:	08005285 	.word	0x08005285
 800527c:	080052b7 	.word	0x080052b7
 8005280:	080052c5 	.word	0x080052c5

08005284 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8005284:	2120      	movs	r1, #32
 8005286:	6803      	ldr	r3, [r0, #0]
{
 8005288:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800528a:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800528c:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800528e:	400b      	ands	r3, r1
 8005290:	d10c      	bne.n	80052ac <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0;
 8005292:	0011      	movs	r1, r2
 8005294:	3152      	adds	r1, #82	; 0x52
 8005296:	800b      	strh	r3, [r1, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005298:	2180      	movs	r1, #128	; 0x80
 800529a:	6813      	ldr	r3, [r2, #0]
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	438a      	bics	r2, r1
 80052a0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052a2:	2240      	movs	r2, #64	; 0x40
 80052a4:	6819      	ldr	r1, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 80052aa:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80052ac:	0010      	movs	r0, r2
 80052ae:	f7fc f8f7 	bl	80014a0 <HAL_UART_TxCpltCallback>
}
 80052b2:	e7fa      	b.n	80052aa <UART_DMATransmitCplt+0x26>

080052b4 <HAL_UART_TxHalfCpltCallback>:
 80052b4:	4770      	bx	lr

080052b6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052b6:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 80052b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80052ba:	f7ff fffb 	bl	80052b4 <HAL_UART_TxHalfCpltCallback>
}
 80052be:	bd10      	pop	{r4, pc}

080052c0 <HAL_UART_RxCpltCallback>:
 80052c0:	4770      	bx	lr

080052c2 <HAL_UART_ErrorCallback>:
 80052c2:	4770      	bx	lr

080052c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80052c4:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80052c6:	6a44      	ldr	r4, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052c8:	0021      	movs	r1, r4
 80052ca:	3169      	adds	r1, #105	; 0x69
 80052cc:	780b      	ldrb	r3, [r1, #0]
 80052ce:	2b21      	cmp	r3, #33	; 0x21
 80052d0:	d10d      	bne.n	80052ee <UART_DMAError+0x2a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 80052d2:	6823      	ldr	r3, [r4, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	0612      	lsls	r2, r2, #24
 80052d8:	d509      	bpl.n	80052ee <UART_DMAError+0x2a>
  {
    huart->TxXferCount = 0U;
 80052da:	0022      	movs	r2, r4
 80052dc:	2000      	movs	r0, #0
 80052de:	3252      	adds	r2, #82	; 0x52
 80052e0:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	30c0      	adds	r0, #192	; 0xc0
 80052e6:	4382      	bics	r2, r0
 80052e8:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80052ea:	2320      	movs	r3, #32
 80052ec:	700b      	strb	r3, [r1, #0]
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052ee:	0023      	movs	r3, r4
 80052f0:	336a      	adds	r3, #106	; 0x6a
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b22      	cmp	r3, #34	; 0x22
 80052f6:	d10a      	bne.n	800530e <UART_DMAError+0x4a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	065b      	lsls	r3, r3, #25
 80052fe:	d506      	bpl.n	800530e <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
 8005300:	0023      	movs	r3, r4
 8005302:	2200      	movs	r2, #0
 8005304:	335a      	adds	r3, #90	; 0x5a
 8005306:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8005308:	0020      	movs	r0, r4
 800530a:	f7ff ff65 	bl	80051d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800530e:	2310      	movs	r3, #16
 8005310:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8005312:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005314:	4313      	orrs	r3, r2
 8005316:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8005318:	f7ff ffd3 	bl	80052c2 <HAL_UART_ErrorCallback>
}
 800531c:	bd10      	pop	{r4, pc}

0800531e <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800531e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	0002      	movs	r2, r0
{
 8005324:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8005326:	325a      	adds	r2, #90	; 0x5a
 8005328:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 800532a:	3a08      	subs	r2, #8
 800532c:	8013      	strh	r3, [r2, #0]

  HAL_UART_ErrorCallback(huart);
 800532e:	f7ff ffc8 	bl	80052c2 <HAL_UART_ErrorCallback>
}
 8005332:	bd10      	pop	{r4, pc}

08005334 <UART_SetConfig>:
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005334:	4b5e      	ldr	r3, [pc, #376]	; (80054b0 <UART_SetConfig+0x17c>)
 8005336:	6842      	ldr	r2, [r0, #4]
{
 8005338:	b570      	push	{r4, r5, r6, lr}
 800533a:	0004      	movs	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800533c:	429a      	cmp	r2, r3
 800533e:	d903      	bls.n	8005348 <UART_SetConfig+0x14>
 8005340:	495c      	ldr	r1, [pc, #368]	; (80054b4 <UART_SetConfig+0x180>)
 8005342:	485d      	ldr	r0, [pc, #372]	; (80054b8 <UART_SetConfig+0x184>)
 8005344:	f7fc fd7d 	bl	8001e42 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005348:	4b5c      	ldr	r3, [pc, #368]	; (80054bc <UART_SetConfig+0x188>)
 800534a:	68a2      	ldr	r2, [r4, #8]
 800534c:	421a      	tst	r2, r3
 800534e:	d003      	beq.n	8005358 <UART_SetConfig+0x24>
 8005350:	495b      	ldr	r1, [pc, #364]	; (80054c0 <UART_SetConfig+0x18c>)
 8005352:	4859      	ldr	r0, [pc, #356]	; (80054b8 <UART_SetConfig+0x184>)
 8005354:	f7fc fd75 	bl	8001e42 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005358:	4b5a      	ldr	r3, [pc, #360]	; (80054c4 <UART_SetConfig+0x190>)
 800535a:	68e2      	ldr	r2, [r4, #12]
 800535c:	421a      	tst	r2, r3
 800535e:	d003      	beq.n	8005368 <UART_SetConfig+0x34>
 8005360:	4959      	ldr	r1, [pc, #356]	; (80054c8 <UART_SetConfig+0x194>)
 8005362:	4855      	ldr	r0, [pc, #340]	; (80054b8 <UART_SetConfig+0x184>)
 8005364:	f7fc fd6d 	bl	8001e42 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005368:	6923      	ldr	r3, [r4, #16]
 800536a:	4a58      	ldr	r2, [pc, #352]	; (80054cc <UART_SetConfig+0x198>)
 800536c:	4213      	tst	r3, r2
 800536e:	d007      	beq.n	8005380 <UART_SetConfig+0x4c>
 8005370:	22c0      	movs	r2, #192	; 0xc0
 8005372:	00d2      	lsls	r2, r2, #3
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <UART_SetConfig+0x4c>
 8005378:	4955      	ldr	r1, [pc, #340]	; (80054d0 <UART_SetConfig+0x19c>)
 800537a:	484f      	ldr	r0, [pc, #316]	; (80054b8 <UART_SetConfig+0x184>)
 800537c:	f7fc fd61 	bl	8001e42 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005380:	6963      	ldr	r3, [r4, #20]
 8005382:	220c      	movs	r2, #12
 8005384:	0019      	movs	r1, r3
 8005386:	4391      	bics	r1, r2
 8005388:	d101      	bne.n	800538e <UART_SetConfig+0x5a>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d103      	bne.n	8005396 <UART_SetConfig+0x62>
 800538e:	4951      	ldr	r1, [pc, #324]	; (80054d4 <UART_SetConfig+0x1a0>)
 8005390:	4849      	ldr	r0, [pc, #292]	; (80054b8 <UART_SetConfig+0x184>)
 8005392:	f7fc fd56 	bl	8001e42 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005396:	4b50      	ldr	r3, [pc, #320]	; (80054d8 <UART_SetConfig+0x1a4>)
 8005398:	69a2      	ldr	r2, [r4, #24]
 800539a:	421a      	tst	r2, r3
 800539c:	d003      	beq.n	80053a6 <UART_SetConfig+0x72>
 800539e:	494f      	ldr	r1, [pc, #316]	; (80054dc <UART_SetConfig+0x1a8>)
 80053a0:	4845      	ldr	r0, [pc, #276]	; (80054b8 <UART_SetConfig+0x184>)
 80053a2:	f7fc fd4e 	bl	8001e42 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80053a6:	4b4e      	ldr	r3, [pc, #312]	; (80054e0 <UART_SetConfig+0x1ac>)
 80053a8:	6a22      	ldr	r2, [r4, #32]
 80053aa:	421a      	tst	r2, r3
 80053ac:	d003      	beq.n	80053b6 <UART_SetConfig+0x82>
 80053ae:	494d      	ldr	r1, [pc, #308]	; (80054e4 <UART_SetConfig+0x1b0>)
 80053b0:	4841      	ldr	r0, [pc, #260]	; (80054b8 <UART_SetConfig+0x184>)
 80053b2:	f7fc fd46 	bl	8001e42 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80053b6:	4b4c      	ldr	r3, [pc, #304]	; (80054e8 <UART_SetConfig+0x1b4>)
 80053b8:	69e2      	ldr	r2, [r4, #28]
 80053ba:	421a      	tst	r2, r3
 80053bc:	d003      	beq.n	80053c6 <UART_SetConfig+0x92>
 80053be:	494b      	ldr	r1, [pc, #300]	; (80054ec <UART_SetConfig+0x1b8>)
 80053c0:	483d      	ldr	r0, [pc, #244]	; (80054b8 <UART_SetConfig+0x184>)
 80053c2:	f7fc fd3e 	bl	8001e42 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053c6:	6920      	ldr	r0, [r4, #16]
 80053c8:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80053ca:	6825      	ldr	r5, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053cc:	4303      	orrs	r3, r0
 80053ce:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80053d0:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053d2:	69e2      	ldr	r2, [r4, #28]
 80053d4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80053d6:	4846      	ldr	r0, [pc, #280]	; (80054f0 <UART_SetConfig+0x1bc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053d8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80053da:	4001      	ands	r1, r0
 80053dc:	430b      	orrs	r3, r1
 80053de:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e0:	686b      	ldr	r3, [r5, #4]
 80053e2:	4944      	ldr	r1, [pc, #272]	; (80054f4 <UART_SetConfig+0x1c0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80053e4:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e6:	400b      	ands	r3, r1
 80053e8:	68e1      	ldr	r1, [r4, #12]
 80053ea:	430b      	orrs	r3, r1
 80053ec:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80053ee:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80053f0:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80053f2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80053f4:	4840      	ldr	r0, [pc, #256]	; (80054f8 <UART_SetConfig+0x1c4>)
 80053f6:	4001      	ands	r1, r0
 80053f8:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053fa:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80053fc:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053fe:	4b3f      	ldr	r3, [pc, #252]	; (80054fc <UART_SetConfig+0x1c8>)
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	400b      	ands	r3, r1
 8005404:	493e      	ldr	r1, [pc, #248]	; (8005500 <UART_SetConfig+0x1cc>)
 8005406:	5cc8      	ldrb	r0, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005408:	2380      	movs	r3, #128	; 0x80
 800540a:	021b      	lsls	r3, r3, #8
 800540c:	429a      	cmp	r2, r3
 800540e:	d12c      	bne.n	800546a <UART_SetConfig+0x136>
    switch (clocksource)
 8005410:	2808      	cmp	r0, #8
 8005412:	d827      	bhi.n	8005464 <UART_SetConfig+0x130>
 8005414:	f7fa fe78 	bl	8000108 <__gnu_thumb1_case_uqi>
 8005418:	260b2605 	.word	0x260b2605
 800541c:	2626261e 	.word	0x2626261e
 8005420:	21          	.byte	0x21
 8005421:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005422:	f7fe fdaf 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005426:	6863      	ldr	r3, [r4, #4]
 8005428:	0040      	lsls	r0, r0, #1
 800542a:	085b      	lsrs	r3, r3, #1
 800542c:	e002      	b.n	8005434 <UART_SetConfig+0x100>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800542e:	6863      	ldr	r3, [r4, #4]
 8005430:	0858      	lsrs	r0, r3, #1
 8005432:	4b34      	ldr	r3, [pc, #208]	; (8005504 <UART_SetConfig+0x1d0>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005434:	18c0      	adds	r0, r0, r3
 8005436:	6861      	ldr	r1, [r4, #4]
 8005438:	f7fa fe70 	bl	800011c <__udivsi3>
 800543c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800543e:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8005440:	220f      	movs	r2, #15
 8005442:	0019      	movs	r1, r3
 8005444:	4391      	bics	r1, r2
 8005446:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005448:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 800544a:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800544c:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 800544e:	4313      	orrs	r3, r2
 8005450:	60cb      	str	r3, [r1, #12]
}
 8005452:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005454:	f7fe fc6c 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 8005458:	e7e5      	b.n	8005426 <UART_SetConfig+0xf2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800545a:	6863      	ldr	r3, [r4, #4]
 800545c:	0858      	lsrs	r0, r3, #1
 800545e:	2380      	movs	r3, #128	; 0x80
 8005460:	025b      	lsls	r3, r3, #9
 8005462:	e7e7      	b.n	8005434 <UART_SetConfig+0x100>
        ret = HAL_ERROR;
 8005464:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8005466:	2300      	movs	r3, #0
 8005468:	e7ea      	b.n	8005440 <UART_SetConfig+0x10c>
    switch (clocksource)
 800546a:	2808      	cmp	r0, #8
 800546c:	d81d      	bhi.n	80054aa <UART_SetConfig+0x176>
 800546e:	f7fa fe4b 	bl	8000108 <__gnu_thumb1_case_uqi>
 8005472:	1c05      	.short	0x1c05
 8005474:	1c141c0a 	.word	0x1c141c0a
 8005478:	1c1c      	.short	0x1c1c
 800547a:	17          	.byte	0x17
 800547b:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800547c:	f7fe fd82 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005480:	6861      	ldr	r1, [r4, #4]
 8005482:	084b      	lsrs	r3, r1, #1
 8005484:	e002      	b.n	800548c <UART_SetConfig+0x158>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005486:	6861      	ldr	r1, [r4, #4]
 8005488:	4b1f      	ldr	r3, [pc, #124]	; (8005508 <UART_SetConfig+0x1d4>)
 800548a:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800548c:	18c0      	adds	r0, r0, r3
 800548e:	f7fa fe45 	bl	800011c <__udivsi3>
 8005492:	b280      	uxth	r0, r0
 8005494:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005496:	2000      	movs	r0, #0
        break;
 8005498:	e7db      	b.n	8005452 <UART_SetConfig+0x11e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800549a:	f7fe fc49 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 800549e:	e7ef      	b.n	8005480 <UART_SetConfig+0x14c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80054a0:	2380      	movs	r3, #128	; 0x80
 80054a2:	6861      	ldr	r1, [r4, #4]
 80054a4:	021b      	lsls	r3, r3, #8
 80054a6:	0848      	lsrs	r0, r1, #1
 80054a8:	e7f0      	b.n	800548c <UART_SetConfig+0x158>
        ret = HAL_ERROR;
 80054aa:	2001      	movs	r0, #1
 80054ac:	e7d1      	b.n	8005452 <UART_SetConfig+0x11e>
 80054ae:	46c0      	nop			; (mov r8, r8)
 80054b0:	005b8d80 	.word	0x005b8d80
 80054b4:	00000846 	.word	0x00000846
 80054b8:	080066af 	.word	0x080066af
 80054bc:	ffffefff 	.word	0xffffefff
 80054c0:	00000847 	.word	0x00000847
 80054c4:	ffffdfff 	.word	0xffffdfff
 80054c8:	00000848 	.word	0x00000848
 80054cc:	fffffbff 	.word	0xfffffbff
 80054d0:	00000849 	.word	0x00000849
 80054d4:	0000084a 	.word	0x0000084a
 80054d8:	fffffcff 	.word	0xfffffcff
 80054dc:	0000084b 	.word	0x0000084b
 80054e0:	fffff7ff 	.word	0xfffff7ff
 80054e4:	0000084c 	.word	0x0000084c
 80054e8:	ffff7fff 	.word	0xffff7fff
 80054ec:	0000084d 	.word	0x0000084d
 80054f0:	ffff69f3 	.word	0xffff69f3
 80054f4:	ffffcfff 	.word	0xffffcfff
 80054f8:	fffff4ff 	.word	0xfffff4ff
 80054fc:	40021000 	.word	0x40021000
 8005500:	080066ab 	.word	0x080066ab
 8005504:	00f42400 	.word	0x00f42400
 8005508:	007a1200 	.word	0x007a1200

0800550c <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800550c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800550e:	b570      	push	{r4, r5, r6, lr}
 8005510:	0004      	movs	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8005512:	2bff      	cmp	r3, #255	; 0xff
 8005514:	d903      	bls.n	800551e <UART_AdvFeatureConfig+0x12>
 8005516:	4954      	ldr	r1, [pc, #336]	; (8005668 <UART_AdvFeatureConfig+0x15c>)
 8005518:	4854      	ldr	r0, [pc, #336]	; (800566c <UART_AdvFeatureConfig+0x160>)
 800551a:	f7fc fc92 	bl	8001e42 <assert_failed>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800551e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005520:	07db      	lsls	r3, r3, #31
 8005522:	d50d      	bpl.n	8005540 <UART_AdvFeatureConfig+0x34>
 8005524:	4d52      	ldr	r5, [pc, #328]	; (8005670 <UART_AdvFeatureConfig+0x164>)
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8005526:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005528:	422b      	tst	r3, r5
 800552a:	d003      	beq.n	8005534 <UART_AdvFeatureConfig+0x28>
 800552c:	4951      	ldr	r1, [pc, #324]	; (8005674 <UART_AdvFeatureConfig+0x168>)
 800552e:	484f      	ldr	r0, [pc, #316]	; (800566c <UART_AdvFeatureConfig+0x160>)
 8005530:	f7fc fc87 	bl	8001e42 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005534:	6822      	ldr	r2, [r4, #0]
 8005536:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005538:	6853      	ldr	r3, [r2, #4]
 800553a:	402b      	ands	r3, r5
 800553c:	430b      	orrs	r3, r1
 800553e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005542:	079b      	lsls	r3, r3, #30
 8005544:	d50d      	bpl.n	8005562 <UART_AdvFeatureConfig+0x56>
 8005546:	4d4c      	ldr	r5, [pc, #304]	; (8005678 <UART_AdvFeatureConfig+0x16c>)
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8005548:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800554a:	422b      	tst	r3, r5
 800554c:	d003      	beq.n	8005556 <UART_AdvFeatureConfig+0x4a>
 800554e:	494b      	ldr	r1, [pc, #300]	; (800567c <UART_AdvFeatureConfig+0x170>)
 8005550:	4846      	ldr	r0, [pc, #280]	; (800566c <UART_AdvFeatureConfig+0x160>)
 8005552:	f7fc fc76 	bl	8001e42 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005556:	6822      	ldr	r2, [r4, #0]
 8005558:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800555a:	6853      	ldr	r3, [r2, #4]
 800555c:	402b      	ands	r3, r5
 800555e:	430b      	orrs	r3, r1
 8005560:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005564:	075b      	lsls	r3, r3, #29
 8005566:	d50d      	bpl.n	8005584 <UART_AdvFeatureConfig+0x78>
 8005568:	4d45      	ldr	r5, [pc, #276]	; (8005680 <UART_AdvFeatureConfig+0x174>)
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800556a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800556c:	422b      	tst	r3, r5
 800556e:	d003      	beq.n	8005578 <UART_AdvFeatureConfig+0x6c>
 8005570:	4944      	ldr	r1, [pc, #272]	; (8005684 <UART_AdvFeatureConfig+0x178>)
 8005572:	483e      	ldr	r0, [pc, #248]	; (800566c <UART_AdvFeatureConfig+0x160>)
 8005574:	f7fc fc65 	bl	8001e42 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005578:	6822      	ldr	r2, [r4, #0]
 800557a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800557c:	6853      	ldr	r3, [r2, #4]
 800557e:	402b      	ands	r3, r5
 8005580:	430b      	orrs	r3, r1
 8005582:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005586:	071b      	lsls	r3, r3, #28
 8005588:	d50d      	bpl.n	80055a6 <UART_AdvFeatureConfig+0x9a>
 800558a:	4d3f      	ldr	r5, [pc, #252]	; (8005688 <UART_AdvFeatureConfig+0x17c>)
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800558c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800558e:	422b      	tst	r3, r5
 8005590:	d003      	beq.n	800559a <UART_AdvFeatureConfig+0x8e>
 8005592:	493e      	ldr	r1, [pc, #248]	; (800568c <UART_AdvFeatureConfig+0x180>)
 8005594:	4835      	ldr	r0, [pc, #212]	; (800566c <UART_AdvFeatureConfig+0x160>)
 8005596:	f7fc fc54 	bl	8001e42 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800559a:	6822      	ldr	r2, [r4, #0]
 800559c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800559e:	6853      	ldr	r3, [r2, #4]
 80055a0:	402b      	ands	r3, r5
 80055a2:	430b      	orrs	r3, r1
 80055a4:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055a8:	06db      	lsls	r3, r3, #27
 80055aa:	d50d      	bpl.n	80055c8 <UART_AdvFeatureConfig+0xbc>
 80055ac:	4d38      	ldr	r5, [pc, #224]	; (8005690 <UART_AdvFeatureConfig+0x184>)
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80055ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055b0:	422b      	tst	r3, r5
 80055b2:	d003      	beq.n	80055bc <UART_AdvFeatureConfig+0xb0>
 80055b4:	4937      	ldr	r1, [pc, #220]	; (8005694 <UART_AdvFeatureConfig+0x188>)
 80055b6:	482d      	ldr	r0, [pc, #180]	; (800566c <UART_AdvFeatureConfig+0x160>)
 80055b8:	f7fc fc43 	bl	8001e42 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055bc:	6822      	ldr	r2, [r4, #0]
 80055be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80055c0:	6893      	ldr	r3, [r2, #8]
 80055c2:	402b      	ands	r3, r5
 80055c4:	430b      	orrs	r3, r1
 80055c6:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055ca:	069b      	lsls	r3, r3, #26
 80055cc:	d50d      	bpl.n	80055ea <UART_AdvFeatureConfig+0xde>
 80055ce:	4d32      	ldr	r5, [pc, #200]	; (8005698 <UART_AdvFeatureConfig+0x18c>)
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80055d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80055d2:	422b      	tst	r3, r5
 80055d4:	d003      	beq.n	80055de <UART_AdvFeatureConfig+0xd2>
 80055d6:	4931      	ldr	r1, [pc, #196]	; (800569c <UART_AdvFeatureConfig+0x190>)
 80055d8:	4824      	ldr	r0, [pc, #144]	; (800566c <UART_AdvFeatureConfig+0x160>)
 80055da:	f7fc fc32 	bl	8001e42 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055de:	6822      	ldr	r2, [r4, #0]
 80055e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80055e2:	6893      	ldr	r3, [r2, #8]
 80055e4:	402b      	ands	r3, r5
 80055e6:	430b      	orrs	r3, r1
 80055e8:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055ec:	065b      	lsls	r3, r3, #25
 80055ee:	d528      	bpl.n	8005642 <UART_AdvFeatureConfig+0x136>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80055f0:	4b2b      	ldr	r3, [pc, #172]	; (80056a0 <UART_AdvFeatureConfig+0x194>)
 80055f2:	6822      	ldr	r2, [r4, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d003      	beq.n	8005600 <UART_AdvFeatureConfig+0xf4>
 80055f8:	492a      	ldr	r1, [pc, #168]	; (80056a4 <UART_AdvFeatureConfig+0x198>)
 80055fa:	481c      	ldr	r0, [pc, #112]	; (800566c <UART_AdvFeatureConfig+0x160>)
 80055fc:	f7fc fc21 	bl	8001e42 <assert_failed>
 8005600:	4d29      	ldr	r5, [pc, #164]	; (80056a8 <UART_AdvFeatureConfig+0x19c>)
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8005602:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005604:	422b      	tst	r3, r5
 8005606:	d003      	beq.n	8005610 <UART_AdvFeatureConfig+0x104>
 8005608:	4928      	ldr	r1, [pc, #160]	; (80056ac <UART_AdvFeatureConfig+0x1a0>)
 800560a:	4818      	ldr	r0, [pc, #96]	; (800566c <UART_AdvFeatureConfig+0x160>)
 800560c:	f7fc fc19 	bl	8001e42 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005610:	6821      	ldr	r1, [r4, #0]
 8005612:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005614:	684b      	ldr	r3, [r1, #4]
 8005616:	402b      	ands	r3, r5
 8005618:	4313      	orrs	r3, r2
 800561a:	604b      	str	r3, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800561c:	2380      	movs	r3, #128	; 0x80
 800561e:	035b      	lsls	r3, r3, #13
 8005620:	429a      	cmp	r2, r3
 8005622:	d10e      	bne.n	8005642 <UART_AdvFeatureConfig+0x136>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8005624:	4b22      	ldr	r3, [pc, #136]	; (80056b0 <UART_AdvFeatureConfig+0x1a4>)
 8005626:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005628:	421a      	tst	r2, r3
 800562a:	d003      	beq.n	8005634 <UART_AdvFeatureConfig+0x128>
 800562c:	4921      	ldr	r1, [pc, #132]	; (80056b4 <UART_AdvFeatureConfig+0x1a8>)
 800562e:	480f      	ldr	r0, [pc, #60]	; (800566c <UART_AdvFeatureConfig+0x160>)
 8005630:	f7fc fc07 	bl	8001e42 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005634:	6822      	ldr	r2, [r4, #0]
 8005636:	4920      	ldr	r1, [pc, #128]	; (80056b8 <UART_AdvFeatureConfig+0x1ac>)
 8005638:	6853      	ldr	r3, [r2, #4]
 800563a:	400b      	ands	r3, r1
 800563c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800563e:	430b      	orrs	r3, r1
 8005640:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005644:	061b      	lsls	r3, r3, #24
 8005646:	d50d      	bpl.n	8005664 <UART_AdvFeatureConfig+0x158>
 8005648:	4d1c      	ldr	r5, [pc, #112]	; (80056bc <UART_AdvFeatureConfig+0x1b0>)
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800564a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800564c:	422b      	tst	r3, r5
 800564e:	d003      	beq.n	8005658 <UART_AdvFeatureConfig+0x14c>
 8005650:	491b      	ldr	r1, [pc, #108]	; (80056c0 <UART_AdvFeatureConfig+0x1b4>)
 8005652:	4806      	ldr	r0, [pc, #24]	; (800566c <UART_AdvFeatureConfig+0x160>)
 8005654:	f7fc fbf5 	bl	8001e42 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005658:	6822      	ldr	r2, [r4, #0]
 800565a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800565c:	6853      	ldr	r3, [r2, #4]
 800565e:	402b      	ands	r3, r5
 8005660:	430b      	orrs	r3, r1
 8005662:	6053      	str	r3, [r2, #4]
}
 8005664:	bd70      	pop	{r4, r5, r6, pc}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	000008a9 	.word	0x000008a9
 800566c:	080066af 	.word	0x080066af
 8005670:	fffdffff 	.word	0xfffdffff
 8005674:	000008ae 	.word	0x000008ae
 8005678:	fffeffff 	.word	0xfffeffff
 800567c:	000008b5 	.word	0x000008b5
 8005680:	fffbffff 	.word	0xfffbffff
 8005684:	000008bc 	.word	0x000008bc
 8005688:	ffff7fff 	.word	0xffff7fff
 800568c:	000008c3 	.word	0x000008c3
 8005690:	ffffefff 	.word	0xffffefff
 8005694:	000008ca 	.word	0x000008ca
 8005698:	ffffdfff 	.word	0xffffdfff
 800569c:	000008d1 	.word	0x000008d1
 80056a0:	40013800 	.word	0x40013800
 80056a4:	000008d8 	.word	0x000008d8
 80056a8:	ffefffff 	.word	0xffefffff
 80056ac:	000008d9 	.word	0x000008d9
 80056b0:	ffdfffff 	.word	0xffdfffff
 80056b4:	000008de 	.word	0x000008de
 80056b8:	ff9fffff 	.word	0xff9fffff
 80056bc:	fff7ffff 	.word	0xfff7ffff
 80056c0:	000008e6 	.word	0x000008e6

080056c4 <HAL_UART_Init>:
{
 80056c4:	b570      	push	{r4, r5, r6, lr}
 80056c6:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80056c8:	d101      	bne.n	80056ce <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80056ca:	2001      	movs	r0, #1
}
 80056cc:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80056ce:	6981      	ldr	r1, [r0, #24]
 80056d0:	4b22      	ldr	r3, [pc, #136]	; (800575c <HAL_UART_Init+0x98>)
 80056d2:	6802      	ldr	r2, [r0, #0]
 80056d4:	2900      	cmp	r1, #0
 80056d6:	d03b      	beq.n	8005750 <HAL_UART_Init+0x8c>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80056d8:	429a      	cmp	r2, r3
 80056da:	d004      	beq.n	80056e6 <HAL_UART_Init+0x22>
 80056dc:	2197      	movs	r1, #151	; 0x97
 80056de:	0049      	lsls	r1, r1, #1
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80056e0:	481f      	ldr	r0, [pc, #124]	; (8005760 <HAL_UART_Init+0x9c>)
 80056e2:	f7fc fbae 	bl	8001e42 <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 80056e6:	0025      	movs	r5, r4
 80056e8:	3569      	adds	r5, #105	; 0x69
 80056ea:	782b      	ldrb	r3, [r5, #0]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d105      	bne.n	80056fe <HAL_UART_Init+0x3a>
    huart->Lock = HAL_UNLOCKED;
 80056f2:	0022      	movs	r2, r4
 80056f4:	3268      	adds	r2, #104	; 0x68
 80056f6:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80056f8:	0020      	movs	r0, r4
 80056fa:	f7fc ffcf 	bl	800269c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80056fe:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005700:	2101      	movs	r1, #1
 8005702:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005704:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8005706:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005708:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800570a:	438b      	bics	r3, r1
 800570c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800570e:	f7ff fe11 	bl	8005334 <UART_SetConfig>
 8005712:	2801      	cmp	r0, #1
 8005714:	d0d9      	beq.n	80056ca <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <HAL_UART_Init+0x5e>
    UART_AdvFeatureConfig(huart);
 800571c:	0020      	movs	r0, r4
 800571e:	f7ff fef5 	bl	800550c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	490f      	ldr	r1, [pc, #60]	; (8005764 <HAL_UART_Init+0xa0>)
 8005726:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005728:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800572a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800572c:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800572e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	438a      	bics	r2, r1
 8005734:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005736:	2201      	movs	r2, #1
 8005738:	6819      	ldr	r1, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800573e:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 8005740:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005742:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8005744:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 8005746:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8005748:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800574a:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 800574c:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 800574e:	e7bd      	b.n	80056cc <HAL_UART_Init+0x8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005750:	429a      	cmp	r2, r3
 8005752:	d0c8      	beq.n	80056e6 <HAL_UART_Init+0x22>
 8005754:	2134      	movs	r1, #52	; 0x34
 8005756:	31ff      	adds	r1, #255	; 0xff
 8005758:	e7c2      	b.n	80056e0 <HAL_UART_Init+0x1c>
 800575a:	46c0      	nop			; (mov r8, r8)
 800575c:	40013800 	.word	0x40013800
 8005760:	080066af 	.word	0x080066af
 8005764:	fffff7ff 	.word	0xfffff7ff

08005768 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005768:	0003      	movs	r3, r0
{
 800576a:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800576c:	3369      	adds	r3, #105	; 0x69
 800576e:	781b      	ldrb	r3, [r3, #0]
{
 8005770:	0002      	movs	r2, r0
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8005772:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005774:	2b21      	cmp	r3, #33	; 0x21
 8005776:	d10f      	bne.n	8005798 <UART_Transmit_IT+0x30>
    if(huart->TxXferCount == 0U)
 8005778:	0014      	movs	r4, r2
 800577a:	3452      	adds	r4, #82	; 0x52
 800577c:	8823      	ldrh	r3, [r4, #0]
 800577e:	6811      	ldr	r1, [r2, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d109      	bne.n	800579a <UART_Transmit_IT+0x32>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005786:	680a      	ldr	r2, [r1, #0]
 8005788:	307e      	adds	r0, #126	; 0x7e
 800578a:	4382      	bics	r2, r0
 800578c:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800578e:	2240      	movs	r2, #64	; 0x40
 8005790:	6808      	ldr	r0, [r1, #0]
 8005792:	4302      	orrs	r2, r0
 8005794:	600a      	str	r2, [r1, #0]
      return HAL_OK;
 8005796:	2000      	movs	r0, #0
  }
}
 8005798:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800579a:	2080      	movs	r0, #128	; 0x80
 800579c:	6895      	ldr	r5, [r2, #8]
 800579e:	0140      	lsls	r0, r0, #5
 80057a0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80057a2:	4285      	cmp	r5, r0
 80057a4:	d10d      	bne.n	80057c2 <UART_Transmit_IT+0x5a>
 80057a6:	6910      	ldr	r0, [r2, #16]
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d10a      	bne.n	80057c2 <UART_Transmit_IT+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80057ac:	8818      	ldrh	r0, [r3, #0]
        huart->pTxBuffPtr += 2U;
 80057ae:	3302      	adds	r3, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80057b0:	05c0      	lsls	r0, r0, #23
 80057b2:	0dc0      	lsrs	r0, r0, #23
 80057b4:	8508      	strh	r0, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80057b6:	64d3      	str	r3, [r2, #76]	; 0x4c
      huart->TxXferCount--;
 80057b8:	8823      	ldrh	r3, [r4, #0]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29b      	uxth	r3, r3
 80057be:	8023      	strh	r3, [r4, #0]
 80057c0:	e7e9      	b.n	8005796 <UART_Transmit_IT+0x2e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80057c2:	1c58      	adds	r0, r3, #1
 80057c4:	64d0      	str	r0, [r2, #76]	; 0x4c
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	850b      	strh	r3, [r1, #40]	; 0x28
 80057ca:	e7f5      	b.n	80057b8 <UART_Transmit_IT+0x50>

080057cc <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057cc:	2140      	movs	r1, #64	; 0x40
 80057ce:	6802      	ldr	r2, [r0, #0]
{
 80057d0:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057d2:	6813      	ldr	r3, [r2, #0]
 80057d4:	438b      	bics	r3, r1
 80057d6:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057d8:	0003      	movs	r3, r0
 80057da:	2220      	movs	r2, #32
 80057dc:	3369      	adds	r3, #105	; 0x69
 80057de:	701a      	strb	r2, [r3, #0]

  HAL_UART_TxCpltCallback(huart);
 80057e0:	f7fb fe5e 	bl	80014a0 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80057e4:	2000      	movs	r0, #0
 80057e6:	bd10      	pop	{r4, pc}

080057e8 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057e8:	0002      	movs	r2, r0
{
 80057ea:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057ec:	326a      	adds	r2, #106	; 0x6a
 80057ee:	7811      	ldrb	r1, [r2, #0]
 80057f0:	6803      	ldr	r3, [r0, #0]
 80057f2:	2922      	cmp	r1, #34	; 0x22
 80057f4:	d12d      	bne.n	8005852 <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 80057f6:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057f8:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 80057fa:	315c      	adds	r1, #92	; 0x5c
 80057fc:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057fe:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005800:	0164      	lsls	r4, r4, #5
 8005802:	4029      	ands	r1, r5
 8005804:	6885      	ldr	r5, [r0, #8]
 8005806:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005808:	42a5      	cmp	r5, r4
 800580a:	d11e      	bne.n	800584a <UART_Receive_IT+0x62>
 800580c:	6904      	ldr	r4, [r0, #16]
 800580e:	2c00      	cmp	r4, #0
 8005810:	d11b      	bne.n	800584a <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 8005812:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8005814:	3302      	adds	r3, #2
 8005816:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8005818:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 800581a:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 800581c:	315a      	adds	r1, #90	; 0x5a
 800581e:	880b      	ldrh	r3, [r1, #0]
 8005820:	3b01      	subs	r3, #1
 8005822:	b29b      	uxth	r3, r3
 8005824:	800b      	strh	r3, [r1, #0]
 8005826:	42a3      	cmp	r3, r4
 8005828:	d10d      	bne.n	8005846 <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800582a:	6803      	ldr	r3, [r0, #0]
 800582c:	4d0c      	ldr	r5, [pc, #48]	; (8005860 <UART_Receive_IT+0x78>)
 800582e:	6819      	ldr	r1, [r3, #0]
 8005830:	4029      	ands	r1, r5
 8005832:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005834:	6899      	ldr	r1, [r3, #8]
 8005836:	3523      	adds	r5, #35	; 0x23
 8005838:	35ff      	adds	r5, #255	; 0xff
 800583a:	43a9      	bics	r1, r5
 800583c:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800583e:	2320      	movs	r3, #32
 8005840:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 8005842:	f7ff fd3d 	bl	80052c0 <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8005846:	0020      	movs	r0, r4
 8005848:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800584a:	1c5c      	adds	r4, r3, #1
 800584c:	6544      	str	r4, [r0, #84]	; 0x54
 800584e:	7019      	strb	r1, [r3, #0]
 8005850:	e7e2      	b.n	8005818 <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005852:	2208      	movs	r2, #8
 8005854:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 8005856:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005858:	430a      	orrs	r2, r1
 800585a:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 800585c:	e7f3      	b.n	8005846 <UART_Receive_IT+0x5e>
 800585e:	46c0      	nop			; (mov r8, r8)
 8005860:	fffffedf 	.word	0xfffffedf

08005864 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8005864:	220f      	movs	r2, #15
{
 8005866:	b570      	push	{r4, r5, r6, lr}
 8005868:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800586a:	6800      	ldr	r0, [r0, #0]
 800586c:	69c3      	ldr	r3, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800586e:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8005870:	401a      	ands	r2, r3
  if (errorflags == RESET)
 8005872:	d108      	bne.n	8005886 <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005874:	2520      	movs	r5, #32
 8005876:	422b      	tst	r3, r5
 8005878:	d005      	beq.n	8005886 <HAL_UART_IRQHandler+0x22>
 800587a:	4229      	tst	r1, r5
 800587c:	d003      	beq.n	8005886 <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 800587e:	0020      	movs	r0, r4
 8005880:	f7ff ffb2 	bl	80057e8 <UART_Receive_IT>
}
 8005884:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8005886:	6885      	ldr	r5, [r0, #8]
  if(   (errorflags != RESET)
 8005888:	2a00      	cmp	r2, #0
 800588a:	d060      	beq.n	800594e <HAL_UART_IRQHandler+0xea>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800588c:	2201      	movs	r2, #1
 800588e:	4015      	ands	r5, r2
 8005890:	d103      	bne.n	800589a <HAL_UART_IRQHandler+0x36>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8005892:	2690      	movs	r6, #144	; 0x90
 8005894:	0076      	lsls	r6, r6, #1
 8005896:	4231      	tst	r1, r6
 8005898:	d059      	beq.n	800594e <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800589a:	4213      	tst	r3, r2
 800589c:	d005      	beq.n	80058aa <HAL_UART_IRQHandler+0x46>
 800589e:	05ce      	lsls	r6, r1, #23
 80058a0:	d503      	bpl.n	80058aa <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80058a2:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058a4:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80058a6:	4332      	orrs	r2, r6
 80058a8:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058aa:	2202      	movs	r2, #2
 80058ac:	4213      	tst	r3, r2
 80058ae:	d006      	beq.n	80058be <HAL_UART_IRQHandler+0x5a>
 80058b0:	2d00      	cmp	r5, #0
 80058b2:	d004      	beq.n	80058be <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80058b4:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058b6:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80058b8:	1892      	adds	r2, r2, r2
 80058ba:	4332      	orrs	r2, r6
 80058bc:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058be:	2204      	movs	r2, #4
 80058c0:	4213      	tst	r3, r2
 80058c2:	d006      	beq.n	80058d2 <HAL_UART_IRQHandler+0x6e>
 80058c4:	2d00      	cmp	r5, #0
 80058c6:	d004      	beq.n	80058d2 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80058c8:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058ca:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80058cc:	3a02      	subs	r2, #2
 80058ce:	4332      	orrs	r2, r6
 80058d0:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80058d2:	071a      	lsls	r2, r3, #28
 80058d4:	d508      	bpl.n	80058e8 <HAL_UART_IRQHandler+0x84>
 80058d6:	068a      	lsls	r2, r1, #26
 80058d8:	d401      	bmi.n	80058de <HAL_UART_IRQHandler+0x7a>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80058da:	2d00      	cmp	r5, #0
 80058dc:	d004      	beq.n	80058e8 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80058de:	2208      	movs	r2, #8
 80058e0:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058e2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80058e4:	4302      	orrs	r2, r0
 80058e6:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058e8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80058ea:	2a00      	cmp	r2, #0
 80058ec:	d0ca      	beq.n	8005884 <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058ee:	2220      	movs	r2, #32
 80058f0:	4213      	tst	r3, r2
 80058f2:	d004      	beq.n	80058fe <HAL_UART_IRQHandler+0x9a>
 80058f4:	4211      	tst	r1, r2
 80058f6:	d002      	beq.n	80058fe <HAL_UART_IRQHandler+0x9a>
        UART_Receive_IT(huart);
 80058f8:	0020      	movs	r0, r4
 80058fa:	f7ff ff75 	bl	80057e8 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80058fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8005900:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005902:	071b      	lsls	r3, r3, #28
 8005904:	d404      	bmi.n	8005910 <HAL_UART_IRQHandler+0xac>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	689d      	ldr	r5, [r3, #8]
 800590a:	2340      	movs	r3, #64	; 0x40
 800590c:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800590e:	d01a      	beq.n	8005946 <HAL_UART_IRQHandler+0xe2>
        UART_EndRxTransfer(huart);
 8005910:	f7ff fc62 	bl	80051d8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005914:	2140      	movs	r1, #64	; 0x40
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	420a      	tst	r2, r1
 800591c:	d00f      	beq.n	800593e <HAL_UART_IRQHandler+0xda>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800591e:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8005920:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005922:	438a      	bics	r2, r1
 8005924:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8005926:	2800      	cmp	r0, #0
 8005928:	d009      	beq.n	800593e <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800592a:	4b13      	ldr	r3, [pc, #76]	; (8005978 <HAL_UART_IRQHandler+0x114>)
 800592c:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800592e:	f7fd fc81 	bl	8003234 <HAL_DMA_Abort_IT>
 8005932:	2800      	cmp	r0, #0
 8005934:	d0a6      	beq.n	8005884 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005936:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005938:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800593a:	4798      	blx	r3
 800593c:	e7a2      	b.n	8005884 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 800593e:	0020      	movs	r0, r4
 8005940:	f7ff fcbf 	bl	80052c2 <HAL_UART_ErrorCallback>
 8005944:	e79e      	b.n	8005884 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 8005946:	f7ff fcbc 	bl	80052c2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594a:	66e5      	str	r5, [r4, #108]	; 0x6c
 800594c:	e79a      	b.n	8005884 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800594e:	2280      	movs	r2, #128	; 0x80
 8005950:	4213      	tst	r3, r2
 8005952:	d005      	beq.n	8005960 <HAL_UART_IRQHandler+0xfc>
 8005954:	4211      	tst	r1, r2
 8005956:	d003      	beq.n	8005960 <HAL_UART_IRQHandler+0xfc>
    UART_Transmit_IT(huart);
 8005958:	0020      	movs	r0, r4
 800595a:	f7ff ff05 	bl	8005768 <UART_Transmit_IT>
    return;
 800595e:	e791      	b.n	8005884 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005960:	2240      	movs	r2, #64	; 0x40
 8005962:	4213      	tst	r3, r2
 8005964:	d100      	bne.n	8005968 <HAL_UART_IRQHandler+0x104>
 8005966:	e78d      	b.n	8005884 <HAL_UART_IRQHandler+0x20>
 8005968:	4211      	tst	r1, r2
 800596a:	d100      	bne.n	800596e <HAL_UART_IRQHandler+0x10a>
 800596c:	e78a      	b.n	8005884 <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 800596e:	0020      	movs	r0, r4
 8005970:	f7ff ff2c 	bl	80057cc <UART_EndTransmit_IT>
    return;
 8005974:	e786      	b.n	8005884 <HAL_UART_IRQHandler+0x20>
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	0800531f 	.word	0x0800531f

0800597c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800597c:	480d      	ldr	r0, [pc, #52]	; (80059b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800597e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005980:	480d      	ldr	r0, [pc, #52]	; (80059b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005982:	490e      	ldr	r1, [pc, #56]	; (80059bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005984:	4a0e      	ldr	r2, [pc, #56]	; (80059c0 <LoopForever+0xe>)
  movs r3, #0
 8005986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005988:	e002      	b.n	8005990 <LoopCopyDataInit>

0800598a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800598a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800598c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800598e:	3304      	adds	r3, #4

08005990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005994:	d3f9      	bcc.n	800598a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005996:	4a0b      	ldr	r2, [pc, #44]	; (80059c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005998:	4c0b      	ldr	r4, [pc, #44]	; (80059c8 <LoopForever+0x16>)
  movs r3, #0
 800599a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800599c:	e001      	b.n	80059a2 <LoopFillZerobss>

0800599e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800599e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059a0:	3204      	adds	r2, #4

080059a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059a4:	d3fb      	bcc.n	800599e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80059a6:	f7fc fc5f 	bl	8002268 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80059aa:	f000 f811 	bl	80059d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80059ae:	f7fc f8ed 	bl	8001b8c <main>

080059b2 <LoopForever>:

LoopForever:
    b LoopForever
 80059b2:	e7fe      	b.n	80059b2 <LoopForever>
  ldr   r0, =_estack
 80059b4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80059b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059bc:	2000029c 	.word	0x2000029c
  ldr r2, =_sidata
 80059c0:	08006724 	.word	0x08006724
  ldr r2, =_sbss
 80059c4:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 80059c8:	200006cc 	.word	0x200006cc

080059cc <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80059cc:	e7fe      	b.n	80059cc <DMA1_Channel1_IRQHandler>
	...

080059d0 <__libc_init_array>:
 80059d0:	b570      	push	{r4, r5, r6, lr}
 80059d2:	2600      	movs	r6, #0
 80059d4:	4d0c      	ldr	r5, [pc, #48]	; (8005a08 <__libc_init_array+0x38>)
 80059d6:	4c0d      	ldr	r4, [pc, #52]	; (8005a0c <__libc_init_array+0x3c>)
 80059d8:	1b64      	subs	r4, r4, r5
 80059da:	10a4      	asrs	r4, r4, #2
 80059dc:	42a6      	cmp	r6, r4
 80059de:	d109      	bne.n	80059f4 <__libc_init_array+0x24>
 80059e0:	2600      	movs	r6, #0
 80059e2:	f000 fc69 	bl	80062b8 <_init>
 80059e6:	4d0a      	ldr	r5, [pc, #40]	; (8005a10 <__libc_init_array+0x40>)
 80059e8:	4c0a      	ldr	r4, [pc, #40]	; (8005a14 <__libc_init_array+0x44>)
 80059ea:	1b64      	subs	r4, r4, r5
 80059ec:	10a4      	asrs	r4, r4, #2
 80059ee:	42a6      	cmp	r6, r4
 80059f0:	d105      	bne.n	80059fe <__libc_init_array+0x2e>
 80059f2:	bd70      	pop	{r4, r5, r6, pc}
 80059f4:	00b3      	lsls	r3, r6, #2
 80059f6:	58eb      	ldr	r3, [r5, r3]
 80059f8:	4798      	blx	r3
 80059fa:	3601      	adds	r6, #1
 80059fc:	e7ee      	b.n	80059dc <__libc_init_array+0xc>
 80059fe:	00b3      	lsls	r3, r6, #2
 8005a00:	58eb      	ldr	r3, [r5, r3]
 8005a02:	4798      	blx	r3
 8005a04:	3601      	adds	r6, #1
 8005a06:	e7f2      	b.n	80059ee <__libc_init_array+0x1e>
 8005a08:	0800671c 	.word	0x0800671c
 8005a0c:	0800671c 	.word	0x0800671c
 8005a10:	0800671c 	.word	0x0800671c
 8005a14:	08006720 	.word	0x08006720

08005a18 <memcpy>:
 8005a18:	2300      	movs	r3, #0
 8005a1a:	b510      	push	{r4, lr}
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d100      	bne.n	8005a22 <memcpy+0xa>
 8005a20:	bd10      	pop	{r4, pc}
 8005a22:	5ccc      	ldrb	r4, [r1, r3]
 8005a24:	54c4      	strb	r4, [r0, r3]
 8005a26:	3301      	adds	r3, #1
 8005a28:	e7f8      	b.n	8005a1c <memcpy+0x4>

08005a2a <memset>:
 8005a2a:	0003      	movs	r3, r0
 8005a2c:	1882      	adds	r2, r0, r2
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d100      	bne.n	8005a34 <memset+0xa>
 8005a32:	4770      	bx	lr
 8005a34:	7019      	strb	r1, [r3, #0]
 8005a36:	3301      	adds	r3, #1
 8005a38:	e7f9      	b.n	8005a2e <memset+0x4>
	...

08005a3c <siprintf>:
 8005a3c:	b40e      	push	{r1, r2, r3}
 8005a3e:	b510      	push	{r4, lr}
 8005a40:	b09d      	sub	sp, #116	; 0x74
 8005a42:	a902      	add	r1, sp, #8
 8005a44:	9002      	str	r0, [sp, #8]
 8005a46:	6108      	str	r0, [r1, #16]
 8005a48:	480b      	ldr	r0, [pc, #44]	; (8005a78 <siprintf+0x3c>)
 8005a4a:	2482      	movs	r4, #130	; 0x82
 8005a4c:	6088      	str	r0, [r1, #8]
 8005a4e:	6148      	str	r0, [r1, #20]
 8005a50:	2001      	movs	r0, #1
 8005a52:	4240      	negs	r0, r0
 8005a54:	ab1f      	add	r3, sp, #124	; 0x7c
 8005a56:	81c8      	strh	r0, [r1, #14]
 8005a58:	4808      	ldr	r0, [pc, #32]	; (8005a7c <siprintf+0x40>)
 8005a5a:	cb04      	ldmia	r3!, {r2}
 8005a5c:	00a4      	lsls	r4, r4, #2
 8005a5e:	6800      	ldr	r0, [r0, #0]
 8005a60:	9301      	str	r3, [sp, #4]
 8005a62:	818c      	strh	r4, [r1, #12]
 8005a64:	f000 f884 	bl	8005b70 <_svfiprintf_r>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	9a02      	ldr	r2, [sp, #8]
 8005a6c:	7013      	strb	r3, [r2, #0]
 8005a6e:	b01d      	add	sp, #116	; 0x74
 8005a70:	bc10      	pop	{r4}
 8005a72:	bc08      	pop	{r3}
 8005a74:	b003      	add	sp, #12
 8005a76:	4718      	bx	r3
 8005a78:	7fffffff 	.word	0x7fffffff
 8005a7c:	20000238 	.word	0x20000238

08005a80 <strcat>:
 8005a80:	0002      	movs	r2, r0
 8005a82:	b510      	push	{r4, lr}
 8005a84:	7813      	ldrb	r3, [r2, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d105      	bne.n	8005a96 <strcat+0x16>
 8005a8a:	5ccc      	ldrb	r4, [r1, r3]
 8005a8c:	54d4      	strb	r4, [r2, r3]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	2c00      	cmp	r4, #0
 8005a92:	d1fa      	bne.n	8005a8a <strcat+0xa>
 8005a94:	bd10      	pop	{r4, pc}
 8005a96:	3201      	adds	r2, #1
 8005a98:	e7f4      	b.n	8005a84 <strcat+0x4>

08005a9a <strcpy>:
 8005a9a:	1c03      	adds	r3, r0, #0
 8005a9c:	780a      	ldrb	r2, [r1, #0]
 8005a9e:	3101      	adds	r1, #1
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	2a00      	cmp	r2, #0
 8005aa6:	d1f9      	bne.n	8005a9c <strcpy+0x2>
 8005aa8:	4770      	bx	lr
	...

08005aac <__ssputs_r>:
 8005aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aae:	688e      	ldr	r6, [r1, #8]
 8005ab0:	b085      	sub	sp, #20
 8005ab2:	0007      	movs	r7, r0
 8005ab4:	000c      	movs	r4, r1
 8005ab6:	9203      	str	r2, [sp, #12]
 8005ab8:	9301      	str	r3, [sp, #4]
 8005aba:	429e      	cmp	r6, r3
 8005abc:	d839      	bhi.n	8005b32 <__ssputs_r+0x86>
 8005abe:	2390      	movs	r3, #144	; 0x90
 8005ac0:	898a      	ldrh	r2, [r1, #12]
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	421a      	tst	r2, r3
 8005ac6:	d034      	beq.n	8005b32 <__ssputs_r+0x86>
 8005ac8:	2503      	movs	r5, #3
 8005aca:	6909      	ldr	r1, [r1, #16]
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	1a5b      	subs	r3, r3, r1
 8005ad0:	9302      	str	r3, [sp, #8]
 8005ad2:	6963      	ldr	r3, [r4, #20]
 8005ad4:	9802      	ldr	r0, [sp, #8]
 8005ad6:	435d      	muls	r5, r3
 8005ad8:	0feb      	lsrs	r3, r5, #31
 8005ada:	195d      	adds	r5, r3, r5
 8005adc:	9b01      	ldr	r3, [sp, #4]
 8005ade:	106d      	asrs	r5, r5, #1
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	181b      	adds	r3, r3, r0
 8005ae4:	42ab      	cmp	r3, r5
 8005ae6:	d900      	bls.n	8005aea <__ssputs_r+0x3e>
 8005ae8:	001d      	movs	r5, r3
 8005aea:	0553      	lsls	r3, r2, #21
 8005aec:	d532      	bpl.n	8005b54 <__ssputs_r+0xa8>
 8005aee:	0029      	movs	r1, r5
 8005af0:	0038      	movs	r0, r7
 8005af2:	f000 fb31 	bl	8006158 <_malloc_r>
 8005af6:	1e06      	subs	r6, r0, #0
 8005af8:	d109      	bne.n	8005b0e <__ssputs_r+0x62>
 8005afa:	230c      	movs	r3, #12
 8005afc:	603b      	str	r3, [r7, #0]
 8005afe:	2340      	movs	r3, #64	; 0x40
 8005b00:	2001      	movs	r0, #1
 8005b02:	89a2      	ldrh	r2, [r4, #12]
 8005b04:	4240      	negs	r0, r0
 8005b06:	4313      	orrs	r3, r2
 8005b08:	81a3      	strh	r3, [r4, #12]
 8005b0a:	b005      	add	sp, #20
 8005b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b0e:	9a02      	ldr	r2, [sp, #8]
 8005b10:	6921      	ldr	r1, [r4, #16]
 8005b12:	f7ff ff81 	bl	8005a18 <memcpy>
 8005b16:	89a3      	ldrh	r3, [r4, #12]
 8005b18:	4a14      	ldr	r2, [pc, #80]	; (8005b6c <__ssputs_r+0xc0>)
 8005b1a:	401a      	ands	r2, r3
 8005b1c:	2380      	movs	r3, #128	; 0x80
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	81a3      	strh	r3, [r4, #12]
 8005b22:	9b02      	ldr	r3, [sp, #8]
 8005b24:	6126      	str	r6, [r4, #16]
 8005b26:	18f6      	adds	r6, r6, r3
 8005b28:	6026      	str	r6, [r4, #0]
 8005b2a:	6165      	str	r5, [r4, #20]
 8005b2c:	9e01      	ldr	r6, [sp, #4]
 8005b2e:	1aed      	subs	r5, r5, r3
 8005b30:	60a5      	str	r5, [r4, #8]
 8005b32:	9b01      	ldr	r3, [sp, #4]
 8005b34:	42b3      	cmp	r3, r6
 8005b36:	d200      	bcs.n	8005b3a <__ssputs_r+0x8e>
 8005b38:	001e      	movs	r6, r3
 8005b3a:	0032      	movs	r2, r6
 8005b3c:	9903      	ldr	r1, [sp, #12]
 8005b3e:	6820      	ldr	r0, [r4, #0]
 8005b40:	f000 faad 	bl	800609e <memmove>
 8005b44:	68a3      	ldr	r3, [r4, #8]
 8005b46:	2000      	movs	r0, #0
 8005b48:	1b9b      	subs	r3, r3, r6
 8005b4a:	60a3      	str	r3, [r4, #8]
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	199e      	adds	r6, r3, r6
 8005b50:	6026      	str	r6, [r4, #0]
 8005b52:	e7da      	b.n	8005b0a <__ssputs_r+0x5e>
 8005b54:	002a      	movs	r2, r5
 8005b56:	0038      	movs	r0, r7
 8005b58:	f000 fb5c 	bl	8006214 <_realloc_r>
 8005b5c:	1e06      	subs	r6, r0, #0
 8005b5e:	d1e0      	bne.n	8005b22 <__ssputs_r+0x76>
 8005b60:	6921      	ldr	r1, [r4, #16]
 8005b62:	0038      	movs	r0, r7
 8005b64:	f000 faae 	bl	80060c4 <_free_r>
 8005b68:	e7c7      	b.n	8005afa <__ssputs_r+0x4e>
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	fffffb7f 	.word	0xfffffb7f

08005b70 <_svfiprintf_r>:
 8005b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b72:	b09f      	sub	sp, #124	; 0x7c
 8005b74:	9002      	str	r0, [sp, #8]
 8005b76:	9305      	str	r3, [sp, #20]
 8005b78:	898b      	ldrh	r3, [r1, #12]
 8005b7a:	000f      	movs	r7, r1
 8005b7c:	0016      	movs	r6, r2
 8005b7e:	061b      	lsls	r3, r3, #24
 8005b80:	d511      	bpl.n	8005ba6 <_svfiprintf_r+0x36>
 8005b82:	690b      	ldr	r3, [r1, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10e      	bne.n	8005ba6 <_svfiprintf_r+0x36>
 8005b88:	2140      	movs	r1, #64	; 0x40
 8005b8a:	f000 fae5 	bl	8006158 <_malloc_r>
 8005b8e:	6038      	str	r0, [r7, #0]
 8005b90:	6138      	str	r0, [r7, #16]
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d105      	bne.n	8005ba2 <_svfiprintf_r+0x32>
 8005b96:	230c      	movs	r3, #12
 8005b98:	9a02      	ldr	r2, [sp, #8]
 8005b9a:	3801      	subs	r0, #1
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	b01f      	add	sp, #124	; 0x7c
 8005ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ba2:	2340      	movs	r3, #64	; 0x40
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	ad06      	add	r5, sp, #24
 8005baa:	616b      	str	r3, [r5, #20]
 8005bac:	3320      	adds	r3, #32
 8005bae:	766b      	strb	r3, [r5, #25]
 8005bb0:	3310      	adds	r3, #16
 8005bb2:	76ab      	strb	r3, [r5, #26]
 8005bb4:	0034      	movs	r4, r6
 8005bb6:	7823      	ldrb	r3, [r4, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d147      	bne.n	8005c4c <_svfiprintf_r+0xdc>
 8005bbc:	1ba3      	subs	r3, r4, r6
 8005bbe:	9304      	str	r3, [sp, #16]
 8005bc0:	d00d      	beq.n	8005bde <_svfiprintf_r+0x6e>
 8005bc2:	1ba3      	subs	r3, r4, r6
 8005bc4:	0032      	movs	r2, r6
 8005bc6:	0039      	movs	r1, r7
 8005bc8:	9802      	ldr	r0, [sp, #8]
 8005bca:	f7ff ff6f 	bl	8005aac <__ssputs_r>
 8005bce:	1c43      	adds	r3, r0, #1
 8005bd0:	d100      	bne.n	8005bd4 <_svfiprintf_r+0x64>
 8005bd2:	e0b5      	b.n	8005d40 <_svfiprintf_r+0x1d0>
 8005bd4:	696a      	ldr	r2, [r5, #20]
 8005bd6:	9b04      	ldr	r3, [sp, #16]
 8005bd8:	4694      	mov	ip, r2
 8005bda:	4463      	add	r3, ip
 8005bdc:	616b      	str	r3, [r5, #20]
 8005bde:	7823      	ldrb	r3, [r4, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d100      	bne.n	8005be6 <_svfiprintf_r+0x76>
 8005be4:	e0ac      	b.n	8005d40 <_svfiprintf_r+0x1d0>
 8005be6:	2201      	movs	r2, #1
 8005be8:	2300      	movs	r3, #0
 8005bea:	4252      	negs	r2, r2
 8005bec:	606a      	str	r2, [r5, #4]
 8005bee:	a902      	add	r1, sp, #8
 8005bf0:	3254      	adds	r2, #84	; 0x54
 8005bf2:	1852      	adds	r2, r2, r1
 8005bf4:	3401      	adds	r4, #1
 8005bf6:	602b      	str	r3, [r5, #0]
 8005bf8:	60eb      	str	r3, [r5, #12]
 8005bfa:	60ab      	str	r3, [r5, #8]
 8005bfc:	7013      	strb	r3, [r2, #0]
 8005bfe:	65ab      	str	r3, [r5, #88]	; 0x58
 8005c00:	4e58      	ldr	r6, [pc, #352]	; (8005d64 <_svfiprintf_r+0x1f4>)
 8005c02:	2205      	movs	r2, #5
 8005c04:	7821      	ldrb	r1, [r4, #0]
 8005c06:	0030      	movs	r0, r6
 8005c08:	f000 fa3e 	bl	8006088 <memchr>
 8005c0c:	1c62      	adds	r2, r4, #1
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d120      	bne.n	8005c54 <_svfiprintf_r+0xe4>
 8005c12:	6829      	ldr	r1, [r5, #0]
 8005c14:	06cb      	lsls	r3, r1, #27
 8005c16:	d504      	bpl.n	8005c22 <_svfiprintf_r+0xb2>
 8005c18:	2353      	movs	r3, #83	; 0x53
 8005c1a:	ae02      	add	r6, sp, #8
 8005c1c:	3020      	adds	r0, #32
 8005c1e:	199b      	adds	r3, r3, r6
 8005c20:	7018      	strb	r0, [r3, #0]
 8005c22:	070b      	lsls	r3, r1, #28
 8005c24:	d504      	bpl.n	8005c30 <_svfiprintf_r+0xc0>
 8005c26:	2353      	movs	r3, #83	; 0x53
 8005c28:	202b      	movs	r0, #43	; 0x2b
 8005c2a:	ae02      	add	r6, sp, #8
 8005c2c:	199b      	adds	r3, r3, r6
 8005c2e:	7018      	strb	r0, [r3, #0]
 8005c30:	7823      	ldrb	r3, [r4, #0]
 8005c32:	2b2a      	cmp	r3, #42	; 0x2a
 8005c34:	d016      	beq.n	8005c64 <_svfiprintf_r+0xf4>
 8005c36:	2000      	movs	r0, #0
 8005c38:	210a      	movs	r1, #10
 8005c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c3c:	7822      	ldrb	r2, [r4, #0]
 8005c3e:	3a30      	subs	r2, #48	; 0x30
 8005c40:	2a09      	cmp	r2, #9
 8005c42:	d955      	bls.n	8005cf0 <_svfiprintf_r+0x180>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	d015      	beq.n	8005c74 <_svfiprintf_r+0x104>
 8005c48:	9309      	str	r3, [sp, #36]	; 0x24
 8005c4a:	e013      	b.n	8005c74 <_svfiprintf_r+0x104>
 8005c4c:	2b25      	cmp	r3, #37	; 0x25
 8005c4e:	d0b5      	beq.n	8005bbc <_svfiprintf_r+0x4c>
 8005c50:	3401      	adds	r4, #1
 8005c52:	e7b0      	b.n	8005bb6 <_svfiprintf_r+0x46>
 8005c54:	2301      	movs	r3, #1
 8005c56:	1b80      	subs	r0, r0, r6
 8005c58:	4083      	lsls	r3, r0
 8005c5a:	6829      	ldr	r1, [r5, #0]
 8005c5c:	0014      	movs	r4, r2
 8005c5e:	430b      	orrs	r3, r1
 8005c60:	602b      	str	r3, [r5, #0]
 8005c62:	e7cd      	b.n	8005c00 <_svfiprintf_r+0x90>
 8005c64:	9b05      	ldr	r3, [sp, #20]
 8005c66:	1d18      	adds	r0, r3, #4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	9005      	str	r0, [sp, #20]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	db39      	blt.n	8005ce4 <_svfiprintf_r+0x174>
 8005c70:	9309      	str	r3, [sp, #36]	; 0x24
 8005c72:	0014      	movs	r4, r2
 8005c74:	7823      	ldrb	r3, [r4, #0]
 8005c76:	2b2e      	cmp	r3, #46	; 0x2e
 8005c78:	d10b      	bne.n	8005c92 <_svfiprintf_r+0x122>
 8005c7a:	7863      	ldrb	r3, [r4, #1]
 8005c7c:	1c62      	adds	r2, r4, #1
 8005c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c80:	d13e      	bne.n	8005d00 <_svfiprintf_r+0x190>
 8005c82:	9b05      	ldr	r3, [sp, #20]
 8005c84:	3402      	adds	r4, #2
 8005c86:	1d1a      	adds	r2, r3, #4
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	9205      	str	r2, [sp, #20]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	db34      	blt.n	8005cfa <_svfiprintf_r+0x18a>
 8005c90:	9307      	str	r3, [sp, #28]
 8005c92:	4e35      	ldr	r6, [pc, #212]	; (8005d68 <_svfiprintf_r+0x1f8>)
 8005c94:	7821      	ldrb	r1, [r4, #0]
 8005c96:	2203      	movs	r2, #3
 8005c98:	0030      	movs	r0, r6
 8005c9a:	f000 f9f5 	bl	8006088 <memchr>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d006      	beq.n	8005cb0 <_svfiprintf_r+0x140>
 8005ca2:	2340      	movs	r3, #64	; 0x40
 8005ca4:	1b80      	subs	r0, r0, r6
 8005ca6:	4083      	lsls	r3, r0
 8005ca8:	682a      	ldr	r2, [r5, #0]
 8005caa:	3401      	adds	r4, #1
 8005cac:	4313      	orrs	r3, r2
 8005cae:	602b      	str	r3, [r5, #0]
 8005cb0:	7821      	ldrb	r1, [r4, #0]
 8005cb2:	2206      	movs	r2, #6
 8005cb4:	482d      	ldr	r0, [pc, #180]	; (8005d6c <_svfiprintf_r+0x1fc>)
 8005cb6:	1c66      	adds	r6, r4, #1
 8005cb8:	7629      	strb	r1, [r5, #24]
 8005cba:	f000 f9e5 	bl	8006088 <memchr>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d046      	beq.n	8005d50 <_svfiprintf_r+0x1e0>
 8005cc2:	4b2b      	ldr	r3, [pc, #172]	; (8005d70 <_svfiprintf_r+0x200>)
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d12f      	bne.n	8005d28 <_svfiprintf_r+0x1b8>
 8005cc8:	6829      	ldr	r1, [r5, #0]
 8005cca:	9b05      	ldr	r3, [sp, #20]
 8005ccc:	2207      	movs	r2, #7
 8005cce:	05c9      	lsls	r1, r1, #23
 8005cd0:	d528      	bpl.n	8005d24 <_svfiprintf_r+0x1b4>
 8005cd2:	189b      	adds	r3, r3, r2
 8005cd4:	4393      	bics	r3, r2
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	9305      	str	r3, [sp, #20]
 8005cda:	696b      	ldr	r3, [r5, #20]
 8005cdc:	9a03      	ldr	r2, [sp, #12]
 8005cde:	189b      	adds	r3, r3, r2
 8005ce0:	616b      	str	r3, [r5, #20]
 8005ce2:	e767      	b.n	8005bb4 <_svfiprintf_r+0x44>
 8005ce4:	425b      	negs	r3, r3
 8005ce6:	60eb      	str	r3, [r5, #12]
 8005ce8:	2302      	movs	r3, #2
 8005cea:	430b      	orrs	r3, r1
 8005cec:	602b      	str	r3, [r5, #0]
 8005cee:	e7c0      	b.n	8005c72 <_svfiprintf_r+0x102>
 8005cf0:	434b      	muls	r3, r1
 8005cf2:	3401      	adds	r4, #1
 8005cf4:	189b      	adds	r3, r3, r2
 8005cf6:	2001      	movs	r0, #1
 8005cf8:	e7a0      	b.n	8005c3c <_svfiprintf_r+0xcc>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	425b      	negs	r3, r3
 8005cfe:	e7c7      	b.n	8005c90 <_svfiprintf_r+0x120>
 8005d00:	2300      	movs	r3, #0
 8005d02:	0014      	movs	r4, r2
 8005d04:	200a      	movs	r0, #10
 8005d06:	001a      	movs	r2, r3
 8005d08:	606b      	str	r3, [r5, #4]
 8005d0a:	7821      	ldrb	r1, [r4, #0]
 8005d0c:	3930      	subs	r1, #48	; 0x30
 8005d0e:	2909      	cmp	r1, #9
 8005d10:	d903      	bls.n	8005d1a <_svfiprintf_r+0x1aa>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0bd      	beq.n	8005c92 <_svfiprintf_r+0x122>
 8005d16:	9207      	str	r2, [sp, #28]
 8005d18:	e7bb      	b.n	8005c92 <_svfiprintf_r+0x122>
 8005d1a:	4342      	muls	r2, r0
 8005d1c:	3401      	adds	r4, #1
 8005d1e:	1852      	adds	r2, r2, r1
 8005d20:	2301      	movs	r3, #1
 8005d22:	e7f2      	b.n	8005d0a <_svfiprintf_r+0x19a>
 8005d24:	3307      	adds	r3, #7
 8005d26:	e7d5      	b.n	8005cd4 <_svfiprintf_r+0x164>
 8005d28:	ab05      	add	r3, sp, #20
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	003a      	movs	r2, r7
 8005d2e:	4b11      	ldr	r3, [pc, #68]	; (8005d74 <_svfiprintf_r+0x204>)
 8005d30:	0029      	movs	r1, r5
 8005d32:	9802      	ldr	r0, [sp, #8]
 8005d34:	e000      	b.n	8005d38 <_svfiprintf_r+0x1c8>
 8005d36:	bf00      	nop
 8005d38:	9003      	str	r0, [sp, #12]
 8005d3a:	9b03      	ldr	r3, [sp, #12]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	d1cc      	bne.n	8005cda <_svfiprintf_r+0x16a>
 8005d40:	89bb      	ldrh	r3, [r7, #12]
 8005d42:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005d44:	065b      	lsls	r3, r3, #25
 8005d46:	d400      	bmi.n	8005d4a <_svfiprintf_r+0x1da>
 8005d48:	e729      	b.n	8005b9e <_svfiprintf_r+0x2e>
 8005d4a:	2001      	movs	r0, #1
 8005d4c:	4240      	negs	r0, r0
 8005d4e:	e726      	b.n	8005b9e <_svfiprintf_r+0x2e>
 8005d50:	ab05      	add	r3, sp, #20
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	003a      	movs	r2, r7
 8005d56:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <_svfiprintf_r+0x204>)
 8005d58:	0029      	movs	r1, r5
 8005d5a:	9802      	ldr	r0, [sp, #8]
 8005d5c:	f000 f87a 	bl	8005e54 <_printf_i>
 8005d60:	e7ea      	b.n	8005d38 <_svfiprintf_r+0x1c8>
 8005d62:	46c0      	nop			; (mov r8, r8)
 8005d64:	080066e8 	.word	0x080066e8
 8005d68:	080066ee 	.word	0x080066ee
 8005d6c:	080066f2 	.word	0x080066f2
 8005d70:	00000000 	.word	0x00000000
 8005d74:	08005aad 	.word	0x08005aad

08005d78 <_printf_common>:
 8005d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d7a:	0015      	movs	r5, r2
 8005d7c:	9301      	str	r3, [sp, #4]
 8005d7e:	688a      	ldr	r2, [r1, #8]
 8005d80:	690b      	ldr	r3, [r1, #16]
 8005d82:	9000      	str	r0, [sp, #0]
 8005d84:	000c      	movs	r4, r1
 8005d86:	4293      	cmp	r3, r2
 8005d88:	da00      	bge.n	8005d8c <_printf_common+0x14>
 8005d8a:	0013      	movs	r3, r2
 8005d8c:	0022      	movs	r2, r4
 8005d8e:	602b      	str	r3, [r5, #0]
 8005d90:	3243      	adds	r2, #67	; 0x43
 8005d92:	7812      	ldrb	r2, [r2, #0]
 8005d94:	2a00      	cmp	r2, #0
 8005d96:	d001      	beq.n	8005d9c <_printf_common+0x24>
 8005d98:	3301      	adds	r3, #1
 8005d9a:	602b      	str	r3, [r5, #0]
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	069b      	lsls	r3, r3, #26
 8005da0:	d502      	bpl.n	8005da8 <_printf_common+0x30>
 8005da2:	682b      	ldr	r3, [r5, #0]
 8005da4:	3302      	adds	r3, #2
 8005da6:	602b      	str	r3, [r5, #0]
 8005da8:	2706      	movs	r7, #6
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	401f      	ands	r7, r3
 8005dae:	d027      	beq.n	8005e00 <_printf_common+0x88>
 8005db0:	0023      	movs	r3, r4
 8005db2:	3343      	adds	r3, #67	; 0x43
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	1e5a      	subs	r2, r3, #1
 8005db8:	4193      	sbcs	r3, r2
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	0692      	lsls	r2, r2, #26
 8005dbe:	d430      	bmi.n	8005e22 <_printf_common+0xaa>
 8005dc0:	0022      	movs	r2, r4
 8005dc2:	9901      	ldr	r1, [sp, #4]
 8005dc4:	3243      	adds	r2, #67	; 0x43
 8005dc6:	9800      	ldr	r0, [sp, #0]
 8005dc8:	9e08      	ldr	r6, [sp, #32]
 8005dca:	47b0      	blx	r6
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d025      	beq.n	8005e1c <_printf_common+0xa4>
 8005dd0:	2306      	movs	r3, #6
 8005dd2:	6820      	ldr	r0, [r4, #0]
 8005dd4:	682a      	ldr	r2, [r5, #0]
 8005dd6:	68e1      	ldr	r1, [r4, #12]
 8005dd8:	4003      	ands	r3, r0
 8005dda:	2500      	movs	r5, #0
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d103      	bne.n	8005de8 <_printf_common+0x70>
 8005de0:	1a8d      	subs	r5, r1, r2
 8005de2:	43eb      	mvns	r3, r5
 8005de4:	17db      	asrs	r3, r3, #31
 8005de6:	401d      	ands	r5, r3
 8005de8:	68a3      	ldr	r3, [r4, #8]
 8005dea:	6922      	ldr	r2, [r4, #16]
 8005dec:	4293      	cmp	r3, r2
 8005dee:	dd01      	ble.n	8005df4 <_printf_common+0x7c>
 8005df0:	1a9b      	subs	r3, r3, r2
 8005df2:	18ed      	adds	r5, r5, r3
 8005df4:	2700      	movs	r7, #0
 8005df6:	42bd      	cmp	r5, r7
 8005df8:	d120      	bne.n	8005e3c <_printf_common+0xc4>
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	e010      	b.n	8005e20 <_printf_common+0xa8>
 8005dfe:	3701      	adds	r7, #1
 8005e00:	68e3      	ldr	r3, [r4, #12]
 8005e02:	682a      	ldr	r2, [r5, #0]
 8005e04:	1a9b      	subs	r3, r3, r2
 8005e06:	429f      	cmp	r7, r3
 8005e08:	dad2      	bge.n	8005db0 <_printf_common+0x38>
 8005e0a:	0022      	movs	r2, r4
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	3219      	adds	r2, #25
 8005e10:	9901      	ldr	r1, [sp, #4]
 8005e12:	9800      	ldr	r0, [sp, #0]
 8005e14:	9e08      	ldr	r6, [sp, #32]
 8005e16:	47b0      	blx	r6
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d1f0      	bne.n	8005dfe <_printf_common+0x86>
 8005e1c:	2001      	movs	r0, #1
 8005e1e:	4240      	negs	r0, r0
 8005e20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e22:	2030      	movs	r0, #48	; 0x30
 8005e24:	18e1      	adds	r1, r4, r3
 8005e26:	3143      	adds	r1, #67	; 0x43
 8005e28:	7008      	strb	r0, [r1, #0]
 8005e2a:	0021      	movs	r1, r4
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	3145      	adds	r1, #69	; 0x45
 8005e30:	7809      	ldrb	r1, [r1, #0]
 8005e32:	18a2      	adds	r2, r4, r2
 8005e34:	3243      	adds	r2, #67	; 0x43
 8005e36:	3302      	adds	r3, #2
 8005e38:	7011      	strb	r1, [r2, #0]
 8005e3a:	e7c1      	b.n	8005dc0 <_printf_common+0x48>
 8005e3c:	0022      	movs	r2, r4
 8005e3e:	2301      	movs	r3, #1
 8005e40:	321a      	adds	r2, #26
 8005e42:	9901      	ldr	r1, [sp, #4]
 8005e44:	9800      	ldr	r0, [sp, #0]
 8005e46:	9e08      	ldr	r6, [sp, #32]
 8005e48:	47b0      	blx	r6
 8005e4a:	1c43      	adds	r3, r0, #1
 8005e4c:	d0e6      	beq.n	8005e1c <_printf_common+0xa4>
 8005e4e:	3701      	adds	r7, #1
 8005e50:	e7d1      	b.n	8005df6 <_printf_common+0x7e>
	...

08005e54 <_printf_i>:
 8005e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e56:	b08b      	sub	sp, #44	; 0x2c
 8005e58:	9206      	str	r2, [sp, #24]
 8005e5a:	000a      	movs	r2, r1
 8005e5c:	3243      	adds	r2, #67	; 0x43
 8005e5e:	9307      	str	r3, [sp, #28]
 8005e60:	9005      	str	r0, [sp, #20]
 8005e62:	9204      	str	r2, [sp, #16]
 8005e64:	7e0a      	ldrb	r2, [r1, #24]
 8005e66:	000c      	movs	r4, r1
 8005e68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e6a:	2a6e      	cmp	r2, #110	; 0x6e
 8005e6c:	d100      	bne.n	8005e70 <_printf_i+0x1c>
 8005e6e:	e08f      	b.n	8005f90 <_printf_i+0x13c>
 8005e70:	d817      	bhi.n	8005ea2 <_printf_i+0x4e>
 8005e72:	2a63      	cmp	r2, #99	; 0x63
 8005e74:	d02c      	beq.n	8005ed0 <_printf_i+0x7c>
 8005e76:	d808      	bhi.n	8005e8a <_printf_i+0x36>
 8005e78:	2a00      	cmp	r2, #0
 8005e7a:	d100      	bne.n	8005e7e <_printf_i+0x2a>
 8005e7c:	e099      	b.n	8005fb2 <_printf_i+0x15e>
 8005e7e:	2a58      	cmp	r2, #88	; 0x58
 8005e80:	d054      	beq.n	8005f2c <_printf_i+0xd8>
 8005e82:	0026      	movs	r6, r4
 8005e84:	3642      	adds	r6, #66	; 0x42
 8005e86:	7032      	strb	r2, [r6, #0]
 8005e88:	e029      	b.n	8005ede <_printf_i+0x8a>
 8005e8a:	2a64      	cmp	r2, #100	; 0x64
 8005e8c:	d001      	beq.n	8005e92 <_printf_i+0x3e>
 8005e8e:	2a69      	cmp	r2, #105	; 0x69
 8005e90:	d1f7      	bne.n	8005e82 <_printf_i+0x2e>
 8005e92:	6821      	ldr	r1, [r4, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	0608      	lsls	r0, r1, #24
 8005e98:	d523      	bpl.n	8005ee2 <_printf_i+0x8e>
 8005e9a:	1d11      	adds	r1, r2, #4
 8005e9c:	6019      	str	r1, [r3, #0]
 8005e9e:	6815      	ldr	r5, [r2, #0]
 8005ea0:	e025      	b.n	8005eee <_printf_i+0x9a>
 8005ea2:	2a73      	cmp	r2, #115	; 0x73
 8005ea4:	d100      	bne.n	8005ea8 <_printf_i+0x54>
 8005ea6:	e088      	b.n	8005fba <_printf_i+0x166>
 8005ea8:	d808      	bhi.n	8005ebc <_printf_i+0x68>
 8005eaa:	2a6f      	cmp	r2, #111	; 0x6f
 8005eac:	d029      	beq.n	8005f02 <_printf_i+0xae>
 8005eae:	2a70      	cmp	r2, #112	; 0x70
 8005eb0:	d1e7      	bne.n	8005e82 <_printf_i+0x2e>
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	6809      	ldr	r1, [r1, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	6022      	str	r2, [r4, #0]
 8005eba:	e003      	b.n	8005ec4 <_printf_i+0x70>
 8005ebc:	2a75      	cmp	r2, #117	; 0x75
 8005ebe:	d020      	beq.n	8005f02 <_printf_i+0xae>
 8005ec0:	2a78      	cmp	r2, #120	; 0x78
 8005ec2:	d1de      	bne.n	8005e82 <_printf_i+0x2e>
 8005ec4:	0022      	movs	r2, r4
 8005ec6:	2178      	movs	r1, #120	; 0x78
 8005ec8:	3245      	adds	r2, #69	; 0x45
 8005eca:	7011      	strb	r1, [r2, #0]
 8005ecc:	4a6c      	ldr	r2, [pc, #432]	; (8006080 <_printf_i+0x22c>)
 8005ece:	e030      	b.n	8005f32 <_printf_i+0xde>
 8005ed0:	000e      	movs	r6, r1
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	3642      	adds	r6, #66	; 0x42
 8005ed6:	1d11      	adds	r1, r2, #4
 8005ed8:	6019      	str	r1, [r3, #0]
 8005eda:	6813      	ldr	r3, [r2, #0]
 8005edc:	7033      	strb	r3, [r6, #0]
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e079      	b.n	8005fd6 <_printf_i+0x182>
 8005ee2:	0649      	lsls	r1, r1, #25
 8005ee4:	d5d9      	bpl.n	8005e9a <_printf_i+0x46>
 8005ee6:	1d11      	adds	r1, r2, #4
 8005ee8:	6019      	str	r1, [r3, #0]
 8005eea:	2300      	movs	r3, #0
 8005eec:	5ed5      	ldrsh	r5, [r2, r3]
 8005eee:	2d00      	cmp	r5, #0
 8005ef0:	da03      	bge.n	8005efa <_printf_i+0xa6>
 8005ef2:	232d      	movs	r3, #45	; 0x2d
 8005ef4:	9a04      	ldr	r2, [sp, #16]
 8005ef6:	426d      	negs	r5, r5
 8005ef8:	7013      	strb	r3, [r2, #0]
 8005efa:	4b62      	ldr	r3, [pc, #392]	; (8006084 <_printf_i+0x230>)
 8005efc:	270a      	movs	r7, #10
 8005efe:	9303      	str	r3, [sp, #12]
 8005f00:	e02f      	b.n	8005f62 <_printf_i+0x10e>
 8005f02:	6820      	ldr	r0, [r4, #0]
 8005f04:	6819      	ldr	r1, [r3, #0]
 8005f06:	0605      	lsls	r5, r0, #24
 8005f08:	d503      	bpl.n	8005f12 <_printf_i+0xbe>
 8005f0a:	1d08      	adds	r0, r1, #4
 8005f0c:	6018      	str	r0, [r3, #0]
 8005f0e:	680d      	ldr	r5, [r1, #0]
 8005f10:	e005      	b.n	8005f1e <_printf_i+0xca>
 8005f12:	0640      	lsls	r0, r0, #25
 8005f14:	d5f9      	bpl.n	8005f0a <_printf_i+0xb6>
 8005f16:	680d      	ldr	r5, [r1, #0]
 8005f18:	1d08      	adds	r0, r1, #4
 8005f1a:	6018      	str	r0, [r3, #0]
 8005f1c:	b2ad      	uxth	r5, r5
 8005f1e:	4b59      	ldr	r3, [pc, #356]	; (8006084 <_printf_i+0x230>)
 8005f20:	2708      	movs	r7, #8
 8005f22:	9303      	str	r3, [sp, #12]
 8005f24:	2a6f      	cmp	r2, #111	; 0x6f
 8005f26:	d018      	beq.n	8005f5a <_printf_i+0x106>
 8005f28:	270a      	movs	r7, #10
 8005f2a:	e016      	b.n	8005f5a <_printf_i+0x106>
 8005f2c:	3145      	adds	r1, #69	; 0x45
 8005f2e:	700a      	strb	r2, [r1, #0]
 8005f30:	4a54      	ldr	r2, [pc, #336]	; (8006084 <_printf_i+0x230>)
 8005f32:	9203      	str	r2, [sp, #12]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	6821      	ldr	r1, [r4, #0]
 8005f38:	1d10      	adds	r0, r2, #4
 8005f3a:	6018      	str	r0, [r3, #0]
 8005f3c:	6815      	ldr	r5, [r2, #0]
 8005f3e:	0608      	lsls	r0, r1, #24
 8005f40:	d522      	bpl.n	8005f88 <_printf_i+0x134>
 8005f42:	07cb      	lsls	r3, r1, #31
 8005f44:	d502      	bpl.n	8005f4c <_printf_i+0xf8>
 8005f46:	2320      	movs	r3, #32
 8005f48:	4319      	orrs	r1, r3
 8005f4a:	6021      	str	r1, [r4, #0]
 8005f4c:	2710      	movs	r7, #16
 8005f4e:	2d00      	cmp	r5, #0
 8005f50:	d103      	bne.n	8005f5a <_printf_i+0x106>
 8005f52:	2320      	movs	r3, #32
 8005f54:	6822      	ldr	r2, [r4, #0]
 8005f56:	439a      	bics	r2, r3
 8005f58:	6022      	str	r2, [r4, #0]
 8005f5a:	0023      	movs	r3, r4
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	3343      	adds	r3, #67	; 0x43
 8005f60:	701a      	strb	r2, [r3, #0]
 8005f62:	6863      	ldr	r3, [r4, #4]
 8005f64:	60a3      	str	r3, [r4, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	db5c      	blt.n	8006024 <_printf_i+0x1d0>
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	6821      	ldr	r1, [r4, #0]
 8005f6e:	4391      	bics	r1, r2
 8005f70:	6021      	str	r1, [r4, #0]
 8005f72:	2d00      	cmp	r5, #0
 8005f74:	d158      	bne.n	8006028 <_printf_i+0x1d4>
 8005f76:	9e04      	ldr	r6, [sp, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d064      	beq.n	8006046 <_printf_i+0x1f2>
 8005f7c:	0026      	movs	r6, r4
 8005f7e:	9b03      	ldr	r3, [sp, #12]
 8005f80:	3642      	adds	r6, #66	; 0x42
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	7033      	strb	r3, [r6, #0]
 8005f86:	e05e      	b.n	8006046 <_printf_i+0x1f2>
 8005f88:	0648      	lsls	r0, r1, #25
 8005f8a:	d5da      	bpl.n	8005f42 <_printf_i+0xee>
 8005f8c:	b2ad      	uxth	r5, r5
 8005f8e:	e7d8      	b.n	8005f42 <_printf_i+0xee>
 8005f90:	6809      	ldr	r1, [r1, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	0608      	lsls	r0, r1, #24
 8005f96:	d505      	bpl.n	8005fa4 <_printf_i+0x150>
 8005f98:	1d11      	adds	r1, r2, #4
 8005f9a:	6019      	str	r1, [r3, #0]
 8005f9c:	6813      	ldr	r3, [r2, #0]
 8005f9e:	6962      	ldr	r2, [r4, #20]
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	e006      	b.n	8005fb2 <_printf_i+0x15e>
 8005fa4:	0649      	lsls	r1, r1, #25
 8005fa6:	d5f7      	bpl.n	8005f98 <_printf_i+0x144>
 8005fa8:	1d11      	adds	r1, r2, #4
 8005faa:	6019      	str	r1, [r3, #0]
 8005fac:	6813      	ldr	r3, [r2, #0]
 8005fae:	8aa2      	ldrh	r2, [r4, #20]
 8005fb0:	801a      	strh	r2, [r3, #0]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	9e04      	ldr	r6, [sp, #16]
 8005fb6:	6123      	str	r3, [r4, #16]
 8005fb8:	e054      	b.n	8006064 <_printf_i+0x210>
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	1d11      	adds	r1, r2, #4
 8005fbe:	6019      	str	r1, [r3, #0]
 8005fc0:	6816      	ldr	r6, [r2, #0]
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	6862      	ldr	r2, [r4, #4]
 8005fc6:	0030      	movs	r0, r6
 8005fc8:	f000 f85e 	bl	8006088 <memchr>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	d001      	beq.n	8005fd4 <_printf_i+0x180>
 8005fd0:	1b80      	subs	r0, r0, r6
 8005fd2:	6060      	str	r0, [r4, #4]
 8005fd4:	6863      	ldr	r3, [r4, #4]
 8005fd6:	6123      	str	r3, [r4, #16]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	9a04      	ldr	r2, [sp, #16]
 8005fdc:	7013      	strb	r3, [r2, #0]
 8005fde:	e041      	b.n	8006064 <_printf_i+0x210>
 8005fe0:	6923      	ldr	r3, [r4, #16]
 8005fe2:	0032      	movs	r2, r6
 8005fe4:	9906      	ldr	r1, [sp, #24]
 8005fe6:	9805      	ldr	r0, [sp, #20]
 8005fe8:	9d07      	ldr	r5, [sp, #28]
 8005fea:	47a8      	blx	r5
 8005fec:	1c43      	adds	r3, r0, #1
 8005fee:	d043      	beq.n	8006078 <_printf_i+0x224>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	2500      	movs	r5, #0
 8005ff4:	079b      	lsls	r3, r3, #30
 8005ff6:	d40f      	bmi.n	8006018 <_printf_i+0x1c4>
 8005ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ffa:	68e0      	ldr	r0, [r4, #12]
 8005ffc:	4298      	cmp	r0, r3
 8005ffe:	da3d      	bge.n	800607c <_printf_i+0x228>
 8006000:	0018      	movs	r0, r3
 8006002:	e03b      	b.n	800607c <_printf_i+0x228>
 8006004:	0022      	movs	r2, r4
 8006006:	2301      	movs	r3, #1
 8006008:	3219      	adds	r2, #25
 800600a:	9906      	ldr	r1, [sp, #24]
 800600c:	9805      	ldr	r0, [sp, #20]
 800600e:	9e07      	ldr	r6, [sp, #28]
 8006010:	47b0      	blx	r6
 8006012:	1c43      	adds	r3, r0, #1
 8006014:	d030      	beq.n	8006078 <_printf_i+0x224>
 8006016:	3501      	adds	r5, #1
 8006018:	68e3      	ldr	r3, [r4, #12]
 800601a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800601c:	1a9b      	subs	r3, r3, r2
 800601e:	429d      	cmp	r5, r3
 8006020:	dbf0      	blt.n	8006004 <_printf_i+0x1b0>
 8006022:	e7e9      	b.n	8005ff8 <_printf_i+0x1a4>
 8006024:	2d00      	cmp	r5, #0
 8006026:	d0a9      	beq.n	8005f7c <_printf_i+0x128>
 8006028:	9e04      	ldr	r6, [sp, #16]
 800602a:	0028      	movs	r0, r5
 800602c:	0039      	movs	r1, r7
 800602e:	f7fa f8fb 	bl	8000228 <__aeabi_uidivmod>
 8006032:	9b03      	ldr	r3, [sp, #12]
 8006034:	3e01      	subs	r6, #1
 8006036:	5c5b      	ldrb	r3, [r3, r1]
 8006038:	0028      	movs	r0, r5
 800603a:	7033      	strb	r3, [r6, #0]
 800603c:	0039      	movs	r1, r7
 800603e:	f7fa f86d 	bl	800011c <__udivsi3>
 8006042:	1e05      	subs	r5, r0, #0
 8006044:	d1f1      	bne.n	800602a <_printf_i+0x1d6>
 8006046:	2f08      	cmp	r7, #8
 8006048:	d109      	bne.n	800605e <_printf_i+0x20a>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	07db      	lsls	r3, r3, #31
 800604e:	d506      	bpl.n	800605e <_printf_i+0x20a>
 8006050:	6863      	ldr	r3, [r4, #4]
 8006052:	6922      	ldr	r2, [r4, #16]
 8006054:	4293      	cmp	r3, r2
 8006056:	dc02      	bgt.n	800605e <_printf_i+0x20a>
 8006058:	2330      	movs	r3, #48	; 0x30
 800605a:	3e01      	subs	r6, #1
 800605c:	7033      	strb	r3, [r6, #0]
 800605e:	9b04      	ldr	r3, [sp, #16]
 8006060:	1b9b      	subs	r3, r3, r6
 8006062:	6123      	str	r3, [r4, #16]
 8006064:	9b07      	ldr	r3, [sp, #28]
 8006066:	aa09      	add	r2, sp, #36	; 0x24
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	0021      	movs	r1, r4
 800606c:	9b06      	ldr	r3, [sp, #24]
 800606e:	9805      	ldr	r0, [sp, #20]
 8006070:	f7ff fe82 	bl	8005d78 <_printf_common>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d1b3      	bne.n	8005fe0 <_printf_i+0x18c>
 8006078:	2001      	movs	r0, #1
 800607a:	4240      	negs	r0, r0
 800607c:	b00b      	add	sp, #44	; 0x2c
 800607e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006080:	0800670a 	.word	0x0800670a
 8006084:	080066f9 	.word	0x080066f9

08006088 <memchr>:
 8006088:	b2c9      	uxtb	r1, r1
 800608a:	1882      	adds	r2, r0, r2
 800608c:	4290      	cmp	r0, r2
 800608e:	d101      	bne.n	8006094 <memchr+0xc>
 8006090:	2000      	movs	r0, #0
 8006092:	4770      	bx	lr
 8006094:	7803      	ldrb	r3, [r0, #0]
 8006096:	428b      	cmp	r3, r1
 8006098:	d0fb      	beq.n	8006092 <memchr+0xa>
 800609a:	3001      	adds	r0, #1
 800609c:	e7f6      	b.n	800608c <memchr+0x4>

0800609e <memmove>:
 800609e:	b510      	push	{r4, lr}
 80060a0:	4288      	cmp	r0, r1
 80060a2:	d902      	bls.n	80060aa <memmove+0xc>
 80060a4:	188b      	adds	r3, r1, r2
 80060a6:	4298      	cmp	r0, r3
 80060a8:	d308      	bcc.n	80060bc <memmove+0x1e>
 80060aa:	2300      	movs	r3, #0
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d007      	beq.n	80060c0 <memmove+0x22>
 80060b0:	5ccc      	ldrb	r4, [r1, r3]
 80060b2:	54c4      	strb	r4, [r0, r3]
 80060b4:	3301      	adds	r3, #1
 80060b6:	e7f9      	b.n	80060ac <memmove+0xe>
 80060b8:	5c8b      	ldrb	r3, [r1, r2]
 80060ba:	5483      	strb	r3, [r0, r2]
 80060bc:	3a01      	subs	r2, #1
 80060be:	d2fb      	bcs.n	80060b8 <memmove+0x1a>
 80060c0:	bd10      	pop	{r4, pc}
	...

080060c4 <_free_r>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	0005      	movs	r5, r0
 80060c8:	2900      	cmp	r1, #0
 80060ca:	d010      	beq.n	80060ee <_free_r+0x2a>
 80060cc:	1f0c      	subs	r4, r1, #4
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	da00      	bge.n	80060d6 <_free_r+0x12>
 80060d4:	18e4      	adds	r4, r4, r3
 80060d6:	0028      	movs	r0, r5
 80060d8:	f000 f8d4 	bl	8006284 <__malloc_lock>
 80060dc:	4a1d      	ldr	r2, [pc, #116]	; (8006154 <_free_r+0x90>)
 80060de:	6813      	ldr	r3, [r2, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d105      	bne.n	80060f0 <_free_r+0x2c>
 80060e4:	6063      	str	r3, [r4, #4]
 80060e6:	6014      	str	r4, [r2, #0]
 80060e8:	0028      	movs	r0, r5
 80060ea:	f000 f8cc 	bl	8006286 <__malloc_unlock>
 80060ee:	bd70      	pop	{r4, r5, r6, pc}
 80060f0:	42a3      	cmp	r3, r4
 80060f2:	d909      	bls.n	8006108 <_free_r+0x44>
 80060f4:	6821      	ldr	r1, [r4, #0]
 80060f6:	1860      	adds	r0, r4, r1
 80060f8:	4283      	cmp	r3, r0
 80060fa:	d1f3      	bne.n	80060e4 <_free_r+0x20>
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	1841      	adds	r1, r0, r1
 8006102:	6021      	str	r1, [r4, #0]
 8006104:	e7ee      	b.n	80060e4 <_free_r+0x20>
 8006106:	0013      	movs	r3, r2
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	2a00      	cmp	r2, #0
 800610c:	d001      	beq.n	8006112 <_free_r+0x4e>
 800610e:	42a2      	cmp	r2, r4
 8006110:	d9f9      	bls.n	8006106 <_free_r+0x42>
 8006112:	6819      	ldr	r1, [r3, #0]
 8006114:	1858      	adds	r0, r3, r1
 8006116:	42a0      	cmp	r0, r4
 8006118:	d10b      	bne.n	8006132 <_free_r+0x6e>
 800611a:	6820      	ldr	r0, [r4, #0]
 800611c:	1809      	adds	r1, r1, r0
 800611e:	1858      	adds	r0, r3, r1
 8006120:	6019      	str	r1, [r3, #0]
 8006122:	4282      	cmp	r2, r0
 8006124:	d1e0      	bne.n	80060e8 <_free_r+0x24>
 8006126:	6810      	ldr	r0, [r2, #0]
 8006128:	6852      	ldr	r2, [r2, #4]
 800612a:	1841      	adds	r1, r0, r1
 800612c:	6019      	str	r1, [r3, #0]
 800612e:	605a      	str	r2, [r3, #4]
 8006130:	e7da      	b.n	80060e8 <_free_r+0x24>
 8006132:	42a0      	cmp	r0, r4
 8006134:	d902      	bls.n	800613c <_free_r+0x78>
 8006136:	230c      	movs	r3, #12
 8006138:	602b      	str	r3, [r5, #0]
 800613a:	e7d5      	b.n	80060e8 <_free_r+0x24>
 800613c:	6821      	ldr	r1, [r4, #0]
 800613e:	1860      	adds	r0, r4, r1
 8006140:	4282      	cmp	r2, r0
 8006142:	d103      	bne.n	800614c <_free_r+0x88>
 8006144:	6810      	ldr	r0, [r2, #0]
 8006146:	6852      	ldr	r2, [r2, #4]
 8006148:	1841      	adds	r1, r0, r1
 800614a:	6021      	str	r1, [r4, #0]
 800614c:	6062      	str	r2, [r4, #4]
 800614e:	605c      	str	r4, [r3, #4]
 8006150:	e7ca      	b.n	80060e8 <_free_r+0x24>
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	200002f8 	.word	0x200002f8

08006158 <_malloc_r>:
 8006158:	2303      	movs	r3, #3
 800615a:	b570      	push	{r4, r5, r6, lr}
 800615c:	1ccd      	adds	r5, r1, #3
 800615e:	439d      	bics	r5, r3
 8006160:	3508      	adds	r5, #8
 8006162:	0006      	movs	r6, r0
 8006164:	2d0c      	cmp	r5, #12
 8006166:	d21e      	bcs.n	80061a6 <_malloc_r+0x4e>
 8006168:	250c      	movs	r5, #12
 800616a:	42a9      	cmp	r1, r5
 800616c:	d81d      	bhi.n	80061aa <_malloc_r+0x52>
 800616e:	0030      	movs	r0, r6
 8006170:	f000 f888 	bl	8006284 <__malloc_lock>
 8006174:	4a25      	ldr	r2, [pc, #148]	; (800620c <_malloc_r+0xb4>)
 8006176:	6814      	ldr	r4, [r2, #0]
 8006178:	0021      	movs	r1, r4
 800617a:	2900      	cmp	r1, #0
 800617c:	d119      	bne.n	80061b2 <_malloc_r+0x5a>
 800617e:	4c24      	ldr	r4, [pc, #144]	; (8006210 <_malloc_r+0xb8>)
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d103      	bne.n	800618e <_malloc_r+0x36>
 8006186:	0030      	movs	r0, r6
 8006188:	f000 f86a 	bl	8006260 <_sbrk_r>
 800618c:	6020      	str	r0, [r4, #0]
 800618e:	0029      	movs	r1, r5
 8006190:	0030      	movs	r0, r6
 8006192:	f000 f865 	bl	8006260 <_sbrk_r>
 8006196:	1c43      	adds	r3, r0, #1
 8006198:	d12c      	bne.n	80061f4 <_malloc_r+0x9c>
 800619a:	230c      	movs	r3, #12
 800619c:	0030      	movs	r0, r6
 800619e:	6033      	str	r3, [r6, #0]
 80061a0:	f000 f871 	bl	8006286 <__malloc_unlock>
 80061a4:	e003      	b.n	80061ae <_malloc_r+0x56>
 80061a6:	2d00      	cmp	r5, #0
 80061a8:	dadf      	bge.n	800616a <_malloc_r+0x12>
 80061aa:	230c      	movs	r3, #12
 80061ac:	6033      	str	r3, [r6, #0]
 80061ae:	2000      	movs	r0, #0
 80061b0:	bd70      	pop	{r4, r5, r6, pc}
 80061b2:	680b      	ldr	r3, [r1, #0]
 80061b4:	1b5b      	subs	r3, r3, r5
 80061b6:	d41a      	bmi.n	80061ee <_malloc_r+0x96>
 80061b8:	2b0b      	cmp	r3, #11
 80061ba:	d903      	bls.n	80061c4 <_malloc_r+0x6c>
 80061bc:	600b      	str	r3, [r1, #0]
 80061be:	18cc      	adds	r4, r1, r3
 80061c0:	6025      	str	r5, [r4, #0]
 80061c2:	e003      	b.n	80061cc <_malloc_r+0x74>
 80061c4:	428c      	cmp	r4, r1
 80061c6:	d10e      	bne.n	80061e6 <_malloc_r+0x8e>
 80061c8:	6863      	ldr	r3, [r4, #4]
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	0030      	movs	r0, r6
 80061ce:	f000 f85a 	bl	8006286 <__malloc_unlock>
 80061d2:	0020      	movs	r0, r4
 80061d4:	2207      	movs	r2, #7
 80061d6:	300b      	adds	r0, #11
 80061d8:	1d23      	adds	r3, r4, #4
 80061da:	4390      	bics	r0, r2
 80061dc:	1ac3      	subs	r3, r0, r3
 80061de:	d0e7      	beq.n	80061b0 <_malloc_r+0x58>
 80061e0:	425a      	negs	r2, r3
 80061e2:	50e2      	str	r2, [r4, r3]
 80061e4:	e7e4      	b.n	80061b0 <_malloc_r+0x58>
 80061e6:	684b      	ldr	r3, [r1, #4]
 80061e8:	6063      	str	r3, [r4, #4]
 80061ea:	000c      	movs	r4, r1
 80061ec:	e7ee      	b.n	80061cc <_malloc_r+0x74>
 80061ee:	000c      	movs	r4, r1
 80061f0:	6849      	ldr	r1, [r1, #4]
 80061f2:	e7c2      	b.n	800617a <_malloc_r+0x22>
 80061f4:	2303      	movs	r3, #3
 80061f6:	1cc4      	adds	r4, r0, #3
 80061f8:	439c      	bics	r4, r3
 80061fa:	42a0      	cmp	r0, r4
 80061fc:	d0e0      	beq.n	80061c0 <_malloc_r+0x68>
 80061fe:	1a21      	subs	r1, r4, r0
 8006200:	0030      	movs	r0, r6
 8006202:	f000 f82d 	bl	8006260 <_sbrk_r>
 8006206:	1c43      	adds	r3, r0, #1
 8006208:	d1da      	bne.n	80061c0 <_malloc_r+0x68>
 800620a:	e7c6      	b.n	800619a <_malloc_r+0x42>
 800620c:	200002f8 	.word	0x200002f8
 8006210:	200002fc 	.word	0x200002fc

08006214 <_realloc_r>:
 8006214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006216:	0007      	movs	r7, r0
 8006218:	000d      	movs	r5, r1
 800621a:	0016      	movs	r6, r2
 800621c:	2900      	cmp	r1, #0
 800621e:	d105      	bne.n	800622c <_realloc_r+0x18>
 8006220:	0011      	movs	r1, r2
 8006222:	f7ff ff99 	bl	8006158 <_malloc_r>
 8006226:	0004      	movs	r4, r0
 8006228:	0020      	movs	r0, r4
 800622a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800622c:	2a00      	cmp	r2, #0
 800622e:	d103      	bne.n	8006238 <_realloc_r+0x24>
 8006230:	f7ff ff48 	bl	80060c4 <_free_r>
 8006234:	0034      	movs	r4, r6
 8006236:	e7f7      	b.n	8006228 <_realloc_r+0x14>
 8006238:	f000 f826 	bl	8006288 <_malloc_usable_size_r>
 800623c:	002c      	movs	r4, r5
 800623e:	4286      	cmp	r6, r0
 8006240:	d9f2      	bls.n	8006228 <_realloc_r+0x14>
 8006242:	0031      	movs	r1, r6
 8006244:	0038      	movs	r0, r7
 8006246:	f7ff ff87 	bl	8006158 <_malloc_r>
 800624a:	1e04      	subs	r4, r0, #0
 800624c:	d0ec      	beq.n	8006228 <_realloc_r+0x14>
 800624e:	0029      	movs	r1, r5
 8006250:	0032      	movs	r2, r6
 8006252:	f7ff fbe1 	bl	8005a18 <memcpy>
 8006256:	0029      	movs	r1, r5
 8006258:	0038      	movs	r0, r7
 800625a:	f7ff ff33 	bl	80060c4 <_free_r>
 800625e:	e7e3      	b.n	8006228 <_realloc_r+0x14>

08006260 <_sbrk_r>:
 8006260:	2300      	movs	r3, #0
 8006262:	b570      	push	{r4, r5, r6, lr}
 8006264:	4c06      	ldr	r4, [pc, #24]	; (8006280 <_sbrk_r+0x20>)
 8006266:	0005      	movs	r5, r0
 8006268:	0008      	movs	r0, r1
 800626a:	6023      	str	r3, [r4, #0]
 800626c:	f000 f814 	bl	8006298 <_sbrk>
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	d103      	bne.n	800627c <_sbrk_r+0x1c>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d000      	beq.n	800627c <_sbrk_r+0x1c>
 800627a:	602b      	str	r3, [r5, #0]
 800627c:	bd70      	pop	{r4, r5, r6, pc}
 800627e:	46c0      	nop			; (mov r8, r8)
 8006280:	200006c8 	.word	0x200006c8

08006284 <__malloc_lock>:
 8006284:	4770      	bx	lr

08006286 <__malloc_unlock>:
 8006286:	4770      	bx	lr

08006288 <_malloc_usable_size_r>:
 8006288:	1f0b      	subs	r3, r1, #4
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	1f18      	subs	r0, r3, #4
 800628e:	2b00      	cmp	r3, #0
 8006290:	da01      	bge.n	8006296 <_malloc_usable_size_r+0xe>
 8006292:	580b      	ldr	r3, [r1, r0]
 8006294:	18c0      	adds	r0, r0, r3
 8006296:	4770      	bx	lr

08006298 <_sbrk>:
 8006298:	4b05      	ldr	r3, [pc, #20]	; (80062b0 <_sbrk+0x18>)
 800629a:	0002      	movs	r2, r0
 800629c:	6819      	ldr	r1, [r3, #0]
 800629e:	2900      	cmp	r1, #0
 80062a0:	d101      	bne.n	80062a6 <_sbrk+0xe>
 80062a2:	4904      	ldr	r1, [pc, #16]	; (80062b4 <_sbrk+0x1c>)
 80062a4:	6019      	str	r1, [r3, #0]
 80062a6:	6818      	ldr	r0, [r3, #0]
 80062a8:	1882      	adds	r2, r0, r2
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	4770      	bx	lr
 80062ae:	46c0      	nop			; (mov r8, r8)
 80062b0:	20000300 	.word	0x20000300
 80062b4:	200006cc 	.word	0x200006cc

080062b8 <_init>:
 80062b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ba:	46c0      	nop			; (mov r8, r8)
 80062bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062be:	bc08      	pop	{r3}
 80062c0:	469e      	mov	lr, r3
 80062c2:	4770      	bx	lr

080062c4 <_fini>:
 80062c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c6:	46c0      	nop			; (mov r8, r8)
 80062c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ca:	bc08      	pop	{r3}
 80062cc:	469e      	mov	lr, r3
 80062ce:	4770      	bx	lr
